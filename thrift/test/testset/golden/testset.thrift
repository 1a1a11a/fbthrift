# This file was generated by `thrift/test/testset/generator.py`
# @generated

namespace cpp2 apache.thrift.test.testset

struct struct_empty {
} (thrift.uri="facebook.com/thrift/test/testset/struct_empty")
struct struct_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool")
struct struct_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte")
struct struct_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16")
struct struct_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32")
struct struct_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64")
struct struct_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float")
struct struct_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double")
struct struct_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary")
struct struct_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string")
struct struct_set_bool {
  1: set<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_bool")
struct struct_set_byte {
  1: set<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_byte")
struct struct_set_i16 {
  1: set<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i16")
struct struct_set_i32 {
  1: set<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i32")
struct struct_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64")
struct struct_set_float {
  1: set<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_float")
struct struct_set_double {
  1: set<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_double")
struct struct_set_binary {
  1: set<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_binary")
struct struct_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string")
struct struct_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool")
struct struct_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte")
struct struct_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16")
struct struct_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32")
struct struct_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64")
struct struct_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float")
struct struct_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double")
struct struct_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary")
struct struct_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string")
struct struct_map_string_set_bool {
  1: map<string, set<bool>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_bool")
struct struct_map_string_set_byte {
  1: map<string, set<byte>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_byte")
struct struct_map_string_set_i16 {
  1: map<string, set<i16>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i16")
struct struct_map_string_set_i32 {
  1: map<string, set<i32>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i32")
struct struct_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64")
struct struct_map_string_set_float {
  1: map<string, set<float>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_float")
struct struct_map_string_set_double {
  1: map<string, set<double>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_double")
struct struct_map_string_set_binary {
  1: map<string, set<binary>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_binary")
struct struct_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string")
struct struct_bool_cpp_ref {
  1: bool (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_cpp_ref")
struct struct_byte_cpp_ref {
  1: byte (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_cpp_ref")
struct struct_i16_cpp_ref {
  1: i16 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_cpp_ref")
struct struct_i32_cpp_ref {
  1: i32 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_cpp_ref")
struct struct_i64_cpp_ref {
  1: i64 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_cpp_ref")
struct struct_float_cpp_ref {
  1: float (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_cpp_ref")
struct struct_double_cpp_ref {
  1: double (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_cpp_ref")
struct struct_binary_cpp_ref {
  1: binary (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_cpp_ref")
struct struct_string_cpp_ref {
  1: string (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_cpp_ref")
struct struct_set_bool_cpp_ref {
  1: set<bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_bool_cpp_ref")
struct struct_set_byte_cpp_ref {
  1: set<byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_byte_cpp_ref")
struct struct_set_i16_cpp_ref {
  1: set<i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i16_cpp_ref")
struct struct_set_i32_cpp_ref {
  1: set<i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i32_cpp_ref")
struct struct_set_i64_cpp_ref {
  1: set<i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_cpp_ref")
struct struct_set_float_cpp_ref {
  1: set<float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_float_cpp_ref")
struct struct_set_double_cpp_ref {
  1: set<double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_double_cpp_ref")
struct struct_set_binary_cpp_ref {
  1: set<binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_binary_cpp_ref")
struct struct_set_string_cpp_ref {
  1: set<string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_cpp_ref")
struct struct_map_string_bool_cpp_ref {
  1: map<string, bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_cpp_ref")
struct struct_map_string_byte_cpp_ref {
  1: map<string, byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_cpp_ref")
struct struct_map_string_i16_cpp_ref {
  1: map<string, i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_cpp_ref")
struct struct_map_string_i32_cpp_ref {
  1: map<string, i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_cpp_ref")
struct struct_map_string_i64_cpp_ref {
  1: map<string, i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_cpp_ref")
struct struct_map_string_float_cpp_ref {
  1: map<string, float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_cpp_ref")
struct struct_map_string_double_cpp_ref {
  1: map<string, double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_cpp_ref")
struct struct_map_string_binary_cpp_ref {
  1: map<string, binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_cpp_ref")
struct struct_map_string_string_cpp_ref {
  1: map<string, string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_cpp_ref")
struct struct_map_string_set_bool_cpp_ref {
  1: map<string, set<bool>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_bool_cpp_ref")
struct struct_map_string_set_byte_cpp_ref {
  1: map<string, set<byte>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_byte_cpp_ref")
struct struct_map_string_set_i16_cpp_ref {
  1: map<string, set<i16>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i16_cpp_ref")
struct struct_map_string_set_i32_cpp_ref {
  1: map<string, set<i32>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i32_cpp_ref")
struct struct_map_string_set_i64_cpp_ref {
  1: map<string, set<i64>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_cpp_ref")
struct struct_map_string_set_float_cpp_ref {
  1: map<string, set<float>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_float_cpp_ref")
struct struct_map_string_set_double_cpp_ref {
  1: map<string, set<double>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_double_cpp_ref")
struct struct_map_string_set_binary_cpp_ref {
  1: map<string, set<binary>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_binary_cpp_ref")
struct struct_map_string_set_string_cpp_ref {
  1: map<string, set<string>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_cpp_ref")
struct struct_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool")
struct struct_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte")
struct struct_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16")
struct struct_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32")
struct struct_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64")
struct struct_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float")
struct struct_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double")
struct struct_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary")
struct struct_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string")
struct struct_optional_set_bool {
  1: optional set<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_bool")
struct struct_optional_set_byte {
  1: optional set<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_byte")
struct struct_optional_set_i16 {
  1: optional set<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i16")
struct struct_optional_set_i32 {
  1: optional set<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i32")
struct struct_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64")
struct struct_optional_set_float {
  1: optional set<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_float")
struct struct_optional_set_double {
  1: optional set<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_double")
struct struct_optional_set_binary {
  1: optional set<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_binary")
struct struct_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string")
struct struct_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool")
struct struct_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte")
struct struct_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16")
struct struct_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32")
struct struct_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64")
struct struct_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float")
struct struct_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double")
struct struct_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary")
struct struct_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string")
struct struct_optional_map_string_set_bool {
  1: optional map<string, set<bool>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_bool")
struct struct_optional_map_string_set_byte {
  1: optional map<string, set<byte>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_byte")
struct struct_optional_map_string_set_i16 {
  1: optional map<string, set<i16>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i16")
struct struct_optional_map_string_set_i32 {
  1: optional map<string, set<i32>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i32")
struct struct_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64")
struct struct_optional_map_string_set_float {
  1: optional map<string, set<float>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_float")
struct struct_optional_map_string_set_double {
  1: optional map<string, set<double>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_double")
struct struct_optional_map_string_set_binary {
  1: optional map<string, set<binary>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_binary")
struct struct_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string")
struct struct_optional_bool_cpp_ref {
  1: optional bool (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_cpp_ref")
struct struct_optional_byte_cpp_ref {
  1: optional byte (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_cpp_ref")
struct struct_optional_i16_cpp_ref {
  1: optional i16 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_cpp_ref")
struct struct_optional_i32_cpp_ref {
  1: optional i32 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_cpp_ref")
struct struct_optional_i64_cpp_ref {
  1: optional i64 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_cpp_ref")
struct struct_optional_float_cpp_ref {
  1: optional float (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_cpp_ref")
struct struct_optional_double_cpp_ref {
  1: optional double (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_cpp_ref")
struct struct_optional_binary_cpp_ref {
  1: optional binary (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_cpp_ref")
struct struct_optional_string_cpp_ref {
  1: optional string (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_cpp_ref")
struct struct_optional_set_bool_cpp_ref {
  1: optional set<bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_bool_cpp_ref")
struct struct_optional_set_byte_cpp_ref {
  1: optional set<byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_byte_cpp_ref")
struct struct_optional_set_i16_cpp_ref {
  1: optional set<i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i16_cpp_ref")
struct struct_optional_set_i32_cpp_ref {
  1: optional set<i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i32_cpp_ref")
struct struct_optional_set_i64_cpp_ref {
  1: optional set<i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_cpp_ref")
struct struct_optional_set_float_cpp_ref {
  1: optional set<float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_float_cpp_ref")
struct struct_optional_set_double_cpp_ref {
  1: optional set<double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_double_cpp_ref")
struct struct_optional_set_binary_cpp_ref {
  1: optional set<binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_binary_cpp_ref")
struct struct_optional_set_string_cpp_ref {
  1: optional set<string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_cpp_ref")
struct struct_optional_map_string_bool_cpp_ref {
  1: optional map<string, bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_cpp_ref")
struct struct_optional_map_string_byte_cpp_ref {
  1: optional map<string, byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_cpp_ref")
struct struct_optional_map_string_i16_cpp_ref {
  1: optional map<string, i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_cpp_ref")
struct struct_optional_map_string_i32_cpp_ref {
  1: optional map<string, i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_cpp_ref")
struct struct_optional_map_string_i64_cpp_ref {
  1: optional map<string, i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_cpp_ref")
struct struct_optional_map_string_float_cpp_ref {
  1: optional map<string, float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_cpp_ref")
struct struct_optional_map_string_double_cpp_ref {
  1: optional map<string, double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_cpp_ref")
struct struct_optional_map_string_binary_cpp_ref {
  1: optional map<string, binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_cpp_ref")
struct struct_optional_map_string_string_cpp_ref {
  1: optional map<string, string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_cpp_ref")
struct struct_optional_map_string_set_bool_cpp_ref {
  1: optional map<string, set<bool>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_bool_cpp_ref")
struct struct_optional_map_string_set_byte_cpp_ref {
  1: optional map<string, set<byte>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_byte_cpp_ref")
struct struct_optional_map_string_set_i16_cpp_ref {
  1: optional map<string, set<i16>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i16_cpp_ref")
struct struct_optional_map_string_set_i32_cpp_ref {
  1: optional map<string, set<i32>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i32_cpp_ref")
struct struct_optional_map_string_set_i64_cpp_ref {
  1: optional map<string, set<i64>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_cpp_ref")
struct struct_optional_map_string_set_float_cpp_ref {
  1: optional map<string, set<float>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_float_cpp_ref")
struct struct_optional_map_string_set_double_cpp_ref {
  1: optional map<string, set<double>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_double_cpp_ref")
struct struct_optional_map_string_set_binary_cpp_ref {
  1: optional map<string, set<binary>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_binary_cpp_ref")
struct struct_optional_map_string_set_string_cpp_ref {
  1: optional map<string, set<string>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_cpp_ref")
struct struct_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool")
struct struct_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte")
struct struct_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16")
struct struct_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32")
struct struct_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64")
struct struct_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float")
struct struct_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double")
struct struct_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary")
struct struct_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string")
struct struct_required_set_bool {
  1: required set<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_bool")
struct struct_required_set_byte {
  1: required set<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_byte")
struct struct_required_set_i16 {
  1: required set<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i16")
struct struct_required_set_i32 {
  1: required set<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i32")
struct struct_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64")
struct struct_required_set_float {
  1: required set<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_float")
struct struct_required_set_double {
  1: required set<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_double")
struct struct_required_set_binary {
  1: required set<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_binary")
struct struct_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string")
struct struct_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool")
struct struct_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte")
struct struct_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16")
struct struct_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32")
struct struct_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64")
struct struct_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float")
struct struct_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double")
struct struct_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary")
struct struct_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string")
struct struct_required_map_string_set_bool {
  1: required map<string, set<bool>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_bool")
struct struct_required_map_string_set_byte {
  1: required map<string, set<byte>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_byte")
struct struct_required_map_string_set_i16 {
  1: required map<string, set<i16>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i16")
struct struct_required_map_string_set_i32 {
  1: required map<string, set<i32>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i32")
struct struct_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64")
struct struct_required_map_string_set_float {
  1: required map<string, set<float>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_float")
struct struct_required_map_string_set_double {
  1: required map<string, set<double>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_double")
struct struct_required_map_string_set_binary {
  1: required map<string, set<binary>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_binary")
struct struct_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string")
struct struct_required_bool_cpp_ref {
  1: required bool (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_cpp_ref")
struct struct_required_byte_cpp_ref {
  1: required byte (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_cpp_ref")
struct struct_required_i16_cpp_ref {
  1: required i16 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_cpp_ref")
struct struct_required_i32_cpp_ref {
  1: required i32 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_cpp_ref")
struct struct_required_i64_cpp_ref {
  1: required i64 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_cpp_ref")
struct struct_required_float_cpp_ref {
  1: required float (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_cpp_ref")
struct struct_required_double_cpp_ref {
  1: required double (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_cpp_ref")
struct struct_required_binary_cpp_ref {
  1: required binary (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_cpp_ref")
struct struct_required_string_cpp_ref {
  1: required string (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_cpp_ref")
struct struct_required_set_bool_cpp_ref {
  1: required set<bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_bool_cpp_ref")
struct struct_required_set_byte_cpp_ref {
  1: required set<byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_byte_cpp_ref")
struct struct_required_set_i16_cpp_ref {
  1: required set<i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i16_cpp_ref")
struct struct_required_set_i32_cpp_ref {
  1: required set<i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i32_cpp_ref")
struct struct_required_set_i64_cpp_ref {
  1: required set<i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_cpp_ref")
struct struct_required_set_float_cpp_ref {
  1: required set<float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_float_cpp_ref")
struct struct_required_set_double_cpp_ref {
  1: required set<double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_double_cpp_ref")
struct struct_required_set_binary_cpp_ref {
  1: required set<binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_binary_cpp_ref")
struct struct_required_set_string_cpp_ref {
  1: required set<string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_cpp_ref")
struct struct_required_map_string_bool_cpp_ref {
  1: required map<string, bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_cpp_ref")
struct struct_required_map_string_byte_cpp_ref {
  1: required map<string, byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_cpp_ref")
struct struct_required_map_string_i16_cpp_ref {
  1: required map<string, i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_cpp_ref")
struct struct_required_map_string_i32_cpp_ref {
  1: required map<string, i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_cpp_ref")
struct struct_required_map_string_i64_cpp_ref {
  1: required map<string, i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_cpp_ref")
struct struct_required_map_string_float_cpp_ref {
  1: required map<string, float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_cpp_ref")
struct struct_required_map_string_double_cpp_ref {
  1: required map<string, double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_cpp_ref")
struct struct_required_map_string_binary_cpp_ref {
  1: required map<string, binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_cpp_ref")
struct struct_required_map_string_string_cpp_ref {
  1: required map<string, string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_cpp_ref")
struct struct_required_map_string_set_bool_cpp_ref {
  1: required map<string, set<bool>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_bool_cpp_ref")
struct struct_required_map_string_set_byte_cpp_ref {
  1: required map<string, set<byte>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_byte_cpp_ref")
struct struct_required_map_string_set_i16_cpp_ref {
  1: required map<string, set<i16>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i16_cpp_ref")
struct struct_required_map_string_set_i32_cpp_ref {
  1: required map<string, set<i32>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i32_cpp_ref")
struct struct_required_map_string_set_i64_cpp_ref {
  1: required map<string, set<i64>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_cpp_ref")
struct struct_required_map_string_set_float_cpp_ref {
  1: required map<string, set<float>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_float_cpp_ref")
struct struct_required_map_string_set_double_cpp_ref {
  1: required map<string, set<double>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_double_cpp_ref")
struct struct_required_map_string_set_binary_cpp_ref {
  1: required map<string, set<binary>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_binary_cpp_ref")
struct struct_required_map_string_set_string_cpp_ref {
  1: required map<string, set<string>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_cpp_ref")
exception exception_empty {
} (thrift.uri="facebook.com/thrift/test/testset/exception_empty")
exception exception_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool")
exception exception_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte")
exception exception_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16")
exception exception_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32")
exception exception_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64")
exception exception_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float")
exception exception_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double")
exception exception_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary")
exception exception_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string")
exception exception_set_bool {
  1: set<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_bool")
exception exception_set_byte {
  1: set<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_byte")
exception exception_set_i16 {
  1: set<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i16")
exception exception_set_i32 {
  1: set<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i32")
exception exception_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64")
exception exception_set_float {
  1: set<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_float")
exception exception_set_double {
  1: set<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_double")
exception exception_set_binary {
  1: set<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_binary")
exception exception_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string")
exception exception_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool")
exception exception_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte")
exception exception_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16")
exception exception_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32")
exception exception_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64")
exception exception_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float")
exception exception_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double")
exception exception_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary")
exception exception_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string")
exception exception_map_string_set_bool {
  1: map<string, set<bool>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_bool")
exception exception_map_string_set_byte {
  1: map<string, set<byte>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_byte")
exception exception_map_string_set_i16 {
  1: map<string, set<i16>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i16")
exception exception_map_string_set_i32 {
  1: map<string, set<i32>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i32")
exception exception_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64")
exception exception_map_string_set_float {
  1: map<string, set<float>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_float")
exception exception_map_string_set_double {
  1: map<string, set<double>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_double")
exception exception_map_string_set_binary {
  1: map<string, set<binary>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_binary")
exception exception_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string")
exception exception_bool_cpp_ref {
  1: bool (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_cpp_ref")
exception exception_byte_cpp_ref {
  1: byte (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_cpp_ref")
exception exception_i16_cpp_ref {
  1: i16 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_cpp_ref")
exception exception_i32_cpp_ref {
  1: i32 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_cpp_ref")
exception exception_i64_cpp_ref {
  1: i64 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_cpp_ref")
exception exception_float_cpp_ref {
  1: float (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_cpp_ref")
exception exception_double_cpp_ref {
  1: double (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_cpp_ref")
exception exception_binary_cpp_ref {
  1: binary (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_cpp_ref")
exception exception_string_cpp_ref {
  1: string (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_cpp_ref")
exception exception_set_bool_cpp_ref {
  1: set<bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_bool_cpp_ref")
exception exception_set_byte_cpp_ref {
  1: set<byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_byte_cpp_ref")
exception exception_set_i16_cpp_ref {
  1: set<i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i16_cpp_ref")
exception exception_set_i32_cpp_ref {
  1: set<i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i32_cpp_ref")
exception exception_set_i64_cpp_ref {
  1: set<i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_cpp_ref")
exception exception_set_float_cpp_ref {
  1: set<float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_float_cpp_ref")
exception exception_set_double_cpp_ref {
  1: set<double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_double_cpp_ref")
exception exception_set_binary_cpp_ref {
  1: set<binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_binary_cpp_ref")
exception exception_set_string_cpp_ref {
  1: set<string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_cpp_ref")
exception exception_map_string_bool_cpp_ref {
  1: map<string, bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_cpp_ref")
exception exception_map_string_byte_cpp_ref {
  1: map<string, byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_cpp_ref")
exception exception_map_string_i16_cpp_ref {
  1: map<string, i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_cpp_ref")
exception exception_map_string_i32_cpp_ref {
  1: map<string, i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_cpp_ref")
exception exception_map_string_i64_cpp_ref {
  1: map<string, i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_cpp_ref")
exception exception_map_string_float_cpp_ref {
  1: map<string, float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_cpp_ref")
exception exception_map_string_double_cpp_ref {
  1: map<string, double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_cpp_ref")
exception exception_map_string_binary_cpp_ref {
  1: map<string, binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_cpp_ref")
exception exception_map_string_string_cpp_ref {
  1: map<string, string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_cpp_ref")
exception exception_map_string_set_bool_cpp_ref {
  1: map<string, set<bool>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_bool_cpp_ref")
exception exception_map_string_set_byte_cpp_ref {
  1: map<string, set<byte>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_byte_cpp_ref")
exception exception_map_string_set_i16_cpp_ref {
  1: map<string, set<i16>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i16_cpp_ref")
exception exception_map_string_set_i32_cpp_ref {
  1: map<string, set<i32>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i32_cpp_ref")
exception exception_map_string_set_i64_cpp_ref {
  1: map<string, set<i64>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_cpp_ref")
exception exception_map_string_set_float_cpp_ref {
  1: map<string, set<float>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_float_cpp_ref")
exception exception_map_string_set_double_cpp_ref {
  1: map<string, set<double>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_double_cpp_ref")
exception exception_map_string_set_binary_cpp_ref {
  1: map<string, set<binary>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_binary_cpp_ref")
exception exception_map_string_set_string_cpp_ref {
  1: map<string, set<string>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_cpp_ref")
exception exception_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool")
exception exception_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte")
exception exception_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16")
exception exception_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32")
exception exception_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64")
exception exception_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float")
exception exception_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double")
exception exception_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary")
exception exception_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string")
exception exception_optional_set_bool {
  1: optional set<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_bool")
exception exception_optional_set_byte {
  1: optional set<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_byte")
exception exception_optional_set_i16 {
  1: optional set<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i16")
exception exception_optional_set_i32 {
  1: optional set<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i32")
exception exception_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64")
exception exception_optional_set_float {
  1: optional set<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_float")
exception exception_optional_set_double {
  1: optional set<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_double")
exception exception_optional_set_binary {
  1: optional set<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_binary")
exception exception_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string")
exception exception_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool")
exception exception_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte")
exception exception_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16")
exception exception_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32")
exception exception_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64")
exception exception_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float")
exception exception_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double")
exception exception_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary")
exception exception_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string")
exception exception_optional_map_string_set_bool {
  1: optional map<string, set<bool>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_bool")
exception exception_optional_map_string_set_byte {
  1: optional map<string, set<byte>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_byte")
exception exception_optional_map_string_set_i16 {
  1: optional map<string, set<i16>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i16")
exception exception_optional_map_string_set_i32 {
  1: optional map<string, set<i32>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i32")
exception exception_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64")
exception exception_optional_map_string_set_float {
  1: optional map<string, set<float>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_float")
exception exception_optional_map_string_set_double {
  1: optional map<string, set<double>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_double")
exception exception_optional_map_string_set_binary {
  1: optional map<string, set<binary>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_binary")
exception exception_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string")
exception exception_optional_bool_cpp_ref {
  1: optional bool (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_cpp_ref")
exception exception_optional_byte_cpp_ref {
  1: optional byte (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_cpp_ref")
exception exception_optional_i16_cpp_ref {
  1: optional i16 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_cpp_ref")
exception exception_optional_i32_cpp_ref {
  1: optional i32 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_cpp_ref")
exception exception_optional_i64_cpp_ref {
  1: optional i64 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_cpp_ref")
exception exception_optional_float_cpp_ref {
  1: optional float (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_cpp_ref")
exception exception_optional_double_cpp_ref {
  1: optional double (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_cpp_ref")
exception exception_optional_binary_cpp_ref {
  1: optional binary (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_cpp_ref")
exception exception_optional_string_cpp_ref {
  1: optional string (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_cpp_ref")
exception exception_optional_set_bool_cpp_ref {
  1: optional set<bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_bool_cpp_ref")
exception exception_optional_set_byte_cpp_ref {
  1: optional set<byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_byte_cpp_ref")
exception exception_optional_set_i16_cpp_ref {
  1: optional set<i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i16_cpp_ref")
exception exception_optional_set_i32_cpp_ref {
  1: optional set<i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i32_cpp_ref")
exception exception_optional_set_i64_cpp_ref {
  1: optional set<i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_cpp_ref")
exception exception_optional_set_float_cpp_ref {
  1: optional set<float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_float_cpp_ref")
exception exception_optional_set_double_cpp_ref {
  1: optional set<double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_double_cpp_ref")
exception exception_optional_set_binary_cpp_ref {
  1: optional set<binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_binary_cpp_ref")
exception exception_optional_set_string_cpp_ref {
  1: optional set<string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_cpp_ref")
exception exception_optional_map_string_bool_cpp_ref {
  1: optional map<string, bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_cpp_ref")
exception exception_optional_map_string_byte_cpp_ref {
  1: optional map<string, byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_cpp_ref")
exception exception_optional_map_string_i16_cpp_ref {
  1: optional map<string, i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_cpp_ref")
exception exception_optional_map_string_i32_cpp_ref {
  1: optional map<string, i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_cpp_ref")
exception exception_optional_map_string_i64_cpp_ref {
  1: optional map<string, i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_cpp_ref")
exception exception_optional_map_string_float_cpp_ref {
  1: optional map<string, float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_cpp_ref")
exception exception_optional_map_string_double_cpp_ref {
  1: optional map<string, double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_cpp_ref")
exception exception_optional_map_string_binary_cpp_ref {
  1: optional map<string, binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_cpp_ref")
exception exception_optional_map_string_string_cpp_ref {
  1: optional map<string, string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_cpp_ref")
exception exception_optional_map_string_set_bool_cpp_ref {
  1: optional map<string, set<bool>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_bool_cpp_ref")
exception exception_optional_map_string_set_byte_cpp_ref {
  1: optional map<string, set<byte>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_byte_cpp_ref")
exception exception_optional_map_string_set_i16_cpp_ref {
  1: optional map<string, set<i16>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i16_cpp_ref")
exception exception_optional_map_string_set_i32_cpp_ref {
  1: optional map<string, set<i32>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i32_cpp_ref")
exception exception_optional_map_string_set_i64_cpp_ref {
  1: optional map<string, set<i64>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_cpp_ref")
exception exception_optional_map_string_set_float_cpp_ref {
  1: optional map<string, set<float>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_float_cpp_ref")
exception exception_optional_map_string_set_double_cpp_ref {
  1: optional map<string, set<double>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_double_cpp_ref")
exception exception_optional_map_string_set_binary_cpp_ref {
  1: optional map<string, set<binary>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_binary_cpp_ref")
exception exception_optional_map_string_set_string_cpp_ref {
  1: optional map<string, set<string>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_cpp_ref")
exception exception_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool")
exception exception_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte")
exception exception_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16")
exception exception_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32")
exception exception_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64")
exception exception_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float")
exception exception_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double")
exception exception_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary")
exception exception_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string")
exception exception_required_set_bool {
  1: required set<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_bool")
exception exception_required_set_byte {
  1: required set<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_byte")
exception exception_required_set_i16 {
  1: required set<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i16")
exception exception_required_set_i32 {
  1: required set<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i32")
exception exception_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64")
exception exception_required_set_float {
  1: required set<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_float")
exception exception_required_set_double {
  1: required set<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_double")
exception exception_required_set_binary {
  1: required set<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_binary")
exception exception_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string")
exception exception_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool")
exception exception_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte")
exception exception_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16")
exception exception_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32")
exception exception_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64")
exception exception_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float")
exception exception_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double")
exception exception_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary")
exception exception_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string")
exception exception_required_map_string_set_bool {
  1: required map<string, set<bool>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_bool")
exception exception_required_map_string_set_byte {
  1: required map<string, set<byte>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_byte")
exception exception_required_map_string_set_i16 {
  1: required map<string, set<i16>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i16")
exception exception_required_map_string_set_i32 {
  1: required map<string, set<i32>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i32")
exception exception_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64")
exception exception_required_map_string_set_float {
  1: required map<string, set<float>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_float")
exception exception_required_map_string_set_double {
  1: required map<string, set<double>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_double")
exception exception_required_map_string_set_binary {
  1: required map<string, set<binary>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_binary")
exception exception_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string")
exception exception_required_bool_cpp_ref {
  1: required bool (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_cpp_ref")
exception exception_required_byte_cpp_ref {
  1: required byte (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_cpp_ref")
exception exception_required_i16_cpp_ref {
  1: required i16 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_cpp_ref")
exception exception_required_i32_cpp_ref {
  1: required i32 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_cpp_ref")
exception exception_required_i64_cpp_ref {
  1: required i64 (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_cpp_ref")
exception exception_required_float_cpp_ref {
  1: required float (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_cpp_ref")
exception exception_required_double_cpp_ref {
  1: required double (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_cpp_ref")
exception exception_required_binary_cpp_ref {
  1: required binary (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_cpp_ref")
exception exception_required_string_cpp_ref {
  1: required string (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_cpp_ref")
exception exception_required_set_bool_cpp_ref {
  1: required set<bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_bool_cpp_ref")
exception exception_required_set_byte_cpp_ref {
  1: required set<byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_byte_cpp_ref")
exception exception_required_set_i16_cpp_ref {
  1: required set<i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i16_cpp_ref")
exception exception_required_set_i32_cpp_ref {
  1: required set<i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i32_cpp_ref")
exception exception_required_set_i64_cpp_ref {
  1: required set<i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_cpp_ref")
exception exception_required_set_float_cpp_ref {
  1: required set<float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_float_cpp_ref")
exception exception_required_set_double_cpp_ref {
  1: required set<double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_double_cpp_ref")
exception exception_required_set_binary_cpp_ref {
  1: required set<binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_binary_cpp_ref")
exception exception_required_set_string_cpp_ref {
  1: required set<string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_cpp_ref")
exception exception_required_map_string_bool_cpp_ref {
  1: required map<string, bool> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_cpp_ref")
exception exception_required_map_string_byte_cpp_ref {
  1: required map<string, byte> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_cpp_ref")
exception exception_required_map_string_i16_cpp_ref {
  1: required map<string, i16> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_cpp_ref")
exception exception_required_map_string_i32_cpp_ref {
  1: required map<string, i32> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_cpp_ref")
exception exception_required_map_string_i64_cpp_ref {
  1: required map<string, i64> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_cpp_ref")
exception exception_required_map_string_float_cpp_ref {
  1: required map<string, float> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_cpp_ref")
exception exception_required_map_string_double_cpp_ref {
  1: required map<string, double> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_cpp_ref")
exception exception_required_map_string_binary_cpp_ref {
  1: required map<string, binary> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_cpp_ref")
exception exception_required_map_string_string_cpp_ref {
  1: required map<string, string> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_cpp_ref")
exception exception_required_map_string_set_bool_cpp_ref {
  1: required map<string, set<bool>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_bool_cpp_ref")
exception exception_required_map_string_set_byte_cpp_ref {
  1: required map<string, set<byte>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_byte_cpp_ref")
exception exception_required_map_string_set_i16_cpp_ref {
  1: required map<string, set<i16>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i16_cpp_ref")
exception exception_required_map_string_set_i32_cpp_ref {
  1: required map<string, set<i32>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i32_cpp_ref")
exception exception_required_map_string_set_i64_cpp_ref {
  1: required map<string, set<i64>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_cpp_ref")
exception exception_required_map_string_set_float_cpp_ref {
  1: required map<string, set<float>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_float_cpp_ref")
exception exception_required_map_string_set_double_cpp_ref {
  1: required map<string, set<double>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_double_cpp_ref")
exception exception_required_map_string_set_binary_cpp_ref {
  1: required map<string, set<binary>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_binary_cpp_ref")
exception exception_required_map_string_set_string_cpp_ref {
  1: required map<string, set<string>> (cpp.ref = 'true') field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_cpp_ref")
union union_empty {
} (thrift.uri="facebook.com/thrift/test/testset/union_empty")
union union_bool {
  1: bool field_1;
  2: bool field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_bool")
union union_byte {
  1: byte field_1;
  2: byte field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_byte")
union union_i16 {
  1: i16 field_1;
  2: i16 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i16")
union union_i32 {
  1: i32 field_1;
  2: i32 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i32")
union union_i64 {
  1: i64 field_1;
  2: i64 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i64")
union union_float {
  1: float field_1;
  2: float field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_float")
union union_double {
  1: double field_1;
  2: double field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_double")
union union_binary {
  1: binary field_1;
  2: binary field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_binary")
union union_string {
  1: string field_1;
  2: string field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_string")
union union_set_bool {
  1: set<bool> field_1;
  2: set<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_bool")
union union_set_byte {
  1: set<byte> field_1;
  2: set<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_byte")
union union_set_i16 {
  1: set<i16> field_1;
  2: set<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i16")
union union_set_i32 {
  1: set<i32> field_1;
  2: set<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i32")
union union_set_i64 {
  1: set<i64> field_1;
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64")
union union_set_float {
  1: set<float> field_1;
  2: set<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_float")
union union_set_double {
  1: set<double> field_1;
  2: set<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_double")
union union_set_binary {
  1: set<binary> field_1;
  2: set<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_binary")
union union_set_string {
  1: set<string> field_1;
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string")
union union_map_string_bool {
  1: map<string, bool> field_1;
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool")
union union_map_string_byte {
  1: map<string, byte> field_1;
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte")
union union_map_string_i16 {
  1: map<string, i16> field_1;
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16")
union union_map_string_i32 {
  1: map<string, i32> field_1;
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32")
union union_map_string_i64 {
  1: map<string, i64> field_1;
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64")
union union_map_string_float {
  1: map<string, float> field_1;
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float")
union union_map_string_double {
  1: map<string, double> field_1;
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double")
union union_map_string_binary {
  1: map<string, binary> field_1;
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary")
union union_map_string_string {
  1: map<string, string> field_1;
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string")
union union_map_string_set_bool {
  1: map<string, set<bool>> field_1;
  2: map<string, set<bool>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_bool")
union union_map_string_set_byte {
  1: map<string, set<byte>> field_1;
  2: map<string, set<byte>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_byte")
union union_map_string_set_i16 {
  1: map<string, set<i16>> field_1;
  2: map<string, set<i16>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i16")
union union_map_string_set_i32 {
  1: map<string, set<i32>> field_1;
  2: map<string, set<i32>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i32")
union union_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64")
union union_map_string_set_float {
  1: map<string, set<float>> field_1;
  2: map<string, set<float>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_float")
union union_map_string_set_double {
  1: map<string, set<double>> field_1;
  2: map<string, set<double>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_double")
union union_map_string_set_binary {
  1: map<string, set<binary>> field_1;
  2: map<string, set<binary>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_binary")
union union_map_string_set_string {
  1: map<string, set<string>> field_1;
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string")
union union_bool_cpp_ref {
  1: bool (cpp.ref = 'true') field_1;
  2: bool (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_bool_cpp_ref")
union union_byte_cpp_ref {
  1: byte (cpp.ref = 'true') field_1;
  2: byte (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_byte_cpp_ref")
union union_i16_cpp_ref {
  1: i16 (cpp.ref = 'true') field_1;
  2: i16 (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i16_cpp_ref")
union union_i32_cpp_ref {
  1: i32 (cpp.ref = 'true') field_1;
  2: i32 (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i32_cpp_ref")
union union_i64_cpp_ref {
  1: i64 (cpp.ref = 'true') field_1;
  2: i64 (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i64_cpp_ref")
union union_float_cpp_ref {
  1: float (cpp.ref = 'true') field_1;
  2: float (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_float_cpp_ref")
union union_double_cpp_ref {
  1: double (cpp.ref = 'true') field_1;
  2: double (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_double_cpp_ref")
union union_binary_cpp_ref {
  1: binary (cpp.ref = 'true') field_1;
  2: binary (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_binary_cpp_ref")
union union_string_cpp_ref {
  1: string (cpp.ref = 'true') field_1;
  2: string (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_string_cpp_ref")
union union_set_bool_cpp_ref {
  1: set<bool> (cpp.ref = 'true') field_1;
  2: set<bool> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_bool_cpp_ref")
union union_set_byte_cpp_ref {
  1: set<byte> (cpp.ref = 'true') field_1;
  2: set<byte> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_byte_cpp_ref")
union union_set_i16_cpp_ref {
  1: set<i16> (cpp.ref = 'true') field_1;
  2: set<i16> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i16_cpp_ref")
union union_set_i32_cpp_ref {
  1: set<i32> (cpp.ref = 'true') field_1;
  2: set<i32> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i32_cpp_ref")
union union_set_i64_cpp_ref {
  1: set<i64> (cpp.ref = 'true') field_1;
  2: set<i64> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_cpp_ref")
union union_set_float_cpp_ref {
  1: set<float> (cpp.ref = 'true') field_1;
  2: set<float> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_float_cpp_ref")
union union_set_double_cpp_ref {
  1: set<double> (cpp.ref = 'true') field_1;
  2: set<double> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_double_cpp_ref")
union union_set_binary_cpp_ref {
  1: set<binary> (cpp.ref = 'true') field_1;
  2: set<binary> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_binary_cpp_ref")
union union_set_string_cpp_ref {
  1: set<string> (cpp.ref = 'true') field_1;
  2: set<string> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_cpp_ref")
union union_map_string_bool_cpp_ref {
  1: map<string, bool> (cpp.ref = 'true') field_1;
  2: map<string, bool> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_cpp_ref")
union union_map_string_byte_cpp_ref {
  1: map<string, byte> (cpp.ref = 'true') field_1;
  2: map<string, byte> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_cpp_ref")
union union_map_string_i16_cpp_ref {
  1: map<string, i16> (cpp.ref = 'true') field_1;
  2: map<string, i16> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_cpp_ref")
union union_map_string_i32_cpp_ref {
  1: map<string, i32> (cpp.ref = 'true') field_1;
  2: map<string, i32> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_cpp_ref")
union union_map_string_i64_cpp_ref {
  1: map<string, i64> (cpp.ref = 'true') field_1;
  2: map<string, i64> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_cpp_ref")
union union_map_string_float_cpp_ref {
  1: map<string, float> (cpp.ref = 'true') field_1;
  2: map<string, float> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_cpp_ref")
union union_map_string_double_cpp_ref {
  1: map<string, double> (cpp.ref = 'true') field_1;
  2: map<string, double> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_cpp_ref")
union union_map_string_binary_cpp_ref {
  1: map<string, binary> (cpp.ref = 'true') field_1;
  2: map<string, binary> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_cpp_ref")
union union_map_string_string_cpp_ref {
  1: map<string, string> (cpp.ref = 'true') field_1;
  2: map<string, string> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_cpp_ref")
union union_map_string_set_bool_cpp_ref {
  1: map<string, set<bool>> (cpp.ref = 'true') field_1;
  2: map<string, set<bool>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_bool_cpp_ref")
union union_map_string_set_byte_cpp_ref {
  1: map<string, set<byte>> (cpp.ref = 'true') field_1;
  2: map<string, set<byte>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_byte_cpp_ref")
union union_map_string_set_i16_cpp_ref {
  1: map<string, set<i16>> (cpp.ref = 'true') field_1;
  2: map<string, set<i16>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i16_cpp_ref")
union union_map_string_set_i32_cpp_ref {
  1: map<string, set<i32>> (cpp.ref = 'true') field_1;
  2: map<string, set<i32>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i32_cpp_ref")
union union_map_string_set_i64_cpp_ref {
  1: map<string, set<i64>> (cpp.ref = 'true') field_1;
  2: map<string, set<i64>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_cpp_ref")
union union_map_string_set_float_cpp_ref {
  1: map<string, set<float>> (cpp.ref = 'true') field_1;
  2: map<string, set<float>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_float_cpp_ref")
union union_map_string_set_double_cpp_ref {
  1: map<string, set<double>> (cpp.ref = 'true') field_1;
  2: map<string, set<double>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_double_cpp_ref")
union union_map_string_set_binary_cpp_ref {
  1: map<string, set<binary>> (cpp.ref = 'true') field_1;
  2: map<string, set<binary>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_binary_cpp_ref")
union union_map_string_set_string_cpp_ref {
  1: map<string, set<string>> (cpp.ref = 'true') field_1;
  2: map<string, set<string>> (cpp.ref = 'true') field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_cpp_ref")
union union_all {
  1: struct_empty field_1;
  2: struct_bool field_2;
  3: struct_byte field_3;
  4: struct_i16 field_4;
  5: struct_i32 field_5;
  6: struct_i64 field_6;
  7: struct_float field_7;
  8: struct_double field_8;
  9: struct_binary field_9;
  10: struct_string field_10;
  11: struct_set_bool field_11;
  12: struct_set_byte field_12;
  13: struct_set_i16 field_13;
  14: struct_set_i32 field_14;
  15: struct_set_i64 field_15;
  16: struct_set_float field_16;
  17: struct_set_double field_17;
  18: struct_set_binary field_18;
  19: struct_set_string field_19;
  20: struct_map_string_bool field_20;
  21: struct_map_string_byte field_21;
  22: struct_map_string_i16 field_22;
  23: struct_map_string_i32 field_23;
  24: struct_map_string_i64 field_24;
  25: struct_map_string_float field_25;
  26: struct_map_string_double field_26;
  27: struct_map_string_binary field_27;
  28: struct_map_string_string field_28;
  29: struct_map_string_set_bool field_29;
  30: struct_map_string_set_byte field_30;
  31: struct_map_string_set_i16 field_31;
  32: struct_map_string_set_i32 field_32;
  33: struct_map_string_set_i64 field_33;
  34: struct_map_string_set_float field_34;
  35: struct_map_string_set_double field_35;
  36: struct_map_string_set_binary field_36;
  37: struct_map_string_set_string field_37;
  38: struct_bool_cpp_ref field_38;
  39: struct_byte_cpp_ref field_39;
  40: struct_i16_cpp_ref field_40;
  41: struct_i32_cpp_ref field_41;
  42: struct_i64_cpp_ref field_42;
  43: struct_float_cpp_ref field_43;
  44: struct_double_cpp_ref field_44;
  45: struct_binary_cpp_ref field_45;
  46: struct_string_cpp_ref field_46;
  47: struct_set_bool_cpp_ref field_47;
  48: struct_set_byte_cpp_ref field_48;
  49: struct_set_i16_cpp_ref field_49;
  50: struct_set_i32_cpp_ref field_50;
  51: struct_set_i64_cpp_ref field_51;
  52: struct_set_float_cpp_ref field_52;
  53: struct_set_double_cpp_ref field_53;
  54: struct_set_binary_cpp_ref field_54;
  55: struct_set_string_cpp_ref field_55;
  56: struct_map_string_bool_cpp_ref field_56;
  57: struct_map_string_byte_cpp_ref field_57;
  58: struct_map_string_i16_cpp_ref field_58;
  59: struct_map_string_i32_cpp_ref field_59;
  60: struct_map_string_i64_cpp_ref field_60;
  61: struct_map_string_float_cpp_ref field_61;
  62: struct_map_string_double_cpp_ref field_62;
  63: struct_map_string_binary_cpp_ref field_63;
  64: struct_map_string_string_cpp_ref field_64;
  65: struct_map_string_set_bool_cpp_ref field_65;
  66: struct_map_string_set_byte_cpp_ref field_66;
  67: struct_map_string_set_i16_cpp_ref field_67;
  68: struct_map_string_set_i32_cpp_ref field_68;
  69: struct_map_string_set_i64_cpp_ref field_69;
  70: struct_map_string_set_float_cpp_ref field_70;
  71: struct_map_string_set_double_cpp_ref field_71;
  72: struct_map_string_set_binary_cpp_ref field_72;
  73: struct_map_string_set_string_cpp_ref field_73;
  74: struct_optional_bool field_74;
  75: struct_optional_byte field_75;
  76: struct_optional_i16 field_76;
  77: struct_optional_i32 field_77;
  78: struct_optional_i64 field_78;
  79: struct_optional_float field_79;
  80: struct_optional_double field_80;
  81: struct_optional_binary field_81;
  82: struct_optional_string field_82;
  83: struct_optional_set_bool field_83;
  84: struct_optional_set_byte field_84;
  85: struct_optional_set_i16 field_85;
  86: struct_optional_set_i32 field_86;
  87: struct_optional_set_i64 field_87;
  88: struct_optional_set_float field_88;
  89: struct_optional_set_double field_89;
  90: struct_optional_set_binary field_90;
  91: struct_optional_set_string field_91;
  92: struct_optional_map_string_bool field_92;
  93: struct_optional_map_string_byte field_93;
  94: struct_optional_map_string_i16 field_94;
  95: struct_optional_map_string_i32 field_95;
  96: struct_optional_map_string_i64 field_96;
  97: struct_optional_map_string_float field_97;
  98: struct_optional_map_string_double field_98;
  99: struct_optional_map_string_binary field_99;
  100: struct_optional_map_string_string field_100;
  101: struct_optional_map_string_set_bool field_101;
  102: struct_optional_map_string_set_byte field_102;
  103: struct_optional_map_string_set_i16 field_103;
  104: struct_optional_map_string_set_i32 field_104;
  105: struct_optional_map_string_set_i64 field_105;
  106: struct_optional_map_string_set_float field_106;
  107: struct_optional_map_string_set_double field_107;
  108: struct_optional_map_string_set_binary field_108;
  109: struct_optional_map_string_set_string field_109;
  110: struct_optional_bool_cpp_ref field_110;
  111: struct_optional_byte_cpp_ref field_111;
  112: struct_optional_i16_cpp_ref field_112;
  113: struct_optional_i32_cpp_ref field_113;
  114: struct_optional_i64_cpp_ref field_114;
  115: struct_optional_float_cpp_ref field_115;
  116: struct_optional_double_cpp_ref field_116;
  117: struct_optional_binary_cpp_ref field_117;
  118: struct_optional_string_cpp_ref field_118;
  119: struct_optional_set_bool_cpp_ref field_119;
  120: struct_optional_set_byte_cpp_ref field_120;
  121: struct_optional_set_i16_cpp_ref field_121;
  122: struct_optional_set_i32_cpp_ref field_122;
  123: struct_optional_set_i64_cpp_ref field_123;
  124: struct_optional_set_float_cpp_ref field_124;
  125: struct_optional_set_double_cpp_ref field_125;
  126: struct_optional_set_binary_cpp_ref field_126;
  127: struct_optional_set_string_cpp_ref field_127;
  128: struct_optional_map_string_bool_cpp_ref field_128;
  129: struct_optional_map_string_byte_cpp_ref field_129;
  130: struct_optional_map_string_i16_cpp_ref field_130;
  131: struct_optional_map_string_i32_cpp_ref field_131;
  132: struct_optional_map_string_i64_cpp_ref field_132;
  133: struct_optional_map_string_float_cpp_ref field_133;
  134: struct_optional_map_string_double_cpp_ref field_134;
  135: struct_optional_map_string_binary_cpp_ref field_135;
  136: struct_optional_map_string_string_cpp_ref field_136;
  137: struct_optional_map_string_set_bool_cpp_ref field_137;
  138: struct_optional_map_string_set_byte_cpp_ref field_138;
  139: struct_optional_map_string_set_i16_cpp_ref field_139;
  140: struct_optional_map_string_set_i32_cpp_ref field_140;
  141: struct_optional_map_string_set_i64_cpp_ref field_141;
  142: struct_optional_map_string_set_float_cpp_ref field_142;
  143: struct_optional_map_string_set_double_cpp_ref field_143;
  144: struct_optional_map_string_set_binary_cpp_ref field_144;
  145: struct_optional_map_string_set_string_cpp_ref field_145;
  146: struct_required_bool field_146;
  147: struct_required_byte field_147;
  148: struct_required_i16 field_148;
  149: struct_required_i32 field_149;
  150: struct_required_i64 field_150;
  151: struct_required_float field_151;
  152: struct_required_double field_152;
  153: struct_required_binary field_153;
  154: struct_required_string field_154;
  155: struct_required_set_bool field_155;
  156: struct_required_set_byte field_156;
  157: struct_required_set_i16 field_157;
  158: struct_required_set_i32 field_158;
  159: struct_required_set_i64 field_159;
  160: struct_required_set_float field_160;
  161: struct_required_set_double field_161;
  162: struct_required_set_binary field_162;
  163: struct_required_set_string field_163;
  164: struct_required_map_string_bool field_164;
  165: struct_required_map_string_byte field_165;
  166: struct_required_map_string_i16 field_166;
  167: struct_required_map_string_i32 field_167;
  168: struct_required_map_string_i64 field_168;
  169: struct_required_map_string_float field_169;
  170: struct_required_map_string_double field_170;
  171: struct_required_map_string_binary field_171;
  172: struct_required_map_string_string field_172;
  173: struct_required_map_string_set_bool field_173;
  174: struct_required_map_string_set_byte field_174;
  175: struct_required_map_string_set_i16 field_175;
  176: struct_required_map_string_set_i32 field_176;
  177: struct_required_map_string_set_i64 field_177;
  178: struct_required_map_string_set_float field_178;
  179: struct_required_map_string_set_double field_179;
  180: struct_required_map_string_set_binary field_180;
  181: struct_required_map_string_set_string field_181;
  182: struct_required_bool_cpp_ref field_182;
  183: struct_required_byte_cpp_ref field_183;
  184: struct_required_i16_cpp_ref field_184;
  185: struct_required_i32_cpp_ref field_185;
  186: struct_required_i64_cpp_ref field_186;
  187: struct_required_float_cpp_ref field_187;
  188: struct_required_double_cpp_ref field_188;
  189: struct_required_binary_cpp_ref field_189;
  190: struct_required_string_cpp_ref field_190;
  191: struct_required_set_bool_cpp_ref field_191;
  192: struct_required_set_byte_cpp_ref field_192;
  193: struct_required_set_i16_cpp_ref field_193;
  194: struct_required_set_i32_cpp_ref field_194;
  195: struct_required_set_i64_cpp_ref field_195;
  196: struct_required_set_float_cpp_ref field_196;
  197: struct_required_set_double_cpp_ref field_197;
  198: struct_required_set_binary_cpp_ref field_198;
  199: struct_required_set_string_cpp_ref field_199;
  200: struct_required_map_string_bool_cpp_ref field_200;
  201: struct_required_map_string_byte_cpp_ref field_201;
  202: struct_required_map_string_i16_cpp_ref field_202;
  203: struct_required_map_string_i32_cpp_ref field_203;
  204: struct_required_map_string_i64_cpp_ref field_204;
  205: struct_required_map_string_float_cpp_ref field_205;
  206: struct_required_map_string_double_cpp_ref field_206;
  207: struct_required_map_string_binary_cpp_ref field_207;
  208: struct_required_map_string_string_cpp_ref field_208;
  209: struct_required_map_string_set_bool_cpp_ref field_209;
  210: struct_required_map_string_set_byte_cpp_ref field_210;
  211: struct_required_map_string_set_i16_cpp_ref field_211;
  212: struct_required_map_string_set_i32_cpp_ref field_212;
  213: struct_required_map_string_set_i64_cpp_ref field_213;
  214: struct_required_map_string_set_float_cpp_ref field_214;
  215: struct_required_map_string_set_double_cpp_ref field_215;
  216: struct_required_map_string_set_binary_cpp_ref field_216;
  217: struct_required_map_string_set_string_cpp_ref field_217;
  218: union_empty field_218;
  219: union_bool field_219;
  220: union_byte field_220;
  221: union_i16 field_221;
  222: union_i32 field_222;
  223: union_i64 field_223;
  224: union_float field_224;
  225: union_double field_225;
  226: union_binary field_226;
  227: union_string field_227;
  228: union_set_bool field_228;
  229: union_set_byte field_229;
  230: union_set_i16 field_230;
  231: union_set_i32 field_231;
  232: union_set_i64 field_232;
  233: union_set_float field_233;
  234: union_set_double field_234;
  235: union_set_binary field_235;
  236: union_set_string field_236;
  237: union_map_string_bool field_237;
  238: union_map_string_byte field_238;
  239: union_map_string_i16 field_239;
  240: union_map_string_i32 field_240;
  241: union_map_string_i64 field_241;
  242: union_map_string_float field_242;
  243: union_map_string_double field_243;
  244: union_map_string_binary field_244;
  245: union_map_string_string field_245;
  246: union_map_string_set_bool field_246;
  247: union_map_string_set_byte field_247;
  248: union_map_string_set_i16 field_248;
  249: union_map_string_set_i32 field_249;
  250: union_map_string_set_i64 field_250;
  251: union_map_string_set_float field_251;
  252: union_map_string_set_double field_252;
  253: union_map_string_set_binary field_253;
  254: union_map_string_set_string field_254;
  255: union_bool_cpp_ref field_255;
  256: union_byte_cpp_ref field_256;
  257: union_i16_cpp_ref field_257;
  258: union_i32_cpp_ref field_258;
  259: union_i64_cpp_ref field_259;
  260: union_float_cpp_ref field_260;
  261: union_double_cpp_ref field_261;
  262: union_binary_cpp_ref field_262;
  263: union_string_cpp_ref field_263;
  264: union_set_bool_cpp_ref field_264;
  265: union_set_byte_cpp_ref field_265;
  266: union_set_i16_cpp_ref field_266;
  267: union_set_i32_cpp_ref field_267;
  268: union_set_i64_cpp_ref field_268;
  269: union_set_float_cpp_ref field_269;
  270: union_set_double_cpp_ref field_270;
  271: union_set_binary_cpp_ref field_271;
  272: union_set_string_cpp_ref field_272;
  273: union_map_string_bool_cpp_ref field_273;
  274: union_map_string_byte_cpp_ref field_274;
  275: union_map_string_i16_cpp_ref field_275;
  276: union_map_string_i32_cpp_ref field_276;
  277: union_map_string_i64_cpp_ref field_277;
  278: union_map_string_float_cpp_ref field_278;
  279: union_map_string_double_cpp_ref field_279;
  280: union_map_string_binary_cpp_ref field_280;
  281: union_map_string_string_cpp_ref field_281;
  282: union_map_string_set_bool_cpp_ref field_282;
  283: union_map_string_set_byte_cpp_ref field_283;
  284: union_map_string_set_i16_cpp_ref field_284;
  285: union_map_string_set_i32_cpp_ref field_285;
  286: union_map_string_set_i64_cpp_ref field_286;
  287: union_map_string_set_float_cpp_ref field_287;
  288: union_map_string_set_double_cpp_ref field_288;
  289: union_map_string_set_binary_cpp_ref field_289;
  290: union_map_string_set_string_cpp_ref field_290;
} (thrift.uri="facebook.com/thrift/test/testset/union_all")
