/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/sink-client-buffered-stream/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/sink-client-buffered-stream/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/sink-client-buffered-stream/gen-cpp2/module_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::InitialResponse>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "content") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}
void TccStructTraits<::cpp2::FinalResponse>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "content") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}
void TccStructTraits<::cpp2::SinkPayload>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "content") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}
void TccStructTraits<::cpp2::CompatibleWithKeywordSink>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "sink") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}
void TccStructTraits<::cpp2::SinkException>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "reason") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

InitialResponse::InitialResponse(apache::thrift::FragileConstructor, ::std::string content__arg) :
    content(std::move(content__arg)) {
  __isset.content = true;
}

void InitialResponse::__clear() {
  // clear all fields
  content = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset = {};
}

bool InitialResponse::operator==(const InitialResponse& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.content == rhs.content)) {
    return false;
  }
  return true;
}

bool InitialResponse::operator<(const InitialResponse& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.content == rhs.content)) {
    return lhs.content < rhs.content;
  }
  return false;
}


void swap(InitialResponse& a, InitialResponse& b) {
  using ::std::swap;
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

template void InitialResponse::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InitialResponse::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InitialResponse::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InitialResponse::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InitialResponse::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InitialResponse::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InitialResponse::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InitialResponse::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

FinalResponse::FinalResponse(apache::thrift::FragileConstructor, ::std::string content__arg) :
    content(std::move(content__arg)) {
  __isset.content = true;
}

void FinalResponse::__clear() {
  // clear all fields
  content = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset = {};
}

bool FinalResponse::operator==(const FinalResponse& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.content == rhs.content)) {
    return false;
  }
  return true;
}

bool FinalResponse::operator<(const FinalResponse& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.content == rhs.content)) {
    return lhs.content < rhs.content;
  }
  return false;
}


void swap(FinalResponse& a, FinalResponse& b) {
  using ::std::swap;
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

template void FinalResponse::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t FinalResponse::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t FinalResponse::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t FinalResponse::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void FinalResponse::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t FinalResponse::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t FinalResponse::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t FinalResponse::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

SinkPayload::SinkPayload(apache::thrift::FragileConstructor, ::std::string content__arg) :
    content(std::move(content__arg)) {
  __isset.content = true;
}

void SinkPayload::__clear() {
  // clear all fields
  content = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset = {};
}

bool SinkPayload::operator==(const SinkPayload& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.content == rhs.content)) {
    return false;
  }
  return true;
}

bool SinkPayload::operator<(const SinkPayload& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.content == rhs.content)) {
    return lhs.content < rhs.content;
  }
  return false;
}


void swap(SinkPayload& a, SinkPayload& b) {
  using ::std::swap;
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

template void SinkPayload::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SinkPayload::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SinkPayload::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SinkPayload::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SinkPayload::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SinkPayload::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SinkPayload::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SinkPayload::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

CompatibleWithKeywordSink::CompatibleWithKeywordSink(apache::thrift::FragileConstructor, ::std::string sink__arg) :
    sink(std::move(sink__arg)) {
  __isset.sink = true;
}

void CompatibleWithKeywordSink::__clear() {
  // clear all fields
  sink = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset = {};
}

bool CompatibleWithKeywordSink::operator==(const CompatibleWithKeywordSink& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.sink == rhs.sink)) {
    return false;
  }
  return true;
}

bool CompatibleWithKeywordSink::operator<(const CompatibleWithKeywordSink& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.sink == rhs.sink)) {
    return lhs.sink < rhs.sink;
  }
  return false;
}


void swap(CompatibleWithKeywordSink& a, CompatibleWithKeywordSink& b) {
  using ::std::swap;
  swap(a.sink, b.sink);
  swap(a.__isset, b.__isset);
}

template void CompatibleWithKeywordSink::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t CompatibleWithKeywordSink::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t CompatibleWithKeywordSink::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t CompatibleWithKeywordSink::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void CompatibleWithKeywordSink::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CompatibleWithKeywordSink::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CompatibleWithKeywordSink::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CompatibleWithKeywordSink::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

SinkException::SinkException(apache::thrift::FragileConstructor, ::std::string reason__arg) :
    reason(std::move(reason__arg)) {
  __isset.reason = true;
}

void SinkException::__clear() {
  // clear all fields
  reason = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset = {};
}

bool SinkException::operator==(const SinkException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.reason == rhs.reason)) {
    return false;
  }
  return true;
}

bool SinkException::operator<(const SinkException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.reason == rhs.reason)) {
    return lhs.reason < rhs.reason;
  }
  return false;
}


void swap(SinkException& a, SinkException& b) {
  using ::std::swap;
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

template void SinkException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SinkException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SinkException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SinkException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SinkException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SinkException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SinkException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SinkException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
