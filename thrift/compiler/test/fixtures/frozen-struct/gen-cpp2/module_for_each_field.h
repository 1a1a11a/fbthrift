/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::some::ns::ModuleA> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::some::ns::ModuleA>;

    f(get_metadata(0), static_cast<T&&>(t).i32Field_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).strField_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).listField_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).mapField_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).inclAField_ref()...);
    f(get_metadata(5), static_cast<T&&>(t).inclBField_ref()...);
  }
};

template <>
struct ForEachField<::some::ns::ModuleB> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::some::ns::ModuleB>;

    f(get_metadata(0), static_cast<T&&>(t).i32Field_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).inclEnumB_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
