#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from folly.iobuf import IOBuf as __IOBuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET, NOTSETTYPE
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
import builtins as _builtins


_List__stringT = _typing.TypeVar('_List__stringT', bound=_typing.Sequence[_builtins.str])


class List__string(_typing.Sequence[_builtins.str], _typing.Hashable):
    def __init__(self, items: _typing.Sequence[_builtins.str]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __contains__(self, x: object) -> bool: ...
    @_typing.overload
    def __getitem__(self, i: int) -> _builtins.str: ...
    @_typing.overload
    def __getitem__(self, s: slice) -> _typing.Sequence[_builtins.str]: ...
    def count(self, item: _typing.Any) -> int: ...
    def index(self, item: _typing.Any, start: int = ..., stop: int = ...) -> int: ...
    def __add__(self, other: _typing.Sequence[_builtins.str]) -> 'List__string': ...
    def __radd__(self, other: _List__stringT) -> _List__stringT: ...
    def __reversed__(self) -> _typing.Iterator[_builtins.str]: ...
    def __iter__(self) -> _typing.Iterator[_builtins.str]: ...


class Map__i64_List__string(_typing.Mapping[int, _typing.Sequence[_builtins.str]], _typing.Hashable):
    def __init__(self, items: _typing.Mapping[int, _typing.Sequence[_builtins.str]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __contains__(self, x: object) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Sequence[_builtins.str]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...


TEST_MAP: Map__i64_List__string = ...
