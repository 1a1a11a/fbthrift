#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector as vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref, typeid
from cpython.ref cimport PyObject
from thrift.py3.client cimport cRequestChannel_ptr, makeClientWrapper
from thrift.py3.exceptions cimport try_make_shared_exception, create_py_exception
from folly cimport cFollyTry, cFollyUnit, c_unit
from libcpp.typeinfo cimport type_info
import thrift.py3.types
cimport thrift.py3.types
import thrift.py3.client
cimport thrift.py3.client
from folly.futures cimport bridgeFutureWith
from folly.executor cimport get_executor
cimport cython

import asyncio
import sys
import types as _py_types

cimport empty.types as _empty_types
import empty.types as _empty_types

from empty.clients_wrapper cimport cNullServiceAsyncClient, cNullServiceClientWrapper



cdef object _NullService_annotations = _py_types.MappingProxyType({
})


cdef class NullService(thrift.py3.client.Client):
    annotations = _NullService_annotations

    def __cinit__(NullService self):
        loop = asyncio.get_event_loop()
        self._deferred_headers = {}
        self._connect_future = loop.create_future()
        self._executor = get_executor()

    cdef const type_info* _typeid(NullService self):
        return &typeid(cNullServiceAsyncClient)

    @staticmethod
    cdef _empty_NullService_set_client(NullService inst, shared_ptr[cNullServiceClientWrapper] c_obj):
        """So the class hierarchy talks to the correct pointer type"""
        inst._empty_NullService_client = c_obj

    cdef _empty_NullService_reset_client(NullService self):
        """So the class hierarchy resets the shared pointer up the chain"""
        self._empty_NullService_client.reset()

    def __dealloc__(NullService self):
        if self._cRequestChannel or self._empty_NullService_client:
            print('client was not cleaned up, use the context manager', file=sys.stderr)

    async def __aenter__(NullService self):
        await self._connect_future
        if self._cRequestChannel:
            NullService._empty_NullService_set_client(
                self,
                makeClientWrapper[cNullServiceAsyncClient, cNullServiceClientWrapper](
                    self._cRequestChannel
                ),
            )
            self._cRequestChannel.reset()
        else:
            raise asyncio.InvalidStateError('Client context has been used already')
        for key, value in self._deferred_headers.items():
            self.set_persistent_header(key, value)
        self._deferred_headers = None
        return self

    async def __aexit__(NullService self, *exc):
        self._check_connect_future()
        loop = asyncio.get_event_loop()
        future = loop.create_future()
        bridgeFutureWith[cFollyUnit](
            self._executor,
            deref(self._empty_NullService_client).disconnect(),
            closed_NullService_py3_client_callback,
            <PyObject *>future
        )
        # To break any future usage of this client
        badfuture = loop.create_future()
        badfuture.set_exception(asyncio.InvalidStateError('Client Out of Context'))
        badfuture.exception()
        self._connect_future = badfuture
        await future
        self._empty_NullService_reset_client()

    def set_persistent_header(NullService self, str key, str value):
        if not self._empty_NullService_client:
            self._deferred_headers[key] = value
            return

        cdef string ckey = <bytes> key.encode('utf-8')
        cdef string cvalue = <bytes> value.encode('utf-8')
        deref(self._empty_NullService_client).setPersistentHeader(ckey, cvalue)



cdef void closed_NullService_py3_client_callback(
    cFollyTry[cFollyUnit]&& result,
    PyObject* fut,
):
    cdef object pyfuture = <object> fut
    pyfuture.set_result(None)
