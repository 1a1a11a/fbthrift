#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.lib.py3.thrift_server cimport (
  ServiceInterface,
  cTApplicationException
)
from thrift.lib.py3.folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)
cimport module.types
import module.types

import asyncio
import functools
import sys
import traceback

from module.services_wrapper cimport cSimpleServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[int32_t] move(
        cFollyPromise[int32_t])
    cdef cFollyPromise[cFollyUnit] move(
        cFollyPromise[cFollyUnit])
    cdef cFollyPromise[cbool] move(
        cFollyPromise[cbool])
    cdef cFollyPromise[int8_t] move(
        cFollyPromise[int8_t])
    cdef cFollyPromise[int16_t] move(
        cFollyPromise[int16_t])
    cdef cFollyPromise[int64_t] move(
        cFollyPromise[int64_t])
    cdef cFollyPromise[double] move(
        cFollyPromise[double])
    cdef cFollyPromise[unique_ptr[module.types.cSimpleStruct]] move(
        cFollyPromise[unique_ptr[module.types.cSimpleStruct]])
    cdef cFollyPromise[unique_ptr[vector[int32_t]]] move(
        cFollyPromise[unique_ptr[vector[int32_t]]])
    cdef cFollyPromise[unique_ptr[cset[string]]] move(
        cFollyPromise[unique_ptr[cset[string]]])
    cdef cFollyPromise[unique_ptr[cmap[string,int16_t]]] move(
        cFollyPromise[unique_ptr[cmap[string,int16_t]]])
    cdef cFollyPromise[module.types.cAnEnum] move(
        cFollyPromise[module.types.cAnEnum])
    cdef cFollyPromise[unique_ptr[vector[vector[int32_t]]]] move(
        cFollyPromise[unique_ptr[vector[vector[int32_t]]]])
    cdef cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] move(
        cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]])
    cdef cFollyPromise[unique_ptr[vector[cset[string]]]] move(
        cFollyPromise[unique_ptr[vector[cset[string]]]])
    cdef cFollyPromise[unique_ptr[cset[int32_t]]] move(
        cFollyPromise[unique_ptr[cset[int32_t]]])
    cdef cFollyPromise[unique_ptr[cset[string]]] move(
        cFollyPromise[unique_ptr[cset[string]]])

cdef class Promise_i32:
    cdef cFollyPromise[int32_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int32_t] cPromise):
        inst = <Promise_i32>Promise_i32.__new__(Promise_i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_void:
    cdef cFollyPromise[cFollyUnit] cPromise

    @staticmethod
    cdef create(cFollyPromise[cFollyUnit] cPromise):
        inst = <Promise_void>Promise_void.__new__(Promise_void)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_string:
    cdef cFollyPromise[unique_ptr[string]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[string]] cPromise):
        inst = <Promise_string>Promise_string.__new__(Promise_string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_bool:
    cdef cFollyPromise[cbool] cPromise

    @staticmethod
    cdef create(cFollyPromise[cbool] cPromise):
        inst = <Promise_bool>Promise_bool.__new__(Promise_bool)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_byte:
    cdef cFollyPromise[int8_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int8_t] cPromise):
        inst = <Promise_byte>Promise_byte.__new__(Promise_byte)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i16:
    cdef cFollyPromise[int16_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int16_t] cPromise):
        inst = <Promise_i16>Promise_i16.__new__(Promise_i16)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i64:
    cdef cFollyPromise[int64_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int64_t] cPromise):
        inst = <Promise_i64>Promise_i64.__new__(Promise_i64)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_double:
    cdef cFollyPromise[double] cPromise

    @staticmethod
    cdef create(cFollyPromise[double] cPromise):
        inst = <Promise_double>Promise_double.__new__(Promise_double)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_SimpleStruct:
    cdef cFollyPromise[unique_ptr[module.types.cSimpleStruct]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[module.types.cSimpleStruct]] cPromise):
        inst = <Promise_SimpleStruct>Promise_SimpleStruct.__new__(Promise_SimpleStruct)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__i32:
    cdef cFollyPromise[unique_ptr[vector[int32_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[int32_t]]] cPromise):
        inst = <Promise_List__i32>Promise_List__i32.__new__(Promise_List__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__string:
    cdef cFollyPromise[unique_ptr[cset[string]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[string]]] cPromise):
        inst = <Promise_Set__string>Promise_Set__string.__new__(Promise_Set__string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Map__string_i16:
    cdef cFollyPromise[unique_ptr[cmap[string,int16_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cmap[string,int16_t]]] cPromise):
        inst = <Promise_Map__string_i16>Promise_Map__string_i16.__new__(Promise_Map__string_i16)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_AnEnum:
    cdef cFollyPromise[module.types.cAnEnum] cPromise

    @staticmethod
    cdef create(cFollyPromise[module.types.cAnEnum] cPromise):
        inst = <Promise_AnEnum>Promise_AnEnum.__new__(Promise_AnEnum)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__List__i32:
    cdef cFollyPromise[unique_ptr[vector[vector[int32_t]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[vector[int32_t]]]] cPromise):
        inst = <Promise_List__List__i32>Promise_List__List__i32.__new__(Promise_List__List__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Map__string_Map__string_i32:
    cdef cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] cPromise):
        inst = <Promise_Map__string_Map__string_i32>Promise_Map__string_Map__string_i32.__new__(Promise_Map__string_Map__string_i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__Set__string:
    cdef cFollyPromise[unique_ptr[vector[cset[string]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[cset[string]]]] cPromise):
        inst = <Promise_List__Set__string>Promise_List__Set__string.__new__(Promise_List__Set__string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__i32:
    cdef cFollyPromise[unique_ptr[cset[int32_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[int32_t]]] cPromise):
        inst = <Promise_Set__i32>Promise_Set__i32.__new__(Promise_Set__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_binary:
    cdef cFollyPromise[unique_ptr[string]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[string]] cPromise):
        inst = <Promise_binary>Promise_binary.__new__(Promise_binary)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__binary:
    cdef cFollyPromise[unique_ptr[cset[string]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[string]]] cPromise):
        inst = <Promise_Set__binary>Promise_Set__binary.__new__(Promise_Set__binary)
        inst.cPromise = move(cPromise)
        return inst

cdef api void call_cy_SimpleService_get_five(
    object self,
    cFollyPromise[int32_t] cPromise
) with gil:
    promise = Promise_i32.create(move(cPromise))
    asyncio.run_coroutine_threadsafe(
        SimpleService_get_five_coro(
            self,
            promise),
        loop=self.loop)

async def SimpleService_get_five_coro(
    object self,
    Promise_i32 promise
):
    try:
      result = await self.get_five()
    except Exception as ex:
        print(
            "Unexpected error in service handler get_five:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_add_five(
    object self,
    cFollyPromise[int32_t] cPromise,
    int32_t num
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_num = num
    asyncio.run_coroutine_threadsafe(
        SimpleService_add_five_coro(
            self,
            promise,
            arg_num),
        loop=self.loop)

async def SimpleService_add_five_coro(
    object self,
    Promise_i32 promise,
    num
):
    try:
      result = await self.add_five(
          num)
    except Exception as ex:
        print(
            "Unexpected error in service handler add_five:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_do_nothing(
    object self,
    cFollyPromise[cFollyUnit] cPromise
) with gil:
    promise = Promise_void.create(move(cPromise))
    asyncio.run_coroutine_threadsafe(
        SimpleService_do_nothing_coro(
            self,
            promise),
        loop=self.loop)

async def SimpleService_do_nothing_coro(
    object self,
    Promise_void promise
):
    try:
      result = await self.do_nothing()
    except Exception as ex:
        print(
            "Unexpected error in service handler do_nothing:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_SimpleService_concat(
    object self,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[string] first,
    unique_ptr[string] second
) with gil:
    promise = Promise_string.create(move(cPromise))
    arg_first = (deref(first.get())).decode('UTF-8')
    arg_second = (deref(second.get())).decode('UTF-8')
    asyncio.run_coroutine_threadsafe(
        SimpleService_concat_coro(
            self,
            promise,
            arg_first,
            arg_second),
        loop=self.loop)

async def SimpleService_concat_coro(
    object self,
    Promise_string promise,
    first,
    second
):
    try:
      result = await self.concat(
          first,
          second)
    except Exception as ex:
        print(
            "Unexpected error in service handler concat:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_get_value(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[module.types.cSimpleStruct] simple_struct
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_simple_struct = module.types.SimpleStruct.create(module.types.move(simple_struct))
    asyncio.run_coroutine_threadsafe(
        SimpleService_get_value_coro(
            self,
            promise,
            arg_simple_struct),
        loop=self.loop)

async def SimpleService_get_value_coro(
    object self,
    Promise_i32 promise,
    simple_struct
):
    try:
      result = await self.get_value(
          simple_struct)
    except Exception as ex:
        print(
            "Unexpected error in service handler get_value:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_negate(
    object self,
    cFollyPromise[cbool] cPromise,
    cbool input
) with gil:
    promise = Promise_bool.create(move(cPromise))
    arg_input = input
    asyncio.run_coroutine_threadsafe(
        SimpleService_negate_coro(
            self,
            promise,
            arg_input),
        loop=self.loop)

async def SimpleService_negate_coro(
    object self,
    Promise_bool promise,
    input
):
    try:
      result = await self.negate(
          input)
    except Exception as ex:
        print(
            "Unexpected error in service handler negate:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_SimpleService_tiny(
    object self,
    cFollyPromise[int8_t] cPromise,
    int8_t input
) with gil:
    promise = Promise_byte.create(move(cPromise))
    arg_input = input
    asyncio.run_coroutine_threadsafe(
        SimpleService_tiny_coro(
            self,
            promise,
            arg_input),
        loop=self.loop)

async def SimpleService_tiny_coro(
    object self,
    Promise_byte promise,
    input
):
    try:
      result = await self.tiny(
          input)
    except Exception as ex:
        print(
            "Unexpected error in service handler tiny:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int8_t> result)

cdef api void call_cy_SimpleService_small(
    object self,
    cFollyPromise[int16_t] cPromise,
    int16_t input
) with gil:
    promise = Promise_i16.create(move(cPromise))
    arg_input = input
    asyncio.run_coroutine_threadsafe(
        SimpleService_small_coro(
            self,
            promise,
            arg_input),
        loop=self.loop)

async def SimpleService_small_coro(
    object self,
    Promise_i16 promise,
    input
):
    try:
      result = await self.small(
          input)
    except Exception as ex:
        print(
            "Unexpected error in service handler small:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_SimpleService_big(
    object self,
    cFollyPromise[int64_t] cPromise,
    int64_t input
) with gil:
    promise = Promise_i64.create(move(cPromise))
    arg_input = input
    asyncio.run_coroutine_threadsafe(
        SimpleService_big_coro(
            self,
            promise,
            arg_input),
        loop=self.loop)

async def SimpleService_big_coro(
    object self,
    Promise_i64 promise,
    input
):
    try:
      result = await self.big(
          input)
    except Exception as ex:
        print(
            "Unexpected error in service handler big:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int64_t> result)

cdef api void call_cy_SimpleService_two(
    object self,
    cFollyPromise[double] cPromise,
    double input
) with gil:
    promise = Promise_double.create(move(cPromise))
    arg_input = input
    asyncio.run_coroutine_threadsafe(
        SimpleService_two_coro(
            self,
            promise,
            arg_input),
        loop=self.loop)

async def SimpleService_two_coro(
    object self,
    Promise_double promise,
    input
):
    try:
      result = await self.two(
          input)
    except Exception as ex:
        print(
            "Unexpected error in service handler two:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<double> result)

cdef api void call_cy_SimpleService_expected_exception(
    object self,
    cFollyPromise[cFollyUnit] cPromise
) with gil:
    promise = Promise_void.create(move(cPromise))
    asyncio.run_coroutine_threadsafe(
        SimpleService_expected_exception_coro(
            self,
            promise),
        loop=self.loop)

async def SimpleService_expected_exception_coro(
    object self,
    Promise_void promise
):
    try:
      result = await self.expected_exception()
    except module.types.SimpleException as ex:
        promise.cPromise.setException(deref((<module.types.SimpleException> ex).c_SimpleException.get()))
    except Exception as ex:
        print(
            "Unexpected error in service handler expected_exception:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_SimpleService_unexpected_exception(
    object self,
    cFollyPromise[int32_t] cPromise
) with gil:
    promise = Promise_i32.create(move(cPromise))
    asyncio.run_coroutine_threadsafe(
        SimpleService_unexpected_exception_coro(
            self,
            promise),
        loop=self.loop)

async def SimpleService_unexpected_exception_coro(
    object self,
    Promise_i32 promise
):
    try:
      result = await self.unexpected_exception()
    except Exception as ex:
        print(
            "Unexpected error in service handler unexpected_exception:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_i16_list(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[int16_t]] numbers
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_numbers = module.types.List__i16.create(module.types.move(numbers))
    asyncio.run_coroutine_threadsafe(
        SimpleService_sum_i16_list_coro(
            self,
            promise,
            arg_numbers),
        loop=self.loop)

async def SimpleService_sum_i16_list_coro(
    object self,
    Promise_i32 promise,
    numbers
):
    try:
      result = await self.sum_i16_list(
          numbers)
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_i16_list:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_i32_list(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[int32_t]] numbers
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_numbers = module.types.List__i32.create(module.types.move(numbers))
    asyncio.run_coroutine_threadsafe(
        SimpleService_sum_i32_list_coro(
            self,
            promise,
            arg_numbers),
        loop=self.loop)

async def SimpleService_sum_i32_list_coro(
    object self,
    Promise_i32 promise,
    numbers
):
    try:
      result = await self.sum_i32_list(
          numbers)
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_i32_list:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_i64_list(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[int64_t]] numbers
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_numbers = module.types.List__i64.create(module.types.move(numbers))
    asyncio.run_coroutine_threadsafe(
        SimpleService_sum_i64_list_coro(
            self,
            promise,
            arg_numbers),
        loop=self.loop)

async def SimpleService_sum_i64_list_coro(
    object self,
    Promise_i32 promise,
    numbers
):
    try:
      result = await self.sum_i64_list(
          numbers)
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_i64_list:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_concat_many(
    object self,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[vector[string]] words
) with gil:
    promise = Promise_string.create(move(cPromise))
    arg_words = module.types.List__string.create(module.types.move(words))
    asyncio.run_coroutine_threadsafe(
        SimpleService_concat_many_coro(
            self,
            promise,
            arg_words),
        loop=self.loop)

async def SimpleService_concat_many_coro(
    object self,
    Promise_string promise,
    words
):
    try:
      result = await self.concat_many(
          words)
    except Exception as ex:
        print(
            "Unexpected error in service handler concat_many:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_count_structs(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[module.types.cSimpleStruct]] items
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_items = module.types.List__SimpleStruct.create(module.types.move(items))
    asyncio.run_coroutine_threadsafe(
        SimpleService_count_structs_coro(
            self,
            promise,
            arg_items),
        loop=self.loop)

async def SimpleService_count_structs_coro(
    object self,
    Promise_i32 promise,
    items
):
    try:
      result = await self.count_structs(
          items)
    except Exception as ex:
        print(
            "Unexpected error in service handler count_structs:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_set(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[cset[int32_t]] numbers
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_numbers = module.types.Set__i32.create(module.types.move(numbers))
    asyncio.run_coroutine_threadsafe(
        SimpleService_sum_set_coro(
            self,
            promise,
            arg_numbers),
        loop=self.loop)

async def SimpleService_sum_set_coro(
    object self,
    Promise_i32 promise,
    numbers
):
    try:
      result = await self.sum_set(
          numbers)
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_set:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_contains_word(
    object self,
    cFollyPromise[cbool] cPromise,
    unique_ptr[cset[string]] words,
    unique_ptr[string] word
) with gil:
    promise = Promise_bool.create(move(cPromise))
    arg_words = module.types.Set__string.create(module.types.move(words))
    arg_word = (deref(word.get())).decode('UTF-8')
    asyncio.run_coroutine_threadsafe(
        SimpleService_contains_word_coro(
            self,
            promise,
            arg_words,
            arg_word),
        loop=self.loop)

async def SimpleService_contains_word_coro(
    object self,
    Promise_bool promise,
    words,
    word
):
    try:
      result = await self.contains_word(
          words,
          word)
    except Exception as ex:
        print(
            "Unexpected error in service handler contains_word:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_SimpleService_get_map_value(
    object self,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[cmap[string,string]] words,
    unique_ptr[string] key
) with gil:
    promise = Promise_string.create(move(cPromise))
    arg_words = module.types.Map__string_string.create(module.types.move(words))
    arg_key = (deref(key.get())).decode('UTF-8')
    asyncio.run_coroutine_threadsafe(
        SimpleService_get_map_value_coro(
            self,
            promise,
            arg_words,
            arg_key),
        loop=self.loop)

async def SimpleService_get_map_value_coro(
    object self,
    Promise_string promise,
    words,
    key
):
    try:
      result = await self.get_map_value(
          words,
          key)
    except Exception as ex:
        print(
            "Unexpected error in service handler get_map_value:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_map_length(
    object self,
    cFollyPromise[int16_t] cPromise,
    unique_ptr[cmap[string,module.types.cSimpleStruct]] items
) with gil:
    promise = Promise_i16.create(move(cPromise))
    arg_items = module.types.Map__string_SimpleStruct.create(module.types.move(items))
    asyncio.run_coroutine_threadsafe(
        SimpleService_map_length_coro(
            self,
            promise,
            arg_items),
        loop=self.loop)

async def SimpleService_map_length_coro(
    object self,
    Promise_i16 promise,
    items
):
    try:
      result = await self.map_length(
          items)
    except Exception as ex:
        print(
            "Unexpected error in service handler map_length:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_SimpleService_sum_map_values(
    object self,
    cFollyPromise[int16_t] cPromise,
    unique_ptr[cmap[string,int16_t]] items
) with gil:
    promise = Promise_i16.create(move(cPromise))
    arg_items = module.types.Map__string_i16.create(module.types.move(items))
    asyncio.run_coroutine_threadsafe(
        SimpleService_sum_map_values_coro(
            self,
            promise,
            arg_items),
        loop=self.loop)

async def SimpleService_sum_map_values_coro(
    object self,
    Promise_i16 promise,
    items
):
    try:
      result = await self.sum_map_values(
          items)
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_map_values:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_SimpleService_complex_sum_i32(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[module.types.cComplexStruct] counter
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_counter = module.types.ComplexStruct.create(module.types.move(counter))
    asyncio.run_coroutine_threadsafe(
        SimpleService_complex_sum_i32_coro(
            self,
            promise,
            arg_counter),
        loop=self.loop)

async def SimpleService_complex_sum_i32_coro(
    object self,
    Promise_i32 promise,
    counter
):
    try:
      result = await self.complex_sum_i32(
          counter)
    except Exception as ex:
        print(
            "Unexpected error in service handler complex_sum_i32:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_repeat_name(
    object self,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[module.types.cComplexStruct] counter
) with gil:
    promise = Promise_string.create(move(cPromise))
    arg_counter = module.types.ComplexStruct.create(module.types.move(counter))
    asyncio.run_coroutine_threadsafe(
        SimpleService_repeat_name_coro(
            self,
            promise,
            arg_counter),
        loop=self.loop)

async def SimpleService_repeat_name_coro(
    object self,
    Promise_string promise,
    counter
):
    try:
      result = await self.repeat_name(
          counter)
    except Exception as ex:
        print(
            "Unexpected error in service handler repeat_name:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_get_struct(
    object self,
    cFollyPromise[unique_ptr[module.types.cSimpleStruct]] cPromise
) with gil:
    promise = Promise_SimpleStruct.create(move(cPromise))
    asyncio.run_coroutine_threadsafe(
        SimpleService_get_struct_coro(
            self,
            promise),
        loop=self.loop)

async def SimpleService_get_struct_coro(
    object self,
    Promise_SimpleStruct promise
):
    try:
      result = await self.get_struct()
    except Exception as ex:
        print(
            "Unexpected error in service handler get_struct:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[module.types.cSimpleStruct](deref((<module.types.SimpleStruct?> result).c_SimpleStruct)))

cdef api void call_cy_SimpleService_fib(
    object self,
    cFollyPromise[unique_ptr[vector[int32_t]]] cPromise,
    int16_t n
) with gil:
    promise = Promise_List__i32.create(move(cPromise))
    arg_n = n
    asyncio.run_coroutine_threadsafe(
        SimpleService_fib_coro(
            self,
            promise,
            arg_n),
        loop=self.loop)

async def SimpleService_fib_coro(
    object self,
    Promise_List__i32 promise,
    n
):
    try:
      result = await self.fib(
          n)
      result = module.types.List__i32(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler fib:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[int32_t]](deref((<module.types.List__i32?> result)._vector)))

cdef api void call_cy_SimpleService_unique_words(
    object self,
    cFollyPromise[unique_ptr[cset[string]]] cPromise,
    unique_ptr[vector[string]] words
) with gil:
    promise = Promise_Set__string.create(move(cPromise))
    arg_words = module.types.List__string.create(module.types.move(words))
    asyncio.run_coroutine_threadsafe(
        SimpleService_unique_words_coro(
            self,
            promise,
            arg_words),
        loop=self.loop)

async def SimpleService_unique_words_coro(
    object self,
    Promise_Set__string promise,
    words
):
    try:
      result = await self.unique_words(
          words)
      result = module.types.Set__string(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler unique_words:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[string]](deref((<module.types.Set__string?> result)._set)))

cdef api void call_cy_SimpleService_words_count(
    object self,
    cFollyPromise[unique_ptr[cmap[string,int16_t]]] cPromise,
    unique_ptr[vector[string]] words
) with gil:
    promise = Promise_Map__string_i16.create(move(cPromise))
    arg_words = module.types.List__string.create(module.types.move(words))
    asyncio.run_coroutine_threadsafe(
        SimpleService_words_count_coro(
            self,
            promise,
            arg_words),
        loop=self.loop)

async def SimpleService_words_count_coro(
    object self,
    Promise_Map__string_i16 promise,
    words
):
    try:
      result = await self.words_count(
          words)
      result = module.types.Map__string_i16(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler words_count:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[string,int16_t]](deref((<module.types.Map__string_i16?> result)._map)))

cdef api void call_cy_SimpleService_set_enum(
    object self,
    cFollyPromise[module.types.cAnEnum] cPromise,
    module.types.cAnEnum in_enum
) with gil:
    promise = Promise_AnEnum.create(move(cPromise))
    arg_in_enum = module.types.AnEnum(<int> in_enum)
    asyncio.run_coroutine_threadsafe(
        SimpleService_set_enum_coro(
            self,
            promise,
            arg_in_enum),
        loop=self.loop)

async def SimpleService_set_enum_coro(
    object self,
    Promise_AnEnum promise,
    in_enum
):
    try:
      result = await self.set_enum(
          in_enum)
    except Exception as ex:
        print(
            "Unexpected error in service handler set_enum:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(module.types.AnEnum_to_cpp(result))

cdef api void call_cy_SimpleService_list_of_lists(
    object self,
    cFollyPromise[unique_ptr[vector[vector[int32_t]]]] cPromise,
    int16_t num_lists,
    int16_t num_items
) with gil:
    promise = Promise_List__List__i32.create(move(cPromise))
    arg_num_lists = num_lists
    arg_num_items = num_items
    asyncio.run_coroutine_threadsafe(
        SimpleService_list_of_lists_coro(
            self,
            promise,
            arg_num_lists,
            arg_num_items),
        loop=self.loop)

async def SimpleService_list_of_lists_coro(
    object self,
    Promise_List__List__i32 promise,
    num_lists,
    num_items
):
    try:
      result = await self.list_of_lists(
          num_lists,
          num_items)
      result = module.types.List__List__i32(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler list_of_lists:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[vector[int32_t]]](deref((<module.types.List__List__i32?> result)._vector)))

cdef api void call_cy_SimpleService_word_character_frequency(
    object self,
    cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] cPromise,
    unique_ptr[string] sentence
) with gil:
    promise = Promise_Map__string_Map__string_i32.create(move(cPromise))
    arg_sentence = (deref(sentence.get())).decode('UTF-8')
    asyncio.run_coroutine_threadsafe(
        SimpleService_word_character_frequency_coro(
            self,
            promise,
            arg_sentence),
        loop=self.loop)

async def SimpleService_word_character_frequency_coro(
    object self,
    Promise_Map__string_Map__string_i32 promise,
    sentence
):
    try:
      result = await self.word_character_frequency(
          sentence)
      result = module.types.Map__string_Map__string_i32(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler word_character_frequency:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[string,cmap[string,int32_t]]](deref((<module.types.Map__string_Map__string_i32?> result)._map)))

cdef api void call_cy_SimpleService_list_of_sets(
    object self,
    cFollyPromise[unique_ptr[vector[cset[string]]]] cPromise,
    unique_ptr[string] some_words
) with gil:
    promise = Promise_List__Set__string.create(move(cPromise))
    arg_some_words = (deref(some_words.get())).decode('UTF-8')
    asyncio.run_coroutine_threadsafe(
        SimpleService_list_of_sets_coro(
            self,
            promise,
            arg_some_words),
        loop=self.loop)

async def SimpleService_list_of_sets_coro(
    object self,
    Promise_List__Set__string promise,
    some_words
):
    try:
      result = await self.list_of_sets(
          some_words)
      result = module.types.List__Set__string(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler list_of_sets:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[cset[string]]](deref((<module.types.List__Set__string?> result)._vector)))

cdef api void call_cy_SimpleService_nested_map_argument(
    object self,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[cmap[string,vector[module.types.cSimpleStruct]]] struct_map
) with gil:
    promise = Promise_i32.create(move(cPromise))
    arg_struct_map = module.types.Map__string_List__SimpleStruct.create(module.types.move(struct_map))
    asyncio.run_coroutine_threadsafe(
        SimpleService_nested_map_argument_coro(
            self,
            promise,
            arg_struct_map),
        loop=self.loop)

async def SimpleService_nested_map_argument_coro(
    object self,
    Promise_i32 promise,
    struct_map
):
    try:
      result = await self.nested_map_argument(
          struct_map)
    except Exception as ex:
        print(
            "Unexpected error in service handler nested_map_argument:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_make_sentence(
    object self,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[vector[vector[string]]] word_chars
) with gil:
    promise = Promise_string.create(move(cPromise))
    arg_word_chars = module.types.List__List__string.create(module.types.move(word_chars))
    asyncio.run_coroutine_threadsafe(
        SimpleService_make_sentence_coro(
            self,
            promise,
            arg_word_chars),
        loop=self.loop)

async def SimpleService_make_sentence_coro(
    object self,
    Promise_string promise,
    word_chars
):
    try:
      result = await self.make_sentence(
          word_chars)
    except Exception as ex:
        print(
            "Unexpected error in service handler make_sentence:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_get_union(
    object self,
    cFollyPromise[unique_ptr[cset[int32_t]]] cPromise,
    unique_ptr[vector[cset[int32_t]]] sets
) with gil:
    promise = Promise_Set__i32.create(move(cPromise))
    arg_sets = module.types.List__Set__i32.create(module.types.move(sets))
    asyncio.run_coroutine_threadsafe(
        SimpleService_get_union_coro(
            self,
            promise,
            arg_sets),
        loop=self.loop)

async def SimpleService_get_union_coro(
    object self,
    Promise_Set__i32 promise,
    sets
):
    try:
      result = await self.get_union(
          sets)
      result = module.types.Set__i32(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler get_union:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[int32_t]](deref((<module.types.Set__i32?> result)._set)))

cdef api void call_cy_SimpleService_get_keys(
    object self,
    cFollyPromise[unique_ptr[cset[string]]] cPromise,
    unique_ptr[vector[cmap[string,string]]] string_map
) with gil:
    promise = Promise_Set__string.create(move(cPromise))
    arg_string_map = module.types.List__Map__string_string.create(module.types.move(string_map))
    asyncio.run_coroutine_threadsafe(
        SimpleService_get_keys_coro(
            self,
            promise,
            arg_string_map),
        loop=self.loop)

async def SimpleService_get_keys_coro(
    object self,
    Promise_Set__string promise,
    string_map
):
    try:
      result = await self.get_keys(
          string_map)
      result = module.types.Set__string(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler get_keys:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[string]](deref((<module.types.Set__string?> result)._set)))

cdef api void call_cy_SimpleService_lookup_double(
    object self,
    cFollyPromise[double] cPromise,
    int32_t key
) with gil:
    promise = Promise_double.create(move(cPromise))
    arg_key = key
    asyncio.run_coroutine_threadsafe(
        SimpleService_lookup_double_coro(
            self,
            promise,
            arg_key),
        loop=self.loop)

async def SimpleService_lookup_double_coro(
    object self,
    Promise_double promise,
    key
):
    try:
      result = await self.lookup_double(
          key)
    except Exception as ex:
        print(
            "Unexpected error in service handler lookup_double:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<double> result)

cdef api void call_cy_SimpleService_retrieve_binary(
    object self,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[string] something
) with gil:
    promise = Promise_binary.create(move(cPromise))
    arg_something = (deref(something.get()))
    asyncio.run_coroutine_threadsafe(
        SimpleService_retrieve_binary_coro(
            self,
            promise,
            arg_something),
        loop=self.loop)

async def SimpleService_retrieve_binary_coro(
    object self,
    Promise_binary promise,
    something
):
    try:
      result = await self.retrieve_binary(
          something)
    except Exception as ex:
        print(
            "Unexpected error in service handler retrieve_binary:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result))

cdef api void call_cy_SimpleService_contain_binary(
    object self,
    cFollyPromise[unique_ptr[cset[string]]] cPromise,
    unique_ptr[vector[string]] binaries
) with gil:
    promise = Promise_Set__binary.create(move(cPromise))
    arg_binaries = module.types.List__binary.create(module.types.move(binaries))
    asyncio.run_coroutine_threadsafe(
        SimpleService_contain_binary_coro(
            self,
            promise,
            arg_binaries),
        loop=self.loop)

async def SimpleService_contain_binary_coro(
    object self,
    Promise_Set__binary promise,
    binaries
):
    try:
      result = await self.contain_binary(
          binaries)
      result = module.types.Set__binary(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler contain_binary:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[string]](deref((<module.types.Set__binary?> result)._set)))


cdef class SimpleServiceInterface(
    ServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cSimpleServiceInterface(<PyObject *> self)

    async def get_five(
            self):
        raise NotImplementedError("async def get_five is not implemented")


    async def add_five(
            self,
            num):
        raise NotImplementedError("async def add_five is not implemented")


    async def do_nothing(
            self):
        raise NotImplementedError("async def do_nothing is not implemented")


    async def concat(
            self,
            first,
            second):
        raise NotImplementedError("async def concat is not implemented")


    async def get_value(
            self,
            simple_struct):
        raise NotImplementedError("async def get_value is not implemented")


    async def negate(
            self,
            input):
        raise NotImplementedError("async def negate is not implemented")


    async def tiny(
            self,
            input):
        raise NotImplementedError("async def tiny is not implemented")


    async def small(
            self,
            input):
        raise NotImplementedError("async def small is not implemented")


    async def big(
            self,
            input):
        raise NotImplementedError("async def big is not implemented")


    async def two(
            self,
            input):
        raise NotImplementedError("async def two is not implemented")


    async def expected_exception(
            self):
        raise NotImplementedError("async def expected_exception is not implemented")


    async def unexpected_exception(
            self):
        raise NotImplementedError("async def unexpected_exception is not implemented")


    async def sum_i16_list(
            self,
            numbers):
        raise NotImplementedError("async def sum_i16_list is not implemented")


    async def sum_i32_list(
            self,
            numbers):
        raise NotImplementedError("async def sum_i32_list is not implemented")


    async def sum_i64_list(
            self,
            numbers):
        raise NotImplementedError("async def sum_i64_list is not implemented")


    async def concat_many(
            self,
            words):
        raise NotImplementedError("async def concat_many is not implemented")


    async def count_structs(
            self,
            items):
        raise NotImplementedError("async def count_structs is not implemented")


    async def sum_set(
            self,
            numbers):
        raise NotImplementedError("async def sum_set is not implemented")


    async def contains_word(
            self,
            words,
            word):
        raise NotImplementedError("async def contains_word is not implemented")


    async def get_map_value(
            self,
            words,
            key):
        raise NotImplementedError("async def get_map_value is not implemented")


    async def map_length(
            self,
            items):
        raise NotImplementedError("async def map_length is not implemented")


    async def sum_map_values(
            self,
            items):
        raise NotImplementedError("async def sum_map_values is not implemented")


    async def complex_sum_i32(
            self,
            counter):
        raise NotImplementedError("async def complex_sum_i32 is not implemented")


    async def repeat_name(
            self,
            counter):
        raise NotImplementedError("async def repeat_name is not implemented")


    async def get_struct(
            self):
        raise NotImplementedError("async def get_struct is not implemented")


    async def fib(
            self,
            n):
        raise NotImplementedError("async def fib is not implemented")


    async def unique_words(
            self,
            words):
        raise NotImplementedError("async def unique_words is not implemented")


    async def words_count(
            self,
            words):
        raise NotImplementedError("async def words_count is not implemented")


    async def set_enum(
            self,
            in_enum):
        raise NotImplementedError("async def set_enum is not implemented")


    async def list_of_lists(
            self,
            num_lists,
            num_items):
        raise NotImplementedError("async def list_of_lists is not implemented")


    async def word_character_frequency(
            self,
            sentence):
        raise NotImplementedError("async def word_character_frequency is not implemented")


    async def list_of_sets(
            self,
            some_words):
        raise NotImplementedError("async def list_of_sets is not implemented")


    async def nested_map_argument(
            self,
            struct_map):
        raise NotImplementedError("async def nested_map_argument is not implemented")


    async def make_sentence(
            self,
            word_chars):
        raise NotImplementedError("async def make_sentence is not implemented")


    async def get_union(
            self,
            sets):
        raise NotImplementedError("async def get_union is not implemented")


    async def get_keys(
            self,
            string_map):
        raise NotImplementedError("async def get_keys is not implemented")


    async def lookup_double(
            self,
            key):
        raise NotImplementedError("async def lookup_double is not implemented")


    async def retrieve_binary(
            self,
            something):
        raise NotImplementedError("async def retrieve_binary is not implemented")


    async def contain_binary(
            self,
            binaries):
        raise NotImplementedError("async def contain_binary is not implemented")


