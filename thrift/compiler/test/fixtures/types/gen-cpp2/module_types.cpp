/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_types.h"

#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_types.tcc"

#include <algorithm>

#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_data.h"



namespace apache { namespace thrift { namespace fixtures { namespace types {

void decorated_struct::__clear() {
  field = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool decorated_struct::operator==(const decorated_struct& rhs) const {
  if (!((field == rhs.field))) {
    return false;
  }
  return true;
}

void swap(decorated_struct& a, decorated_struct& b) {
  using ::std::swap;
  swap(a.field, b.field);
  swap(a.__isset, b.__isset);
}

template uint32_t decorated_struct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t decorated_struct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t decorated_struct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t decorated_struct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t decorated_struct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t decorated_struct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t decorated_struct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t decorated_struct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift {

}} // apache::thrift
namespace std {

} // std
namespace apache { namespace thrift { namespace fixtures { namespace types {

}}}} // apache::thrift::fixtures::types
