/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#include <thrift/lib/cpp2/async/RequestChannel.h>
#include <src/gen-cpp2/SomeService.h>

#include <folly/futures/Future.h>
#include <folly/futures/Promise.h>
#include <folly/Unit.h>

#include <cstdint>
#include <functional>
#include <map>
#include <memory>
#include <set>
#include <vector>

namespace apache {
namespace thrift {
namespace fixtures {
namespace types {

typedef std::shared_ptr<apache::thrift::RequestChannel> RequestChannel_ptr;

class SomeServiceClientWrapper {
  protected:
    std::unique_ptr<apache::thrift::fixtures::types::SomeServiceAsyncClient> async_client;

  public:
    explicit SomeServiceClientWrapper(
        std::unique_ptr<apache::thrift::fixtures::types::SomeServiceAsyncClient> client)
        : async_client(std::move(client)) { }
    explicit SomeServiceClientWrapper(RequestChannel_ptr channel)
        : SomeServiceClientWrapper(std::make_unique<apache::thrift::fixtures::types::SomeServiceAsyncClient>(channel))  { }

    virtual ~SomeServiceClientWrapper();
    folly::Future<folly::Unit> disconnect();
    void setPersistentHeader(const std::string& key, const std::string& value);

    folly::Future<std::unordered_map<int32_t,std::string>> bounce_map(
      std::unordered_map<int32_t,std::string> arg_m);
};


} // namespace apache
} // namespace thrift
} // namespace fixtures
} // namespace types
