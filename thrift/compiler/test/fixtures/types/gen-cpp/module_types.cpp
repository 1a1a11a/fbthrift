/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/types/gen-cpp/module_types.h"
#include "thrift/compiler/test/fixtures/types/gen-cpp/module_data.h"

#include "thrift/compiler/test/fixtures/types/gen-cpp/module_reflection.h"

#include <algorithm>
#include <string.h>

#include <folly/Indestructible.h>

namespace apache { namespace thrift { namespace fixtures { namespace types {

const uint64_t decorated_struct::_reflection_id;
void decorated_struct::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::apache::thrift::fixtures::types::module_reflection_::reflectionInitializer_2133116297910176940(schema);
}

bool decorated_struct::operator == (const decorated_struct & rhs) const {
  if (!(this->field == rhs.field))
    return false;
  return true;
}

uint32_t decorated_struct::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::apache::thrift::fixtures::types::module_reflection_::reflectionInitializer_2133116297910176940(*schema);
    iprot->setNextStructType(decorated_struct::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field);
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void decorated_struct::__clear() {
  field = "";
  __isset.__clear();
}
uint32_t decorated_struct::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("decorated_struct");
  xfer += oprot->writeFieldBegin("field", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(decorated_struct &a, decorated_struct &b) {
  using ::std::swap;
  (void)a;
  (void)b;
  swap(a.field, b.field);
  swap(a.__isset, b.__isset);
}

void merge(const decorated_struct& from, decorated_struct& to) {
  using apache::thrift::merge;
  merge(from.field, to.field);
  to.__isset.field = to.__isset.field || from.__isset.field;
}

void merge(decorated_struct&& from, decorated_struct& to) {
  using apache::thrift::merge;
  merge(std::move(from.field), to.field);
  to.__isset.field = to.__isset.field || from.__isset.field;
}

}}}} // namespace
