// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift-go"
	include0 "include"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = include0.GoUnusedProtection__
var GoUnusedProtection__ int;

type HasBitwiseOps int64
const (
  HasBitwiseOps_none HasBitwiseOps = 0
  HasBitwiseOps_zero HasBitwiseOps = 1
  HasBitwiseOps_one HasBitwiseOps = 2
  HasBitwiseOps_two HasBitwiseOps = 4
  HasBitwiseOps_three HasBitwiseOps = 8
)

var HasBitwiseOpsToName = map[HasBitwiseOps]string {
  HasBitwiseOps_none: "none",
  HasBitwiseOps_zero: "zero",
  HasBitwiseOps_one: "one",
  HasBitwiseOps_two: "two",
  HasBitwiseOps_three: "three",
}

var HasBitwiseOpsToValue = map[string]HasBitwiseOps {
  "none": HasBitwiseOps_none,
  "zero": HasBitwiseOps_zero,
  "one": HasBitwiseOps_one,
  "two": HasBitwiseOps_two,
  "three": HasBitwiseOps_three,
}

func (p HasBitwiseOps) String() string {
  if v, ok := HasBitwiseOpsToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HasBitwiseOpsFromString(s string) (HasBitwiseOps, error) {
  if v, ok := HasBitwiseOpsToValue[s]; ok {
    return v, nil
  }
  return HasBitwiseOps(0), fmt.Errorf("not a valid HasBitwiseOps string")
}

func HasBitwiseOpsPtr(v HasBitwiseOps) *HasBitwiseOps { return &v }

type IsUnscoped int64
const (
  IsUnscoped_hello IsUnscoped = 0
  IsUnscoped_world IsUnscoped = 1
)

var IsUnscopedToName = map[IsUnscoped]string {
  IsUnscoped_hello: "hello",
  IsUnscoped_world: "world",
}

var IsUnscopedToValue = map[string]IsUnscoped {
  "hello": IsUnscoped_hello,
  "world": IsUnscoped_world,
}

func (p IsUnscoped) String() string {
  if v, ok := IsUnscopedToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func IsUnscopedFromString(s string) (IsUnscoped, error) {
  if v, ok := IsUnscopedToValue[s]; ok {
    return v, nil
  }
  return IsUnscoped(0), fmt.Errorf("not a valid IsUnscoped string")
}

func IsUnscopedPtr(v IsUnscoped) *IsUnscoped { return &v }

type MyForwardRefEnum int64
const (
  MyForwardRefEnum_ZERO MyForwardRefEnum = 0
  MyForwardRefEnum_NONZERO MyForwardRefEnum = 12
)

var MyForwardRefEnumToName = map[MyForwardRefEnum]string {
  MyForwardRefEnum_ZERO: "ZERO",
  MyForwardRefEnum_NONZERO: "NONZERO",
}

var MyForwardRefEnumToValue = map[string]MyForwardRefEnum {
  "ZERO": MyForwardRefEnum_ZERO,
  "NONZERO": MyForwardRefEnum_NONZERO,
}

func (p MyForwardRefEnum) String() string {
  if v, ok := MyForwardRefEnumToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func MyForwardRefEnumFromString(s string) (MyForwardRefEnum, error) {
  if v, ok := MyForwardRefEnumToValue[s]; ok {
    return v, nil
  }
  return MyForwardRefEnum(0), fmt.Errorf("not a valid MyForwardRefEnum string")
}

func MyForwardRefEnumPtr(v MyForwardRefEnum) *MyForwardRefEnum { return &v }

type TBinary []byte

func TBinaryPtr(v TBinary) *TBinary { return &v }

// Attributes:
//  - Field
type DecoratedStruct struct {
  Field string `thrift:"field,1" db:"field" json:"field"`
}

func NewDecoratedStruct() *DecoratedStruct {
  return &DecoratedStruct{}
}


func (p *DecoratedStruct) GetField() string {
  return p.Field
}
func (p *DecoratedStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DecoratedStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Field = v
}
  return nil
}

func (p *DecoratedStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("decorated_struct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecoratedStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
  if err := oprot.WriteString(string(p.Field)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  return err
}

func (p *DecoratedStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DecoratedStruct(%+v)", *p)
}

// Attributes:
//  - FieldA
//  - FieldB
//  - FieldC
//  - FieldD
//  - FieldE
//  - FieldF
//  - FieldG
//  - FieldH
type ContainerStruct struct {
  // unused field # 1
  FieldB []int32 `thrift:"fieldB,2" db:"fieldB" json:"fieldB"`
  FieldC []int32 `thrift:"fieldC,3" db:"fieldC" json:"fieldC"`
  FieldD []int32 `thrift:"fieldD,4" db:"fieldD" json:"fieldD"`
  FieldE []int32 `thrift:"fieldE,5" db:"fieldE" json:"fieldE"`
  FieldF []int32 `thrift:"fieldF,6" db:"fieldF" json:"fieldF"`
  FieldG map[int32]string `thrift:"fieldG,7" db:"fieldG" json:"fieldG"`
  FieldH include0.SomeMap `thrift:"fieldH,8" db:"fieldH" json:"fieldH"`
  // unused fields # 9 to 11
  FieldA []int32 `thrift:"fieldA,12" db:"fieldA" json:"fieldA"`
}

func NewContainerStruct() *ContainerStruct {
  return &ContainerStruct{}
}


func (p *ContainerStruct) GetFieldA() []int32 {
  return p.FieldA
}

func (p *ContainerStruct) GetFieldB() []int32 {
  return p.FieldB
}

func (p *ContainerStruct) GetFieldC() []int32 {
  return p.FieldC
}

func (p *ContainerStruct) GetFieldD() []int32 {
  return p.FieldD
}

func (p *ContainerStruct) GetFieldE() []int32 {
  return p.FieldE
}

func (p *ContainerStruct) GetFieldF() []int32 {
  return p.FieldF
}

func (p *ContainerStruct) GetFieldG() map[int32]string {
  return p.FieldG
}

func (p *ContainerStruct) GetFieldH() include0.SomeMap {
  return p.FieldH
}
func (p *ContainerStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField12(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldA =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.FieldA = append(p.FieldA, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldB =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.FieldB = append(p.FieldB, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldC =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.FieldC = append(p.FieldC, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldD =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.FieldD = append(p.FieldD, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldE =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.FieldE = append(p.FieldE, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField6(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.FieldF =  tSet
  for i := 0; i < size; i ++ {
var _elem6 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.FieldF = append(p.FieldF, _elem6)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField7(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]string, size)
  p.FieldG =  tMap
  for i := 0; i < size; i ++ {
var _key7 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
var _val8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.FieldG[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField8(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(include0.SomeMap, size)
  p.FieldH =  tMap
  for i := 0; i < size; i ++ {
var _key9 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.FieldH[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ContainerStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ContainerStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContainerStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldB", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fieldB: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldB)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldB {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fieldB: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldC", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fieldC: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldC)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldC {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fieldC: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldD", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fieldD: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldD)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldD {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fieldD: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldE", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fieldE: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldE)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldE {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fieldE: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldF", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fieldF: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.FieldF)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int32]bool, len(p.FieldF))
  for _, v := range p.FieldF {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.FieldF {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fieldF: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldG", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fieldG: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.FieldG)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FieldG {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fieldG: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldH", thrift.MAP, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fieldH: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.FieldH)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FieldH {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fieldH: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldA", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fieldA: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldA)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldA {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fieldA: ", p), err) }
  return err
}

func (p *ContainerStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContainerStruct(%+v)", *p)
}

// Attributes:
//  - FieldA
type CppTypeStruct struct {
  FieldA []int32 `thrift:"fieldA,1" db:"fieldA" json:"fieldA"`
}

func NewCppTypeStruct() *CppTypeStruct {
  return &CppTypeStruct{}
}


func (p *CppTypeStruct) GetFieldA() []int32 {
  return p.FieldA
}
func (p *CppTypeStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CppTypeStruct)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldA =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.FieldA = append(p.FieldA, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CppTypeStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CppTypeStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CppTypeStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldA", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fieldA: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldA)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldA {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fieldA: ", p), err) }
  return err
}

func (p *CppTypeStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CppTypeStruct(%+v)", *p)
}

// Attributes:
//  - MyIntField
type VirtualStruct struct {
  MyIntField int64 `thrift:"MyIntField,1" db:"MyIntField" json:"MyIntField"`
}

func NewVirtualStruct() *VirtualStruct {
  return &VirtualStruct{}
}


func (p *VirtualStruct) GetMyIntField() int64 {
  return p.MyIntField
}
func (p *VirtualStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VirtualStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MyIntField = v
}
  return nil
}

func (p *VirtualStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VirtualStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VirtualStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MyIntField: ", p), err) }
  if err := oprot.WriteI64(int64(p.MyIntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MyIntField (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MyIntField: ", p), err) }
  return err
}

func (p *VirtualStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VirtualStruct(%+v)", *p)
}

// Attributes:
//  - A
//  - B
type MyStructWithForwardRefEnum struct {
  A MyForwardRefEnum `thrift:"a,1" db:"a" json:"a"`
  B MyForwardRefEnum `thrift:"b,2" db:"b" json:"b"`
}

func NewMyStructWithForwardRefEnum() *MyStructWithForwardRefEnum {
  return &MyStructWithForwardRefEnum{
A: 12,

B: 12,
}
}


func (p *MyStructWithForwardRefEnum) GetA() MyForwardRefEnum {
  return p.A
}

func (p *MyStructWithForwardRefEnum) GetB() MyForwardRefEnum {
  return p.B
}
func (p *MyStructWithForwardRefEnum) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructWithForwardRefEnum)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MyForwardRefEnum(v)
  p.A = temp
}
  return nil
}

func (p *MyStructWithForwardRefEnum)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MyForwardRefEnum(v)
  p.B = temp
}
  return nil
}

func (p *MyStructWithForwardRefEnum) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructWithForwardRefEnum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructWithForwardRefEnum) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *MyStructWithForwardRefEnum) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteI32(int32(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *MyStructWithForwardRefEnum) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MyStructWithForwardRefEnum(%+v)", *p)
}

