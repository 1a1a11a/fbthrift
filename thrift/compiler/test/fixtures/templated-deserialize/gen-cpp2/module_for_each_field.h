/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/templated-deserialize/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::cpp2::SmallStruct> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::SmallStruct>;

    f(get_metadata(0), static_cast<T&&>(t).small_A_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).small_B_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::containerStruct> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::containerStruct>;

    f(get_metadata(0), static_cast<T&&>(t).fieldA_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).fieldB_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).fieldC_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).fieldD_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).fieldE_ref()...);
    f(get_metadata(5), static_cast<T&&>(t).fieldF_ref()...);
    f(get_metadata(6), static_cast<T&&>(t).fieldG_ref()...);
    f(get_metadata(7), static_cast<T&&>(t).fieldH_ref()...);
    f(get_metadata(8), static_cast<T&&>(t).fieldI_ref()...);
    f(get_metadata(9), static_cast<T&&>(t).fieldJ_ref()...);
    f(get_metadata(10), static_cast<T&&>(t).fieldK_ref()...);
    f(get_metadata(11), static_cast<T&&>(t).fieldL_ref()...);
    f(get_metadata(12), static_cast<T&&>(t).fieldM_ref()...);
    f(get_metadata(13), static_cast<T&&>(t).fieldN_ref()...);
    f(get_metadata(14), static_cast<T&&>(t).fieldO_ref()...);
    f(get_metadata(15), static_cast<T&&>(t).fieldP_ref()...);
    f(get_metadata(16), static_cast<T&&>(t).fieldQ_ref()...);
    f(get_metadata(17), static_cast<T&&>(t).fieldR_ref()...);
    f(get_metadata(18), static_cast<T&&>(t).fieldS_ref()...);
    f(get_metadata(19), static_cast<T&&>(t).fieldT_ref()...);
    f(get_metadata(20), static_cast<T&&>(t).fieldU_ref()...);
    f(get_metadata(21), static_cast<T&&>(t).fieldX_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
