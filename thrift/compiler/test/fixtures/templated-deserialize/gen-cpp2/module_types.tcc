/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/templated-deserialize/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

template <typename T_containerStruct_fieldB_struct_setter>
std::map<std::string, bool>& containerStruct::set_fieldB(T_containerStruct_fieldB_struct_setter&& fieldB_) {
  fieldB = std::forward<T_containerStruct_fieldB_struct_setter>(fieldB_);
  __isset.fieldB = true;
  return fieldB;
}

template <typename T_containerStruct_fieldC_struct_setter>
std::set<int32_t>& containerStruct::set_fieldC(T_containerStruct_fieldC_struct_setter&& fieldC_) {
  fieldC = std::forward<T_containerStruct_fieldC_struct_setter>(fieldC_);
  __isset.fieldC = true;
  return fieldC;
}

template <typename T_containerStruct_fieldF_struct_setter>
std::vector<std::vector<std::vector<int32_t>>>& containerStruct::set_fieldF(T_containerStruct_fieldF_struct_setter&& fieldF_) {
  fieldF = std::forward<T_containerStruct_fieldF_struct_setter>(fieldF_);
  __isset.fieldF = true;
  return fieldF;
}

template <typename T_containerStruct_fieldG_struct_setter>
std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>& containerStruct::set_fieldG(T_containerStruct_fieldG_struct_setter&& fieldG_) {
  fieldG = std::forward<T_containerStruct_fieldG_struct_setter>(fieldG_);
  __isset.fieldG = true;
  return fieldG;
}

template <typename T_containerStruct_fieldH_struct_setter>
std::vector<std::set<int32_t>>& containerStruct::set_fieldH(T_containerStruct_fieldH_struct_setter&& fieldH_) {
  fieldH = std::forward<T_containerStruct_fieldH_struct_setter>(fieldH_);
  __isset.fieldH = true;
  return fieldH;
}

template <typename T_containerStruct_fieldJ_struct_setter>
std::map<std::string, std::vector<int32_t>>& containerStruct::set_fieldJ(T_containerStruct_fieldJ_struct_setter&& fieldJ_) {
  fieldJ = std::forward<T_containerStruct_fieldJ_struct_setter>(fieldJ_);
  __isset.fieldJ = true;
  return fieldJ;
}

template <typename T_containerStruct_fieldK_struct_setter>
std::vector<std::vector<std::vector<std::vector<int32_t>>>>& containerStruct::set_fieldK(T_containerStruct_fieldK_struct_setter&& fieldK_) {
  fieldK = std::forward<T_containerStruct_fieldK_struct_setter>(fieldK_);
  __isset.fieldK = true;
  return fieldK;
}

template <typename T_containerStruct_fieldL_struct_setter>
std::set<std::set<std::set<bool>>>& containerStruct::set_fieldL(T_containerStruct_fieldL_struct_setter&& fieldL_) {
  fieldL = std::forward<T_containerStruct_fieldL_struct_setter>(fieldL_);
  __isset.fieldL = true;
  return fieldL;
}

template <typename T_containerStruct_fieldM_struct_setter>
std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>& containerStruct::set_fieldM(T_containerStruct_fieldM_struct_setter&& fieldM_) {
  fieldM = std::forward<T_containerStruct_fieldM_struct_setter>(fieldM_);
  __isset.fieldM = true;
  return fieldM;
}

template <typename T_containerStruct_fieldN_struct_setter>
std::vector< ::cpp2::IndirectionA>& containerStruct::set_fieldN(T_containerStruct_fieldN_struct_setter&& fieldN_) {
  fieldN = std::forward<T_containerStruct_fieldN_struct_setter>(fieldN_);
  __isset.fieldN = true;
  return fieldN;
}

template <typename T_containerStruct_fieldO_struct_setter>
std::vector< ::cpp2::IndirectionB>& containerStruct::set_fieldO(T_containerStruct_fieldO_struct_setter&& fieldO_) {
  fieldO = std::forward<T_containerStruct_fieldO_struct_setter>(fieldO_);
  __isset.fieldO = true;
  return fieldO;
}

template <typename T_containerStruct_fieldP_struct_setter>
std::vector< ::cpp2::IndirectionC>& containerStruct::set_fieldP(T_containerStruct_fieldP_struct_setter&& fieldP_) {
  fieldP = std::forward<T_containerStruct_fieldP_struct_setter>(fieldP_);
  __isset.fieldP = true;
  return fieldP;
}

template <class Protocol_>
uint32_t containerStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldH") {
        fid = 8;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldI") {
        fid = 9;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "fieldJ") {
        fid = 10;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldK") {
        fid = 11;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldL") {
        fid = 12;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldM") {
        fid = 13;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldN") {
        fid = 14;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldO") {
        fid = 15;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldP") {
        fid = 16;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fieldA);
          this->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          xfer += ::apache::thrift::Cpp2Ops< std::map<std::string, bool>>::read(iprot, &this->fieldB);
          this->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          xfer += ::apache::thrift::Cpp2Ops< std::set<int32_t>>::read(iprot, &this->fieldC);
          this->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fieldD);
          this->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fieldE);
          this->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          xfer += ::apache::thrift::Cpp2Ops< std::vector<std::vector<std::vector<int32_t>>>>::read(iprot, &this->fieldF);
          this->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          xfer += ::apache::thrift::Cpp2Ops< std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>>::read(iprot, &this->fieldG);
          this->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          xfer += ::apache::thrift::Cpp2Ops< std::vector<std::set<int32_t>>>::read(iprot, &this->fieldH);
          this->__isset.fieldH = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fieldI);
          this->__isset.fieldI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          xfer += ::apache::thrift::Cpp2Ops< std::map<std::string, std::vector<int32_t>>>::read(iprot, &this->fieldJ);
          this->__isset.fieldJ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          xfer += ::apache::thrift::Cpp2Ops< std::vector<std::vector<std::vector<std::vector<int32_t>>>>>::read(iprot, &this->fieldK);
          this->__isset.fieldK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          xfer += ::apache::thrift::Cpp2Ops< std::set<std::set<std::set<bool>>>>::read(iprot, &this->fieldL);
          this->__isset.fieldL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          xfer += ::apache::thrift::Cpp2Ops< std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>>::read(iprot, &this->fieldM);
          this->__isset.fieldM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          xfer += ::apache::thrift::Cpp2Ops< std::vector< ::cpp2::IndirectionA>>::read(iprot, &this->fieldN);
          this->__isset.fieldN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          xfer += ::apache::thrift::Cpp2Ops< std::vector< ::cpp2::IndirectionB>>::read(iprot, &this->fieldO);
          this->__isset.fieldO = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          xfer += ::apache::thrift::Cpp2Ops< std::vector< ::cpp2::IndirectionC>>::read(iprot, &this->fieldP);
          this->__isset.fieldP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t containerStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("containerStruct");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_MAP, 2);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, this->fieldB.size());
  for (auto _iter_rk_rv = this->fieldB.begin(); _iter_rk_rv != this->fieldB.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_SET, 3);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->fieldC.size());
  for (auto _iter_r = this->fieldC.begin(); _iter_r != this->fieldC.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_LIST, 6);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->fieldF.size());
  for (auto _iter_r_r_r = this->fieldF.begin(); _iter_r_r_r != this->fieldF.end(); ++_iter_r_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r).size());
    for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeI32((*_iter_r));
      }
      xfer += prot_->serializedSizeListEnd();
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, this->fieldG.size());
  for (auto _iter_rk_rv_rk_rv_rk_rv = this->fieldG.begin(); _iter_rk_rv_rk_rv_rk_rv != this->fieldG.end(); ++_iter_rk_rv_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, _iter_rk_rv_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv_rk_rv = _iter_rk_rv_rk_rv_rk_rv->second.begin(); _iter_rk_rv_rk_rv != _iter_rk_rv_rk_rv_rk_rv->second.end(); ++_iter_rk_rv_rk_rv) {
      xfer += prot_->serializedSizeString(_iter_rk_rv_rk_rv->first);
      xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, _iter_rk_rv_rk_rv->second.size());
      for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
        xfer += prot_->serializedSizeString(_iter_rk_rv->first);
        xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
      }
      xfer += prot_->serializedSizeMapEnd();
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_LIST, 8);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, this->fieldH.size());
  for (auto _iter_r_r = this->fieldH.begin(); _iter_r_r != this->fieldH.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_BOOL, 9);
  xfer += prot_->serializedSizeBool(this->fieldI);
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_LIST, this->fieldJ.size());
  for (auto _iter_rk_rv_r = this->fieldJ.begin(); _iter_rk_rv_r != this->fieldJ.end(); ++_iter_rk_rv_r) {
    xfer += prot_->serializedSizeString(_iter_rk_rv_r->first);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _iter_rk_rv_r->second.size());
    for (auto _iter_r = _iter_rk_rv_r->second.begin(); _iter_r != _iter_rk_rv_r->second.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->fieldK.size());
  for (auto _iter_r_r_r_r = this->fieldK.begin(); _iter_r_r_r_r != this->fieldK.end(); ++_iter_r_r_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r_r).size());
    for (auto _iter_r_r_r = (*_iter_r_r_r_r).begin(); _iter_r_r_r != (*_iter_r_r_r_r).end(); ++_iter_r_r_r) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r).size());
      for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
        xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
        for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
          xfer += prot_->serializedSizeI32((*_iter_r));
        }
        xfer += prot_->serializedSizeListEnd();
      }
      xfer += prot_->serializedSizeListEnd();
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_SET, 12);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, this->fieldL.size());
  for (auto _iter_r_r_r = this->fieldL.begin(); _iter_r_r_r != this->fieldL.end(); ++_iter_r_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, (*_iter_r_r_r).size());
    for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeBool((*_iter_r));
      }
      xfer += prot_->serializedSizeSetEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_MAP, 13);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_MAP, this->fieldM.size());
  for (auto _iter_rk_r_r_rv_rk_r_r_rv = this->fieldM.begin(); _iter_rk_r_r_rv_rk_r_r_rv != this->fieldM.end(); ++_iter_rk_r_r_rv_rk_r_r_rv) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_LIST, _iter_rk_r_r_rv_rk_r_r_rv->first.size());
    for (auto _iter_r_r = _iter_rk_r_r_rv_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv_rk_r_r_rv->first.end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeI32((*_iter_r));
      }
      xfer += prot_->serializedSizeListEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_STRING, _iter_rk_r_r_rv_rk_r_r_rv->second.size());
    for (auto _iter_rk_r_r_rv = _iter_rk_r_r_rv_rk_r_r_rv->second.begin(); _iter_rk_r_r_rv != _iter_rk_r_r_rv_rk_r_r_rv->second.end(); ++_iter_rk_r_r_rv) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, _iter_rk_r_r_rv->first.size());
      for (auto _iter_r_r = _iter_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv->first.end(); ++_iter_r_r) {
        xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
        for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
          xfer += prot_->serializedSizeString((*_iter_r));
        }
        xfer += prot_->serializedSizeSetEnd();
      }
      xfer += prot_->serializedSizeListEnd();
      xfer += prot_->serializedSizeString(_iter_rk_r_r_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->fieldN.size());
  for (auto _iter_r = this->fieldN.begin(); _iter_r != this->fieldN.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r).value);
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_LIST, 15);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->fieldO.size());
  for (auto _iter_r = this->fieldO.begin(); _iter_r != this->fieldO.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r).value);
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_LIST, 16);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->fieldP.size());
  for (auto _iter_r = this->fieldP.begin(); _iter_r != this->fieldP.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r).__value());
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t containerStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("containerStruct");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_MAP, 2);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, this->fieldB.size());
  for (auto _iter_rk_rv = this->fieldB.begin(); _iter_rk_rv != this->fieldB.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeBool(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_SET, 3);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, this->fieldC.size());
  for (auto _iter_r = this->fieldC.begin(); _iter_r != this->fieldC.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_LIST, 6);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->fieldF.size());
  for (auto _iter_r_r_r = this->fieldF.begin(); _iter_r_r_r != this->fieldF.end(); ++_iter_r_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r).size());
    for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeI32((*_iter_r));
      }
      xfer += prot_->serializedSizeListEnd();
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, this->fieldG.size());
  for (auto _iter_rk_rv_rk_rv_rk_rv = this->fieldG.begin(); _iter_rk_rv_rk_rv_rk_rv != this->fieldG.end(); ++_iter_rk_rv_rk_rv_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv_rk_rv_rk_rv->first);
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, _iter_rk_rv_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv_rk_rv = _iter_rk_rv_rk_rv_rk_rv->second.begin(); _iter_rk_rv_rk_rv != _iter_rk_rv_rk_rv_rk_rv->second.end(); ++_iter_rk_rv_rk_rv) {
      xfer += prot_->serializedSizeString(_iter_rk_rv_rk_rv->first);
      xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, _iter_rk_rv_rk_rv->second.size());
      for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
        xfer += prot_->serializedSizeString(_iter_rk_rv->first);
        xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
      }
      xfer += prot_->serializedSizeMapEnd();
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_LIST, 8);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, this->fieldH.size());
  for (auto _iter_r_r = this->fieldH.begin(); _iter_r_r != this->fieldH.end(); ++_iter_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_BOOL, 9);
  xfer += prot_->serializedSizeBool(this->fieldI);
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_LIST, this->fieldJ.size());
  for (auto _iter_rk_rv_r = this->fieldJ.begin(); _iter_rk_rv_r != this->fieldJ.end(); ++_iter_rk_rv_r) {
    xfer += prot_->serializedSizeString(_iter_rk_rv_r->first);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _iter_rk_rv_r->second.size());
    for (auto _iter_r = _iter_rk_rv_r->second.begin(); _iter_r != _iter_rk_rv_r->second.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, this->fieldK.size());
  for (auto _iter_r_r_r_r = this->fieldK.begin(); _iter_r_r_r_r != this->fieldK.end(); ++_iter_r_r_r_r) {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r_r).size());
    for (auto _iter_r_r_r = (*_iter_r_r_r_r).begin(); _iter_r_r_r != (*_iter_r_r_r_r).end(); ++_iter_r_r_r) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r).size());
      for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
        xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
        for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
          xfer += prot_->serializedSizeI32((*_iter_r));
        }
        xfer += prot_->serializedSizeListEnd();
      }
      xfer += prot_->serializedSizeListEnd();
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_SET, 12);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, this->fieldL.size());
  for (auto _iter_r_r_r = this->fieldL.begin(); _iter_r_r_r != this->fieldL.end(); ++_iter_r_r_r) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_SET, (*_iter_r_r_r).size());
    for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeBool((*_iter_r));
      }
      xfer += prot_->serializedSizeSetEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_MAP, 13);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_MAP, this->fieldM.size());
  for (auto _iter_rk_r_r_rv_rk_r_r_rv = this->fieldM.begin(); _iter_rk_r_r_rv_rk_r_r_rv != this->fieldM.end(); ++_iter_rk_r_r_rv_rk_r_r_rv) {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_LIST, _iter_rk_r_r_rv_rk_r_r_rv->first.size());
    for (auto _iter_r_r = _iter_rk_r_r_rv_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv_rk_r_r_rv->first.end(); ++_iter_r_r) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->serializedSizeI32((*_iter_r));
      }
      xfer += prot_->serializedSizeListEnd();
    }
    xfer += prot_->serializedSizeSetEnd();
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_STRING, _iter_rk_r_r_rv_rk_r_r_rv->second.size());
    for (auto _iter_rk_r_r_rv = _iter_rk_r_r_rv_rk_r_r_rv->second.begin(); _iter_rk_r_r_rv != _iter_rk_r_r_rv_rk_r_r_rv->second.end(); ++_iter_rk_r_r_rv) {
      xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_SET, _iter_rk_r_r_rv->first.size());
      for (auto _iter_r_r = _iter_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv->first.end(); ++_iter_r_r) {
        xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
        for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
          xfer += prot_->serializedSizeString((*_iter_r));
        }
        xfer += prot_->serializedSizeSetEnd();
      }
      xfer += prot_->serializedSizeListEnd();
      xfer += prot_->serializedSizeString(_iter_rk_r_r_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I64, this->fieldN.size());
  for (auto _iter_r = this->fieldN.begin(); _iter_r != this->fieldN.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI64((*_iter_r).value);
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_LIST, 15);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_DOUBLE, this->fieldO.size());
  for (auto _iter_r = this->fieldO.begin(); _iter_r != this->fieldO.end(); ++_iter_r) {
    xfer += prot_->serializedSizeDouble((*_iter_r).value);
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_LIST, 16);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, this->fieldP.size());
  for (auto _iter_r = this->fieldP.begin(); _iter_r != this->fieldP.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r).__value());
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t containerStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("containerStruct");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_MAP, 2);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_BOOL, this->fieldB.size());
  for (auto _iter_rk_rv = this->fieldB.begin(); _iter_rk_rv != this->fieldB.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += prot_->writeBool(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_SET, 3);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, this->fieldC.size());
  for (auto _iter_r = this->fieldC.begin(); _iter_r != this->fieldC.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_LIST, 6);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, this->fieldF.size());
  for (auto _iter_r_r_r = this->fieldF.begin(); _iter_r_r_r != this->fieldF.end(); ++_iter_r_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r).size());
    for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
      xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->writeI32((*_iter_r));
      }
      xfer += prot_->writeListEnd();
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_MAP, 7);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, this->fieldG.size());
  for (auto _iter_rk_rv_rk_rv_rk_rv = this->fieldG.begin(); _iter_rk_rv_rk_rv_rk_rv != this->fieldG.end(); ++_iter_rk_rv_rk_rv_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv_rk_rv_rk_rv->first);
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_MAP, _iter_rk_rv_rk_rv_rk_rv->second.size());
    for (auto _iter_rk_rv_rk_rv = _iter_rk_rv_rk_rv_rk_rv->second.begin(); _iter_rk_rv_rk_rv != _iter_rk_rv_rk_rv_rk_rv->second.end(); ++_iter_rk_rv_rk_rv) {
      xfer += prot_->writeString(_iter_rk_rv_rk_rv->first);
      xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, _iter_rk_rv_rk_rv->second.size());
      for (auto _iter_rk_rv = _iter_rk_rv_rk_rv->second.begin(); _iter_rk_rv != _iter_rk_rv_rk_rv->second.end(); ++_iter_rk_rv) {
        xfer += prot_->writeString(_iter_rk_rv->first);
        xfer += prot_->writeI32(_iter_rk_rv->second);
      }
      xfer += prot_->writeMapEnd();
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldH", apache::thrift::protocol::T_LIST, 8);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_SET, this->fieldH.size());
  for (auto _iter_r_r = this->fieldH.begin(); _iter_r_r != this->fieldH.end(); ++_iter_r_r) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
    for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldI", apache::thrift::protocol::T_BOOL, 9);
  xfer += prot_->writeBool(this->fieldI);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldJ", apache::thrift::protocol::T_MAP, 10);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_LIST, this->fieldJ.size());
  for (auto _iter_rk_rv_r = this->fieldJ.begin(); _iter_rk_rv_r != this->fieldJ.end(); ++_iter_rk_rv_r) {
    xfer += prot_->writeString(_iter_rk_rv_r->first);
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _iter_rk_rv_r->second.size());
    for (auto _iter_r = _iter_rk_rv_r->second.begin(); _iter_r != _iter_rk_rv_r->second.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, this->fieldK.size());
  for (auto _iter_r_r_r_r = this->fieldK.begin(); _iter_r_r_r_r != this->fieldK.end(); ++_iter_r_r_r_r) {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r_r).size());
    for (auto _iter_r_r_r = (*_iter_r_r_r_r).begin(); _iter_r_r_r != (*_iter_r_r_r_r).end(); ++_iter_r_r_r) {
      xfer += prot_->writeListBegin(apache::thrift::protocol::T_LIST, (*_iter_r_r_r).size());
      for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
        xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
        for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
          xfer += prot_->writeI32((*_iter_r));
        }
        xfer += prot_->writeListEnd();
      }
      xfer += prot_->writeListEnd();
    }
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldL", apache::thrift::protocol::T_SET, 12);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_SET, this->fieldL.size());
  for (auto _iter_r_r_r = this->fieldL.begin(); _iter_r_r_r != this->fieldL.end(); ++_iter_r_r_r) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_SET, (*_iter_r_r_r).size());
    for (auto _iter_r_r = (*_iter_r_r_r).begin(); _iter_r_r != (*_iter_r_r_r).end(); ++_iter_r_r) {
      xfer += prot_->writeSetBegin(apache::thrift::protocol::T_BOOL, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->writeBool((*_iter_r));
      }
      xfer += prot_->writeSetEnd();
    }
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldM", apache::thrift::protocol::T_MAP, 13);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_SET, apache::thrift::protocol::T_MAP, this->fieldM.size());
  for (auto _iter_rk_r_r_rv_rk_r_r_rv = this->fieldM.begin(); _iter_rk_r_r_rv_rk_r_r_rv != this->fieldM.end(); ++_iter_rk_r_r_rv_rk_r_r_rv) {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_LIST, _iter_rk_r_r_rv_rk_r_r_rv->first.size());
    for (auto _iter_r_r = _iter_rk_r_r_rv_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv_rk_r_r_rv->first.end(); ++_iter_r_r) {
      xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, (*_iter_r_r).size());
      for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
        xfer += prot_->writeI32((*_iter_r));
      }
      xfer += prot_->writeListEnd();
    }
    xfer += prot_->writeSetEnd();
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_LIST, apache::thrift::protocol::T_STRING, _iter_rk_r_r_rv_rk_r_r_rv->second.size());
    for (auto _iter_rk_r_r_rv = _iter_rk_r_r_rv_rk_r_r_rv->second.begin(); _iter_rk_r_r_rv != _iter_rk_r_r_rv_rk_r_r_rv->second.end(); ++_iter_rk_r_r_rv) {
      xfer += prot_->writeListBegin(apache::thrift::protocol::T_SET, _iter_rk_r_r_rv->first.size());
      for (auto _iter_r_r = _iter_rk_r_r_rv->first.begin(); _iter_r_r != _iter_rk_r_r_rv->first.end(); ++_iter_r_r) {
        xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, (*_iter_r_r).size());
        for (auto _iter_r = (*_iter_r_r).begin(); _iter_r != (*_iter_r_r).end(); ++_iter_r) {
          xfer += prot_->writeString((*_iter_r));
        }
        xfer += prot_->writeSetEnd();
      }
      xfer += prot_->writeListEnd();
      xfer += prot_->writeString(_iter_rk_r_r_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldN", apache::thrift::protocol::T_LIST, 14);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I64, this->fieldN.size());
  for (auto _iter_r = this->fieldN.begin(); _iter_r != this->fieldN.end(); ++_iter_r) {
    xfer += prot_->writeI64((*_iter_r).value);
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldO", apache::thrift::protocol::T_LIST, 15);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_DOUBLE, this->fieldO.size());
  for (auto _iter_r = this->fieldO.begin(); _iter_r != this->fieldO.end(); ++_iter_r) {
    xfer += prot_->writeDouble((*_iter_r).value);
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldP", apache::thrift::protocol::T_LIST, 16);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, this->fieldP.size());
  for (auto _iter_r = this->fieldP.begin(); _iter_r != this->fieldP.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r).__value());
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
