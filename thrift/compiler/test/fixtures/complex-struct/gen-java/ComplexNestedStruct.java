/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ComplexNestedStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ComplexNestedStruct");
  private static final TField SET_OF_SET_OF_INT_FIELD_DESC = new TField("setOfSetOfInt", TType.SET, (short)1);
  private static final TField LISTOF_LIST_OF_LIST_OF_LIST_OF_ENUM_FIELD_DESC = new TField("listofListOfListOfListOfEnum", TType.LIST, (short)2);
  private static final TField LIST_OF_LIST_OF_MY_STRUCT_FIELD_DESC = new TField("listOfListOfMyStruct", TType.LIST, (short)3);
  private static final TField SET_OF_LIST_OF_LIST_OF_LONG_FIELD_DESC = new TField("setOfListOfListOfLong", TType.SET, (short)4);
  private static final TField SET_OF_SET_OFSET_OF_LONG_FIELD_DESC = new TField("setOfSetOfsetOfLong", TType.SET, (short)5);
  private static final TField MAP_STRUCT_LIST_OF_LIST_OF_LONG_FIELD_DESC = new TField("mapStructListOfListOfLong", TType.MAP, (short)6);
  private static final TField M_KEY_STRUCT_VAL_INT_FIELD_DESC = new TField("mKeyStructValInt", TType.MAP, (short)7);
  private static final TField LIST_OF_MAP_KEY_INT_VAL_INT_FIELD_DESC = new TField("listOfMapKeyIntValInt", TType.LIST, (short)8);
  private static final TField LIST_OF_MAP_KEY_STR_VAL_LIST_FIELD_DESC = new TField("listOfMapKeyStrValList", TType.LIST, (short)9);
  private static final TField MAP_KEY_SET_VAL_LONG_FIELD_DESC = new TField("mapKeySetValLong", TType.MAP, (short)10);
  private static final TField MAP_KEY_LIST_VAL_LONG_FIELD_DESC = new TField("mapKeyListValLong", TType.MAP, (short)11);
  private static final TField MAP_KEY_MAP_VAL_MAP_FIELD_DESC = new TField("mapKeyMapValMap", TType.MAP, (short)12);
  private static final TField MAP_KEY_SET_VAL_MAP_FIELD_DESC = new TField("mapKeySetValMap", TType.MAP, (short)13);
  private static final TField NESTED_MAPS_FIELD_DESC = new TField("NestedMaps", TType.MAP, (short)14);
  private static final TField MAP_KEY_INT_VAL_LIST_FIELD_DESC = new TField("mapKeyIntValList", TType.MAP, (short)15);
  private static final TField MAP_KEY_INT_VAL_SET_FIELD_DESC = new TField("mapKeyIntValSet", TType.MAP, (short)16);
  private static final TField MAP_KEY_SET_VAL_INT_FIELD_DESC = new TField("mapKeySetValInt", TType.MAP, (short)17);
  private static final TField MAP_KEY_LIST_VAL_SET_FIELD_DESC = new TField("mapKeyListValSet", TType.MAP, (short)18);

  public Set<Set<Integer>> setOfSetOfInt;
  public List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum;
  public List<List<MyStruct>> listOfListOfMyStruct;
  public Set<List<List<Long>>> setOfListOfListOfLong;
  public Set<Set<Set<Long>>> setOfSetOfsetOfLong;
  public Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong;
  public Map<MyStruct,Integer> mKeyStructValInt;
  public List<Map<Integer,Integer>> listOfMapKeyIntValInt;
  public List<Map<String,List<MyStruct>>> listOfMapKeyStrValList;
  public Map<Set<Integer>,Long> mapKeySetValLong;
  public Map<List<String>,Integer> mapKeyListValLong;
  public Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap;
  public Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap;
  public Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps;
  public Map<Integer,List<MyStruct>> mapKeyIntValList;
  public Map<Integer,Set<Boolean>> mapKeyIntValSet;
  public Map<Set<Boolean>,MyEnum> mapKeySetValInt;
  public Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet;
  public static final int SETOFSETOFINT = 1;
  public static final int LISTOFLISTOFLISTOFLISTOFENUM = 2;
  public static final int LISTOFLISTOFMYSTRUCT = 3;
  public static final int SETOFLISTOFLISTOFLONG = 4;
  public static final int SETOFSETOFSETOFLONG = 5;
  public static final int MAPSTRUCTLISTOFLISTOFLONG = 6;
  public static final int MKEYSTRUCTVALINT = 7;
  public static final int LISTOFMAPKEYINTVALINT = 8;
  public static final int LISTOFMAPKEYSTRVALLIST = 9;
  public static final int MAPKEYSETVALLONG = 10;
  public static final int MAPKEYLISTVALLONG = 11;
  public static final int MAPKEYMAPVALMAP = 12;
  public static final int MAPKEYSETVALMAP = 13;
  public static final int NESTEDMAPS = 14;
  public static final int MAPKEYINTVALLIST = 15;
  public static final int MAPKEYINTVALSET = 16;
  public static final int MAPKEYSETVALINT = 17;
  public static final int MAPKEYLISTVALSET = 18;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SETOFSETOFINT, new FieldMetaData("setOfSetOfInt", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LISTOFLISTOFLISTOFLISTOFENUM, new FieldMetaData("listofListOfListOfListOfEnum", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new ListMetaData(TType.LIST, 
                    new ListMetaData(TType.LIST, 
                        new FieldValueMetaData(TType.I32)))))));
    tmpMetaDataMap.put(LISTOFLISTOFMYSTRUCT, new FieldMetaData("listOfListOfMyStruct", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(SETOFLISTOFLISTOFLONG, new FieldMetaData("setOfListOfListOfLong", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new ListMetaData(TType.LIST, 
                new ListMetaData(TType.LIST, 
                    new FieldValueMetaData(TType.I64))))));
    tmpMetaDataMap.put(SETOFSETOFSETOFLONG, new FieldMetaData("setOfSetOfsetOfLong", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new SetMetaData(TType.SET, 
                new SetMetaData(TType.SET, 
                    new FieldValueMetaData(TType.I64))))));
    tmpMetaDataMap.put(MAPSTRUCTLISTOFLISTOFLONG, new FieldMetaData("mapStructListOfListOfLong", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new ListMetaData(TType.LIST, 
                    new StructMetaData(TType.STRUCT, MyStruct.class))))));
    tmpMetaDataMap.put(MKEYSTRUCTVALINT, new FieldMetaData("mKeyStructValInt", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new StructMetaData(TType.STRUCT, MyStruct.class), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(LISTOFMAPKEYINTVALINT, new FieldMetaData("listOfMapKeyIntValInt", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LISTOFMAPKEYSTRVALLIST, new FieldMetaData("listOfMapKeyStrValList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.STRING), 
                new ListMetaData(TType.LIST, 
                    new StructMetaData(TType.STRUCT, MyStruct.class))))));
    tmpMetaDataMap.put(MAPKEYSETVALLONG, new FieldMetaData("mapKeySetValLong", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(MAPKEYLISTVALLONG, new FieldMetaData("mapKeyListValLong", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.STRING)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(MAPKEYMAPVALMAP, new FieldMetaData("mapKeyMapValMap", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.STRING)), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(MAPKEYSETVALMAP, new FieldMetaData("mapKeySetValMap", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new ListMetaData(TType.LIST, 
                    new FieldValueMetaData(TType.I32))), 
            new MapMetaData(TType.MAP, 
                new ListMetaData(TType.LIST, 
                    new SetMetaData(TType.SET, 
                        new FieldValueMetaData(TType.STRING))), 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(NESTEDMAPS, new FieldMetaData("NestedMaps", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new MapMetaData(TType.MAP, 
                    new FieldValueMetaData(TType.I32), 
                    new FieldValueMetaData(TType.STRING)), 
                new FieldValueMetaData(TType.STRING)), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(MAPKEYINTVALLIST, new FieldMetaData("mapKeyIntValList", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(MAPKEYINTVALSET, new FieldMetaData("mapKeyIntValSet", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.BOOL)))));
    tmpMetaDataMap.put(MAPKEYSETVALINT, new FieldMetaData("mapKeySetValInt", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.BOOL)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(MAPKEYLISTVALSET, new FieldMetaData("mapKeyListValSet", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)), 
            new SetMetaData(TType.SET, 
                new MapMetaData(TType.MAP, 
                    new FieldValueMetaData(TType.DOUBLE), 
                    new FieldValueMetaData(TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ComplexNestedStruct.class, metaDataMap);
  }

  public ComplexNestedStruct() {
  }

  public ComplexNestedStruct(
    Set<Set<Integer>> setOfSetOfInt,
    List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum,
    List<List<MyStruct>> listOfListOfMyStruct,
    Set<List<List<Long>>> setOfListOfListOfLong,
    Set<Set<Set<Long>>> setOfSetOfsetOfLong,
    Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong,
    Map<MyStruct,Integer> mKeyStructValInt,
    List<Map<Integer,Integer>> listOfMapKeyIntValInt,
    List<Map<String,List<MyStruct>>> listOfMapKeyStrValList,
    Map<Set<Integer>,Long> mapKeySetValLong,
    Map<List<String>,Integer> mapKeyListValLong,
    Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap,
    Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap,
    Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps,
    Map<Integer,List<MyStruct>> mapKeyIntValList,
    Map<Integer,Set<Boolean>> mapKeyIntValSet,
    Map<Set<Boolean>,MyEnum> mapKeySetValInt,
    Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet)
  {
    this();
    this.setOfSetOfInt = setOfSetOfInt;
    this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
    this.listOfListOfMyStruct = listOfListOfMyStruct;
    this.setOfListOfListOfLong = setOfListOfListOfLong;
    this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
    this.mapStructListOfListOfLong = mapStructListOfListOfLong;
    this.mKeyStructValInt = mKeyStructValInt;
    this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
    this.listOfMapKeyStrValList = listOfMapKeyStrValList;
    this.mapKeySetValLong = mapKeySetValLong;
    this.mapKeyListValLong = mapKeyListValLong;
    this.mapKeyMapValMap = mapKeyMapValMap;
    this.mapKeySetValMap = mapKeySetValMap;
    this.NestedMaps = NestedMaps;
    this.mapKeyIntValList = mapKeyIntValList;
    this.mapKeyIntValSet = mapKeyIntValSet;
    this.mapKeySetValInt = mapKeySetValInt;
    this.mapKeyListValSet = mapKeyListValSet;
  }

  public static class Builder {
    private Set<Set<Integer>> setOfSetOfInt;
    private List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum;
    private List<List<MyStruct>> listOfListOfMyStruct;
    private Set<List<List<Long>>> setOfListOfListOfLong;
    private Set<Set<Set<Long>>> setOfSetOfsetOfLong;
    private Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong;
    private Map<MyStruct,Integer> mKeyStructValInt;
    private List<Map<Integer,Integer>> listOfMapKeyIntValInt;
    private List<Map<String,List<MyStruct>>> listOfMapKeyStrValList;
    private Map<Set<Integer>,Long> mapKeySetValLong;
    private Map<List<String>,Integer> mapKeyListValLong;
    private Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap;
    private Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap;
    private Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps;
    private Map<Integer,List<MyStruct>> mapKeyIntValList;
    private Map<Integer,Set<Boolean>> mapKeyIntValSet;
    private Map<Set<Boolean>,MyEnum> mapKeySetValInt;
    private Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet;

    public Builder() {
    }

    public Builder setSetOfSetOfInt(final Set<Set<Integer>> setOfSetOfInt) {
      this.setOfSetOfInt = setOfSetOfInt;
      return this;
    }

    public Builder setListofListOfListOfListOfEnum(final List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum) {
      this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
      return this;
    }

    public Builder setListOfListOfMyStruct(final List<List<MyStruct>> listOfListOfMyStruct) {
      this.listOfListOfMyStruct = listOfListOfMyStruct;
      return this;
    }

    public Builder setSetOfListOfListOfLong(final Set<List<List<Long>>> setOfListOfListOfLong) {
      this.setOfListOfListOfLong = setOfListOfListOfLong;
      return this;
    }

    public Builder setSetOfSetOfsetOfLong(final Set<Set<Set<Long>>> setOfSetOfsetOfLong) {
      this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
      return this;
    }

    public Builder setMapStructListOfListOfLong(final Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong) {
      this.mapStructListOfListOfLong = mapStructListOfListOfLong;
      return this;
    }

    public Builder setMKeyStructValInt(final Map<MyStruct,Integer> mKeyStructValInt) {
      this.mKeyStructValInt = mKeyStructValInt;
      return this;
    }

    public Builder setListOfMapKeyIntValInt(final List<Map<Integer,Integer>> listOfMapKeyIntValInt) {
      this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
      return this;
    }

    public Builder setListOfMapKeyStrValList(final List<Map<String,List<MyStruct>>> listOfMapKeyStrValList) {
      this.listOfMapKeyStrValList = listOfMapKeyStrValList;
      return this;
    }

    public Builder setMapKeySetValLong(final Map<Set<Integer>,Long> mapKeySetValLong) {
      this.mapKeySetValLong = mapKeySetValLong;
      return this;
    }

    public Builder setMapKeyListValLong(final Map<List<String>,Integer> mapKeyListValLong) {
      this.mapKeyListValLong = mapKeyListValLong;
      return this;
    }

    public Builder setMapKeyMapValMap(final Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap) {
      this.mapKeyMapValMap = mapKeyMapValMap;
      return this;
    }

    public Builder setMapKeySetValMap(final Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap) {
      this.mapKeySetValMap = mapKeySetValMap;
      return this;
    }

    public Builder setNestedMaps(final Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps) {
      this.NestedMaps = NestedMaps;
      return this;
    }

    public Builder setMapKeyIntValList(final Map<Integer,List<MyStruct>> mapKeyIntValList) {
      this.mapKeyIntValList = mapKeyIntValList;
      return this;
    }

    public Builder setMapKeyIntValSet(final Map<Integer,Set<Boolean>> mapKeyIntValSet) {
      this.mapKeyIntValSet = mapKeyIntValSet;
      return this;
    }

    public Builder setMapKeySetValInt(final Map<Set<Boolean>,MyEnum> mapKeySetValInt) {
      this.mapKeySetValInt = mapKeySetValInt;
      return this;
    }

    public Builder setMapKeyListValSet(final Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet) {
      this.mapKeyListValSet = mapKeyListValSet;
      return this;
    }

    public ComplexNestedStruct build() {
      ComplexNestedStruct result = new ComplexNestedStruct();
      result.setSetOfSetOfInt(this.setOfSetOfInt);
      result.setListofListOfListOfListOfEnum(this.listofListOfListOfListOfEnum);
      result.setListOfListOfMyStruct(this.listOfListOfMyStruct);
      result.setSetOfListOfListOfLong(this.setOfListOfListOfLong);
      result.setSetOfSetOfsetOfLong(this.setOfSetOfsetOfLong);
      result.setMapStructListOfListOfLong(this.mapStructListOfListOfLong);
      result.setMKeyStructValInt(this.mKeyStructValInt);
      result.setListOfMapKeyIntValInt(this.listOfMapKeyIntValInt);
      result.setListOfMapKeyStrValList(this.listOfMapKeyStrValList);
      result.setMapKeySetValLong(this.mapKeySetValLong);
      result.setMapKeyListValLong(this.mapKeyListValLong);
      result.setMapKeyMapValMap(this.mapKeyMapValMap);
      result.setMapKeySetValMap(this.mapKeySetValMap);
      result.setNestedMaps(this.NestedMaps);
      result.setMapKeyIntValList(this.mapKeyIntValList);
      result.setMapKeyIntValSet(this.mapKeyIntValSet);
      result.setMapKeySetValInt(this.mapKeySetValInt);
      result.setMapKeyListValSet(this.mapKeyListValSet);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComplexNestedStruct(ComplexNestedStruct other) {
    if (other.isSetSetOfSetOfInt()) {
      this.setOfSetOfInt = TBaseHelper.deepCopy(other.setOfSetOfInt);
    }
    if (other.isSetListofListOfListOfListOfEnum()) {
      this.listofListOfListOfListOfEnum = TBaseHelper.deepCopy(other.listofListOfListOfListOfEnum);
    }
    if (other.isSetListOfListOfMyStruct()) {
      this.listOfListOfMyStruct = TBaseHelper.deepCopy(other.listOfListOfMyStruct);
    }
    if (other.isSetSetOfListOfListOfLong()) {
      this.setOfListOfListOfLong = TBaseHelper.deepCopy(other.setOfListOfListOfLong);
    }
    if (other.isSetSetOfSetOfsetOfLong()) {
      this.setOfSetOfsetOfLong = TBaseHelper.deepCopy(other.setOfSetOfsetOfLong);
    }
    if (other.isSetMapStructListOfListOfLong()) {
      this.mapStructListOfListOfLong = TBaseHelper.deepCopy(other.mapStructListOfListOfLong);
    }
    if (other.isSetMKeyStructValInt()) {
      this.mKeyStructValInt = TBaseHelper.deepCopy(other.mKeyStructValInt);
    }
    if (other.isSetListOfMapKeyIntValInt()) {
      this.listOfMapKeyIntValInt = TBaseHelper.deepCopy(other.listOfMapKeyIntValInt);
    }
    if (other.isSetListOfMapKeyStrValList()) {
      this.listOfMapKeyStrValList = TBaseHelper.deepCopy(other.listOfMapKeyStrValList);
    }
    if (other.isSetMapKeySetValLong()) {
      this.mapKeySetValLong = TBaseHelper.deepCopy(other.mapKeySetValLong);
    }
    if (other.isSetMapKeyListValLong()) {
      this.mapKeyListValLong = TBaseHelper.deepCopy(other.mapKeyListValLong);
    }
    if (other.isSetMapKeyMapValMap()) {
      this.mapKeyMapValMap = TBaseHelper.deepCopy(other.mapKeyMapValMap);
    }
    if (other.isSetMapKeySetValMap()) {
      this.mapKeySetValMap = TBaseHelper.deepCopy(other.mapKeySetValMap);
    }
    if (other.isSetNestedMaps()) {
      this.NestedMaps = TBaseHelper.deepCopy(other.NestedMaps);
    }
    if (other.isSetMapKeyIntValList()) {
      this.mapKeyIntValList = TBaseHelper.deepCopy(other.mapKeyIntValList);
    }
    if (other.isSetMapKeyIntValSet()) {
      this.mapKeyIntValSet = TBaseHelper.deepCopy(other.mapKeyIntValSet);
    }
    if (other.isSetMapKeySetValInt()) {
      this.mapKeySetValInt = TBaseHelper.deepCopy(other.mapKeySetValInt);
    }
    if (other.isSetMapKeyListValSet()) {
      this.mapKeyListValSet = TBaseHelper.deepCopy(other.mapKeyListValSet);
    }
  }

  public ComplexNestedStruct deepCopy() {
    return new ComplexNestedStruct(this);
  }

  public Set<Set<Integer>> getSetOfSetOfInt() {
    return this.setOfSetOfInt;
  }

  public ComplexNestedStruct setSetOfSetOfInt(Set<Set<Integer>> setOfSetOfInt) {
    this.setOfSetOfInt = setOfSetOfInt;
    return this;
  }

  public void unsetSetOfSetOfInt() {
    this.setOfSetOfInt = null;
  }

  // Returns true if field setOfSetOfInt is set (has been assigned a value) and false otherwise
  public boolean isSetSetOfSetOfInt() {
    return this.setOfSetOfInt != null;
  }

  public void setSetOfSetOfIntIsSet(boolean __value) {
    if (!__value) {
      this.setOfSetOfInt = null;
    }
  }

  public List<List<List<List<MyEnum>>>> getListofListOfListOfListOfEnum() {
    return this.listofListOfListOfListOfEnum;
  }

  public ComplexNestedStruct setListofListOfListOfListOfEnum(List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum) {
    this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
    return this;
  }

  public void unsetListofListOfListOfListOfEnum() {
    this.listofListOfListOfListOfEnum = null;
  }

  // Returns true if field listofListOfListOfListOfEnum is set (has been assigned a value) and false otherwise
  public boolean isSetListofListOfListOfListOfEnum() {
    return this.listofListOfListOfListOfEnum != null;
  }

  public void setListofListOfListOfListOfEnumIsSet(boolean __value) {
    if (!__value) {
      this.listofListOfListOfListOfEnum = null;
    }
  }

  public List<List<MyStruct>> getListOfListOfMyStruct() {
    return this.listOfListOfMyStruct;
  }

  public ComplexNestedStruct setListOfListOfMyStruct(List<List<MyStruct>> listOfListOfMyStruct) {
    this.listOfListOfMyStruct = listOfListOfMyStruct;
    return this;
  }

  public void unsetListOfListOfMyStruct() {
    this.listOfListOfMyStruct = null;
  }

  // Returns true if field listOfListOfMyStruct is set (has been assigned a value) and false otherwise
  public boolean isSetListOfListOfMyStruct() {
    return this.listOfListOfMyStruct != null;
  }

  public void setListOfListOfMyStructIsSet(boolean __value) {
    if (!__value) {
      this.listOfListOfMyStruct = null;
    }
  }

  public Set<List<List<Long>>> getSetOfListOfListOfLong() {
    return this.setOfListOfListOfLong;
  }

  public ComplexNestedStruct setSetOfListOfListOfLong(Set<List<List<Long>>> setOfListOfListOfLong) {
    this.setOfListOfListOfLong = setOfListOfListOfLong;
    return this;
  }

  public void unsetSetOfListOfListOfLong() {
    this.setOfListOfListOfLong = null;
  }

  // Returns true if field setOfListOfListOfLong is set (has been assigned a value) and false otherwise
  public boolean isSetSetOfListOfListOfLong() {
    return this.setOfListOfListOfLong != null;
  }

  public void setSetOfListOfListOfLongIsSet(boolean __value) {
    if (!__value) {
      this.setOfListOfListOfLong = null;
    }
  }

  public Set<Set<Set<Long>>> getSetOfSetOfsetOfLong() {
    return this.setOfSetOfsetOfLong;
  }

  public ComplexNestedStruct setSetOfSetOfsetOfLong(Set<Set<Set<Long>>> setOfSetOfsetOfLong) {
    this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
    return this;
  }

  public void unsetSetOfSetOfsetOfLong() {
    this.setOfSetOfsetOfLong = null;
  }

  // Returns true if field setOfSetOfsetOfLong is set (has been assigned a value) and false otherwise
  public boolean isSetSetOfSetOfsetOfLong() {
    return this.setOfSetOfsetOfLong != null;
  }

  public void setSetOfSetOfsetOfLongIsSet(boolean __value) {
    if (!__value) {
      this.setOfSetOfsetOfLong = null;
    }
  }

  public Map<Integer,List<List<MyStruct>>> getMapStructListOfListOfLong() {
    return this.mapStructListOfListOfLong;
  }

  public ComplexNestedStruct setMapStructListOfListOfLong(Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong) {
    this.mapStructListOfListOfLong = mapStructListOfListOfLong;
    return this;
  }

  public void unsetMapStructListOfListOfLong() {
    this.mapStructListOfListOfLong = null;
  }

  // Returns true if field mapStructListOfListOfLong is set (has been assigned a value) and false otherwise
  public boolean isSetMapStructListOfListOfLong() {
    return this.mapStructListOfListOfLong != null;
  }

  public void setMapStructListOfListOfLongIsSet(boolean __value) {
    if (!__value) {
      this.mapStructListOfListOfLong = null;
    }
  }

  public Map<MyStruct,Integer> getMKeyStructValInt() {
    return this.mKeyStructValInt;
  }

  public ComplexNestedStruct setMKeyStructValInt(Map<MyStruct,Integer> mKeyStructValInt) {
    this.mKeyStructValInt = mKeyStructValInt;
    return this;
  }

  public void unsetMKeyStructValInt() {
    this.mKeyStructValInt = null;
  }

  // Returns true if field mKeyStructValInt is set (has been assigned a value) and false otherwise
  public boolean isSetMKeyStructValInt() {
    return this.mKeyStructValInt != null;
  }

  public void setMKeyStructValIntIsSet(boolean __value) {
    if (!__value) {
      this.mKeyStructValInt = null;
    }
  }

  public List<Map<Integer,Integer>> getListOfMapKeyIntValInt() {
    return this.listOfMapKeyIntValInt;
  }

  public ComplexNestedStruct setListOfMapKeyIntValInt(List<Map<Integer,Integer>> listOfMapKeyIntValInt) {
    this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
    return this;
  }

  public void unsetListOfMapKeyIntValInt() {
    this.listOfMapKeyIntValInt = null;
  }

  // Returns true if field listOfMapKeyIntValInt is set (has been assigned a value) and false otherwise
  public boolean isSetListOfMapKeyIntValInt() {
    return this.listOfMapKeyIntValInt != null;
  }

  public void setListOfMapKeyIntValIntIsSet(boolean __value) {
    if (!__value) {
      this.listOfMapKeyIntValInt = null;
    }
  }

  public List<Map<String,List<MyStruct>>> getListOfMapKeyStrValList() {
    return this.listOfMapKeyStrValList;
  }

  public ComplexNestedStruct setListOfMapKeyStrValList(List<Map<String,List<MyStruct>>> listOfMapKeyStrValList) {
    this.listOfMapKeyStrValList = listOfMapKeyStrValList;
    return this;
  }

  public void unsetListOfMapKeyStrValList() {
    this.listOfMapKeyStrValList = null;
  }

  // Returns true if field listOfMapKeyStrValList is set (has been assigned a value) and false otherwise
  public boolean isSetListOfMapKeyStrValList() {
    return this.listOfMapKeyStrValList != null;
  }

  public void setListOfMapKeyStrValListIsSet(boolean __value) {
    if (!__value) {
      this.listOfMapKeyStrValList = null;
    }
  }

  public Map<Set<Integer>,Long> getMapKeySetValLong() {
    return this.mapKeySetValLong;
  }

  public ComplexNestedStruct setMapKeySetValLong(Map<Set<Integer>,Long> mapKeySetValLong) {
    this.mapKeySetValLong = mapKeySetValLong;
    return this;
  }

  public void unsetMapKeySetValLong() {
    this.mapKeySetValLong = null;
  }

  // Returns true if field mapKeySetValLong is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeySetValLong() {
    return this.mapKeySetValLong != null;
  }

  public void setMapKeySetValLongIsSet(boolean __value) {
    if (!__value) {
      this.mapKeySetValLong = null;
    }
  }

  public Map<List<String>,Integer> getMapKeyListValLong() {
    return this.mapKeyListValLong;
  }

  public ComplexNestedStruct setMapKeyListValLong(Map<List<String>,Integer> mapKeyListValLong) {
    this.mapKeyListValLong = mapKeyListValLong;
    return this;
  }

  public void unsetMapKeyListValLong() {
    this.mapKeyListValLong = null;
  }

  // Returns true if field mapKeyListValLong is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyListValLong() {
    return this.mapKeyListValLong != null;
  }

  public void setMapKeyListValLongIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyListValLong = null;
    }
  }

  public Map<Map<Integer,String>,Map<Integer,String>> getMapKeyMapValMap() {
    return this.mapKeyMapValMap;
  }

  public ComplexNestedStruct setMapKeyMapValMap(Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap) {
    this.mapKeyMapValMap = mapKeyMapValMap;
    return this;
  }

  public void unsetMapKeyMapValMap() {
    this.mapKeyMapValMap = null;
  }

  // Returns true if field mapKeyMapValMap is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyMapValMap() {
    return this.mapKeyMapValMap != null;
  }

  public void setMapKeyMapValMapIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyMapValMap = null;
    }
  }

  public Map<Set<List<Integer>>,Map<List<Set<String>>,String>> getMapKeySetValMap() {
    return this.mapKeySetValMap;
  }

  public ComplexNestedStruct setMapKeySetValMap(Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap) {
    this.mapKeySetValMap = mapKeySetValMap;
    return this;
  }

  public void unsetMapKeySetValMap() {
    this.mapKeySetValMap = null;
  }

  // Returns true if field mapKeySetValMap is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeySetValMap() {
    return this.mapKeySetValMap != null;
  }

  public void setMapKeySetValMapIsSet(boolean __value) {
    if (!__value) {
      this.mapKeySetValMap = null;
    }
  }

  public Map<Map<Map<Integer,String>,String>,Map<Integer,String>> getNestedMaps() {
    return this.NestedMaps;
  }

  public ComplexNestedStruct setNestedMaps(Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps) {
    this.NestedMaps = NestedMaps;
    return this;
  }

  public void unsetNestedMaps() {
    this.NestedMaps = null;
  }

  // Returns true if field NestedMaps is set (has been assigned a value) and false otherwise
  public boolean isSetNestedMaps() {
    return this.NestedMaps != null;
  }

  public void setNestedMapsIsSet(boolean __value) {
    if (!__value) {
      this.NestedMaps = null;
    }
  }

  public Map<Integer,List<MyStruct>> getMapKeyIntValList() {
    return this.mapKeyIntValList;
  }

  public ComplexNestedStruct setMapKeyIntValList(Map<Integer,List<MyStruct>> mapKeyIntValList) {
    this.mapKeyIntValList = mapKeyIntValList;
    return this;
  }

  public void unsetMapKeyIntValList() {
    this.mapKeyIntValList = null;
  }

  // Returns true if field mapKeyIntValList is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyIntValList() {
    return this.mapKeyIntValList != null;
  }

  public void setMapKeyIntValListIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyIntValList = null;
    }
  }

  public Map<Integer,Set<Boolean>> getMapKeyIntValSet() {
    return this.mapKeyIntValSet;
  }

  public ComplexNestedStruct setMapKeyIntValSet(Map<Integer,Set<Boolean>> mapKeyIntValSet) {
    this.mapKeyIntValSet = mapKeyIntValSet;
    return this;
  }

  public void unsetMapKeyIntValSet() {
    this.mapKeyIntValSet = null;
  }

  // Returns true if field mapKeyIntValSet is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyIntValSet() {
    return this.mapKeyIntValSet != null;
  }

  public void setMapKeyIntValSetIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyIntValSet = null;
    }
  }

  public Map<Set<Boolean>,MyEnum> getMapKeySetValInt() {
    return this.mapKeySetValInt;
  }

  public ComplexNestedStruct setMapKeySetValInt(Map<Set<Boolean>,MyEnum> mapKeySetValInt) {
    this.mapKeySetValInt = mapKeySetValInt;
    return this;
  }

  public void unsetMapKeySetValInt() {
    this.mapKeySetValInt = null;
  }

  // Returns true if field mapKeySetValInt is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeySetValInt() {
    return this.mapKeySetValInt != null;
  }

  public void setMapKeySetValIntIsSet(boolean __value) {
    if (!__value) {
      this.mapKeySetValInt = null;
    }
  }

  public Map<List<Integer>,Set<Map<Double,String>>> getMapKeyListValSet() {
    return this.mapKeyListValSet;
  }

  public ComplexNestedStruct setMapKeyListValSet(Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet) {
    this.mapKeyListValSet = mapKeyListValSet;
    return this;
  }

  public void unsetMapKeyListValSet() {
    this.mapKeyListValSet = null;
  }

  // Returns true if field mapKeyListValSet is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyListValSet() {
    return this.mapKeyListValSet != null;
  }

  public void setMapKeyListValSetIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyListValSet = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SETOFSETOFINT:
      if (__value == null) {
        unsetSetOfSetOfInt();
      } else {
        setSetOfSetOfInt((Set<Set<Integer>>)__value);
      }
      break;

    case LISTOFLISTOFLISTOFLISTOFENUM:
      if (__value == null) {
        unsetListofListOfListOfListOfEnum();
      } else {
        setListofListOfListOfListOfEnum((List<List<List<List<MyEnum>>>>)__value);
      }
      break;

    case LISTOFLISTOFMYSTRUCT:
      if (__value == null) {
        unsetListOfListOfMyStruct();
      } else {
        setListOfListOfMyStruct((List<List<MyStruct>>)__value);
      }
      break;

    case SETOFLISTOFLISTOFLONG:
      if (__value == null) {
        unsetSetOfListOfListOfLong();
      } else {
        setSetOfListOfListOfLong((Set<List<List<Long>>>)__value);
      }
      break;

    case SETOFSETOFSETOFLONG:
      if (__value == null) {
        unsetSetOfSetOfsetOfLong();
      } else {
        setSetOfSetOfsetOfLong((Set<Set<Set<Long>>>)__value);
      }
      break;

    case MAPSTRUCTLISTOFLISTOFLONG:
      if (__value == null) {
        unsetMapStructListOfListOfLong();
      } else {
        setMapStructListOfListOfLong((Map<Integer,List<List<MyStruct>>>)__value);
      }
      break;

    case MKEYSTRUCTVALINT:
      if (__value == null) {
        unsetMKeyStructValInt();
      } else {
        setMKeyStructValInt((Map<MyStruct,Integer>)__value);
      }
      break;

    case LISTOFMAPKEYINTVALINT:
      if (__value == null) {
        unsetListOfMapKeyIntValInt();
      } else {
        setListOfMapKeyIntValInt((List<Map<Integer,Integer>>)__value);
      }
      break;

    case LISTOFMAPKEYSTRVALLIST:
      if (__value == null) {
        unsetListOfMapKeyStrValList();
      } else {
        setListOfMapKeyStrValList((List<Map<String,List<MyStruct>>>)__value);
      }
      break;

    case MAPKEYSETVALLONG:
      if (__value == null) {
        unsetMapKeySetValLong();
      } else {
        setMapKeySetValLong((Map<Set<Integer>,Long>)__value);
      }
      break;

    case MAPKEYLISTVALLONG:
      if (__value == null) {
        unsetMapKeyListValLong();
      } else {
        setMapKeyListValLong((Map<List<String>,Integer>)__value);
      }
      break;

    case MAPKEYMAPVALMAP:
      if (__value == null) {
        unsetMapKeyMapValMap();
      } else {
        setMapKeyMapValMap((Map<Map<Integer,String>,Map<Integer,String>>)__value);
      }
      break;

    case MAPKEYSETVALMAP:
      if (__value == null) {
        unsetMapKeySetValMap();
      } else {
        setMapKeySetValMap((Map<Set<List<Integer>>,Map<List<Set<String>>,String>>)__value);
      }
      break;

    case NESTEDMAPS:
      if (__value == null) {
        unsetNestedMaps();
      } else {
        setNestedMaps((Map<Map<Map<Integer,String>,String>,Map<Integer,String>>)__value);
      }
      break;

    case MAPKEYINTVALLIST:
      if (__value == null) {
        unsetMapKeyIntValList();
      } else {
        setMapKeyIntValList((Map<Integer,List<MyStruct>>)__value);
      }
      break;

    case MAPKEYINTVALSET:
      if (__value == null) {
        unsetMapKeyIntValSet();
      } else {
        setMapKeyIntValSet((Map<Integer,Set<Boolean>>)__value);
      }
      break;

    case MAPKEYSETVALINT:
      if (__value == null) {
        unsetMapKeySetValInt();
      } else {
        setMapKeySetValInt((Map<Set<Boolean>,MyEnum>)__value);
      }
      break;

    case MAPKEYLISTVALSET:
      if (__value == null) {
        unsetMapKeyListValSet();
      } else {
        setMapKeyListValSet((Map<List<Integer>,Set<Map<Double,String>>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SETOFSETOFINT:
      return getSetOfSetOfInt();

    case LISTOFLISTOFLISTOFLISTOFENUM:
      return getListofListOfListOfListOfEnum();

    case LISTOFLISTOFMYSTRUCT:
      return getListOfListOfMyStruct();

    case SETOFLISTOFLISTOFLONG:
      return getSetOfListOfListOfLong();

    case SETOFSETOFSETOFLONG:
      return getSetOfSetOfsetOfLong();

    case MAPSTRUCTLISTOFLISTOFLONG:
      return getMapStructListOfListOfLong();

    case MKEYSTRUCTVALINT:
      return getMKeyStructValInt();

    case LISTOFMAPKEYINTVALINT:
      return getListOfMapKeyIntValInt();

    case LISTOFMAPKEYSTRVALLIST:
      return getListOfMapKeyStrValList();

    case MAPKEYSETVALLONG:
      return getMapKeySetValLong();

    case MAPKEYLISTVALLONG:
      return getMapKeyListValLong();

    case MAPKEYMAPVALMAP:
      return getMapKeyMapValMap();

    case MAPKEYSETVALMAP:
      return getMapKeySetValMap();

    case NESTEDMAPS:
      return getNestedMaps();

    case MAPKEYINTVALLIST:
      return getMapKeyIntValList();

    case MAPKEYINTVALSET:
      return getMapKeyIntValSet();

    case MAPKEYSETVALINT:
      return getMapKeySetValInt();

    case MAPKEYLISTVALSET:
      return getMapKeyListValSet();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComplexNestedStruct)
      return this.equals((ComplexNestedStruct)that);
    return false;
  }

  public boolean equals(ComplexNestedStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_setOfSetOfInt = true && this.isSetSetOfSetOfInt();
    boolean that_present_setOfSetOfInt = true && that.isSetSetOfSetOfInt();
    if (this_present_setOfSetOfInt || that_present_setOfSetOfInt) {
      if (!(this_present_setOfSetOfInt && that_present_setOfSetOfInt))
        return false;
      if (!TBaseHelper.equalsNobinary(this.setOfSetOfInt, that.setOfSetOfInt))
        return false;
    }

    boolean this_present_listofListOfListOfListOfEnum = true && this.isSetListofListOfListOfListOfEnum();
    boolean that_present_listofListOfListOfListOfEnum = true && that.isSetListofListOfListOfListOfEnum();
    if (this_present_listofListOfListOfListOfEnum || that_present_listofListOfListOfListOfEnum) {
      if (!(this_present_listofListOfListOfListOfEnum && that_present_listofListOfListOfListOfEnum))
        return false;
      if (!TBaseHelper.equalsNobinary(this.listofListOfListOfListOfEnum, that.listofListOfListOfListOfEnum))
        return false;
    }

    boolean this_present_listOfListOfMyStruct = true && this.isSetListOfListOfMyStruct();
    boolean that_present_listOfListOfMyStruct = true && that.isSetListOfListOfMyStruct();
    if (this_present_listOfListOfMyStruct || that_present_listOfListOfMyStruct) {
      if (!(this_present_listOfListOfMyStruct && that_present_listOfListOfMyStruct))
        return false;
      if (!TBaseHelper.equalsNobinary(this.listOfListOfMyStruct, that.listOfListOfMyStruct))
        return false;
    }

    boolean this_present_setOfListOfListOfLong = true && this.isSetSetOfListOfListOfLong();
    boolean that_present_setOfListOfListOfLong = true && that.isSetSetOfListOfListOfLong();
    if (this_present_setOfListOfListOfLong || that_present_setOfListOfListOfLong) {
      if (!(this_present_setOfListOfListOfLong && that_present_setOfListOfListOfLong))
        return false;
      if (!TBaseHelper.equalsNobinary(this.setOfListOfListOfLong, that.setOfListOfListOfLong))
        return false;
    }

    boolean this_present_setOfSetOfsetOfLong = true && this.isSetSetOfSetOfsetOfLong();
    boolean that_present_setOfSetOfsetOfLong = true && that.isSetSetOfSetOfsetOfLong();
    if (this_present_setOfSetOfsetOfLong || that_present_setOfSetOfsetOfLong) {
      if (!(this_present_setOfSetOfsetOfLong && that_present_setOfSetOfsetOfLong))
        return false;
      if (!TBaseHelper.equalsNobinary(this.setOfSetOfsetOfLong, that.setOfSetOfsetOfLong))
        return false;
    }

    boolean this_present_mapStructListOfListOfLong = true && this.isSetMapStructListOfListOfLong();
    boolean that_present_mapStructListOfListOfLong = true && that.isSetMapStructListOfListOfLong();
    if (this_present_mapStructListOfListOfLong || that_present_mapStructListOfListOfLong) {
      if (!(this_present_mapStructListOfListOfLong && that_present_mapStructListOfListOfLong))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapStructListOfListOfLong, that.mapStructListOfListOfLong))
        return false;
    }

    boolean this_present_mKeyStructValInt = true && this.isSetMKeyStructValInt();
    boolean that_present_mKeyStructValInt = true && that.isSetMKeyStructValInt();
    if (this_present_mKeyStructValInt || that_present_mKeyStructValInt) {
      if (!(this_present_mKeyStructValInt && that_present_mKeyStructValInt))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mKeyStructValInt, that.mKeyStructValInt))
        return false;
    }

    boolean this_present_listOfMapKeyIntValInt = true && this.isSetListOfMapKeyIntValInt();
    boolean that_present_listOfMapKeyIntValInt = true && that.isSetListOfMapKeyIntValInt();
    if (this_present_listOfMapKeyIntValInt || that_present_listOfMapKeyIntValInt) {
      if (!(this_present_listOfMapKeyIntValInt && that_present_listOfMapKeyIntValInt))
        return false;
      if (!TBaseHelper.equalsNobinary(this.listOfMapKeyIntValInt, that.listOfMapKeyIntValInt))
        return false;
    }

    boolean this_present_listOfMapKeyStrValList = true && this.isSetListOfMapKeyStrValList();
    boolean that_present_listOfMapKeyStrValList = true && that.isSetListOfMapKeyStrValList();
    if (this_present_listOfMapKeyStrValList || that_present_listOfMapKeyStrValList) {
      if (!(this_present_listOfMapKeyStrValList && that_present_listOfMapKeyStrValList))
        return false;
      if (!TBaseHelper.equalsNobinary(this.listOfMapKeyStrValList, that.listOfMapKeyStrValList))
        return false;
    }

    boolean this_present_mapKeySetValLong = true && this.isSetMapKeySetValLong();
    boolean that_present_mapKeySetValLong = true && that.isSetMapKeySetValLong();
    if (this_present_mapKeySetValLong || that_present_mapKeySetValLong) {
      if (!(this_present_mapKeySetValLong && that_present_mapKeySetValLong))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeySetValLong, that.mapKeySetValLong))
        return false;
    }

    boolean this_present_mapKeyListValLong = true && this.isSetMapKeyListValLong();
    boolean that_present_mapKeyListValLong = true && that.isSetMapKeyListValLong();
    if (this_present_mapKeyListValLong || that_present_mapKeyListValLong) {
      if (!(this_present_mapKeyListValLong && that_present_mapKeyListValLong))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeyListValLong, that.mapKeyListValLong))
        return false;
    }

    boolean this_present_mapKeyMapValMap = true && this.isSetMapKeyMapValMap();
    boolean that_present_mapKeyMapValMap = true && that.isSetMapKeyMapValMap();
    if (this_present_mapKeyMapValMap || that_present_mapKeyMapValMap) {
      if (!(this_present_mapKeyMapValMap && that_present_mapKeyMapValMap))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeyMapValMap, that.mapKeyMapValMap))
        return false;
    }

    boolean this_present_mapKeySetValMap = true && this.isSetMapKeySetValMap();
    boolean that_present_mapKeySetValMap = true && that.isSetMapKeySetValMap();
    if (this_present_mapKeySetValMap || that_present_mapKeySetValMap) {
      if (!(this_present_mapKeySetValMap && that_present_mapKeySetValMap))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeySetValMap, that.mapKeySetValMap))
        return false;
    }

    boolean this_present_NestedMaps = true && this.isSetNestedMaps();
    boolean that_present_NestedMaps = true && that.isSetNestedMaps();
    if (this_present_NestedMaps || that_present_NestedMaps) {
      if (!(this_present_NestedMaps && that_present_NestedMaps))
        return false;
      if (!TBaseHelper.equalsNobinary(this.NestedMaps, that.NestedMaps))
        return false;
    }

    boolean this_present_mapKeyIntValList = true && this.isSetMapKeyIntValList();
    boolean that_present_mapKeyIntValList = true && that.isSetMapKeyIntValList();
    if (this_present_mapKeyIntValList || that_present_mapKeyIntValList) {
      if (!(this_present_mapKeyIntValList && that_present_mapKeyIntValList))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeyIntValList, that.mapKeyIntValList))
        return false;
    }

    boolean this_present_mapKeyIntValSet = true && this.isSetMapKeyIntValSet();
    boolean that_present_mapKeyIntValSet = true && that.isSetMapKeyIntValSet();
    if (this_present_mapKeyIntValSet || that_present_mapKeyIntValSet) {
      if (!(this_present_mapKeyIntValSet && that_present_mapKeyIntValSet))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeyIntValSet, that.mapKeyIntValSet))
        return false;
    }

    boolean this_present_mapKeySetValInt = true && this.isSetMapKeySetValInt();
    boolean that_present_mapKeySetValInt = true && that.isSetMapKeySetValInt();
    if (this_present_mapKeySetValInt || that_present_mapKeySetValInt) {
      if (!(this_present_mapKeySetValInt && that_present_mapKeySetValInt))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeySetValInt, that.mapKeySetValInt))
        return false;
    }

    boolean this_present_mapKeyListValSet = true && this.isSetMapKeyListValSet();
    boolean that_present_mapKeyListValSet = true && that.isSetMapKeyListValSet();
    if (this_present_mapKeyListValSet || that_present_mapKeyListValSet) {
      if (!(this_present_mapKeyListValSet && that_present_mapKeyListValSet))
        return false;
      if (!TBaseHelper.equalsNobinary(this.mapKeyListValSet, that.mapKeyListValSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {setOfSetOfInt, listofListOfListOfListOfEnum, listOfListOfMyStruct, setOfListOfListOfLong, setOfSetOfsetOfLong, mapStructListOfListOfLong, mKeyStructValInt, listOfMapKeyIntValInt, listOfMapKeyStrValList, mapKeySetValLong, mapKeyListValLong, mapKeyMapValMap, mapKeySetValMap, NestedMaps, mapKeyIntValList, mapKeyIntValSet, mapKeySetValInt, mapKeyListValSet});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SETOFSETOFINT:
          if (__field.type == TType.SET) {
            {
              TSet _set130 = iprot.readSetBegin();
              this.setOfSetOfInt = new HashSet<Set<Integer>>(Math.max(0, 2*_set130.size));
              for (int _i131 = 0; 
                   (_set130.size < 0) ? iprot.peekSet() : (_i131 < _set130.size); 
                   ++_i131)
              {
                Set<Integer> _elem132;
                {
                  TSet _set133 = iprot.readSetBegin();
                  _elem132 = new HashSet<Integer>(Math.max(0, 2*_set133.size));
                  for (int _i134 = 0; 
                       (_set133.size < 0) ? iprot.peekSet() : (_i134 < _set133.size); 
                       ++_i134)
                  {
                    int _elem135;
                    _elem135 = iprot.readI32();
                    _elem132.add(_elem135);
                  }
                  iprot.readSetEnd();
                }
                this.setOfSetOfInt.add(_elem132);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFLISTOFLISTOFLISTOFENUM:
          if (__field.type == TType.LIST) {
            {
              TList _list136 = iprot.readListBegin();
              this.listofListOfListOfListOfEnum = new ArrayList<List<List<List<MyEnum>>>>(Math.max(0, _list136.size));
              for (int _i137 = 0; 
                   (_list136.size < 0) ? iprot.peekList() : (_i137 < _list136.size); 
                   ++_i137)
              {
                List<List<List<MyEnum>>> _elem138;
                {
                  TList _list139 = iprot.readListBegin();
                  _elem138 = new ArrayList<List<List<MyEnum>>>(Math.max(0, _list139.size));
                  for (int _i140 = 0; 
                       (_list139.size < 0) ? iprot.peekList() : (_i140 < _list139.size); 
                       ++_i140)
                  {
                    List<List<MyEnum>> _elem141;
                    {
                      TList _list142 = iprot.readListBegin();
                      _elem141 = new ArrayList<List<MyEnum>>(Math.max(0, _list142.size));
                      for (int _i143 = 0; 
                           (_list142.size < 0) ? iprot.peekList() : (_i143 < _list142.size); 
                           ++_i143)
                      {
                        List<MyEnum> _elem144;
                        {
                          TList _list145 = iprot.readListBegin();
                          _elem144 = new ArrayList<MyEnum>(Math.max(0, _list145.size));
                          for (int _i146 = 0; 
                               (_list145.size < 0) ? iprot.peekList() : (_i146 < _list145.size); 
                               ++_i146)
                          {
                            MyEnum _elem147;
                            _elem147 = MyEnum.findByValue(iprot.readI32());
                            _elem144.add(_elem147);
                          }
                          iprot.readListEnd();
                        }
                        _elem141.add(_elem144);
                      }
                      iprot.readListEnd();
                    }
                    _elem138.add(_elem141);
                  }
                  iprot.readListEnd();
                }
                this.listofListOfListOfListOfEnum.add(_elem138);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFLISTOFMYSTRUCT:
          if (__field.type == TType.LIST) {
            {
              TList _list148 = iprot.readListBegin();
              this.listOfListOfMyStruct = new ArrayList<List<MyStruct>>(Math.max(0, _list148.size));
              for (int _i149 = 0; 
                   (_list148.size < 0) ? iprot.peekList() : (_i149 < _list148.size); 
                   ++_i149)
              {
                List<MyStruct> _elem150;
                {
                  TList _list151 = iprot.readListBegin();
                  _elem150 = new ArrayList<MyStruct>(Math.max(0, _list151.size));
                  for (int _i152 = 0; 
                       (_list151.size < 0) ? iprot.peekList() : (_i152 < _list151.size); 
                       ++_i152)
                  {
                    MyStruct _elem153;
                    _elem153 = new MyStruct();
                    _elem153.read(iprot);
                    _elem150.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                this.listOfListOfMyStruct.add(_elem150);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SETOFLISTOFLISTOFLONG:
          if (__field.type == TType.SET) {
            {
              TSet _set154 = iprot.readSetBegin();
              this.setOfListOfListOfLong = new HashSet<List<List<Long>>>(Math.max(0, 2*_set154.size));
              for (int _i155 = 0; 
                   (_set154.size < 0) ? iprot.peekSet() : (_i155 < _set154.size); 
                   ++_i155)
              {
                List<List<Long>> _elem156;
                {
                  TList _list157 = iprot.readListBegin();
                  _elem156 = new ArrayList<List<Long>>(Math.max(0, _list157.size));
                  for (int _i158 = 0; 
                       (_list157.size < 0) ? iprot.peekList() : (_i158 < _list157.size); 
                       ++_i158)
                  {
                    List<Long> _elem159;
                    {
                      TList _list160 = iprot.readListBegin();
                      _elem159 = new ArrayList<Long>(Math.max(0, _list160.size));
                      for (int _i161 = 0; 
                           (_list160.size < 0) ? iprot.peekList() : (_i161 < _list160.size); 
                           ++_i161)
                      {
                        long _elem162;
                        _elem162 = iprot.readI64();
                        _elem159.add(_elem162);
                      }
                      iprot.readListEnd();
                    }
                    _elem156.add(_elem159);
                  }
                  iprot.readListEnd();
                }
                this.setOfListOfListOfLong.add(_elem156);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SETOFSETOFSETOFLONG:
          if (__field.type == TType.SET) {
            {
              TSet _set163 = iprot.readSetBegin();
              this.setOfSetOfsetOfLong = new HashSet<Set<Set<Long>>>(Math.max(0, 2*_set163.size));
              for (int _i164 = 0; 
                   (_set163.size < 0) ? iprot.peekSet() : (_i164 < _set163.size); 
                   ++_i164)
              {
                Set<Set<Long>> _elem165;
                {
                  TSet _set166 = iprot.readSetBegin();
                  _elem165 = new HashSet<Set<Long>>(Math.max(0, 2*_set166.size));
                  for (int _i167 = 0; 
                       (_set166.size < 0) ? iprot.peekSet() : (_i167 < _set166.size); 
                       ++_i167)
                  {
                    Set<Long> _elem168;
                    {
                      TSet _set169 = iprot.readSetBegin();
                      _elem168 = new HashSet<Long>(Math.max(0, 2*_set169.size));
                      for (int _i170 = 0; 
                           (_set169.size < 0) ? iprot.peekSet() : (_i170 < _set169.size); 
                           ++_i170)
                      {
                        long _elem171;
                        _elem171 = iprot.readI64();
                        _elem168.add(_elem171);
                      }
                      iprot.readSetEnd();
                    }
                    _elem165.add(_elem168);
                  }
                  iprot.readSetEnd();
                }
                this.setOfSetOfsetOfLong.add(_elem165);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPSTRUCTLISTOFLISTOFLONG:
          if (__field.type == TType.MAP) {
            {
              TMap _map172 = iprot.readMapBegin();
              this.mapStructListOfListOfLong = new HashMap<Integer,List<List<MyStruct>>>(Math.max(0, 2*_map172.size));
              for (int _i173 = 0; 
                   (_map172.size < 0) ? iprot.peekMap() : (_i173 < _map172.size); 
                   ++_i173)
              {
                int _key174;
                List<List<MyStruct>> _val175;
                _key174 = iprot.readI32();
                {
                  TList _list176 = iprot.readListBegin();
                  _val175 = new ArrayList<List<MyStruct>>(Math.max(0, _list176.size));
                  for (int _i177 = 0; 
                       (_list176.size < 0) ? iprot.peekList() : (_i177 < _list176.size); 
                       ++_i177)
                  {
                    List<MyStruct> _elem178;
                    {
                      TList _list179 = iprot.readListBegin();
                      _elem178 = new ArrayList<MyStruct>(Math.max(0, _list179.size));
                      for (int _i180 = 0; 
                           (_list179.size < 0) ? iprot.peekList() : (_i180 < _list179.size); 
                           ++_i180)
                      {
                        MyStruct _elem181;
                        _elem181 = new MyStruct();
                        _elem181.read(iprot);
                        _elem178.add(_elem181);
                      }
                      iprot.readListEnd();
                    }
                    _val175.add(_elem178);
                  }
                  iprot.readListEnd();
                }
                this.mapStructListOfListOfLong.put(_key174, _val175);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MKEYSTRUCTVALINT:
          if (__field.type == TType.MAP) {
            {
              TMap _map182 = iprot.readMapBegin();
              this.mKeyStructValInt = new HashMap<MyStruct,Integer>(Math.max(0, 2*_map182.size));
              for (int _i183 = 0; 
                   (_map182.size < 0) ? iprot.peekMap() : (_i183 < _map182.size); 
                   ++_i183)
              {
                MyStruct _key184;
                int _val185;
                _key184 = new MyStruct();
                _key184.read(iprot);
                _val185 = iprot.readI32();
                this.mKeyStructValInt.put(_key184, _val185);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFMAPKEYINTVALINT:
          if (__field.type == TType.LIST) {
            {
              TList _list186 = iprot.readListBegin();
              this.listOfMapKeyIntValInt = new ArrayList<Map<Integer,Integer>>(Math.max(0, _list186.size));
              for (int _i187 = 0; 
                   (_list186.size < 0) ? iprot.peekList() : (_i187 < _list186.size); 
                   ++_i187)
              {
                Map<Integer,Integer> _elem188;
                {
                  TMap _map189 = iprot.readMapBegin();
                  _elem188 = new HashMap<Integer,Integer>(Math.max(0, 2*_map189.size));
                  for (int _i190 = 0; 
                       (_map189.size < 0) ? iprot.peekMap() : (_i190 < _map189.size); 
                       ++_i190)
                  {
                    int _key191;
                    int _val192;
                    _key191 = iprot.readI32();
                    _val192 = iprot.readI32();
                    _elem188.put(_key191, _val192);
                  }
                  iprot.readMapEnd();
                }
                this.listOfMapKeyIntValInt.add(_elem188);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFMAPKEYSTRVALLIST:
          if (__field.type == TType.LIST) {
            {
              TList _list193 = iprot.readListBegin();
              this.listOfMapKeyStrValList = new ArrayList<Map<String,List<MyStruct>>>(Math.max(0, _list193.size));
              for (int _i194 = 0; 
                   (_list193.size < 0) ? iprot.peekList() : (_i194 < _list193.size); 
                   ++_i194)
              {
                Map<String,List<MyStruct>> _elem195;
                {
                  TMap _map196 = iprot.readMapBegin();
                  _elem195 = new HashMap<String,List<MyStruct>>(Math.max(0, 2*_map196.size));
                  for (int _i197 = 0; 
                       (_map196.size < 0) ? iprot.peekMap() : (_i197 < _map196.size); 
                       ++_i197)
                  {
                    String _key198;
                    List<MyStruct> _val199;
                    _key198 = iprot.readString();
                    {
                      TList _list200 = iprot.readListBegin();
                      _val199 = new ArrayList<MyStruct>(Math.max(0, _list200.size));
                      for (int _i201 = 0; 
                           (_list200.size < 0) ? iprot.peekList() : (_i201 < _list200.size); 
                           ++_i201)
                      {
                        MyStruct _elem202;
                        _elem202 = new MyStruct();
                        _elem202.read(iprot);
                        _val199.add(_elem202);
                      }
                      iprot.readListEnd();
                    }
                    _elem195.put(_key198, _val199);
                  }
                  iprot.readMapEnd();
                }
                this.listOfMapKeyStrValList.add(_elem195);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYSETVALLONG:
          if (__field.type == TType.MAP) {
            {
              TMap _map203 = iprot.readMapBegin();
              this.mapKeySetValLong = new HashMap<Set<Integer>,Long>(Math.max(0, 2*_map203.size));
              for (int _i204 = 0; 
                   (_map203.size < 0) ? iprot.peekMap() : (_i204 < _map203.size); 
                   ++_i204)
              {
                Set<Integer> _key205;
                long _val206;
                {
                  TSet _set207 = iprot.readSetBegin();
                  _key205 = new HashSet<Integer>(Math.max(0, 2*_set207.size));
                  for (int _i208 = 0; 
                       (_set207.size < 0) ? iprot.peekSet() : (_i208 < _set207.size); 
                       ++_i208)
                  {
                    int _elem209;
                    _elem209 = iprot.readI32();
                    _key205.add(_elem209);
                  }
                  iprot.readSetEnd();
                }
                _val206 = iprot.readI64();
                this.mapKeySetValLong.put(_key205, _val206);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYLISTVALLONG:
          if (__field.type == TType.MAP) {
            {
              TMap _map210 = iprot.readMapBegin();
              this.mapKeyListValLong = new HashMap<List<String>,Integer>(Math.max(0, 2*_map210.size));
              for (int _i211 = 0; 
                   (_map210.size < 0) ? iprot.peekMap() : (_i211 < _map210.size); 
                   ++_i211)
              {
                List<String> _key212;
                int _val213;
                {
                  TList _list214 = iprot.readListBegin();
                  _key212 = new ArrayList<String>(Math.max(0, _list214.size));
                  for (int _i215 = 0; 
                       (_list214.size < 0) ? iprot.peekList() : (_i215 < _list214.size); 
                       ++_i215)
                  {
                    String _elem216;
                    _elem216 = iprot.readString();
                    _key212.add(_elem216);
                  }
                  iprot.readListEnd();
                }
                _val213 = iprot.readI32();
                this.mapKeyListValLong.put(_key212, _val213);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYMAPVALMAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map217 = iprot.readMapBegin();
              this.mapKeyMapValMap = new HashMap<Map<Integer,String>,Map<Integer,String>>(Math.max(0, 2*_map217.size));
              for (int _i218 = 0; 
                   (_map217.size < 0) ? iprot.peekMap() : (_i218 < _map217.size); 
                   ++_i218)
              {
                Map<Integer,String> _key219;
                Map<Integer,String> _val220;
                {
                  TMap _map221 = iprot.readMapBegin();
                  _key219 = new HashMap<Integer,String>(Math.max(0, 2*_map221.size));
                  for (int _i222 = 0; 
                       (_map221.size < 0) ? iprot.peekMap() : (_i222 < _map221.size); 
                       ++_i222)
                  {
                    int _key223;
                    String _val224;
                    _key223 = iprot.readI32();
                    _val224 = iprot.readString();
                    _key219.put(_key223, _val224);
                  }
                  iprot.readMapEnd();
                }
                {
                  TMap _map225 = iprot.readMapBegin();
                  _val220 = new HashMap<Integer,String>(Math.max(0, 2*_map225.size));
                  for (int _i226 = 0; 
                       (_map225.size < 0) ? iprot.peekMap() : (_i226 < _map225.size); 
                       ++_i226)
                  {
                    int _key227;
                    String _val228;
                    _key227 = iprot.readI32();
                    _val228 = iprot.readString();
                    _val220.put(_key227, _val228);
                  }
                  iprot.readMapEnd();
                }
                this.mapKeyMapValMap.put(_key219, _val220);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYSETVALMAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map229 = iprot.readMapBegin();
              this.mapKeySetValMap = new HashMap<Set<List<Integer>>,Map<List<Set<String>>,String>>(Math.max(0, 2*_map229.size));
              for (int _i230 = 0; 
                   (_map229.size < 0) ? iprot.peekMap() : (_i230 < _map229.size); 
                   ++_i230)
              {
                Set<List<Integer>> _key231;
                Map<List<Set<String>>,String> _val232;
                {
                  TSet _set233 = iprot.readSetBegin();
                  _key231 = new HashSet<List<Integer>>(Math.max(0, 2*_set233.size));
                  for (int _i234 = 0; 
                       (_set233.size < 0) ? iprot.peekSet() : (_i234 < _set233.size); 
                       ++_i234)
                  {
                    List<Integer> _elem235;
                    {
                      TList _list236 = iprot.readListBegin();
                      _elem235 = new ArrayList<Integer>(Math.max(0, _list236.size));
                      for (int _i237 = 0; 
                           (_list236.size < 0) ? iprot.peekList() : (_i237 < _list236.size); 
                           ++_i237)
                      {
                        int _elem238;
                        _elem238 = iprot.readI32();
                        _elem235.add(_elem238);
                      }
                      iprot.readListEnd();
                    }
                    _key231.add(_elem235);
                  }
                  iprot.readSetEnd();
                }
                {
                  TMap _map239 = iprot.readMapBegin();
                  _val232 = new HashMap<List<Set<String>>,String>(Math.max(0, 2*_map239.size));
                  for (int _i240 = 0; 
                       (_map239.size < 0) ? iprot.peekMap() : (_i240 < _map239.size); 
                       ++_i240)
                  {
                    List<Set<String>> _key241;
                    String _val242;
                    {
                      TList _list243 = iprot.readListBegin();
                      _key241 = new ArrayList<Set<String>>(Math.max(0, _list243.size));
                      for (int _i244 = 0; 
                           (_list243.size < 0) ? iprot.peekList() : (_i244 < _list243.size); 
                           ++_i244)
                      {
                        Set<String> _elem245;
                        {
                          TSet _set246 = iprot.readSetBegin();
                          _elem245 = new HashSet<String>(Math.max(0, 2*_set246.size));
                          for (int _i247 = 0; 
                               (_set246.size < 0) ? iprot.peekSet() : (_i247 < _set246.size); 
                               ++_i247)
                          {
                            String _elem248;
                            _elem248 = iprot.readString();
                            _elem245.add(_elem248);
                          }
                          iprot.readSetEnd();
                        }
                        _key241.add(_elem245);
                      }
                      iprot.readListEnd();
                    }
                    _val242 = iprot.readString();
                    _val232.put(_key241, _val242);
                  }
                  iprot.readMapEnd();
                }
                this.mapKeySetValMap.put(_key231, _val232);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NESTEDMAPS:
          if (__field.type == TType.MAP) {
            {
              TMap _map249 = iprot.readMapBegin();
              this.NestedMaps = new HashMap<Map<Map<Integer,String>,String>,Map<Integer,String>>(Math.max(0, 2*_map249.size));
              for (int _i250 = 0; 
                   (_map249.size < 0) ? iprot.peekMap() : (_i250 < _map249.size); 
                   ++_i250)
              {
                Map<Map<Integer,String>,String> _key251;
                Map<Integer,String> _val252;
                {
                  TMap _map253 = iprot.readMapBegin();
                  _key251 = new HashMap<Map<Integer,String>,String>(Math.max(0, 2*_map253.size));
                  for (int _i254 = 0; 
                       (_map253.size < 0) ? iprot.peekMap() : (_i254 < _map253.size); 
                       ++_i254)
                  {
                    Map<Integer,String> _key255;
                    String _val256;
                    {
                      TMap _map257 = iprot.readMapBegin();
                      _key255 = new HashMap<Integer,String>(Math.max(0, 2*_map257.size));
                      for (int _i258 = 0; 
                           (_map257.size < 0) ? iprot.peekMap() : (_i258 < _map257.size); 
                           ++_i258)
                      {
                        int _key259;
                        String _val260;
                        _key259 = iprot.readI32();
                        _val260 = iprot.readString();
                        _key255.put(_key259, _val260);
                      }
                      iprot.readMapEnd();
                    }
                    _val256 = iprot.readString();
                    _key251.put(_key255, _val256);
                  }
                  iprot.readMapEnd();
                }
                {
                  TMap _map261 = iprot.readMapBegin();
                  _val252 = new HashMap<Integer,String>(Math.max(0, 2*_map261.size));
                  for (int _i262 = 0; 
                       (_map261.size < 0) ? iprot.peekMap() : (_i262 < _map261.size); 
                       ++_i262)
                  {
                    int _key263;
                    String _val264;
                    _key263 = iprot.readI32();
                    _val264 = iprot.readString();
                    _val252.put(_key263, _val264);
                  }
                  iprot.readMapEnd();
                }
                this.NestedMaps.put(_key251, _val252);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYINTVALLIST:
          if (__field.type == TType.MAP) {
            {
              TMap _map265 = iprot.readMapBegin();
              this.mapKeyIntValList = new HashMap<Integer,List<MyStruct>>(Math.max(0, 2*_map265.size));
              for (int _i266 = 0; 
                   (_map265.size < 0) ? iprot.peekMap() : (_i266 < _map265.size); 
                   ++_i266)
              {
                int _key267;
                List<MyStruct> _val268;
                _key267 = iprot.readI32();
                {
                  TList _list269 = iprot.readListBegin();
                  _val268 = new ArrayList<MyStruct>(Math.max(0, _list269.size));
                  for (int _i270 = 0; 
                       (_list269.size < 0) ? iprot.peekList() : (_i270 < _list269.size); 
                       ++_i270)
                  {
                    MyStruct _elem271;
                    _elem271 = new MyStruct();
                    _elem271.read(iprot);
                    _val268.add(_elem271);
                  }
                  iprot.readListEnd();
                }
                this.mapKeyIntValList.put(_key267, _val268);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYINTVALSET:
          if (__field.type == TType.MAP) {
            {
              TMap _map272 = iprot.readMapBegin();
              this.mapKeyIntValSet = new HashMap<Integer,Set<Boolean>>(Math.max(0, 2*_map272.size));
              for (int _i273 = 0; 
                   (_map272.size < 0) ? iprot.peekMap() : (_i273 < _map272.size); 
                   ++_i273)
              {
                int _key274;
                Set<Boolean> _val275;
                _key274 = iprot.readI32();
                {
                  TSet _set276 = iprot.readSetBegin();
                  _val275 = new HashSet<Boolean>(Math.max(0, 2*_set276.size));
                  for (int _i277 = 0; 
                       (_set276.size < 0) ? iprot.peekSet() : (_i277 < _set276.size); 
                       ++_i277)
                  {
                    boolean _elem278;
                    _elem278 = iprot.readBool();
                    _val275.add(_elem278);
                  }
                  iprot.readSetEnd();
                }
                this.mapKeyIntValSet.put(_key274, _val275);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYSETVALINT:
          if (__field.type == TType.MAP) {
            {
              TMap _map279 = iprot.readMapBegin();
              this.mapKeySetValInt = new HashMap<Set<Boolean>,MyEnum>(Math.max(0, 2*_map279.size));
              for (int _i280 = 0; 
                   (_map279.size < 0) ? iprot.peekMap() : (_i280 < _map279.size); 
                   ++_i280)
              {
                Set<Boolean> _key281;
                MyEnum _val282;
                {
                  TSet _set283 = iprot.readSetBegin();
                  _key281 = new HashSet<Boolean>(Math.max(0, 2*_set283.size));
                  for (int _i284 = 0; 
                       (_set283.size < 0) ? iprot.peekSet() : (_i284 < _set283.size); 
                       ++_i284)
                  {
                    boolean _elem285;
                    _elem285 = iprot.readBool();
                    _key281.add(_elem285);
                  }
                  iprot.readSetEnd();
                }
                _val282 = MyEnum.findByValue(iprot.readI32());
                this.mapKeySetValInt.put(_key281, _val282);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYLISTVALSET:
          if (__field.type == TType.MAP) {
            {
              TMap _map286 = iprot.readMapBegin();
              this.mapKeyListValSet = new HashMap<List<Integer>,Set<Map<Double,String>>>(Math.max(0, 2*_map286.size));
              for (int _i287 = 0; 
                   (_map286.size < 0) ? iprot.peekMap() : (_i287 < _map286.size); 
                   ++_i287)
              {
                List<Integer> _key288;
                Set<Map<Double,String>> _val289;
                {
                  TList _list290 = iprot.readListBegin();
                  _key288 = new ArrayList<Integer>(Math.max(0, _list290.size));
                  for (int _i291 = 0; 
                       (_list290.size < 0) ? iprot.peekList() : (_i291 < _list290.size); 
                       ++_i291)
                  {
                    int _elem292;
                    _elem292 = iprot.readI32();
                    _key288.add(_elem292);
                  }
                  iprot.readListEnd();
                }
                {
                  TSet _set293 = iprot.readSetBegin();
                  _val289 = new HashSet<Map<Double,String>>(Math.max(0, 2*_set293.size));
                  for (int _i294 = 0; 
                       (_set293.size < 0) ? iprot.peekSet() : (_i294 < _set293.size); 
                       ++_i294)
                  {
                    Map<Double,String> _elem295;
                    {
                      TMap _map296 = iprot.readMapBegin();
                      _elem295 = new HashMap<Double,String>(Math.max(0, 2*_map296.size));
                      for (int _i297 = 0; 
                           (_map296.size < 0) ? iprot.peekMap() : (_i297 < _map296.size); 
                           ++_i297)
                      {
                        double _key298;
                        String _val299;
                        _key298 = iprot.readDouble();
                        _val299 = iprot.readString();
                        _elem295.put(_key298, _val299);
                      }
                      iprot.readMapEnd();
                    }
                    _val289.add(_elem295);
                  }
                  iprot.readSetEnd();
                }
                this.mapKeyListValSet.put(_key288, _val289);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.setOfSetOfInt != null) {
      oprot.writeFieldBegin(SET_OF_SET_OF_INT_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.SET, this.setOfSetOfInt.size()));
        for (Set<Integer> _iter300 : this.setOfSetOfInt)        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter300.size()));
            for (int _iter301 : _iter300)            {
              oprot.writeI32(_iter301);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listofListOfListOfListOfEnum != null) {
      oprot.writeFieldBegin(LISTOF_LIST_OF_LIST_OF_LIST_OF_ENUM_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.listofListOfListOfListOfEnum.size()));
        for (List<List<List<MyEnum>>> _iter302 : this.listofListOfListOfListOfEnum)        {
          {
            oprot.writeListBegin(new TList(TType.LIST, _iter302.size()));
            for (List<List<MyEnum>> _iter303 : _iter302)            {
              {
                oprot.writeListBegin(new TList(TType.LIST, _iter303.size()));
                for (List<MyEnum> _iter304 : _iter303)                {
                  {
                    oprot.writeListBegin(new TList(TType.I32, _iter304.size()));
                    for (MyEnum _iter305 : _iter304)                    {
                      oprot.writeI32(_iter305 == null ? 0 : _iter305.getValue());
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfListOfMyStruct != null) {
      oprot.writeFieldBegin(LIST_OF_LIST_OF_MY_STRUCT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.listOfListOfMyStruct.size()));
        for (List<MyStruct> _iter306 : this.listOfListOfMyStruct)        {
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter306.size()));
            for (MyStruct _iter307 : _iter306)            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.setOfListOfListOfLong != null) {
      oprot.writeFieldBegin(SET_OF_LIST_OF_LIST_OF_LONG_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.LIST, this.setOfListOfListOfLong.size()));
        for (List<List<Long>> _iter308 : this.setOfListOfListOfLong)        {
          {
            oprot.writeListBegin(new TList(TType.LIST, _iter308.size()));
            for (List<Long> _iter309 : _iter308)            {
              {
                oprot.writeListBegin(new TList(TType.I64, _iter309.size()));
                for (long _iter310 : _iter309)                {
                  oprot.writeI64(_iter310);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.setOfSetOfsetOfLong != null) {
      oprot.writeFieldBegin(SET_OF_SET_OFSET_OF_LONG_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.SET, this.setOfSetOfsetOfLong.size()));
        for (Set<Set<Long>> _iter311 : this.setOfSetOfsetOfLong)        {
          {
            oprot.writeSetBegin(new TSet(TType.SET, _iter311.size()));
            for (Set<Long> _iter312 : _iter311)            {
              {
                oprot.writeSetBegin(new TSet(TType.I64, _iter312.size()));
                for (long _iter313 : _iter312)                {
                  oprot.writeI64(_iter313);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapStructListOfListOfLong != null) {
      oprot.writeFieldBegin(MAP_STRUCT_LIST_OF_LIST_OF_LONG_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.mapStructListOfListOfLong.size()));
        for (Map.Entry<Integer, List<List<MyStruct>>> _iter314 : this.mapStructListOfListOfLong.entrySet())        {
          oprot.writeI32(_iter314.getKey());
          {
            oprot.writeListBegin(new TList(TType.LIST, _iter314.getValue().size()));
            for (List<MyStruct> _iter315 : _iter314.getValue())            {
              {
                oprot.writeListBegin(new TList(TType.STRUCT, _iter315.size()));
                for (MyStruct _iter316 : _iter315)                {
                  _iter316.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mKeyStructValInt != null) {
      oprot.writeFieldBegin(M_KEY_STRUCT_VAL_INT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, this.mKeyStructValInt.size()));
        for (Map.Entry<MyStruct, Integer> _iter317 : this.mKeyStructValInt.entrySet())        {
          _iter317.getKey().write(oprot);
          oprot.writeI32(_iter317.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfMapKeyIntValInt != null) {
      oprot.writeFieldBegin(LIST_OF_MAP_KEY_INT_VAL_INT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.listOfMapKeyIntValInt.size()));
        for (Map<Integer,Integer> _iter318 : this.listOfMapKeyIntValInt)        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter318.size()));
            for (Map.Entry<Integer, Integer> _iter319 : _iter318.entrySet())            {
              oprot.writeI32(_iter319.getKey());
              oprot.writeI32(_iter319.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfMapKeyStrValList != null) {
      oprot.writeFieldBegin(LIST_OF_MAP_KEY_STR_VAL_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.listOfMapKeyStrValList.size()));
        for (Map<String,List<MyStruct>> _iter320 : this.listOfMapKeyStrValList)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter320.size()));
            for (Map.Entry<String, List<MyStruct>> _iter321 : _iter320.entrySet())            {
              oprot.writeString(_iter321.getKey());
              {
                oprot.writeListBegin(new TList(TType.STRUCT, _iter321.getValue().size()));
                for (MyStruct _iter322 : _iter321.getValue())                {
                  _iter322.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeySetValLong != null) {
      oprot.writeFieldBegin(MAP_KEY_SET_VAL_LONG_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.I64, this.mapKeySetValLong.size()));
        for (Map.Entry<Set<Integer>, Long> _iter323 : this.mapKeySetValLong.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter323.getKey().size()));
            for (int _iter324 : _iter323.getKey())            {
              oprot.writeI32(_iter324);
            }
            oprot.writeSetEnd();
          }
          oprot.writeI64(_iter323.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyListValLong != null) {
      oprot.writeFieldBegin(MAP_KEY_LIST_VAL_LONG_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.I32, this.mapKeyListValLong.size()));
        for (Map.Entry<List<String>, Integer> _iter325 : this.mapKeyListValLong.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.STRING, _iter325.getKey().size()));
            for (String _iter326 : _iter325.getKey())            {
              oprot.writeString(_iter326);
            }
            oprot.writeListEnd();
          }
          oprot.writeI32(_iter325.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyMapValMap != null) {
      oprot.writeFieldBegin(MAP_KEY_MAP_VAL_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.MAP, this.mapKeyMapValMap.size()));
        for (Map.Entry<Map<Integer,String>, Map<Integer,String>> _iter327 : this.mapKeyMapValMap.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter327.getKey().size()));
            for (Map.Entry<Integer, String> _iter328 : _iter327.getKey().entrySet())            {
              oprot.writeI32(_iter328.getKey());
              oprot.writeString(_iter328.getValue());
            }
            oprot.writeMapEnd();
          }
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter327.getValue().size()));
            for (Map.Entry<Integer, String> _iter329 : _iter327.getValue().entrySet())            {
              oprot.writeI32(_iter329.getKey());
              oprot.writeString(_iter329.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeySetValMap != null) {
      oprot.writeFieldBegin(MAP_KEY_SET_VAL_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.MAP, this.mapKeySetValMap.size()));
        for (Map.Entry<Set<List<Integer>>, Map<List<Set<String>>,String>> _iter330 : this.mapKeySetValMap.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.LIST, _iter330.getKey().size()));
            for (List<Integer> _iter331 : _iter330.getKey())            {
              {
                oprot.writeListBegin(new TList(TType.I32, _iter331.size()));
                for (int _iter332 : _iter331)                {
                  oprot.writeI32(_iter332);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeSetEnd();
          }
          {
            oprot.writeMapBegin(new TMap(TType.LIST, TType.STRING, _iter330.getValue().size()));
            for (Map.Entry<List<Set<String>>, String> _iter333 : _iter330.getValue().entrySet())            {
              {
                oprot.writeListBegin(new TList(TType.SET, _iter333.getKey().size()));
                for (Set<String> _iter334 : _iter333.getKey())                {
                  {
                    oprot.writeSetBegin(new TSet(TType.STRING, _iter334.size()));
                    for (String _iter335 : _iter334)                    {
                      oprot.writeString(_iter335);
                    }
                    oprot.writeSetEnd();
                  }
                }
                oprot.writeListEnd();
              }
              oprot.writeString(_iter333.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.NestedMaps != null) {
      oprot.writeFieldBegin(NESTED_MAPS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.MAP, this.NestedMaps.size()));
        for (Map.Entry<Map<Map<Integer,String>,String>, Map<Integer,String>> _iter336 : this.NestedMaps.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.MAP, TType.STRING, _iter336.getKey().size()));
            for (Map.Entry<Map<Integer,String>, String> _iter337 : _iter336.getKey().entrySet())            {
              {
                oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter337.getKey().size()));
                for (Map.Entry<Integer, String> _iter338 : _iter337.getKey().entrySet())                {
                  oprot.writeI32(_iter338.getKey());
                  oprot.writeString(_iter338.getValue());
                }
                oprot.writeMapEnd();
              }
              oprot.writeString(_iter337.getValue());
            }
            oprot.writeMapEnd();
          }
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter336.getValue().size()));
            for (Map.Entry<Integer, String> _iter339 : _iter336.getValue().entrySet())            {
              oprot.writeI32(_iter339.getKey());
              oprot.writeString(_iter339.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyIntValList != null) {
      oprot.writeFieldBegin(MAP_KEY_INT_VAL_LIST_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.mapKeyIntValList.size()));
        for (Map.Entry<Integer, List<MyStruct>> _iter340 : this.mapKeyIntValList.entrySet())        {
          oprot.writeI32(_iter340.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter340.getValue().size()));
            for (MyStruct _iter341 : _iter340.getValue())            {
              _iter341.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyIntValSet != null) {
      oprot.writeFieldBegin(MAP_KEY_INT_VAL_SET_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.SET, this.mapKeyIntValSet.size()));
        for (Map.Entry<Integer, Set<Boolean>> _iter342 : this.mapKeyIntValSet.entrySet())        {
          oprot.writeI32(_iter342.getKey());
          {
            oprot.writeSetBegin(new TSet(TType.BOOL, _iter342.getValue().size()));
            for (boolean _iter343 : _iter342.getValue())            {
              oprot.writeBool(_iter343);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeySetValInt != null) {
      oprot.writeFieldBegin(MAP_KEY_SET_VAL_INT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.I32, this.mapKeySetValInt.size()));
        for (Map.Entry<Set<Boolean>, MyEnum> _iter344 : this.mapKeySetValInt.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.BOOL, _iter344.getKey().size()));
            for (boolean _iter345 : _iter344.getKey())            {
              oprot.writeBool(_iter345);
            }
            oprot.writeSetEnd();
          }
          oprot.writeI32(_iter344.getValue() == null ? 0 : _iter344.getValue().getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyListValSet != null) {
      oprot.writeFieldBegin(MAP_KEY_LIST_VAL_SET_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.SET, this.mapKeyListValSet.size()));
        for (Map.Entry<List<Integer>, Set<Map<Double,String>>> _iter346 : this.mapKeyListValSet.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter346.getKey().size()));
            for (int _iter347 : _iter346.getKey())            {
              oprot.writeI32(_iter347);
            }
            oprot.writeListEnd();
          }
          {
            oprot.writeSetBegin(new TSet(TType.MAP, _iter346.getValue().size()));
            for (Map<Double,String> _iter348 : _iter346.getValue())            {
              {
                oprot.writeMapBegin(new TMap(TType.DOUBLE, TType.STRING, _iter348.size()));
                for (Map.Entry<Double, String> _iter349 : _iter348.entrySet())                {
                  oprot.writeDouble(_iter349.getKey());
                  oprot.writeString(_iter349.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ComplexNestedStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("setOfSetOfInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSetOfSetOfInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSetOfSetOfInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listofListOfListOfListOfEnum");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListofListOfListOfListOfEnum() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListofListOfListOfListOfEnum(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listOfListOfMyStruct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListOfListOfMyStruct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListOfListOfMyStruct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("setOfListOfListOfLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSetOfListOfListOfLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSetOfListOfListOfLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("setOfSetOfsetOfLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSetOfSetOfsetOfLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSetOfSetOfsetOfLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapStructListOfListOfLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapStructListOfListOfLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapStructListOfListOfLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mKeyStructValInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMKeyStructValInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMKeyStructValInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listOfMapKeyIntValInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListOfMapKeyIntValInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListOfMapKeyIntValInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listOfMapKeyStrValList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListOfMapKeyStrValList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListOfMapKeyStrValList(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeySetValLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeySetValLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeySetValLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyListValLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyListValLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyListValLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyMapValMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyMapValMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyMapValMap(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeySetValMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeySetValMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeySetValMap(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("NestedMaps");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getNestedMaps() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getNestedMaps(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyIntValList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyIntValList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyIntValList(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyIntValSet");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyIntValSet() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyIntValSet(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeySetValInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeySetValInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeySetValInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyListValSet");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyListValSet() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyListValSet(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

