/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("MyUnion")
public final class MyUnion {
    private static final Map<Short, String> ID_TO_THRIFT_NAME = new HashMap();
    static {
      ID_TO_THRIFT_NAME.put((short) 1, "myEnum");
      ID_TO_THRIFT_NAME.put((short) 2, "myStruct");
      ID_TO_THRIFT_NAME.put((short) 3, "myDataItem");
      ID_TO_THRIFT_NAME.put((short) 4, "complexNestedStruct");
    }
    private Object value;
    private short id;
    
    private static final TStruct STRUCT_DESC = new TStruct("MyUnion");
    public static final int _MYENUM = 1;
    private static final TField MY_ENUM_FIELD_DESC = new TField("myEnum", TType.I32, (short)1);
    public static final int _MYSTRUCT = 2;
    private static final TField MY_STRUCT_FIELD_DESC = new TField("myStruct", TType.STRUCT, (short)2);
    public static final int _MYDATAITEM = 3;
    private static final TField MY_DATA_ITEM_FIELD_DESC = new TField("myDataItem", TType.STRUCT, (short)3);
    public static final int _COMPLEXNESTEDSTRUCT = 4;
    private static final TField COMPLEX_NESTED_STRUCT_FIELD_DESC = new TField("complexNestedStruct", TType.STRUCT, (short)4);
    
    @ThriftConstructor
    public MyUnion() {
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnion(final test.fixtures.complex_struct.MyEnum myEnum) {
        this.value = myEnum;
        this.id = 1;
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnion(final test.fixtures.complex_struct.MyStruct myStruct) {
        this.value = myStruct;
        this.id = 2;
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnion(final test.fixtures.complex_struct.MyDataItem myDataItem) {
        this.value = myDataItem;
        this.id = 3;
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnion(final test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct) {
        this.value = complexNestedStruct;
        this.id = 4;
    }
    
    public static MyUnion fromMyEnum(final test.fixtures.complex_struct.MyEnum myEnum) {
        MyUnion res = new MyUnion();
        res.value = myEnum;
        res.id = 1;
        return res;
    }
    
    public static MyUnion fromMyStruct(final test.fixtures.complex_struct.MyStruct myStruct) {
        MyUnion res = new MyUnion();
        res.value = myStruct;
        res.id = 2;
        return res;
    }
    
    public static MyUnion fromMyDataItem(final test.fixtures.complex_struct.MyDataItem myDataItem) {
        MyUnion res = new MyUnion();
        res.value = myDataItem;
        res.id = 3;
        return res;
    }
    
    public static MyUnion fromComplexNestedStruct(final test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct) {
        MyUnion res = new MyUnion();
        res.value = complexNestedStruct;
        res.id = 4;
        return res;
    }
    

    @ThriftField(value=1, name="myEnum", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyEnum getMyEnum() {
        if (this.id != 1) {
            throw new IllegalStateException("Not a myEnum element!");
        }
        return (test.fixtures.complex_struct.MyEnum) value;
    }

    public boolean isSetMyEnum() {
        return this.id == 1;
    }

    @ThriftField(value=2, name="myStruct", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyStruct getMyStruct() {
        if (this.id != 2) {
            throw new IllegalStateException("Not a myStruct element!");
        }
        return (test.fixtures.complex_struct.MyStruct) value;
    }

    public boolean isSetMyStruct() {
        return this.id == 2;
    }

    @ThriftField(value=3, name="myDataItem", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyDataItem getMyDataItem() {
        if (this.id != 3) {
            throw new IllegalStateException("Not a myDataItem element!");
        }
        return (test.fixtures.complex_struct.MyDataItem) value;
    }

    public boolean isSetMyDataItem() {
        return this.id == 3;
    }

    @ThriftField(value=4, name="complexNestedStruct", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.ComplexNestedStruct getComplexNestedStruct() {
        if (this.id != 4) {
            throw new IllegalStateException("Not a complexNestedStruct element!");
        }
        return (test.fixtures.complex_struct.ComplexNestedStruct) value;
    }

    public boolean isSetComplexNestedStruct() {
        return this.id == 4;
    }

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return ID_TO_THRIFT_NAME.get(this.id);
    }

    public void accept(Visitor visitor) {
        if (isSetMyEnum()) {
            visitor.visitMyEnum(getMyEnum());
            return;
        }
        if (isSetMyStruct()) {
            visitor.visitMyStruct(getMyStruct());
            return;
        }
        if (isSetMyDataItem()) {
            visitor.visitMyDataItem(getMyDataItem());
            return;
        }
        if (isSetComplexNestedStruct()) {
            visitor.visitComplexNestedStruct(getComplexNestedStruct());
            return;
        }
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", getThriftName())
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        MyUnion other = (MyUnion)o;

        return Objects.equals(this.id, other.id)
                && Objects.deepEquals(this.value, other.value);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
        });
    }

    public interface Visitor {
        void visitMyEnum(test.fixtures.complex_struct.MyEnum myEnum);
        void visitMyStruct(test.fixtures.complex_struct.MyStruct myStruct);
        void visitMyDataItem(test.fixtures.complex_struct.MyDataItem myDataItem);
        void visitComplexNestedStruct(test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct);
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      writeValue(oprot);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private void writeValue(TProtocol oprot) throws TException {
      if (this.id != 0 && this.value == null ){
         throw new TProtocolException("Cannot write a Union with marked-as-set but null value!");
      }
      switch (this.id) {
      case _MYENUM: {
        oprot.writeFieldBegin(MY_ENUM_FIELD_DESC);
        test.fixtures.complex_struct.MyEnum myEnum = (test.fixtures.complex_struct.MyEnum)this.value;
        oprot.writeI32(myEnum == null ? 0 : myEnum.getValue());
        oprot.writeFieldEnd();
        return;
      }
      case _MYSTRUCT: {
        oprot.writeFieldBegin(MY_STRUCT_FIELD_DESC);
        test.fixtures.complex_struct.MyStruct myStruct = (test.fixtures.complex_struct.MyStruct)this.value;
        myStruct.write0(oprot);
        oprot.writeFieldEnd();
        return;
      }
      case _MYDATAITEM: {
        oprot.writeFieldBegin(MY_DATA_ITEM_FIELD_DESC);
        test.fixtures.complex_struct.MyDataItem myDataItem = (test.fixtures.complex_struct.MyDataItem)this.value;
        myDataItem.write0(oprot);
        oprot.writeFieldEnd();
        return;
      }
      case _COMPLEXNESTEDSTRUCT: {
        oprot.writeFieldBegin(COMPLEX_NESTED_STRUCT_FIELD_DESC);
        test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct = (test.fixtures.complex_struct.ComplexNestedStruct)this.value;
        complexNestedStruct.write0(oprot);
        oprot.writeFieldEnd();
        return;
      }
      default:
          throw new IllegalStateException("Cannot write union with unknown field ");
      }
    }
    
}
