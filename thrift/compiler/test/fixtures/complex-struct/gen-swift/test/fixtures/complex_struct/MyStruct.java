/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="MyStruct", builder=MyStruct.Builder.class)
public final class MyStruct {
    @ThriftConstructor
    public MyStruct(
        @ThriftField(value=1, name="MyIntField", requiredness=Requiredness.NONE) final long myIntField,
        @ThriftField(value=2, name="MyStringField", requiredness=Requiredness.NONE) final String myStringField,
        @ThriftField(value=3, name="MyDataField", requiredness=Requiredness.NONE) final test.fixtures.complex_struct.MyDataItem myDataField,
        @ThriftField(value=4, name="myEnum", requiredness=Requiredness.NONE) final test.fixtures.complex_struct.MyEnum myEnum,
        @ThriftField(value=5, name="MyBoolField", requiredness=Requiredness.NONE) final boolean myBoolField,
        @ThriftField(value=6, name="MyByteField", requiredness=Requiredness.NONE) final byte myByteField,
        @ThriftField(value=7, name="MyShortField", requiredness=Requiredness.NONE) final short myShortField,
        @ThriftField(value=8, name="MyLongField", requiredness=Requiredness.NONE) final long myLongField,
        @ThriftField(value=9, name="MyDoubleField", requiredness=Requiredness.NONE) final double myDoubleField,
        @ThriftField(value=10, name="lDouble", requiredness=Requiredness.NONE) final List<Double> lDouble,
        @ThriftField(value=11, name="lShort", requiredness=Requiredness.NONE) final List<Short> lShort,
        @ThriftField(value=12, name="lInteger", requiredness=Requiredness.NONE) final List<Integer> lInteger,
        @ThriftField(value=13, name="lLong", requiredness=Requiredness.NONE) final List<Long> lLong,
        @ThriftField(value=14, name="lString", requiredness=Requiredness.NONE) final List<String> lString,
        @ThriftField(value=15, name="lBool", requiredness=Requiredness.NONE) final List<Boolean> lBool,
        @ThriftField(value=16, name="lByte", requiredness=Requiredness.NONE) final List<Byte> lByte,
        @ThriftField(value=17, name="mShortString", requiredness=Requiredness.NONE) final Map<Short, String> mShortString,
        @ThriftField(value=18, name="mIntegerString", requiredness=Requiredness.NONE) final Map<Integer, String> mIntegerString,
        @ThriftField(value=19, name="mStringMyStruct", requiredness=Requiredness.NONE) final Map<String, test.fixtures.complex_struct.MyStruct> mStringMyStruct,
        @ThriftField(value=20, name="mStringBool", requiredness=Requiredness.NONE) final Map<String, Boolean> mStringBool,
        @ThriftField(value=21, name="mIntegerInteger", requiredness=Requiredness.NONE) final Map<Integer, Integer> mIntegerInteger,
        @ThriftField(value=22, name="mIntegerBool", requiredness=Requiredness.NONE) final Map<Integer, Boolean> mIntegerBool,
        @ThriftField(value=23, name="sShort", requiredness=Requiredness.NONE) final Set<Short> sShort,
        @ThriftField(value=24, name="sMyStruct", requiredness=Requiredness.NONE) final Set<test.fixtures.complex_struct.MyStruct> sMyStruct,
        @ThriftField(value=25, name="sLong", requiredness=Requiredness.NONE) final Set<Long> sLong,
        @ThriftField(value=26, name="sString", requiredness=Requiredness.NONE) final Set<String> sString,
        @ThriftField(value=27, name="sByte", requiredness=Requiredness.NONE) final Set<Byte> sByte
    ) {
        this.myIntField = myIntField;
        this.myStringField = myStringField;
        this.myDataField = myDataField;
        this.myEnum = myEnum;
        this.myBoolField = myBoolField;
        this.myByteField = myByteField;
        this.myShortField = myShortField;
        this.myLongField = myLongField;
        this.myDoubleField = myDoubleField;
        this.lDouble = lDouble;
        this.lShort = lShort;
        this.lInteger = lInteger;
        this.lLong = lLong;
        this.lString = lString;
        this.lBool = lBool;
        this.lByte = lByte;
        this.mShortString = mShortString;
        this.mIntegerString = mIntegerString;
        this.mStringMyStruct = mStringMyStruct;
        this.mStringBool = mStringBool;
        this.mIntegerInteger = mIntegerInteger;
        this.mIntegerBool = mIntegerBool;
        this.sShort = sShort;
        this.sMyStruct = sMyStruct;
        this.sLong = sLong;
        this.sString = sString;
        this.sByte = sByte;
    }
    
    @ThriftConstructor
    protected MyStruct() {
      this.myIntField = 0L;
      this.myStringField = null;
      this.myDataField = null;
      this.myEnum = null;
      this.myBoolField = false;
      this.myByteField = 0;
      this.myShortField = 0;
      this.myLongField = 0L;
      this.myDoubleField = 0.;
      this.lDouble = null;
      this.lShort = null;
      this.lInteger = null;
      this.lLong = null;
      this.lString = null;
      this.lBool = null;
      this.lByte = null;
      this.mShortString = null;
      this.mIntegerString = null;
      this.mStringMyStruct = null;
      this.mStringBool = null;
      this.mIntegerInteger = null;
      this.mIntegerBool = null;
      this.sShort = null;
      this.sMyStruct = null;
      this.sLong = null;
      this.sString = null;
      this.sByte = null;
    }
    
    public static class Builder {
        private long myIntField;
        @ThriftField(value=1, name="MyIntField", requiredness=Requiredness.NONE)
        public Builder setMyIntField(long myIntField) {
            this.myIntField = myIntField;
            return this;
        }
        private String myStringField;
        @ThriftField(value=2, name="MyStringField", requiredness=Requiredness.NONE)
        public Builder setMyStringField(String myStringField) {
            this.myStringField = myStringField;
            return this;
        }
        private test.fixtures.complex_struct.MyDataItem myDataField;
        @ThriftField(value=3, name="MyDataField", requiredness=Requiredness.NONE)
        public Builder setMyDataField(test.fixtures.complex_struct.MyDataItem myDataField) {
            this.myDataField = myDataField;
            return this;
        }
        private test.fixtures.complex_struct.MyEnum myEnum;
        @ThriftField(value=4, name="myEnum", requiredness=Requiredness.NONE)
        public Builder setMyEnum(test.fixtures.complex_struct.MyEnum myEnum) {
            this.myEnum = myEnum;
            return this;
        }
        private boolean myBoolField;
        @ThriftField(value=5, name="MyBoolField", requiredness=Requiredness.NONE)
        public Builder setMyBoolField(boolean myBoolField) {
            this.myBoolField = myBoolField;
            return this;
        }
        private byte myByteField;
        @ThriftField(value=6, name="MyByteField", requiredness=Requiredness.NONE)
        public Builder setMyByteField(byte myByteField) {
            this.myByteField = myByteField;
            return this;
        }
        private short myShortField;
        @ThriftField(value=7, name="MyShortField", requiredness=Requiredness.NONE)
        public Builder setMyShortField(short myShortField) {
            this.myShortField = myShortField;
            return this;
        }
        private long myLongField;
        @ThriftField(value=8, name="MyLongField", requiredness=Requiredness.NONE)
        public Builder setMyLongField(long myLongField) {
            this.myLongField = myLongField;
            return this;
        }
        private double myDoubleField;
        @ThriftField(value=9, name="MyDoubleField", requiredness=Requiredness.NONE)
        public Builder setMyDoubleField(double myDoubleField) {
            this.myDoubleField = myDoubleField;
            return this;
        }
        private List<Double> lDouble;
        @ThriftField(value=10, name="lDouble", requiredness=Requiredness.NONE)
        public Builder setLDouble(List<Double> lDouble) {
            this.lDouble = lDouble;
            return this;
        }
        private List<Short> lShort;
        @ThriftField(value=11, name="lShort", requiredness=Requiredness.NONE)
        public Builder setLShort(List<Short> lShort) {
            this.lShort = lShort;
            return this;
        }
        private List<Integer> lInteger;
        @ThriftField(value=12, name="lInteger", requiredness=Requiredness.NONE)
        public Builder setLInteger(List<Integer> lInteger) {
            this.lInteger = lInteger;
            return this;
        }
        private List<Long> lLong;
        @ThriftField(value=13, name="lLong", requiredness=Requiredness.NONE)
        public Builder setLLong(List<Long> lLong) {
            this.lLong = lLong;
            return this;
        }
        private List<String> lString;
        @ThriftField(value=14, name="lString", requiredness=Requiredness.NONE)
        public Builder setLString(List<String> lString) {
            this.lString = lString;
            return this;
        }
        private List<Boolean> lBool;
        @ThriftField(value=15, name="lBool", requiredness=Requiredness.NONE)
        public Builder setLBool(List<Boolean> lBool) {
            this.lBool = lBool;
            return this;
        }
        private List<Byte> lByte;
        @ThriftField(value=16, name="lByte", requiredness=Requiredness.NONE)
        public Builder setLByte(List<Byte> lByte) {
            this.lByte = lByte;
            return this;
        }
        private Map<Short, String> mShortString;
        @ThriftField(value=17, name="mShortString", requiredness=Requiredness.NONE)
        public Builder setMShortString(Map<Short, String> mShortString) {
            this.mShortString = mShortString;
            return this;
        }
        private Map<Integer, String> mIntegerString;
        @ThriftField(value=18, name="mIntegerString", requiredness=Requiredness.NONE)
        public Builder setMIntegerString(Map<Integer, String> mIntegerString) {
            this.mIntegerString = mIntegerString;
            return this;
        }
        private Map<String, test.fixtures.complex_struct.MyStruct> mStringMyStruct;
        @ThriftField(value=19, name="mStringMyStruct", requiredness=Requiredness.NONE)
        public Builder setMStringMyStruct(Map<String, test.fixtures.complex_struct.MyStruct> mStringMyStruct) {
            this.mStringMyStruct = mStringMyStruct;
            return this;
        }
        private Map<String, Boolean> mStringBool;
        @ThriftField(value=20, name="mStringBool", requiredness=Requiredness.NONE)
        public Builder setMStringBool(Map<String, Boolean> mStringBool) {
            this.mStringBool = mStringBool;
            return this;
        }
        private Map<Integer, Integer> mIntegerInteger;
        @ThriftField(value=21, name="mIntegerInteger", requiredness=Requiredness.NONE)
        public Builder setMIntegerInteger(Map<Integer, Integer> mIntegerInteger) {
            this.mIntegerInteger = mIntegerInteger;
            return this;
        }
        private Map<Integer, Boolean> mIntegerBool;
        @ThriftField(value=22, name="mIntegerBool", requiredness=Requiredness.NONE)
        public Builder setMIntegerBool(Map<Integer, Boolean> mIntegerBool) {
            this.mIntegerBool = mIntegerBool;
            return this;
        }
        private Set<Short> sShort;
        @ThriftField(value=23, name="sShort", requiredness=Requiredness.NONE)
        public Builder setSShort(Set<Short> sShort) {
            this.sShort = sShort;
            return this;
        }
        private Set<test.fixtures.complex_struct.MyStruct> sMyStruct;
        @ThriftField(value=24, name="sMyStruct", requiredness=Requiredness.NONE)
        public Builder setSMyStruct(Set<test.fixtures.complex_struct.MyStruct> sMyStruct) {
            this.sMyStruct = sMyStruct;
            return this;
        }
        private Set<Long> sLong;
        @ThriftField(value=25, name="sLong", requiredness=Requiredness.NONE)
        public Builder setSLong(Set<Long> sLong) {
            this.sLong = sLong;
            return this;
        }
        private Set<String> sString;
        @ThriftField(value=26, name="sString", requiredness=Requiredness.NONE)
        public Builder setSString(Set<String> sString) {
            this.sString = sString;
            return this;
        }
        private Set<Byte> sByte;
        @ThriftField(value=27, name="sByte", requiredness=Requiredness.NONE)
        public Builder setSByte(Set<Byte> sByte) {
            this.sByte = sByte;
            return this;
        }
    
        public Builder() { }
        public Builder(MyStruct other) {
            this.myIntField = other.myIntField;
            this.myStringField = other.myStringField;
            this.myDataField = other.myDataField;
            this.myEnum = other.myEnum;
            this.myBoolField = other.myBoolField;
            this.myByteField = other.myByteField;
            this.myShortField = other.myShortField;
            this.myLongField = other.myLongField;
            this.myDoubleField = other.myDoubleField;
            this.lDouble = other.lDouble;
            this.lShort = other.lShort;
            this.lInteger = other.lInteger;
            this.lLong = other.lLong;
            this.lString = other.lString;
            this.lBool = other.lBool;
            this.lByte = other.lByte;
            this.mShortString = other.mShortString;
            this.mIntegerString = other.mIntegerString;
            this.mStringMyStruct = other.mStringMyStruct;
            this.mStringBool = other.mStringBool;
            this.mIntegerInteger = other.mIntegerInteger;
            this.mIntegerBool = other.mIntegerBool;
            this.sShort = other.sShort;
            this.sMyStruct = other.sMyStruct;
            this.sLong = other.sLong;
            this.sString = other.sString;
            this.sByte = other.sByte;
        }
    
        @ThriftConstructor
        public MyStruct build() {
            return new MyStruct (
                this.myIntField,
                this.myStringField,
                this.myDataField,
                this.myEnum,
                this.myBoolField,
                this.myByteField,
                this.myShortField,
                this.myLongField,
                this.myDoubleField,
                this.lDouble,
                this.lShort,
                this.lInteger,
                this.lLong,
                this.lString,
                this.lBool,
                this.lByte,
                this.mShortString,
                this.mIntegerString,
                this.mStringMyStruct,
                this.mStringBool,
                this.mIntegerInteger,
                this.mIntegerBool,
                this.sShort,
                this.sMyStruct,
                this.sLong,
                this.sString,
                this.sByte
            );
        }
    }
    
    private final long myIntField;
    private final String myStringField;
    private final test.fixtures.complex_struct.MyDataItem myDataField;
    private final test.fixtures.complex_struct.MyEnum myEnum;
    private final boolean myBoolField;
    private final byte myByteField;
    private final short myShortField;
    private final long myLongField;
    private final double myDoubleField;
    private final List<Double> lDouble;
    private final List<Short> lShort;
    private final List<Integer> lInteger;
    private final List<Long> lLong;
    private final List<String> lString;
    private final List<Boolean> lBool;
    private final List<Byte> lByte;
    private final Map<Short, String> mShortString;
    private final Map<Integer, String> mIntegerString;
    private final Map<String, test.fixtures.complex_struct.MyStruct> mStringMyStruct;
    private final Map<String, Boolean> mStringBool;
    private final Map<Integer, Integer> mIntegerInteger;
    private final Map<Integer, Boolean> mIntegerBool;
    private final Set<Short> sShort;
    private final Set<test.fixtures.complex_struct.MyStruct> sMyStruct;
    private final Set<Long> sLong;
    private final Set<String> sString;
    private final Set<Byte> sByte;

    
    @ThriftField(value=1, name="MyIntField", requiredness=Requiredness.NONE)
    public long getMyIntField() { return myIntField; }
        
    @ThriftField(value=2, name="MyStringField", requiredness=Requiredness.NONE)
    public String getMyStringField() { return myStringField; }
        
    @ThriftField(value=3, name="MyDataField", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyDataItem getMyDataField() { return myDataField; }
        
    @ThriftField(value=4, name="myEnum", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyEnum getMyEnum() { return myEnum; }
        
    @ThriftField(value=5, name="MyBoolField", requiredness=Requiredness.NONE)
    public boolean isMyBoolField() { return myBoolField; }
        
    @ThriftField(value=6, name="MyByteField", requiredness=Requiredness.NONE)
    public byte getMyByteField() { return myByteField; }
        
    @ThriftField(value=7, name="MyShortField", requiredness=Requiredness.NONE)
    public short getMyShortField() { return myShortField; }
        
    @ThriftField(value=8, name="MyLongField", requiredness=Requiredness.NONE)
    public long getMyLongField() { return myLongField; }
        
    @ThriftField(value=9, name="MyDoubleField", requiredness=Requiredness.NONE)
    public double getMyDoubleField() { return myDoubleField; }
        
    @ThriftField(value=10, name="lDouble", requiredness=Requiredness.NONE)
    public List<Double> getLDouble() { return lDouble; }
        
    @ThriftField(value=11, name="lShort", requiredness=Requiredness.NONE)
    public List<Short> getLShort() { return lShort; }
        
    @ThriftField(value=12, name="lInteger", requiredness=Requiredness.NONE)
    public List<Integer> getLInteger() { return lInteger; }
        
    @ThriftField(value=13, name="lLong", requiredness=Requiredness.NONE)
    public List<Long> getLLong() { return lLong; }
        
    @ThriftField(value=14, name="lString", requiredness=Requiredness.NONE)
    public List<String> getLString() { return lString; }
        
    @ThriftField(value=15, name="lBool", requiredness=Requiredness.NONE)
    public List<Boolean> getLBool() { return lBool; }
        
    @ThriftField(value=16, name="lByte", requiredness=Requiredness.NONE)
    public List<Byte> getLByte() { return lByte; }
        
    @ThriftField(value=17, name="mShortString", requiredness=Requiredness.NONE)
    public Map<Short, String> getMShortString() { return mShortString; }
        
    @ThriftField(value=18, name="mIntegerString", requiredness=Requiredness.NONE)
    public Map<Integer, String> getMIntegerString() { return mIntegerString; }
        
    @ThriftField(value=19, name="mStringMyStruct", requiredness=Requiredness.NONE)
    public Map<String, test.fixtures.complex_struct.MyStruct> getMStringMyStruct() { return mStringMyStruct; }
        
    @ThriftField(value=20, name="mStringBool", requiredness=Requiredness.NONE)
    public Map<String, Boolean> getMStringBool() { return mStringBool; }
        
    @ThriftField(value=21, name="mIntegerInteger", requiredness=Requiredness.NONE)
    public Map<Integer, Integer> getMIntegerInteger() { return mIntegerInteger; }
        
    @ThriftField(value=22, name="mIntegerBool", requiredness=Requiredness.NONE)
    public Map<Integer, Boolean> getMIntegerBool() { return mIntegerBool; }
        
    @ThriftField(value=23, name="sShort", requiredness=Requiredness.NONE)
    public Set<Short> getSShort() { return sShort; }
        
    @ThriftField(value=24, name="sMyStruct", requiredness=Requiredness.NONE)
    public Set<test.fixtures.complex_struct.MyStruct> getSMyStruct() { return sMyStruct; }
        
    @ThriftField(value=25, name="sLong", requiredness=Requiredness.NONE)
    public Set<Long> getSLong() { return sLong; }
        
    @ThriftField(value=26, name="sString", requiredness=Requiredness.NONE)
    public Set<String> getSString() { return sString; }
        
    @ThriftField(value=27, name="sByte", requiredness=Requiredness.NONE)
    public Set<Byte> getSByte() { return sByte; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("myIntField", myIntField)
            .add("myStringField", myStringField)
            .add("myDataField", myDataField)
            .add("myEnum", myEnum)
            .add("myBoolField", myBoolField)
            .add("myByteField", myByteField)
            .add("myShortField", myShortField)
            .add("myLongField", myLongField)
            .add("myDoubleField", myDoubleField)
            .add("lDouble", lDouble)
            .add("lShort", lShort)
            .add("lInteger", lInteger)
            .add("lLong", lLong)
            .add("lString", lString)
            .add("lBool", lBool)
            .add("lByte", lByte)
            .add("mShortString", mShortString)
            .add("mIntegerString", mIntegerString)
            .add("mStringMyStruct", mStringMyStruct)
            .add("mStringBool", mStringBool)
            .add("mIntegerInteger", mIntegerInteger)
            .add("mIntegerBool", mIntegerBool)
            .add("sShort", sShort)
            .add("sMyStruct", sMyStruct)
            .add("sLong", sLong)
            .add("sString", sString)
            .add("sByte", sByte)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStruct other = (MyStruct)o;
    
        return
            Objects.equals(myIntField, other.myIntField) &&
            Objects.equals(myStringField, other.myStringField) &&
            Objects.equals(myDataField, other.myDataField) &&
            Objects.equals(myEnum, other.myEnum) &&
            Objects.equals(myBoolField, other.myBoolField) &&
            Objects.equals(myByteField, other.myByteField) &&
            Objects.equals(myShortField, other.myShortField) &&
            Objects.equals(myLongField, other.myLongField) &&
            Objects.equals(myDoubleField, other.myDoubleField) &&
            Objects.equals(lDouble, other.lDouble) &&
            Objects.equals(lShort, other.lShort) &&
            Objects.equals(lInteger, other.lInteger) &&
            Objects.equals(lLong, other.lLong) &&
            Objects.equals(lString, other.lString) &&
            Objects.equals(lBool, other.lBool) &&
            Objects.equals(lByte, other.lByte) &&
            Objects.equals(mShortString, other.mShortString) &&
            Objects.equals(mIntegerString, other.mIntegerString) &&
            Objects.equals(mStringMyStruct, other.mStringMyStruct) &&
            Objects.equals(mStringBool, other.mStringBool) &&
            Objects.equals(mIntegerInteger, other.mIntegerInteger) &&
            Objects.equals(mIntegerBool, other.mIntegerBool) &&
            Objects.equals(sShort, other.sShort) &&
            Objects.equals(sMyStruct, other.sMyStruct) &&
            Objects.equals(sLong, other.sLong) &&
            Objects.equals(sString, other.sString) &&
            Objects.equals(sByte, other.sByte) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            myIntField,
            myStringField,
            myDataField,
            myEnum,
            myBoolField,
            myByteField,
            myShortField,
            myLongField,
            myDoubleField,
            lDouble,
            lShort,
            lInteger,
            lLong,
            lString,
            lBool,
            lByte,
            mShortString,
            mIntegerString,
            mStringMyStruct,
            mStringBool,
            mIntegerInteger,
            mIntegerBool,
            sShort,
            sMyStruct,
            sLong,
            sString,
            sByte
        });
    }
    
}
