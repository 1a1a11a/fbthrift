/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="MyStructFloatFieldThrowExp", builder=MyStructFloatFieldThrowExp.Builder.class)
public final class MyStructFloatFieldThrowExp {
    @ThriftConstructor
    public MyStructFloatFieldThrowExp(
        @ThriftField(value=1, name="myLongField", requiredness=Requiredness.NONE) final long myLongField,
        @ThriftField(value=2, name="MyByteField", requiredness=Requiredness.NONE) final byte myByteField,
        @ThriftField(value=3, name="myStringField", requiredness=Requiredness.NONE) final String myStringField,
        @ThriftField(value=4, name="myFloatField", requiredness=Requiredness.NONE) final float myFloatField
    ) {
        this.myLongField = myLongField;
        this.myByteField = myByteField;
        this.myStringField = myStringField;
        this.myFloatField = myFloatField;
    }
    
    @ThriftConstructor
    protected MyStructFloatFieldThrowExp() {
      this.myLongField = 0L;
      this.myByteField = 0;
      this.myStringField = null;
      this.myFloatField = 0.f;
    }
    
    public static class Builder {
        private long myLongField;
        @ThriftField(value=1, name="myLongField", requiredness=Requiredness.NONE)
        public Builder setMyLongField(long myLongField) {
            this.myLongField = myLongField;
            return this;
        }
        private byte myByteField;
        @ThriftField(value=2, name="MyByteField", requiredness=Requiredness.NONE)
        public Builder setMyByteField(byte myByteField) {
            this.myByteField = myByteField;
            return this;
        }
        private String myStringField;
        @ThriftField(value=3, name="myStringField", requiredness=Requiredness.NONE)
        public Builder setMyStringField(String myStringField) {
            this.myStringField = myStringField;
            return this;
        }
        private float myFloatField;
        @ThriftField(value=4, name="myFloatField", requiredness=Requiredness.NONE)
        public Builder setMyFloatField(float myFloatField) {
            this.myFloatField = myFloatField;
            return this;
        }
    
        public Builder() { }
        public Builder(MyStructFloatFieldThrowExp other) {
            this.myLongField = other.myLongField;
            this.myByteField = other.myByteField;
            this.myStringField = other.myStringField;
            this.myFloatField = other.myFloatField;
        }
    
        @ThriftConstructor
        public MyStructFloatFieldThrowExp build() {
            return new MyStructFloatFieldThrowExp (
                this.myLongField,
                this.myByteField,
                this.myStringField,
                this.myFloatField
            );
        }
    }
    
    private final long myLongField;
    private final byte myByteField;
    private final String myStringField;
    private final float myFloatField;

    
    @ThriftField(value=1, name="myLongField", requiredness=Requiredness.NONE)
    public long getMyLongField() { return myLongField; }
        
    @ThriftField(value=2, name="MyByteField", requiredness=Requiredness.NONE)
    public byte getMyByteField() { return myByteField; }
        
    @ThriftField(value=3, name="myStringField", requiredness=Requiredness.NONE)
    public String getMyStringField() { return myStringField; }
        
    @ThriftField(value=4, name="myFloatField", requiredness=Requiredness.NONE)
    public float getMyFloatField() { return myFloatField; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("myLongField", myLongField)
            .add("myByteField", myByteField)
            .add("myStringField", myStringField)
            .add("myFloatField", myFloatField)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStructFloatFieldThrowExp other = (MyStructFloatFieldThrowExp)o;
    
        return
            Objects.equals(myLongField, other.myLongField) &&
            Objects.equals(myByteField, other.myByteField) &&
            Objects.equals(myStringField, other.myStringField) &&
            Objects.equals(myFloatField, other.myFloatField) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            myLongField,
            myByteField,
            myStringField,
            myFloatField
        });
    }
    
}
