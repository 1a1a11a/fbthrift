/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("MyUnionFloatFieldThrowExp")
public final class MyUnionFloatFieldThrowExp {
    private static final Map<Short, String> ID_TO_THRIFT_NAME = new HashMap();
    static {
      ID_TO_THRIFT_NAME.put((short) 1, "myEnum");
      ID_TO_THRIFT_NAME.put((short) 2, "setFloat");
      ID_TO_THRIFT_NAME.put((short) 3, "myDataItem");
      ID_TO_THRIFT_NAME.put((short) 4, "complexNestedStruct");
    }
    private Object value;
    private short id;
    
    @ThriftConstructor
    public MyUnionFloatFieldThrowExp() {
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnionFloatFieldThrowExp(final test.fixtures.complex_struct.MyEnum myEnum) {
        this.value = myEnum;
        this.id = 1;
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnionFloatFieldThrowExp(final List<List<Float>> setFloat) {
        this.value = setFloat;
        this.id = 2;
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnionFloatFieldThrowExp(final test.fixtures.complex_struct.MyDataItem myDataItem) {
        this.value = myDataItem;
        this.id = 3;
    }
    
    @ThriftConstructor
    @Deprecated
    public MyUnionFloatFieldThrowExp(final test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct) {
        this.value = complexNestedStruct;
        this.id = 4;
    }
    
    public static MyUnionFloatFieldThrowExp fromMyEnum(final test.fixtures.complex_struct.MyEnum myEnum) {
        MyUnionFloatFieldThrowExp res = new MyUnionFloatFieldThrowExp();
        res.value = myEnum;
        res.id = 1;
        return res;
    }
    
    public static MyUnionFloatFieldThrowExp fromSetFloat(final List<List<Float>> setFloat) {
        MyUnionFloatFieldThrowExp res = new MyUnionFloatFieldThrowExp();
        res.value = setFloat;
        res.id = 2;
        return res;
    }
    
    public static MyUnionFloatFieldThrowExp fromMyDataItem(final test.fixtures.complex_struct.MyDataItem myDataItem) {
        MyUnionFloatFieldThrowExp res = new MyUnionFloatFieldThrowExp();
        res.value = myDataItem;
        res.id = 3;
        return res;
    }
    
    public static MyUnionFloatFieldThrowExp fromComplexNestedStruct(final test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct) {
        MyUnionFloatFieldThrowExp res = new MyUnionFloatFieldThrowExp();
        res.value = complexNestedStruct;
        res.id = 4;
        return res;
    }
    

    @ThriftField(value=1, name="myEnum", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyEnum getMyEnum() {
        if (this.id != 1) {
            throw new IllegalStateException("Not a myEnum element!");
        }
        return (test.fixtures.complex_struct.MyEnum) value;
    }

    public boolean isSetMyEnum() {
        return this.id == 1;
    }

    @ThriftField(value=2, name="setFloat", requiredness=Requiredness.NONE)
    public List<List<Float>> getSetFloat() {
        if (this.id != 2) {
            throw new IllegalStateException("Not a setFloat element!");
        }
        return (List<List<Float>>) value;
    }

    public boolean isSetSetFloat() {
        return this.id == 2;
    }

    @ThriftField(value=3, name="myDataItem", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.MyDataItem getMyDataItem() {
        if (this.id != 3) {
            throw new IllegalStateException("Not a myDataItem element!");
        }
        return (test.fixtures.complex_struct.MyDataItem) value;
    }

    public boolean isSetMyDataItem() {
        return this.id == 3;
    }

    @ThriftField(value=4, name="complexNestedStruct", requiredness=Requiredness.NONE)
    public test.fixtures.complex_struct.ComplexNestedStruct getComplexNestedStruct() {
        if (this.id != 4) {
            throw new IllegalStateException("Not a complexNestedStruct element!");
        }
        return (test.fixtures.complex_struct.ComplexNestedStruct) value;
    }

    public boolean isSetComplexNestedStruct() {
        return this.id == 4;
    }

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return ID_TO_THRIFT_NAME.get(this.id);
    }

    public void accept(Visitor visitor) {
        if (isSetMyEnum()) {
            visitor.visitMyEnum(getMyEnum());
            return;
        }
        if (isSetSetFloat()) {
            visitor.visitSetFloat(getSetFloat());
            return;
        }
        if (isSetMyDataItem()) {
            visitor.visitMyDataItem(getMyDataItem());
            return;
        }
        if (isSetComplexNestedStruct()) {
            visitor.visitComplexNestedStruct(getComplexNestedStruct());
            return;
        }
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", getThriftName())
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        MyUnionFloatFieldThrowExp other = (MyUnionFloatFieldThrowExp)o;

        return Objects.equals(this.id, other.id)
                && Objects.deepEquals(this.value, other.value);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
        });
    }

    public interface Visitor {
        void visitMyEnum(test.fixtures.complex_struct.MyEnum myEnum);
        void visitSetFloat(List<List<Float>> setFloat);
        void visitMyDataItem(test.fixtures.complex_struct.MyDataItem myDataItem);
        void visitComplexNestedStruct(test.fixtures.complex_struct.ComplexNestedStruct complexNestedStruct);
    }
}
