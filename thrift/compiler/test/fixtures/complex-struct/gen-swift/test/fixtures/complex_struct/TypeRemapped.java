/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="TypeRemapped", builder=TypeRemapped.Builder.class)
public final class TypeRemapped {
    @ThriftConstructor
    public TypeRemapped(
        @ThriftField(value=1, name="lsMap", requiredness=Requiredness.NONE) final it.unimi.dsi.fastutil.longs.Long2ObjectArrayMap<String> lsMap,
        @ThriftField(value=2, name="ioMap", requiredness=Requiredness.NONE) final it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap<it.unimi.dsi.fastutil.ints.Int2LongArrayMap> ioMap,
        @ThriftField(value=3, name="BigInteger", requiredness=Requiredness.NONE) final java.math.BigInteger bigInteger,
        @ThriftField(value=4, name="binaryTestBuffer", requiredness=Requiredness.NONE) final java.nio.ByteBuffer binaryTestBuffer
    ) {
        this.lsMap = lsMap;
        this.ioMap = ioMap;
        this.bigInteger = bigInteger;
        this.binaryTestBuffer = binaryTestBuffer;
    }
    
    @ThriftConstructor
    protected TypeRemapped() {
      this.lsMap = null;
      this.ioMap = null;
      this.bigInteger = 0;
      this.binaryTestBuffer = null;
    }
    
    public static class Builder {
        private it.unimi.dsi.fastutil.longs.Long2ObjectArrayMap<String> lsMap;
        @ThriftField(value=1, name="lsMap", requiredness=Requiredness.NONE)
        public Builder setLsMap(it.unimi.dsi.fastutil.longs.Long2ObjectArrayMap<String> lsMap) {
            this.lsMap = lsMap;
            return this;
        }
        private it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap<it.unimi.dsi.fastutil.ints.Int2LongArrayMap> ioMap;
        @ThriftField(value=2, name="ioMap", requiredness=Requiredness.NONE)
        public Builder setIoMap(it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap<it.unimi.dsi.fastutil.ints.Int2LongArrayMap> ioMap) {
            this.ioMap = ioMap;
            return this;
        }
        private java.math.BigInteger bigInteger;
        @ThriftField(value=3, name="BigInteger", requiredness=Requiredness.NONE)
        public Builder setBigInteger(java.math.BigInteger bigInteger) {
            this.bigInteger = bigInteger;
            return this;
        }
        private java.nio.ByteBuffer binaryTestBuffer;
        @ThriftField(value=4, name="binaryTestBuffer", requiredness=Requiredness.NONE)
        public Builder setBinaryTestBuffer(java.nio.ByteBuffer binaryTestBuffer) {
            this.binaryTestBuffer = binaryTestBuffer;
            return this;
        }
    
        public Builder() { }
        public Builder(TypeRemapped other) {
            this.lsMap = other.lsMap;
            this.ioMap = other.ioMap;
            this.bigInteger = other.bigInteger;
            this.binaryTestBuffer = other.binaryTestBuffer;
        }
    
        @ThriftConstructor
        public TypeRemapped build() {
            return new TypeRemapped (
                this.lsMap,
                this.ioMap,
                this.bigInteger,
                this.binaryTestBuffer
            );
        }
    }
    
    private final it.unimi.dsi.fastutil.longs.Long2ObjectArrayMap<String> lsMap;
    private final it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap<it.unimi.dsi.fastutil.ints.Int2LongArrayMap> ioMap;
    private final java.math.BigInteger bigInteger;
    private final java.nio.ByteBuffer binaryTestBuffer;

    
    @ThriftField(value=1, name="lsMap", requiredness=Requiredness.NONE)
    public it.unimi.dsi.fastutil.longs.Long2ObjectArrayMap<String> getLsMap() { return lsMap; }
        
    @ThriftField(value=2, name="ioMap", requiredness=Requiredness.NONE)
    public it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap<it.unimi.dsi.fastutil.ints.Int2LongArrayMap> getIoMap() { return ioMap; }
        
    @ThriftField(value=3, name="BigInteger", requiredness=Requiredness.NONE)
    public java.math.BigInteger getBigInteger() { return bigInteger; }
        
    @ThriftField(value=4, name="binaryTestBuffer", requiredness=Requiredness.NONE)
    public java.nio.ByteBuffer getBinaryTestBuffer() { return binaryTestBuffer; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("lsMap", lsMap)
            .add("ioMap", ioMap)
            .add("bigInteger", bigInteger)
            .add("binaryTestBuffer", binaryTestBuffer)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        TypeRemapped other = (TypeRemapped)o;
    
        return
            Objects.equals(lsMap, other.lsMap) &&
            Objects.equals(ioMap, other.ioMap) &&
            Objects.equals(bigInteger, other.bigInteger) &&
            Arrays.equals(binaryTestBuffer, other.binaryTestBuffer) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            lsMap,
            ioMap,
            bigInteger,
            binaryTestBuffer
        });
    }
    
}
