/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="ComplexNestedStruct", builder=ComplexNestedStruct.Builder.class)
public final class ComplexNestedStruct {
    @ThriftConstructor
    public ComplexNestedStruct(
        @ThriftField(value=1, name="setOfSetOfInt", requiredness=Requiredness.NONE) final Set<Set<Integer>> setOfSetOfInt,
        @ThriftField(value=2, name="listofListOfListOfListOfEnum", requiredness=Requiredness.NONE) final List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum,
        @ThriftField(value=3, name="listOfListOfMyStruct", requiredness=Requiredness.NONE) final List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct,
        @ThriftField(value=4, name="setOfListOfListOfLong", requiredness=Requiredness.NONE) final Set<List<List<Long>>> setOfListOfListOfLong,
        @ThriftField(value=5, name="setOfSetOfsetOfLong", requiredness=Requiredness.NONE) final Set<Set<Set<Long>>> setOfSetOfsetOfLong,
        @ThriftField(value=6, name="mapStructListOfListOfLong", requiredness=Requiredness.NONE) final Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong,
        @ThriftField(value=7, name="mKeyStructValInt", requiredness=Requiredness.NONE) final Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt,
        @ThriftField(value=8, name="listOfMapKeyIntValInt", requiredness=Requiredness.NONE) final List<Map<Integer, Integer>> listOfMapKeyIntValInt,
        @ThriftField(value=9, name="listOfMapKeyStrValList", requiredness=Requiredness.NONE) final List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList,
        @ThriftField(value=10, name="mapKeySetValLong", requiredness=Requiredness.NONE) final Map<Set<Integer>, Long> mapKeySetValLong,
        @ThriftField(value=11, name="mapKeyListValLong", requiredness=Requiredness.NONE) final Map<List<String>, Integer> mapKeyListValLong,
        @ThriftField(value=12, name="mapKeyMapValMap", requiredness=Requiredness.NONE) final Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap,
        @ThriftField(value=13, name="mapKeySetValMap", requiredness=Requiredness.NONE) final Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap,
        @ThriftField(value=14, name="NestedMaps", requiredness=Requiredness.NONE) final Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps,
        @ThriftField(value=15, name="mapKeyIntValList", requiredness=Requiredness.NONE) final Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList,
        @ThriftField(value=16, name="mapKeyIntValSet", requiredness=Requiredness.NONE) final Map<Integer, Set<Boolean>> mapKeyIntValSet,
        @ThriftField(value=17, name="mapKeySetValInt", requiredness=Requiredness.NONE) final Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt,
        @ThriftField(value=18, name="mapKeyListValSet", requiredness=Requiredness.NONE) final Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet
    ) {
        this.setOfSetOfInt = setOfSetOfInt;
        this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
        this.listOfListOfMyStruct = listOfListOfMyStruct;
        this.setOfListOfListOfLong = setOfListOfListOfLong;
        this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
        this.mapStructListOfListOfLong = mapStructListOfListOfLong;
        this.mKeyStructValInt = mKeyStructValInt;
        this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
        this.listOfMapKeyStrValList = listOfMapKeyStrValList;
        this.mapKeySetValLong = mapKeySetValLong;
        this.mapKeyListValLong = mapKeyListValLong;
        this.mapKeyMapValMap = mapKeyMapValMap;
        this.mapKeySetValMap = mapKeySetValMap;
        this.nestedMaps = nestedMaps;
        this.mapKeyIntValList = mapKeyIntValList;
        this.mapKeyIntValSet = mapKeyIntValSet;
        this.mapKeySetValInt = mapKeySetValInt;
        this.mapKeyListValSet = mapKeyListValSet;
    }
    
    @ThriftConstructor
    protected ComplexNestedStruct() {
      this.setOfSetOfInt = null;
      this.listofListOfListOfListOfEnum = null;
      this.listOfListOfMyStruct = null;
      this.setOfListOfListOfLong = null;
      this.setOfSetOfsetOfLong = null;
      this.mapStructListOfListOfLong = null;
      this.mKeyStructValInt = null;
      this.listOfMapKeyIntValInt = null;
      this.listOfMapKeyStrValList = null;
      this.mapKeySetValLong = null;
      this.mapKeyListValLong = null;
      this.mapKeyMapValMap = null;
      this.mapKeySetValMap = null;
      this.nestedMaps = null;
      this.mapKeyIntValList = null;
      this.mapKeyIntValSet = null;
      this.mapKeySetValInt = null;
      this.mapKeyListValSet = null;
    }
    
    public static class Builder {
        private Set<Set<Integer>> setOfSetOfInt;
        @ThriftField(value=1, name="setOfSetOfInt", requiredness=Requiredness.NONE)
        public Builder setSetOfSetOfInt(Set<Set<Integer>> setOfSetOfInt) {
            this.setOfSetOfInt = setOfSetOfInt;
            return this;
        }
        private List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum;
        @ThriftField(value=2, name="listofListOfListOfListOfEnum", requiredness=Requiredness.NONE)
        public Builder setListofListOfListOfListOfEnum(List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum) {
            this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
            return this;
        }
        private List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct;
        @ThriftField(value=3, name="listOfListOfMyStruct", requiredness=Requiredness.NONE)
        public Builder setListOfListOfMyStruct(List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct) {
            this.listOfListOfMyStruct = listOfListOfMyStruct;
            return this;
        }
        private Set<List<List<Long>>> setOfListOfListOfLong;
        @ThriftField(value=4, name="setOfListOfListOfLong", requiredness=Requiredness.NONE)
        public Builder setSetOfListOfListOfLong(Set<List<List<Long>>> setOfListOfListOfLong) {
            this.setOfListOfListOfLong = setOfListOfListOfLong;
            return this;
        }
        private Set<Set<Set<Long>>> setOfSetOfsetOfLong;
        @ThriftField(value=5, name="setOfSetOfsetOfLong", requiredness=Requiredness.NONE)
        public Builder setSetOfSetOfsetOfLong(Set<Set<Set<Long>>> setOfSetOfsetOfLong) {
            this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
            return this;
        }
        private Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong;
        @ThriftField(value=6, name="mapStructListOfListOfLong", requiredness=Requiredness.NONE)
        public Builder setMapStructListOfListOfLong(Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong) {
            this.mapStructListOfListOfLong = mapStructListOfListOfLong;
            return this;
        }
        private Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt;
        @ThriftField(value=7, name="mKeyStructValInt", requiredness=Requiredness.NONE)
        public Builder setMKeyStructValInt(Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt) {
            this.mKeyStructValInt = mKeyStructValInt;
            return this;
        }
        private List<Map<Integer, Integer>> listOfMapKeyIntValInt;
        @ThriftField(value=8, name="listOfMapKeyIntValInt", requiredness=Requiredness.NONE)
        public Builder setListOfMapKeyIntValInt(List<Map<Integer, Integer>> listOfMapKeyIntValInt) {
            this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
            return this;
        }
        private List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList;
        @ThriftField(value=9, name="listOfMapKeyStrValList", requiredness=Requiredness.NONE)
        public Builder setListOfMapKeyStrValList(List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList) {
            this.listOfMapKeyStrValList = listOfMapKeyStrValList;
            return this;
        }
        private Map<Set<Integer>, Long> mapKeySetValLong;
        @ThriftField(value=10, name="mapKeySetValLong", requiredness=Requiredness.NONE)
        public Builder setMapKeySetValLong(Map<Set<Integer>, Long> mapKeySetValLong) {
            this.mapKeySetValLong = mapKeySetValLong;
            return this;
        }
        private Map<List<String>, Integer> mapKeyListValLong;
        @ThriftField(value=11, name="mapKeyListValLong", requiredness=Requiredness.NONE)
        public Builder setMapKeyListValLong(Map<List<String>, Integer> mapKeyListValLong) {
            this.mapKeyListValLong = mapKeyListValLong;
            return this;
        }
        private Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap;
        @ThriftField(value=12, name="mapKeyMapValMap", requiredness=Requiredness.NONE)
        public Builder setMapKeyMapValMap(Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap) {
            this.mapKeyMapValMap = mapKeyMapValMap;
            return this;
        }
        private Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap;
        @ThriftField(value=13, name="mapKeySetValMap", requiredness=Requiredness.NONE)
        public Builder setMapKeySetValMap(Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap) {
            this.mapKeySetValMap = mapKeySetValMap;
            return this;
        }
        private Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps;
        @ThriftField(value=14, name="NestedMaps", requiredness=Requiredness.NONE)
        public Builder setNestedMaps(Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps) {
            this.nestedMaps = nestedMaps;
            return this;
        }
        private Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList;
        @ThriftField(value=15, name="mapKeyIntValList", requiredness=Requiredness.NONE)
        public Builder setMapKeyIntValList(Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList) {
            this.mapKeyIntValList = mapKeyIntValList;
            return this;
        }
        private Map<Integer, Set<Boolean>> mapKeyIntValSet;
        @ThriftField(value=16, name="mapKeyIntValSet", requiredness=Requiredness.NONE)
        public Builder setMapKeyIntValSet(Map<Integer, Set<Boolean>> mapKeyIntValSet) {
            this.mapKeyIntValSet = mapKeyIntValSet;
            return this;
        }
        private Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt;
        @ThriftField(value=17, name="mapKeySetValInt", requiredness=Requiredness.NONE)
        public Builder setMapKeySetValInt(Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt) {
            this.mapKeySetValInt = mapKeySetValInt;
            return this;
        }
        private Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet;
        @ThriftField(value=18, name="mapKeyListValSet", requiredness=Requiredness.NONE)
        public Builder setMapKeyListValSet(Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet) {
            this.mapKeyListValSet = mapKeyListValSet;
            return this;
        }
    
        public Builder() { }
        public Builder(ComplexNestedStruct other) {
            this.setOfSetOfInt = other.setOfSetOfInt;
            this.listofListOfListOfListOfEnum = other.listofListOfListOfListOfEnum;
            this.listOfListOfMyStruct = other.listOfListOfMyStruct;
            this.setOfListOfListOfLong = other.setOfListOfListOfLong;
            this.setOfSetOfsetOfLong = other.setOfSetOfsetOfLong;
            this.mapStructListOfListOfLong = other.mapStructListOfListOfLong;
            this.mKeyStructValInt = other.mKeyStructValInt;
            this.listOfMapKeyIntValInt = other.listOfMapKeyIntValInt;
            this.listOfMapKeyStrValList = other.listOfMapKeyStrValList;
            this.mapKeySetValLong = other.mapKeySetValLong;
            this.mapKeyListValLong = other.mapKeyListValLong;
            this.mapKeyMapValMap = other.mapKeyMapValMap;
            this.mapKeySetValMap = other.mapKeySetValMap;
            this.nestedMaps = other.nestedMaps;
            this.mapKeyIntValList = other.mapKeyIntValList;
            this.mapKeyIntValSet = other.mapKeyIntValSet;
            this.mapKeySetValInt = other.mapKeySetValInt;
            this.mapKeyListValSet = other.mapKeyListValSet;
        }
    
        @ThriftConstructor
        public ComplexNestedStruct build() {
            return new ComplexNestedStruct (
                this.setOfSetOfInt,
                this.listofListOfListOfListOfEnum,
                this.listOfListOfMyStruct,
                this.setOfListOfListOfLong,
                this.setOfSetOfsetOfLong,
                this.mapStructListOfListOfLong,
                this.mKeyStructValInt,
                this.listOfMapKeyIntValInt,
                this.listOfMapKeyStrValList,
                this.mapKeySetValLong,
                this.mapKeyListValLong,
                this.mapKeyMapValMap,
                this.mapKeySetValMap,
                this.nestedMaps,
                this.mapKeyIntValList,
                this.mapKeyIntValSet,
                this.mapKeySetValInt,
                this.mapKeyListValSet
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("ComplexNestedStruct");
    private final Set<Set<Integer>> setOfSetOfInt;
    public static final int _SETOFSETOFINT = 1;
    private static final TField SET_OF_SET_OF_INT_FIELD_DESC = new TField("setOfSetOfInt", TType.SET, (short)1);
    private final List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum;
    public static final int _LISTOFLISTOFLISTOFLISTOFENUM = 2;
    private static final TField LISTOF_LIST_OF_LIST_OF_LIST_OF_ENUM_FIELD_DESC = new TField("listofListOfListOfListOfEnum", TType.LIST, (short)2);
    private final List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct;
    public static final int _LISTOFLISTOFMYSTRUCT = 3;
    private static final TField LIST_OF_LIST_OF_MY_STRUCT_FIELD_DESC = new TField("listOfListOfMyStruct", TType.LIST, (short)3);
    private final Set<List<List<Long>>> setOfListOfListOfLong;
    public static final int _SETOFLISTOFLISTOFLONG = 4;
    private static final TField SET_OF_LIST_OF_LIST_OF_LONG_FIELD_DESC = new TField("setOfListOfListOfLong", TType.SET, (short)4);
    private final Set<Set<Set<Long>>> setOfSetOfsetOfLong;
    public static final int _SETOFSETOFSETOFLONG = 5;
    private static final TField SET_OF_SET_OFSET_OF_LONG_FIELD_DESC = new TField("setOfSetOfsetOfLong", TType.SET, (short)5);
    private final Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong;
    public static final int _MAPSTRUCTLISTOFLISTOFLONG = 6;
    private static final TField MAP_STRUCT_LIST_OF_LIST_OF_LONG_FIELD_DESC = new TField("mapStructListOfListOfLong", TType.MAP, (short)6);
    private final Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt;
    public static final int _MKEYSTRUCTVALINT = 7;
    private static final TField M_KEY_STRUCT_VAL_INT_FIELD_DESC = new TField("mKeyStructValInt", TType.MAP, (short)7);
    private final List<Map<Integer, Integer>> listOfMapKeyIntValInt;
    public static final int _LISTOFMAPKEYINTVALINT = 8;
    private static final TField LIST_OF_MAP_KEY_INT_VAL_INT_FIELD_DESC = new TField("listOfMapKeyIntValInt", TType.LIST, (short)8);
    private final List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList;
    public static final int _LISTOFMAPKEYSTRVALLIST = 9;
    private static final TField LIST_OF_MAP_KEY_STR_VAL_LIST_FIELD_DESC = new TField("listOfMapKeyStrValList", TType.LIST, (short)9);
    private final Map<Set<Integer>, Long> mapKeySetValLong;
    public static final int _MAPKEYSETVALLONG = 10;
    private static final TField MAP_KEY_SET_VAL_LONG_FIELD_DESC = new TField("mapKeySetValLong", TType.MAP, (short)10);
    private final Map<List<String>, Integer> mapKeyListValLong;
    public static final int _MAPKEYLISTVALLONG = 11;
    private static final TField MAP_KEY_LIST_VAL_LONG_FIELD_DESC = new TField("mapKeyListValLong", TType.MAP, (short)11);
    private final Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap;
    public static final int _MAPKEYMAPVALMAP = 12;
    private static final TField MAP_KEY_MAP_VAL_MAP_FIELD_DESC = new TField("mapKeyMapValMap", TType.MAP, (short)12);
    private final Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap;
    public static final int _MAPKEYSETVALMAP = 13;
    private static final TField MAP_KEY_SET_VAL_MAP_FIELD_DESC = new TField("mapKeySetValMap", TType.MAP, (short)13);
    private final Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps;
    public static final int _NESTEDMAPS = 14;
    private static final TField NESTED_MAPS_FIELD_DESC = new TField("nestedMaps", TType.MAP, (short)14);
    private final Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList;
    public static final int _MAPKEYINTVALLIST = 15;
    private static final TField MAP_KEY_INT_VAL_LIST_FIELD_DESC = new TField("mapKeyIntValList", TType.MAP, (short)15);
    private final Map<Integer, Set<Boolean>> mapKeyIntValSet;
    public static final int _MAPKEYINTVALSET = 16;
    private static final TField MAP_KEY_INT_VAL_SET_FIELD_DESC = new TField("mapKeyIntValSet", TType.MAP, (short)16);
    private final Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt;
    public static final int _MAPKEYSETVALINT = 17;
    private static final TField MAP_KEY_SET_VAL_INT_FIELD_DESC = new TField("mapKeySetValInt", TType.MAP, (short)17);
    private final Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet;
    public static final int _MAPKEYLISTVALSET = 18;
    private static final TField MAP_KEY_LIST_VAL_SET_FIELD_DESC = new TField("mapKeyListValSet", TType.MAP, (short)18);

    
    @ThriftField(value=1, name="setOfSetOfInt", requiredness=Requiredness.NONE)
    public Set<Set<Integer>> getSetOfSetOfInt() { return setOfSetOfInt; }
        
    @ThriftField(value=2, name="listofListOfListOfListOfEnum", requiredness=Requiredness.NONE)
    public List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> getListofListOfListOfListOfEnum() { return listofListOfListOfListOfEnum; }
        
    @ThriftField(value=3, name="listOfListOfMyStruct", requiredness=Requiredness.NONE)
    public List<List<test.fixtures.complex_struct.MyStruct>> getListOfListOfMyStruct() { return listOfListOfMyStruct; }
        
    @ThriftField(value=4, name="setOfListOfListOfLong", requiredness=Requiredness.NONE)
    public Set<List<List<Long>>> getSetOfListOfListOfLong() { return setOfListOfListOfLong; }
        
    @ThriftField(value=5, name="setOfSetOfsetOfLong", requiredness=Requiredness.NONE)
    public Set<Set<Set<Long>>> getSetOfSetOfsetOfLong() { return setOfSetOfsetOfLong; }
        
    @ThriftField(value=6, name="mapStructListOfListOfLong", requiredness=Requiredness.NONE)
    public Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> getMapStructListOfListOfLong() { return mapStructListOfListOfLong; }
        
    @ThriftField(value=7, name="mKeyStructValInt", requiredness=Requiredness.NONE)
    public Map<test.fixtures.complex_struct.MyStruct, Integer> getMKeyStructValInt() { return mKeyStructValInt; }
        
    @ThriftField(value=8, name="listOfMapKeyIntValInt", requiredness=Requiredness.NONE)
    public List<Map<Integer, Integer>> getListOfMapKeyIntValInt() { return listOfMapKeyIntValInt; }
        
    @ThriftField(value=9, name="listOfMapKeyStrValList", requiredness=Requiredness.NONE)
    public List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> getListOfMapKeyStrValList() { return listOfMapKeyStrValList; }
        
    @ThriftField(value=10, name="mapKeySetValLong", requiredness=Requiredness.NONE)
    public Map<Set<Integer>, Long> getMapKeySetValLong() { return mapKeySetValLong; }
        
    @ThriftField(value=11, name="mapKeyListValLong", requiredness=Requiredness.NONE)
    public Map<List<String>, Integer> getMapKeyListValLong() { return mapKeyListValLong; }
        
    @ThriftField(value=12, name="mapKeyMapValMap", requiredness=Requiredness.NONE)
    public Map<Map<Integer, String>, Map<Integer, String>> getMapKeyMapValMap() { return mapKeyMapValMap; }
        
    @ThriftField(value=13, name="mapKeySetValMap", requiredness=Requiredness.NONE)
    public Map<Set<List<Integer>>, Map<List<Set<String>>, String>> getMapKeySetValMap() { return mapKeySetValMap; }
        
    @ThriftField(value=14, name="NestedMaps", requiredness=Requiredness.NONE)
    public Map<Map<Map<Integer, String>, String>, Map<Integer, String>> getNestedMaps() { return nestedMaps; }
        
    @ThriftField(value=15, name="mapKeyIntValList", requiredness=Requiredness.NONE)
    public Map<Integer, List<test.fixtures.complex_struct.MyStruct>> getMapKeyIntValList() { return mapKeyIntValList; }
        
    @ThriftField(value=16, name="mapKeyIntValSet", requiredness=Requiredness.NONE)
    public Map<Integer, Set<Boolean>> getMapKeyIntValSet() { return mapKeyIntValSet; }
        
    @ThriftField(value=17, name="mapKeySetValInt", requiredness=Requiredness.NONE)
    public Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> getMapKeySetValInt() { return mapKeySetValInt; }
        
    @ThriftField(value=18, name="mapKeyListValSet", requiredness=Requiredness.NONE)
    public Map<List<Integer>, Set<Map<Double, String>>> getMapKeyListValSet() { return mapKeyListValSet; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("setOfSetOfInt", setOfSetOfInt)
            .add("listofListOfListOfListOfEnum", listofListOfListOfListOfEnum)
            .add("listOfListOfMyStruct", listOfListOfMyStruct)
            .add("setOfListOfListOfLong", setOfListOfListOfLong)
            .add("setOfSetOfsetOfLong", setOfSetOfsetOfLong)
            .add("mapStructListOfListOfLong", mapStructListOfListOfLong)
            .add("mKeyStructValInt", mKeyStructValInt)
            .add("listOfMapKeyIntValInt", listOfMapKeyIntValInt)
            .add("listOfMapKeyStrValList", listOfMapKeyStrValList)
            .add("mapKeySetValLong", mapKeySetValLong)
            .add("mapKeyListValLong", mapKeyListValLong)
            .add("mapKeyMapValMap", mapKeyMapValMap)
            .add("mapKeySetValMap", mapKeySetValMap)
            .add("nestedMaps", nestedMaps)
            .add("mapKeyIntValList", mapKeyIntValList)
            .add("mapKeyIntValSet", mapKeyIntValSet)
            .add("mapKeySetValInt", mapKeySetValInt)
            .add("mapKeyListValSet", mapKeyListValSet)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ComplexNestedStruct other = (ComplexNestedStruct)o;
    
        return
            Objects.equals(setOfSetOfInt, other.setOfSetOfInt) &&
            Objects.equals(listofListOfListOfListOfEnum, other.listofListOfListOfListOfEnum) &&
            Objects.equals(listOfListOfMyStruct, other.listOfListOfMyStruct) &&
            Objects.equals(setOfListOfListOfLong, other.setOfListOfListOfLong) &&
            Objects.equals(setOfSetOfsetOfLong, other.setOfSetOfsetOfLong) &&
            Objects.equals(mapStructListOfListOfLong, other.mapStructListOfListOfLong) &&
            Objects.equals(mKeyStructValInt, other.mKeyStructValInt) &&
            Objects.equals(listOfMapKeyIntValInt, other.listOfMapKeyIntValInt) &&
            Objects.equals(listOfMapKeyStrValList, other.listOfMapKeyStrValList) &&
            Objects.equals(mapKeySetValLong, other.mapKeySetValLong) &&
            Objects.equals(mapKeyListValLong, other.mapKeyListValLong) &&
            Objects.equals(mapKeyMapValMap, other.mapKeyMapValMap) &&
            Objects.equals(mapKeySetValMap, other.mapKeySetValMap) &&
            Objects.equals(nestedMaps, other.nestedMaps) &&
            Objects.equals(mapKeyIntValList, other.mapKeyIntValList) &&
            Objects.equals(mapKeyIntValSet, other.mapKeyIntValSet) &&
            Objects.equals(mapKeySetValInt, other.mapKeySetValInt) &&
            Objects.equals(mapKeyListValSet, other.mapKeyListValSet) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            setOfSetOfInt,
            listofListOfListOfListOfEnum,
            listOfListOfMyStruct,
            setOfListOfListOfLong,
            setOfSetOfsetOfLong,
            mapStructListOfListOfLong,
            mKeyStructValInt,
            listOfMapKeyIntValInt,
            listOfMapKeyStrValList,
            mapKeySetValLong,
            mapKeyListValLong,
            mapKeyMapValMap,
            mapKeySetValMap,
            nestedMaps,
            mapKeyIntValList,
            mapKeyIntValSet,
            mapKeySetValInt,
            mapKeyListValSet
        });
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.setOfSetOfInt != null) {
        oprot.writeFieldBegin(SET_OF_SET_OF_INT_FIELD_DESC);
        Set<Set<Integer>> _iter0 = this.setOfSetOfInt;
        oprot.writeSetBegin(new TSet(TType.SET, _iter0.size()));
        for (Set<Integer> _iter1 : _iter0) {
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.size()));
        for (int _iter2 : _iter1) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (this.listofListOfListOfListOfEnum != null) {
        oprot.writeFieldBegin(LISTOF_LIST_OF_LIST_OF_LIST_OF_ENUM_FIELD_DESC);
        List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> _iter0 = this.listofListOfListOfListOfEnum;
        oprot.writeListBegin(new TList(TType.LIST, _iter0.size()));
        for (List<List<List<test.fixtures.complex_struct.MyEnum>>> _iter1 : _iter0) {
          oprot.writeListBegin(new TList(TType.LIST, _iter1.size()));
        for (List<List<test.fixtures.complex_struct.MyEnum>> _iter2 : _iter1) {
          oprot.writeListBegin(new TList(TType.LIST, _iter2.size()));
        for (List<test.fixtures.complex_struct.MyEnum> _iter3 : _iter2) {
          oprot.writeListBegin(new TList(TType.I32, _iter3.size()));
        for (test.fixtures.complex_struct.MyEnum _iter4 : _iter3) {
          oprot.writeI32(_iter4 == null ? 0 : _iter4.getValue());
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfListOfMyStruct != null) {
        oprot.writeFieldBegin(LIST_OF_LIST_OF_MY_STRUCT_FIELD_DESC);
        List<List<test.fixtures.complex_struct.MyStruct>> _iter0 = this.listOfListOfMyStruct;
        oprot.writeListBegin(new TList(TType.LIST, _iter0.size()));
        for (List<test.fixtures.complex_struct.MyStruct> _iter1 : _iter0) {
          oprot.writeListBegin(new TList(TType.STRUCT, _iter1.size()));
        for (test.fixtures.complex_struct.MyStruct _iter2 : _iter1) {
          _iter2.write0(oprot);
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.setOfListOfListOfLong != null) {
        oprot.writeFieldBegin(SET_OF_LIST_OF_LIST_OF_LONG_FIELD_DESC);
        Set<List<List<Long>>> _iter0 = this.setOfListOfListOfLong;
        oprot.writeSetBegin(new TSet(TType.LIST, _iter0.size()));
        for (List<List<Long>> _iter1 : _iter0) {
          oprot.writeListBegin(new TList(TType.LIST, _iter1.size()));
        for (List<Long> _iter2 : _iter1) {
          oprot.writeListBegin(new TList(TType.I64, _iter2.size()));
        for (long _iter3 : _iter2) {
          oprot.writeI64(_iter3);
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (this.setOfSetOfsetOfLong != null) {
        oprot.writeFieldBegin(SET_OF_SET_OFSET_OF_LONG_FIELD_DESC);
        Set<Set<Set<Long>>> _iter0 = this.setOfSetOfsetOfLong;
        oprot.writeSetBegin(new TSet(TType.SET, _iter0.size()));
        for (Set<Set<Long>> _iter1 : _iter0) {
          oprot.writeSetBegin(new TSet(TType.SET, _iter1.size()));
        for (Set<Long> _iter2 : _iter1) {
          oprot.writeSetBegin(new TSet(TType.I64, _iter2.size()));
        for (long _iter3 : _iter2) {
          oprot.writeI64(_iter3);
        }
        oprot.writeSetEnd();
        }
        oprot.writeSetEnd();
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapStructListOfListOfLong != null) {
        oprot.writeFieldBegin(MAP_STRUCT_LIST_OF_LIST_OF_LONG_FIELD_DESC);
        Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> _iter0 = this.mapStructListOfListOfLong;
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, _iter0.size()));
        for (Map.Entry<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());

          oprot.writeListBegin(new TList(TType.LIST, _iter1.getValue().size()));
        for (List<test.fixtures.complex_struct.MyStruct> _iter2 : _iter1.getValue()) {
          oprot.writeListBegin(new TList(TType.STRUCT, _iter2.size()));
        for (test.fixtures.complex_struct.MyStruct _iter3 : _iter2) {
          _iter3.write0(oprot);
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mKeyStructValInt != null) {
        oprot.writeFieldBegin(M_KEY_STRUCT_VAL_INT_FIELD_DESC);
        Map<test.fixtures.complex_struct.MyStruct, Integer> _iter0 = this.mKeyStructValInt;
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, _iter0.size()));
        for (Map.Entry<test.fixtures.complex_struct.MyStruct, Integer> _iter1 : _iter0.entrySet()) {
          _iter1.getKey().write0(oprot);
          oprot.writeI32(_iter1.getValue());

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfMapKeyIntValInt != null) {
        oprot.writeFieldBegin(LIST_OF_MAP_KEY_INT_VAL_INT_FIELD_DESC);
        List<Map<Integer, Integer>> _iter0 = this.listOfMapKeyIntValInt;
        oprot.writeListBegin(new TList(TType.MAP, _iter0.size()));
        for (Map<Integer, Integer> _iter1 : _iter0) {
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter1.size()));
        for (Map.Entry<Integer, Integer> _iter2 : _iter1.entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());

        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfMapKeyStrValList != null) {
        oprot.writeFieldBegin(LIST_OF_MAP_KEY_STR_VAL_LIST_FIELD_DESC);
        List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> _iter0 = this.listOfMapKeyStrValList;
        oprot.writeListBegin(new TList(TType.MAP, _iter0.size()));
        for (Map<String, List<test.fixtures.complex_struct.MyStruct>> _iter1 : _iter0) {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter1.size()));
        for (Map.Entry<String, List<test.fixtures.complex_struct.MyStruct>> _iter2 : _iter1.entrySet()) {
          oprot.writeString(_iter2.getKey());

          oprot.writeListBegin(new TList(TType.STRUCT, _iter2.getValue().size()));
        for (test.fixtures.complex_struct.MyStruct _iter3 : _iter2.getValue()) {
          _iter3.write0(oprot);
        }
        oprot.writeListEnd();

        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeySetValLong != null) {
        oprot.writeFieldBegin(MAP_KEY_SET_VAL_LONG_FIELD_DESC);
        Map<Set<Integer>, Long> _iter0 = this.mapKeySetValLong;
        oprot.writeMapBegin(new TMap(TType.SET, TType.I64, _iter0.size()));
        for (Map.Entry<Set<Integer>, Long> _iter1 : _iter0.entrySet()) {
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.getKey().size()));
        for (int _iter2 : _iter1.getKey()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
                    oprot.writeI64(_iter1.getValue());

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeyListValLong != null) {
        oprot.writeFieldBegin(MAP_KEY_LIST_VAL_LONG_FIELD_DESC);
        Map<List<String>, Integer> _iter0 = this.mapKeyListValLong;
        oprot.writeMapBegin(new TMap(TType.LIST, TType.I32, _iter0.size()));
        for (Map.Entry<List<String>, Integer> _iter1 : _iter0.entrySet()) {
          oprot.writeListBegin(new TList(TType.STRING, _iter1.getKey().size()));
        for (String _iter2 : _iter1.getKey()) {
          oprot.writeString(_iter2);
        }
        oprot.writeListEnd();
                    oprot.writeI32(_iter1.getValue());

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeyMapValMap != null) {
        oprot.writeFieldBegin(MAP_KEY_MAP_VAL_MAP_FIELD_DESC);
        Map<Map<Integer, String>, Map<Integer, String>> _iter0 = this.mapKeyMapValMap;
        oprot.writeMapBegin(new TMap(TType.MAP, TType.MAP, _iter0.size()));
        for (Map.Entry<Map<Integer, String>, Map<Integer, String>> _iter1 : _iter0.entrySet()) {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter1.getKey().size()));
        for (Map.Entry<Integer, String> _iter2 : _iter1.getKey().entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeString(_iter2.getValue());

        }
        oprot.writeMapEnd();
          
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter1.getValue().size()));
        for (Map.Entry<Integer, String> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeString(_iter2.getValue());

        }
        oprot.writeMapEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeySetValMap != null) {
        oprot.writeFieldBegin(MAP_KEY_SET_VAL_MAP_FIELD_DESC);
        Map<Set<List<Integer>>, Map<List<Set<String>>, String>> _iter0 = this.mapKeySetValMap;
        oprot.writeMapBegin(new TMap(TType.SET, TType.MAP, _iter0.size()));
        for (Map.Entry<Set<List<Integer>>, Map<List<Set<String>>, String>> _iter1 : _iter0.entrySet()) {
          oprot.writeSetBegin(new TSet(TType.LIST, _iter1.getKey().size()));
        for (List<Integer> _iter2 : _iter1.getKey()) {
          oprot.writeListBegin(new TList(TType.I32, _iter2.size()));
        for (int _iter3 : _iter2) {
          oprot.writeI32(_iter3);
        }
        oprot.writeListEnd();
        }
        oprot.writeSetEnd();
          
          oprot.writeMapBegin(new TMap(TType.LIST, TType.STRING, _iter1.getValue().size()));
        for (Map.Entry<List<Set<String>>, String> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeListBegin(new TList(TType.SET, _iter2.getKey().size()));
        for (Set<String> _iter3 : _iter2.getKey()) {
          oprot.writeSetBegin(new TSet(TType.STRING, _iter3.size()));
        for (String _iter4 : _iter3) {
          oprot.writeString(_iter4);
        }
        oprot.writeSetEnd();
        }
        oprot.writeListEnd();
                    oprot.writeString(_iter2.getValue());

        }
        oprot.writeMapEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.nestedMaps != null) {
        oprot.writeFieldBegin(NESTED_MAPS_FIELD_DESC);
        Map<Map<Map<Integer, String>, String>, Map<Integer, String>> _iter0 = this.nestedMaps;
        oprot.writeMapBegin(new TMap(TType.MAP, TType.MAP, _iter0.size()));
        for (Map.Entry<Map<Map<Integer, String>, String>, Map<Integer, String>> _iter1 : _iter0.entrySet()) {
          oprot.writeMapBegin(new TMap(TType.MAP, TType.STRING, _iter1.getKey().size()));
        for (Map.Entry<Map<Integer, String>, String> _iter2 : _iter1.getKey().entrySet()) {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter2.getKey().size()));
        for (Map.Entry<Integer, String> _iter3 : _iter2.getKey().entrySet()) {
          oprot.writeI32(_iter3.getKey());
          oprot.writeString(_iter3.getValue());

        }
        oprot.writeMapEnd();
                    oprot.writeString(_iter2.getValue());

        }
        oprot.writeMapEnd();
          
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter1.getValue().size()));
        for (Map.Entry<Integer, String> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeString(_iter2.getValue());

        }
        oprot.writeMapEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeyIntValList != null) {
        oprot.writeFieldBegin(MAP_KEY_INT_VAL_LIST_FIELD_DESC);
        Map<Integer, List<test.fixtures.complex_struct.MyStruct>> _iter0 = this.mapKeyIntValList;
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, _iter0.size()));
        for (Map.Entry<Integer, List<test.fixtures.complex_struct.MyStruct>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());

          oprot.writeListBegin(new TList(TType.STRUCT, _iter1.getValue().size()));
        for (test.fixtures.complex_struct.MyStruct _iter2 : _iter1.getValue()) {
          _iter2.write0(oprot);
        }
        oprot.writeListEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeyIntValSet != null) {
        oprot.writeFieldBegin(MAP_KEY_INT_VAL_SET_FIELD_DESC);
        Map<Integer, Set<Boolean>> _iter0 = this.mapKeyIntValSet;
        oprot.writeMapBegin(new TMap(TType.I32, TType.SET, _iter0.size()));
        for (Map.Entry<Integer, Set<Boolean>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());

          oprot.writeSetBegin(new TSet(TType.BOOL, _iter1.getValue().size()));
        for (boolean _iter2 : _iter1.getValue()) {
          oprot.writeBool(_iter2);
        }
        oprot.writeSetEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeySetValInt != null) {
        oprot.writeFieldBegin(MAP_KEY_SET_VAL_INT_FIELD_DESC);
        Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> _iter0 = this.mapKeySetValInt;
        oprot.writeMapBegin(new TMap(TType.SET, TType.I32, _iter0.size()));
        for (Map.Entry<Set<Boolean>, test.fixtures.complex_struct.MyEnum> _iter1 : _iter0.entrySet()) {
          oprot.writeSetBegin(new TSet(TType.BOOL, _iter1.getKey().size()));
        for (boolean _iter2 : _iter1.getKey()) {
          oprot.writeBool(_iter2);
        }
        oprot.writeSetEnd();
                    oprot.writeI32(_iter1 == null ? 0 : _iter1.getValue().getValue());

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapKeyListValSet != null) {
        oprot.writeFieldBegin(MAP_KEY_LIST_VAL_SET_FIELD_DESC);
        Map<List<Integer>, Set<Map<Double, String>>> _iter0 = this.mapKeyListValSet;
        oprot.writeMapBegin(new TMap(TType.LIST, TType.SET, _iter0.size()));
        for (Map.Entry<List<Integer>, Set<Map<Double, String>>> _iter1 : _iter0.entrySet()) {
          oprot.writeListBegin(new TList(TType.I32, _iter1.getKey().size()));
        for (int _iter2 : _iter1.getKey()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
          
          oprot.writeSetBegin(new TSet(TType.MAP, _iter1.getValue().size()));
        for (Map<Double, String> _iter2 : _iter1.getValue()) {
          oprot.writeMapBegin(new TMap(TType.DOUBLE, TType.STRING, _iter2.size()));
        for (Map.Entry<Double, String> _iter3 : _iter2.entrySet()) {
          oprot.writeDouble(_iter3.getKey());
          oprot.writeString(_iter3.getValue());

        }
        oprot.writeMapEnd();
        }
        oprot.writeSetEnd();

        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
