/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="ComplexNestedStruct", builder=ComplexNestedStruct.Builder.class)
public final class ComplexNestedStruct {
    @ThriftConstructor
    public ComplexNestedStruct(
        @ThriftField(value=1, name="setOfSetOfInt", requiredness=Requiredness.NONE) final Set<Set<Integer>> setOfSetOfInt,
        @ThriftField(value=2, name="listofListOfListOfListOfEnum", requiredness=Requiredness.NONE) final List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum,
        @ThriftField(value=3, name="listOfListOfMyStruct", requiredness=Requiredness.NONE) final List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct,
        @ThriftField(value=4, name="setOfListOfListOfLong", requiredness=Requiredness.NONE) final Set<List<List<Long>>> setOfListOfListOfLong,
        @ThriftField(value=5, name="setOfSetOfsetOfLong", requiredness=Requiredness.NONE) final Set<Set<Set<Long>>> setOfSetOfsetOfLong,
        @ThriftField(value=6, name="mapStructListOfListOfLong", requiredness=Requiredness.NONE) final Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong,
        @ThriftField(value=7, name="mKeyStructValInt", requiredness=Requiredness.NONE) final Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt,
        @ThriftField(value=8, name="listOfMapKeyIntValInt", requiredness=Requiredness.NONE) final List<Map<Integer, Integer>> listOfMapKeyIntValInt,
        @ThriftField(value=9, name="listOfMapKeyStrValList", requiredness=Requiredness.NONE) final List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList,
        @ThriftField(value=10, name="mapKeySetValLong", requiredness=Requiredness.NONE) final Map<Set<Integer>, Long> mapKeySetValLong,
        @ThriftField(value=11, name="mapKeyListValLong", requiredness=Requiredness.NONE) final Map<List<String>, Integer> mapKeyListValLong,
        @ThriftField(value=12, name="mapKeyMapValMap", requiredness=Requiredness.NONE) final Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap,
        @ThriftField(value=13, name="mapKeySetValMap", requiredness=Requiredness.NONE) final Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap,
        @ThriftField(value=14, name="NestedMaps", requiredness=Requiredness.NONE) final Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps,
        @ThriftField(value=15, name="mapKeyIntValList", requiredness=Requiredness.NONE) final Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList,
        @ThriftField(value=16, name="mapKeyIntValSet", requiredness=Requiredness.NONE) final Map<Integer, Set<Boolean>> mapKeyIntValSet,
        @ThriftField(value=17, name="mapKeySetValInt", requiredness=Requiredness.NONE) final Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt,
        @ThriftField(value=18, name="mapKeyListValSet", requiredness=Requiredness.NONE) final Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet
    ) {
        this.setOfSetOfInt = setOfSetOfInt;
        this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
        this.listOfListOfMyStruct = listOfListOfMyStruct;
        this.setOfListOfListOfLong = setOfListOfListOfLong;
        this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
        this.mapStructListOfListOfLong = mapStructListOfListOfLong;
        this.mKeyStructValInt = mKeyStructValInt;
        this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
        this.listOfMapKeyStrValList = listOfMapKeyStrValList;
        this.mapKeySetValLong = mapKeySetValLong;
        this.mapKeyListValLong = mapKeyListValLong;
        this.mapKeyMapValMap = mapKeyMapValMap;
        this.mapKeySetValMap = mapKeySetValMap;
        this.nestedMaps = nestedMaps;
        this.mapKeyIntValList = mapKeyIntValList;
        this.mapKeyIntValSet = mapKeyIntValSet;
        this.mapKeySetValInt = mapKeySetValInt;
        this.mapKeyListValSet = mapKeyListValSet;
    }
    
    @ThriftConstructor
    protected ComplexNestedStruct() {
      this.setOfSetOfInt = null;
      this.listofListOfListOfListOfEnum = null;
      this.listOfListOfMyStruct = null;
      this.setOfListOfListOfLong = null;
      this.setOfSetOfsetOfLong = null;
      this.mapStructListOfListOfLong = null;
      this.mKeyStructValInt = null;
      this.listOfMapKeyIntValInt = null;
      this.listOfMapKeyStrValList = null;
      this.mapKeySetValLong = null;
      this.mapKeyListValLong = null;
      this.mapKeyMapValMap = null;
      this.mapKeySetValMap = null;
      this.nestedMaps = null;
      this.mapKeyIntValList = null;
      this.mapKeyIntValSet = null;
      this.mapKeySetValInt = null;
      this.mapKeyListValSet = null;
    }
    
    public static class Builder {
        private Set<Set<Integer>> setOfSetOfInt;
        @ThriftField(value=1, name="setOfSetOfInt", requiredness=Requiredness.NONE)
        public Builder setSetOfSetOfInt(Set<Set<Integer>> setOfSetOfInt) {
            this.setOfSetOfInt = setOfSetOfInt;
            return this;
        }
        private List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum;
        @ThriftField(value=2, name="listofListOfListOfListOfEnum", requiredness=Requiredness.NONE)
        public Builder setListofListOfListOfListOfEnum(List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum) {
            this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
            return this;
        }
        private List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct;
        @ThriftField(value=3, name="listOfListOfMyStruct", requiredness=Requiredness.NONE)
        public Builder setListOfListOfMyStruct(List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct) {
            this.listOfListOfMyStruct = listOfListOfMyStruct;
            return this;
        }
        private Set<List<List<Long>>> setOfListOfListOfLong;
        @ThriftField(value=4, name="setOfListOfListOfLong", requiredness=Requiredness.NONE)
        public Builder setSetOfListOfListOfLong(Set<List<List<Long>>> setOfListOfListOfLong) {
            this.setOfListOfListOfLong = setOfListOfListOfLong;
            return this;
        }
        private Set<Set<Set<Long>>> setOfSetOfsetOfLong;
        @ThriftField(value=5, name="setOfSetOfsetOfLong", requiredness=Requiredness.NONE)
        public Builder setSetOfSetOfsetOfLong(Set<Set<Set<Long>>> setOfSetOfsetOfLong) {
            this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
            return this;
        }
        private Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong;
        @ThriftField(value=6, name="mapStructListOfListOfLong", requiredness=Requiredness.NONE)
        public Builder setMapStructListOfListOfLong(Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong) {
            this.mapStructListOfListOfLong = mapStructListOfListOfLong;
            return this;
        }
        private Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt;
        @ThriftField(value=7, name="mKeyStructValInt", requiredness=Requiredness.NONE)
        public Builder setMKeyStructValInt(Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt) {
            this.mKeyStructValInt = mKeyStructValInt;
            return this;
        }
        private List<Map<Integer, Integer>> listOfMapKeyIntValInt;
        @ThriftField(value=8, name="listOfMapKeyIntValInt", requiredness=Requiredness.NONE)
        public Builder setListOfMapKeyIntValInt(List<Map<Integer, Integer>> listOfMapKeyIntValInt) {
            this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
            return this;
        }
        private List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList;
        @ThriftField(value=9, name="listOfMapKeyStrValList", requiredness=Requiredness.NONE)
        public Builder setListOfMapKeyStrValList(List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList) {
            this.listOfMapKeyStrValList = listOfMapKeyStrValList;
            return this;
        }
        private Map<Set<Integer>, Long> mapKeySetValLong;
        @ThriftField(value=10, name="mapKeySetValLong", requiredness=Requiredness.NONE)
        public Builder setMapKeySetValLong(Map<Set<Integer>, Long> mapKeySetValLong) {
            this.mapKeySetValLong = mapKeySetValLong;
            return this;
        }
        private Map<List<String>, Integer> mapKeyListValLong;
        @ThriftField(value=11, name="mapKeyListValLong", requiredness=Requiredness.NONE)
        public Builder setMapKeyListValLong(Map<List<String>, Integer> mapKeyListValLong) {
            this.mapKeyListValLong = mapKeyListValLong;
            return this;
        }
        private Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap;
        @ThriftField(value=12, name="mapKeyMapValMap", requiredness=Requiredness.NONE)
        public Builder setMapKeyMapValMap(Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap) {
            this.mapKeyMapValMap = mapKeyMapValMap;
            return this;
        }
        private Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap;
        @ThriftField(value=13, name="mapKeySetValMap", requiredness=Requiredness.NONE)
        public Builder setMapKeySetValMap(Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap) {
            this.mapKeySetValMap = mapKeySetValMap;
            return this;
        }
        private Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps;
        @ThriftField(value=14, name="NestedMaps", requiredness=Requiredness.NONE)
        public Builder setNestedMaps(Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps) {
            this.nestedMaps = nestedMaps;
            return this;
        }
        private Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList;
        @ThriftField(value=15, name="mapKeyIntValList", requiredness=Requiredness.NONE)
        public Builder setMapKeyIntValList(Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList) {
            this.mapKeyIntValList = mapKeyIntValList;
            return this;
        }
        private Map<Integer, Set<Boolean>> mapKeyIntValSet;
        @ThriftField(value=16, name="mapKeyIntValSet", requiredness=Requiredness.NONE)
        public Builder setMapKeyIntValSet(Map<Integer, Set<Boolean>> mapKeyIntValSet) {
            this.mapKeyIntValSet = mapKeyIntValSet;
            return this;
        }
        private Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt;
        @ThriftField(value=17, name="mapKeySetValInt", requiredness=Requiredness.NONE)
        public Builder setMapKeySetValInt(Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt) {
            this.mapKeySetValInt = mapKeySetValInt;
            return this;
        }
        private Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet;
        @ThriftField(value=18, name="mapKeyListValSet", requiredness=Requiredness.NONE)
        public Builder setMapKeyListValSet(Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet) {
            this.mapKeyListValSet = mapKeyListValSet;
            return this;
        }
    
        public Builder() { }
        public Builder(ComplexNestedStruct other) {
            this.setOfSetOfInt = other.setOfSetOfInt;
            this.listofListOfListOfListOfEnum = other.listofListOfListOfListOfEnum;
            this.listOfListOfMyStruct = other.listOfListOfMyStruct;
            this.setOfListOfListOfLong = other.setOfListOfListOfLong;
            this.setOfSetOfsetOfLong = other.setOfSetOfsetOfLong;
            this.mapStructListOfListOfLong = other.mapStructListOfListOfLong;
            this.mKeyStructValInt = other.mKeyStructValInt;
            this.listOfMapKeyIntValInt = other.listOfMapKeyIntValInt;
            this.listOfMapKeyStrValList = other.listOfMapKeyStrValList;
            this.mapKeySetValLong = other.mapKeySetValLong;
            this.mapKeyListValLong = other.mapKeyListValLong;
            this.mapKeyMapValMap = other.mapKeyMapValMap;
            this.mapKeySetValMap = other.mapKeySetValMap;
            this.nestedMaps = other.nestedMaps;
            this.mapKeyIntValList = other.mapKeyIntValList;
            this.mapKeyIntValSet = other.mapKeyIntValSet;
            this.mapKeySetValInt = other.mapKeySetValInt;
            this.mapKeyListValSet = other.mapKeyListValSet;
        }
    
        @ThriftConstructor
        public ComplexNestedStruct build() {
            return new ComplexNestedStruct (
                this.setOfSetOfInt,
                this.listofListOfListOfListOfEnum,
                this.listOfListOfMyStruct,
                this.setOfListOfListOfLong,
                this.setOfSetOfsetOfLong,
                this.mapStructListOfListOfLong,
                this.mKeyStructValInt,
                this.listOfMapKeyIntValInt,
                this.listOfMapKeyStrValList,
                this.mapKeySetValLong,
                this.mapKeyListValLong,
                this.mapKeyMapValMap,
                this.mapKeySetValMap,
                this.nestedMaps,
                this.mapKeyIntValList,
                this.mapKeyIntValSet,
                this.mapKeySetValInt,
                this.mapKeyListValSet
            );
        }
    }
    
    private final Set<Set<Integer>> setOfSetOfInt;
    private final List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> listofListOfListOfListOfEnum;
    private final List<List<test.fixtures.complex_struct.MyStruct>> listOfListOfMyStruct;
    private final Set<List<List<Long>>> setOfListOfListOfLong;
    private final Set<Set<Set<Long>>> setOfSetOfsetOfLong;
    private final Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> mapStructListOfListOfLong;
    private final Map<test.fixtures.complex_struct.MyStruct, Integer> mKeyStructValInt;
    private final List<Map<Integer, Integer>> listOfMapKeyIntValInt;
    private final List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> listOfMapKeyStrValList;
    private final Map<Set<Integer>, Long> mapKeySetValLong;
    private final Map<List<String>, Integer> mapKeyListValLong;
    private final Map<Map<Integer, String>, Map<Integer, String>> mapKeyMapValMap;
    private final Map<Set<List<Integer>>, Map<List<Set<String>>, String>> mapKeySetValMap;
    private final Map<Map<Map<Integer, String>, String>, Map<Integer, String>> nestedMaps;
    private final Map<Integer, List<test.fixtures.complex_struct.MyStruct>> mapKeyIntValList;
    private final Map<Integer, Set<Boolean>> mapKeyIntValSet;
    private final Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> mapKeySetValInt;
    private final Map<List<Integer>, Set<Map<Double, String>>> mapKeyListValSet;

    
    @ThriftField(value=1, name="setOfSetOfInt", requiredness=Requiredness.NONE)
    public Set<Set<Integer>> getSetOfSetOfInt() { return setOfSetOfInt; }
        
    @ThriftField(value=2, name="listofListOfListOfListOfEnum", requiredness=Requiredness.NONE)
    public List<List<List<List<test.fixtures.complex_struct.MyEnum>>>> getListofListOfListOfListOfEnum() { return listofListOfListOfListOfEnum; }
        
    @ThriftField(value=3, name="listOfListOfMyStruct", requiredness=Requiredness.NONE)
    public List<List<test.fixtures.complex_struct.MyStruct>> getListOfListOfMyStruct() { return listOfListOfMyStruct; }
        
    @ThriftField(value=4, name="setOfListOfListOfLong", requiredness=Requiredness.NONE)
    public Set<List<List<Long>>> getSetOfListOfListOfLong() { return setOfListOfListOfLong; }
        
    @ThriftField(value=5, name="setOfSetOfsetOfLong", requiredness=Requiredness.NONE)
    public Set<Set<Set<Long>>> getSetOfSetOfsetOfLong() { return setOfSetOfsetOfLong; }
        
    @ThriftField(value=6, name="mapStructListOfListOfLong", requiredness=Requiredness.NONE)
    public Map<Integer, List<List<test.fixtures.complex_struct.MyStruct>>> getMapStructListOfListOfLong() { return mapStructListOfListOfLong; }
        
    @ThriftField(value=7, name="mKeyStructValInt", requiredness=Requiredness.NONE)
    public Map<test.fixtures.complex_struct.MyStruct, Integer> getMKeyStructValInt() { return mKeyStructValInt; }
        
    @ThriftField(value=8, name="listOfMapKeyIntValInt", requiredness=Requiredness.NONE)
    public List<Map<Integer, Integer>> getListOfMapKeyIntValInt() { return listOfMapKeyIntValInt; }
        
    @ThriftField(value=9, name="listOfMapKeyStrValList", requiredness=Requiredness.NONE)
    public List<Map<String, List<test.fixtures.complex_struct.MyStruct>>> getListOfMapKeyStrValList() { return listOfMapKeyStrValList; }
        
    @ThriftField(value=10, name="mapKeySetValLong", requiredness=Requiredness.NONE)
    public Map<Set<Integer>, Long> getMapKeySetValLong() { return mapKeySetValLong; }
        
    @ThriftField(value=11, name="mapKeyListValLong", requiredness=Requiredness.NONE)
    public Map<List<String>, Integer> getMapKeyListValLong() { return mapKeyListValLong; }
        
    @ThriftField(value=12, name="mapKeyMapValMap", requiredness=Requiredness.NONE)
    public Map<Map<Integer, String>, Map<Integer, String>> getMapKeyMapValMap() { return mapKeyMapValMap; }
        
    @ThriftField(value=13, name="mapKeySetValMap", requiredness=Requiredness.NONE)
    public Map<Set<List<Integer>>, Map<List<Set<String>>, String>> getMapKeySetValMap() { return mapKeySetValMap; }
        
    @ThriftField(value=14, name="NestedMaps", requiredness=Requiredness.NONE)
    public Map<Map<Map<Integer, String>, String>, Map<Integer, String>> getNestedMaps() { return nestedMaps; }
        
    @ThriftField(value=15, name="mapKeyIntValList", requiredness=Requiredness.NONE)
    public Map<Integer, List<test.fixtures.complex_struct.MyStruct>> getMapKeyIntValList() { return mapKeyIntValList; }
        
    @ThriftField(value=16, name="mapKeyIntValSet", requiredness=Requiredness.NONE)
    public Map<Integer, Set<Boolean>> getMapKeyIntValSet() { return mapKeyIntValSet; }
        
    @ThriftField(value=17, name="mapKeySetValInt", requiredness=Requiredness.NONE)
    public Map<Set<Boolean>, test.fixtures.complex_struct.MyEnum> getMapKeySetValInt() { return mapKeySetValInt; }
        
    @ThriftField(value=18, name="mapKeyListValSet", requiredness=Requiredness.NONE)
    public Map<List<Integer>, Set<Map<Double, String>>> getMapKeyListValSet() { return mapKeyListValSet; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("setOfSetOfInt", setOfSetOfInt)
            .add("listofListOfListOfListOfEnum", listofListOfListOfListOfEnum)
            .add("listOfListOfMyStruct", listOfListOfMyStruct)
            .add("setOfListOfListOfLong", setOfListOfListOfLong)
            .add("setOfSetOfsetOfLong", setOfSetOfsetOfLong)
            .add("mapStructListOfListOfLong", mapStructListOfListOfLong)
            .add("mKeyStructValInt", mKeyStructValInt)
            .add("listOfMapKeyIntValInt", listOfMapKeyIntValInt)
            .add("listOfMapKeyStrValList", listOfMapKeyStrValList)
            .add("mapKeySetValLong", mapKeySetValLong)
            .add("mapKeyListValLong", mapKeyListValLong)
            .add("mapKeyMapValMap", mapKeyMapValMap)
            .add("mapKeySetValMap", mapKeySetValMap)
            .add("nestedMaps", nestedMaps)
            .add("mapKeyIntValList", mapKeyIntValList)
            .add("mapKeyIntValSet", mapKeyIntValSet)
            .add("mapKeySetValInt", mapKeySetValInt)
            .add("mapKeyListValSet", mapKeyListValSet)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        ComplexNestedStruct other = (ComplexNestedStruct)o;
    
        return
            Objects.equals(setOfSetOfInt, other.setOfSetOfInt) &&
            Objects.equals(listofListOfListOfListOfEnum, other.listofListOfListOfListOfEnum) &&
            Objects.equals(listOfListOfMyStruct, other.listOfListOfMyStruct) &&
            Objects.equals(setOfListOfListOfLong, other.setOfListOfListOfLong) &&
            Objects.equals(setOfSetOfsetOfLong, other.setOfSetOfsetOfLong) &&
            Objects.equals(mapStructListOfListOfLong, other.mapStructListOfListOfLong) &&
            Objects.equals(mKeyStructValInt, other.mKeyStructValInt) &&
            Objects.equals(listOfMapKeyIntValInt, other.listOfMapKeyIntValInt) &&
            Objects.equals(listOfMapKeyStrValList, other.listOfMapKeyStrValList) &&
            Objects.equals(mapKeySetValLong, other.mapKeySetValLong) &&
            Objects.equals(mapKeyListValLong, other.mapKeyListValLong) &&
            Objects.equals(mapKeyMapValMap, other.mapKeyMapValMap) &&
            Objects.equals(mapKeySetValMap, other.mapKeySetValMap) &&
            Objects.equals(nestedMaps, other.nestedMaps) &&
            Objects.equals(mapKeyIntValList, other.mapKeyIntValList) &&
            Objects.equals(mapKeyIntValSet, other.mapKeyIntValSet) &&
            Objects.equals(mapKeySetValInt, other.mapKeySetValInt) &&
            Objects.equals(mapKeyListValSet, other.mapKeyListValSet) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            setOfSetOfInt,
            listofListOfListOfListOfEnum,
            listOfListOfMyStruct,
            setOfListOfListOfLong,
            setOfSetOfsetOfLong,
            mapStructListOfListOfLong,
            mKeyStructValInt,
            listOfMapKeyIntValInt,
            listOfMapKeyStrValList,
            mapKeySetValLong,
            mapKeyListValLong,
            mapKeyMapValMap,
            mapKeySetValMap,
            nestedMaps,
            mapKeyIntValList,
            mapKeyIntValSet,
            mapKeySetValInt,
            mapKeyListValSet
        });
    }
    
}
