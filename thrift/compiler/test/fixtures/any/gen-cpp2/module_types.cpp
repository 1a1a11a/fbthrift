/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/any/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/any/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>
#include <thrift/conformance/cpp2/AnyRegistry.h>

#include "thrift/compiler/test/fixtures/any/gen-cpp2/module_data.h"

namespace {
apache::thrift::conformance::AnyType anyTypeFor(std::string name) {
    apache::thrift::conformance::AnyType type;
    type.set_name(std::move(name));
    return type;
}
} // namespace


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStruct1>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "myString",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

// Static-init time registration for dynamically-linked libraries.
//
// To include in statically-linked libraties, always link (e.g. link_whole)
// `module_sinit.cpp`.
FOLLY_EXPORT bool __fbthrift_static_init_MyStruct1 = (
    apache::thrift::conformance::detail::registerGeneratedStruct<
        MyStruct1,
        apache::thrift::conformance::StandardProtocol::Compact,
        apache::thrift::conformance::StandardProtocol::Binary
    >(anyTypeFor("facebook.com/thrift/compiler/test/fictures/any/MyStruct1")), true);

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyStruct1::MyStruct1(apache::thrift::FragileConstructor, ::std::string myString__arg) :
    myString(std::move(myString__arg)) {
  __isset.myString = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void MyStruct1::__clear() {
  // clear all fields
  myString = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool MyStruct1::operator==(const MyStruct1& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.myString == rhs.myString)) {
    return false;
  }
  return true;
}

bool MyStruct1::operator<(const MyStruct1& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.myString == rhs.myString)) {
    return lhs.myString < rhs.myString;
  }
  return false;
}


void swap(MyStruct1& a, MyStruct1& b) {
  using ::std::swap;
  swap(a.myString_ref().value(), b.myString_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void MyStruct1::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct1::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct1::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct1::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct1::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct1::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct1::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct1::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



} // cpp2
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStruct2>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "myString",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

// Static-init time registration for dynamically-linked libraries.
//
// To include in statically-linked libraties, always link (e.g. link_whole)
// `module_sinit.cpp`.
FOLLY_EXPORT bool __fbthrift_static_init_MyStruct2 = (
    apache::thrift::conformance::detail::registerGeneratedStruct<
        MyStruct2,
        apache::thrift::conformance::StandardProtocol::Compact,
        apache::thrift::conformance::StandardProtocol::Binary
    >(anyTypeFor("facebook.com/thrift/compiler/test/fictures/any/MyStruct2")), true);

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyStruct2::MyStruct2(apache::thrift::FragileConstructor, ::std::string myString__arg) :
    myString(std::move(myString__arg)) {
  __isset.myString = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void MyStruct2::__clear() {
  // clear all fields
  myString = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool MyStruct2::operator==(const MyStruct2& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.myString == rhs.myString)) {
    return false;
  }
  return true;
}

bool MyStruct2::operator<(const MyStruct2& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.myString == rhs.myString)) {
    return lhs.myString < rhs.myString;
  }
  return false;
}


void swap(MyStruct2& a, MyStruct2& b) {
  using ::std::swap;
  swap(a.myString_ref().value(), b.myString_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void MyStruct2::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct2::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



} // cpp2
