/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct myString;
struct myString;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_myString
#define APACHE_THRIFT_ACCESSOR_myString
APACHE_THRIFT_DEFINE_ACCESSOR(myString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myString
#define APACHE_THRIFT_ACCESSOR_myString
APACHE_THRIFT_DEFINE_ACCESSOR(myString);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace cpp2 {
class MyStruct1;
class MyStruct2;
} // cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
class MyStruct1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = MyStruct1;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  MyStruct1() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct1(apache::thrift::FragileConstructor, ::std::string myString__arg);

  MyStruct1(MyStruct1&&) = default;

  MyStruct1(const MyStruct1&) = default;


  MyStruct1& operator=(MyStruct1&&) = default;

  MyStruct1& operator=(const MyStruct1&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 private:
  ::std::string myString;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool myString;
  } __isset = {};
  bool operator==(const MyStruct1& rhs) const;
#ifndef SWIG
  friend bool operator!=(const MyStruct1& __x, const MyStruct1& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const MyStruct1& rhs) const;
#ifndef SWIG
  friend bool operator>(const MyStruct1& __x, const MyStruct1& __y) {
    return __y < __x;
  }
  friend bool operator<=(const MyStruct1& __x, const MyStruct1& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const MyStruct1& __x, const MyStruct1& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myString_ref() const& {
    return {this->myString, __isset.myString};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myString_ref() const&& {
    return {std::move(this->myString), __isset.myString};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myString_ref() & {
    return {this->myString, __isset.myString};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myString_ref() && {
    return {std::move(this->myString), __isset.myString};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const ::std::string& get_myString() const& {
    return myString;
  }

  ::std::string get_myString() && {
    return std::move(myString);
  }

  template <typename T_MyStruct1_myString_struct_setter = ::std::string>
  ::std::string& set_myString(T_MyStruct1_myString_struct_setter&& myString_) {
    myString = std::forward<T_MyStruct1_myString_struct_setter>(myString_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.myString = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return myString;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< MyStruct1 >;
  friend void swap(MyStruct1& a, MyStruct1& b);
};

template <class Protocol_>
uint32_t MyStruct1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStruct2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = MyStruct2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  MyStruct2() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct2(apache::thrift::FragileConstructor, ::std::string myString__arg);

  MyStruct2(MyStruct2&&) = default;

  MyStruct2(const MyStruct2&) = default;


  MyStruct2& operator=(MyStruct2&&) = default;

  MyStruct2& operator=(const MyStruct2&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 private:
  ::std::string myString;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool myString;
  } __isset = {};
  bool operator==(const MyStruct2& rhs) const;
#ifndef SWIG
  friend bool operator!=(const MyStruct2& __x, const MyStruct2& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const MyStruct2& rhs) const;
#ifndef SWIG
  friend bool operator>(const MyStruct2& __x, const MyStruct2& __y) {
    return __y < __x;
  }
  friend bool operator<=(const MyStruct2& __x, const MyStruct2& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const MyStruct2& __x, const MyStruct2& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myString_ref() const& {
    return {this->myString, __isset.myString};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myString_ref() const&& {
    return {std::move(this->myString), __isset.myString};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myString_ref() & {
    return {this->myString, __isset.myString};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myString_ref() && {
    return {std::move(this->myString), __isset.myString};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const ::std::string& get_myString() const& {
    return myString;
  }

  ::std::string get_myString() && {
    return std::move(myString);
  }

  template <typename T_MyStruct2_myString_struct_setter = ::std::string>
  ::std::string& set_myString(T_MyStruct2_myString_struct_setter&& myString_) {
    myString = std::forward<T_MyStruct2_myString_struct_setter>(myString_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.myString = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return myString;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< MyStruct2 >;
  friend void swap(MyStruct2& a, MyStruct2& b);
};

template <class Protocol_>
uint32_t MyStruct2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
