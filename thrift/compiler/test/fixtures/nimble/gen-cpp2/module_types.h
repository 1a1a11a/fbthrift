/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct first;
struct second;
struct third;
struct isTrue;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_first
#define APACHE_THRIFT_ACCESSOR_first
APACHE_THRIFT_DEFINE_ACCESSOR(first);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_second
#define APACHE_THRIFT_ACCESSOR_second
APACHE_THRIFT_DEFINE_ACCESSOR(second);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_third
#define APACHE_THRIFT_ACCESSOR_third
APACHE_THRIFT_DEFINE_ACCESSOR(third);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_isTrue
#define APACHE_THRIFT_ACCESSOR_isTrue
APACHE_THRIFT_DEFINE_ACCESSOR(isTrue);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace cpp2 {
class BasicTypes;
} // cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
class BasicTypes final : private apache::thrift::detail::st::ComparisonOperators<BasicTypes> {
 public:

  BasicTypes() :
      first(0),
      second(0),
      third(0),
      isTrue(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BasicTypes(apache::thrift::FragileConstructor, int32_t first__arg, int32_t second__arg, int64_t third__arg, bool isTrue__arg);

  BasicTypes(BasicTypes&&) = default;

  BasicTypes(const BasicTypes&) = default;

  BasicTypes& operator=(BasicTypes&&) = default;

  BasicTypes& operator=(const BasicTypes&) = default;
  void __clear();
 public:
  int32_t first;
 private:
  int32_t second;
 private:
  int64_t third;
 public:
  bool isTrue;

 public:
  struct __isset {
    bool second;
    bool third;
    bool isTrue;
  } __isset = {};
  bool operator==(const BasicTypes& rhs) const;
  bool operator<(const BasicTypes& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&> second_ref() const& {
    return {second, __isset.second};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&&> second_ref() const&& {
    return {std::move(second), __isset.second};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&> second_ref() & {
    return {second, __isset.second};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&&> second_ref() && {
    return {std::move(second), __isset.second};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int64_t&> third_ref() const& {
    return {third, __isset.third};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int64_t&&> third_ref() const&& {
    return {std::move(third), __isset.third};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int64_t&> third_ref() & {
    return {third, __isset.third};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int64_t&&> third_ref() && {
    return {std::move(third), __isset.third};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> isTrue_ref() const& {
    return {this->isTrue, __isset.isTrue};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> isTrue_ref() const&& {
    return {std::move(this->isTrue), __isset.isTrue};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> isTrue_ref() & {
    return {this->isTrue, __isset.isTrue};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> isTrue_ref() && {
    return {std::move(this->isTrue), __isset.isTrue};
  }

  int32_t get_first() const {
    return first;
  }

  int32_t& set_first(int32_t first_) {
    first = first_;
    return first;
  }

  const int32_t* get_second() const& {
    return __isset.second ? std::addressof(second) : nullptr;
  }

  int32_t* get_second() & {
    return __isset.second ? std::addressof(second) : nullptr;
  }
  int32_t* get_second() && = delete;

  int32_t& set_second(int32_t second_) {
    second = second_;
    __isset.second = true;
    return second;
  }

  const int64_t* get_third() const& {
    return __isset.third ? std::addressof(third) : nullptr;
  }

  int64_t* get_third() & {
    return __isset.third ? std::addressof(third) : nullptr;
  }
  int64_t* get_third() && = delete;

  int64_t& set_third(int64_t third_) {
    third = third_;
    __isset.third = true;
    return third;
  }

  bool get_isTrue() const {
    return isTrue;
  }

  bool& set_isTrue(bool isTrue_) {
    isTrue = isTrue_;
    __isset.isTrue = true;
    return isTrue;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< BasicTypes >;
};

void swap(BasicTypes& a, BasicTypes& b);

template <class Protocol_>
uint32_t BasicTypes::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
