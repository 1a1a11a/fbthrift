/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basicannotations;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct("MyStruct")
public final class MyStruct {
    @ThriftConstructor
    public MyStruct(
        @ThriftField(value=1, name="major", requiredness=Requiredness.NONE) final long major,
        @ThriftField(value=2, name="package", requiredness=Requiredness.NONE) final String _package,
        @ThriftField(value=3, name="annotation_with_quote", requiredness=Requiredness.NONE) final String annotationWithQuote,
        @ThriftField(value=4, name="class_", requiredness=Requiredness.NONE) final String class_
    ) {
        this.major = major;
        this._package = _package;
        this.annotationWithQuote = annotationWithQuote;
        this.class_ = class_;
    }
    
    protected MyStruct() {
      this.major = 0L;
      this._package = null;
      this.annotationWithQuote = null;
      this.class_ = null;
    }
    
    public static class Builder {
        private long major;
    
        public Builder setMajor(long major) {
            this.major = major;
            return this;
        }
        private String _package;
    
        public Builder setPackage(String _package) {
            this._package = _package;
            return this;
        }
        private String annotationWithQuote;
    
        public Builder setAnnotationWithQuote(String annotationWithQuote) {
            this.annotationWithQuote = annotationWithQuote;
            return this;
        }
        private String class_;
    
        public Builder setClass(String class_) {
            this.class_ = class_;
            return this;
        }
    
        public Builder() { }
        public Builder(MyStruct other) {
            this.major = other.major;
            this._package = other._package;
            this.annotationWithQuote = other.annotationWithQuote;
            this.class_ = other.class_;
        }
    
        public MyStruct build() {
            return new MyStruct (
                this.major,
                this._package,
                this.annotationWithQuote,
                this.class_
            );
        }
    }
    
    private final long major;
    private final String _package;
    private final String annotationWithQuote;
    private final String class_;

    
    @ThriftField(value=1, name="major", requiredness=Requiredness.NONE)
    public long getMajor() { return major; }
        
    @ThriftField(value=2, name="package", requiredness=Requiredness.NONE)
    public String getPackage() { return _package; }
        
    @ThriftField(value=3, name="annotation_with_quote", requiredness=Requiredness.NONE)
    public String getAnnotationWithQuote() { return annotationWithQuote; }
        
    @ThriftField(value=4, name="class_", requiredness=Requiredness.NONE)
    public String getClass() { return class_; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("major", major)
            .add("_package", _package)
            .add("annotationWithQuote", annotationWithQuote)
            .add("class_", class_)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStruct other = (MyStruct)o;
    
        return
            Objects.equals(major, other.major) &&
            Objects.equals(_package, other._package) &&
            Objects.equals(annotationWithQuote, other.annotationWithQuote) &&
            Objects.equals(class_, other.class_) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            major,
            _package,
            annotationWithQuote,
            class_
        });
    }
    
}
