<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift enum:-
 * MyEnum
 */
enum MyEnum: int {
  MyValue1 = 0;
  MyValue2 = 1;
  DOMAIN = 2;
}

/**
 * Original thrift struct:-
 * MyStruct
 */
class MyStruct implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'major',
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'package',
      'type' => \TType::STRING,
    ),
    3 => shape(
      'var' => 'annotation_with_quote',
      'type' => \TType::STRING,
    ),
    4 => shape(
      'var' => 'class_',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'major' => 1,
    'package' => 2,
    'annotation_with_quote' => 3,
    'class_' => 4,
  ];
  const type TShape = shape(
    'major' => int,
    'package' => string,
    'annotation_with_quote' => string,
    'class_' => string,
    ...
  );
  const int STRUCTURAL_ID = 3316847923183484409;
  /**
   * Original thrift field:-
   * 1: i64 major
   */
  public int $major;
  /**
   * Original thrift field:-
   * 2: string package
   */
  public string $package;
  /**
   * Original thrift field:-
   * 3: string annotation_with_quote
   */
  public string $annotation_with_quote;
  /**
   * Original thrift field:-
   * 4: string class_
   */
  public string $class_;

  <<__Rx>>
  public function __construct(?int $major = null, ?string $package = null, ?string $annotation_with_quote = null, ?string $class_ = null  ) {
    if ($major === null) {
      $this->major = 0;
    } else {
      $this->major = $major;
    }
    if ($package === null) {
      $this->package = '';
    } else {
      $this->package = $package;
    }
    if ($annotation_with_quote === null) {
      $this->annotation_with_quote = '';
    } else {
      $this->annotation_with_quote = $annotation_with_quote;
    }
    if ($class_ === null) {
      $this->class_ = '';
    } else {
      $this->class_ = $class_;
    }
  }

  public function getName(): string {
    return 'MyStruct';
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = new static();
    $me->major = $shape['major'];
    $me->package = $shape['package'];
    $me->annotation_with_quote = $shape['annotation_with_quote'];
    $me->class_ = $shape['class_'];
    return $me;
  }

  <<__Rx>>
  public function __toShape(): self::TShape {
    return shape(
      'major' => $this->major,
      'package' => $this->package,
      'annotation_with_quote' => $this->annotation_with_quote,
      'class_' => $this->class_,
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !is_array($parsed)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'major') !== null) {
      $this->major = /* HH_FIXME[4110] */ $parsed['major'];
    }    
    if (idx($parsed, 'package') !== null) {
      $this->package = /* HH_FIXME[4110] */ $parsed['package'];
    }    
    if (idx($parsed, 'annotation_with_quote') !== null) {
      $this->annotation_with_quote = /* HH_FIXME[4110] */ $parsed['annotation_with_quote'];
    }    
    if (idx($parsed, 'class_') !== null) {
      $this->class_ = /* HH_FIXME[4110] */ $parsed['class_'];
    }    
  }

}

