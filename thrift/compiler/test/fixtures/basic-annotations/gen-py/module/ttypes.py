#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import six
from thrift.util.Recursive import fix_spec
from thrift.Thrift import *
from thrift.protocol.TProtocol import TProtocolException

from json import loads
import sys
if sys.version_info[0] >= 3:
  long = int


import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
fastproto = None
if not '__pypy__' in sys.builtin_module_names:
  try:
    from thrift.protocol import fastproto
  except ImportError:
    pass
all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

__all__ = ['UTF8STRINGS', 'MyEnum', 'MyStruct']

class MyEnum:
  MyValue1 = 0
  MyValue2 = 1
  DOMAIN = 2

  _VALUES_TO_NAMES = {
    0: "MyValue1",
    1: "MyValue2",
    2: "DOMAIN",
  }

  _NAMES_TO_VALUES = {
    "MyValue1": 0,
    "MyValue2": 1,
    "DOMAIN": 2,
  }

class MyStruct:
  """
  Attributes:
   - major
   - package
   - annotation_with_quote
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      self.checkRequired()
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      self.checkRequired()
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.major = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.package = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.annotation_with_quote = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()
    self.checkRequired()

  def checkRequired(self):
    return

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStruct')
    if self.major != None:
      oprot.writeFieldBegin('major', TType.I64, 1)
      oprot.writeI64(self.major)
      oprot.writeFieldEnd()
    if self.package != None:
      oprot.writeFieldBegin('package', TType.STRING, 2)
      oprot.writeString(self.package.encode('utf-8')) if UTF8STRINGS and not isinstance(self.package, bytes) else oprot.writeString(self.package)
      oprot.writeFieldEnd()
    if self.annotation_with_quote != None:
      oprot.writeFieldBegin('annotation_with_quote', TType.STRING, 3)
      oprot.writeString(self.annotation_with_quote.encode('utf-8')) if UTF8STRINGS and not isinstance(self.annotation_with_quote, bytes) else oprot.writeString(self.annotation_with_quote)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True):
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'major' in json_obj and json_obj['major'] is not None:
      self.major = long(json_obj['major'])
    if 'package' in json_obj and json_obj['package'] is not None:
      self.package = json_obj['package']
    if 'annotation_with_quote' in json_obj and json_obj['annotation_with_quote'] is not None:
      self.annotation_with_quote = json_obj['annotation_with_quote']

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.major is not None:
      value = pprint.pformat(self.major, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    major=%s' % (value))
    if self.package is not None:
      value = pprint.pformat(self.package, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    package=%s' % (value))
    if self.annotation_with_quote is not None:
      value = pprint.pformat(self.annotation_with_quote, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    annotation_with_quote=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  # Override the __hash__ function for Python3 - t10434117
  if not six.PY2:
    __hash__ = object.__hash__

all_structs.append(MyStruct)
MyStruct.thrift_spec = (
  None, # 0
  (1, TType.I64, 'major', None, None, 2, ), # 1
  (2, TType.STRING, 'package', True, None, 2, ), # 2
  (3, TType.STRING, 'annotation_with_quote', True, None, 2, ), # 3
)

MyStruct.thrift_struct_annotations = {
}
MyStruct.thrift_field_annotations = {
  1: {
    "cpp.name": """majorVer""",
  },
  2: {
    "java.swift.name": """_package""",
  },
  3: {
    "go.tag": """tag:\"somevalue\"""",
  },
}

def MyStruct__init__(self, major=None, package=None, annotation_with_quote=None,):
  self.major = major
  self.package = package
  self.annotation_with_quote = annotation_with_quote

MyStruct.__init__ = MyStruct__init__

def MyStruct__setstate__(self, state):
  state.setdefault('major', None)
  state.setdefault('package', None)
  state.setdefault('annotation_with_quote', None)
  self.__dict__ = state

MyStruct.__getstate__ = lambda self: self.__dict__.copy()
MyStruct.__setstate__ = MyStruct__setstate__

fix_spec(all_structs)
del all_structs
