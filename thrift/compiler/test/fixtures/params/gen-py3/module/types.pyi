#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
from enum import Enum


# Forward Definitions for Containers
class List__i32(_typing.Sequence[int]): ...
class Map__i32_List__i32(_typing.Mapping[int, _typing.Sequence[int]]): ...
class Set__i32(_typing.AbstractSet[int]): ...
class Map__i32_Set__i32(_typing.Mapping[int, _typing.AbstractSet[int]]): ...
class Map__i32_i32(_typing.Mapping[int, int]): ...
class List__Map__i32_i32(_typing.Sequence[_typing.Mapping[int, int]]): ...
class List__Set__i32(_typing.Sequence[_typing.AbstractSet[int]]): ...
class Map__i32_Map__i32_Set__i32(_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]): ...
class List__Map__i32_Map__i32_Set__i32(_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]): ...
class List__List__Map__i32_Map__i32_Set__i32(_typing.Sequence[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]): ...


_List__i32T = _typing.TypeVar('_List__i32T', bound=_typing.Sequence[int])


class List__i32(_typing.Sequence[int]):
    def __init__(self, items: _typing.Sequence[int]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: int) -> int: ...
    def count(self, item: int) -> int: ...
    def __add__(self, other: _typing.Sequence[int]) -> List__i32: ...
    def __radd__(self, other: _List__i32T) -> _List__i32T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__i32: ...
    def __getitem__(self, index: int) -> int: ...
    def __reversed__(self) -> _typing.Iterator[int]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, item: int) -> bool: ...
    def __eq__(self, other: _typing.Sequence[int]) -> bool: ...


class Map__i32_List__i32(_typing.Mapping[int, _typing.Sequence[int]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Sequence[int]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Sequence[int]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Sequence[int]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Sequence[int]=None) -> _typing.Sequence[int]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Sequence[int]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Sequence[int]]]: ...


class Set__i32(_typing.AbstractSet[int]):
    def __init__(self, items: _typing.AbstractSet[int]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: _typing.AbstractSet[int]) -> bool: ...
    def __eq__(self, other: _typing.AbstractSet[int]) -> bool: ...
    def __contains__(self, item: int) -> bool: ...
    def __iter__(self) -> int): ...
    def __add__(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def __or__(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def __xor__(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def isdisjoint(self, other: _typing.AbstractSet[int]) -> bool: ...
    def union(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def intersection(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def difference(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def symmetric_difference(self, other: _typing.AbstractSet[int]) -> Set__i32: ...
    def issubset(self, other: _typing.AbstractSet[int]) -> bool: ...
    def issuperset(self, other: _typing.AbstractSet[int]) -> bool: ...


class Map__i32_Set__i32(_typing.Mapping[int, _typing.AbstractSet[int]]):
    def __init__(self, items: _typing.Mapping[int, _typing.AbstractSet[int]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.AbstractSet[int]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.AbstractSet[int]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.AbstractSet[int]=None) -> _typing.AbstractSet[int]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.AbstractSet[int]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.AbstractSet[int]]]: ...


class Map__i32_i32(_typing.Mapping[int, int]):
    def __init__(self, items: _typing.Mapping[int, int]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, int]) -> bool: ...
    def __getitem__(self, key: int) -> int: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: int=None) -> int: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[int]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, int]]: ...


_List__Map__i32_i32T = _typing.TypeVar('_List__Map__i32_i32T', bound=_typing.Sequence[_typing.Mapping[int, int]])


class List__Map__i32_i32(_typing.Sequence[_typing.Mapping[int, int]]):
    def __init__(self, items: _typing.Sequence[_typing.Mapping[int, int]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: _typing.Mapping[int, int]) -> int: ...
    def count(self, item: _typing.Mapping[int, int]) -> int: ...
    def __add__(self, other: _typing.Sequence[_typing.Mapping[int, int]]) -> List__Map__i32_i32: ...
    def __radd__(self, other: _List__Map__i32_i32T) -> _List__Map__i32_i32T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__Map__i32_i32: ...
    def __getitem__(self, index: int) -> _typing.Mapping[int, int]: ...
    def __reversed__(self) -> _typing.Iterator[_typing.Mapping[int, int]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Mapping[int, int]]: ...
    def __contains__(self, item: _typing.Mapping[int, int]) -> bool: ...
    def __eq__(self, other: _typing.Sequence[_typing.Mapping[int, int]]) -> bool: ...


_List__Set__i32T = _typing.TypeVar('_List__Set__i32T', bound=_typing.Sequence[_typing.AbstractSet[int]])


class List__Set__i32(_typing.Sequence[_typing.AbstractSet[int]]):
    def __init__(self, items: _typing.Sequence[_typing.AbstractSet[int]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: _typing.AbstractSet[int]) -> int: ...
    def count(self, item: _typing.AbstractSet[int]) -> int: ...
    def __add__(self, other: _typing.Sequence[_typing.AbstractSet[int]]) -> List__Set__i32: ...
    def __radd__(self, other: _List__Set__i32T) -> _List__Set__i32T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__Set__i32: ...
    def __getitem__(self, index: int) -> _typing.AbstractSet[int]: ...
    def __reversed__(self) -> _typing.Iterator[_typing.AbstractSet[int]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.AbstractSet[int]]: ...
    def __contains__(self, item: _typing.AbstractSet[int]) -> bool: ...
    def __eq__(self, other: _typing.Sequence[_typing.AbstractSet[int]]) -> bool: ...


class Map__i32_Map__i32_Set__i32(_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Mapping[int, _typing.AbstractSet[int]]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Mapping[int, _typing.AbstractSet[int]]=None) -> _typing.Mapping[int, _typing.AbstractSet[int]]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Mapping[int, _typing.AbstractSet[int]]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]: ...


_List__Map__i32_Map__i32_Set__i32T = _typing.TypeVar('_List__Map__i32_Map__i32_Set__i32T', bound=_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]])


class List__Map__i32_Map__i32_Set__i32(_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]):
    def __init__(self, items: _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: _typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]) -> int: ...
    def count(self, item: _typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]) -> int: ...
    def __add__(self, other: _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]) -> List__Map__i32_Map__i32_Set__i32: ...
    def __radd__(self, other: _List__Map__i32_Map__i32_Set__i32T) -> _List__Map__i32_Map__i32_Set__i32T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__Map__i32_Map__i32_Set__i32: ...
    def __getitem__(self, index: int) -> _typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]: ...
    def __reversed__(self) -> _typing.Iterator[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]: ...
    def __contains__(self, item: _typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]) -> bool: ...
    def __eq__(self, other: _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]) -> bool: ...


_List__List__Map__i32_Map__i32_Set__i32T = _typing.TypeVar('_List__List__Map__i32_Map__i32_Set__i32T', bound=_typing.Sequence[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]])


class List__List__Map__i32_Map__i32_Set__i32(_typing.Sequence[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]):
    def __init__(self, items: _typing.Sequence[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]) -> int: ...
    def count(self, item: _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]) -> int: ...
    def __add__(self, other: _typing.Sequence[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]) -> List__List__Map__i32_Map__i32_Set__i32: ...
    def __radd__(self, other: _List__List__Map__i32_Map__i32_Set__i32T) -> _List__List__Map__i32_Map__i32_Set__i32T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__List__Map__i32_Map__i32_Set__i32: ...
    def __getitem__(self, index: int) -> _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]: ...
    def __reversed__(self) -> _typing.Iterator[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]: ...
    def __contains__(self, item: _typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]) -> bool: ...
    def __eq__(self, other: _typing.Sequence[_typing.Sequence[_typing.Mapping[int, _typing.Mapping[int, _typing.AbstractSet[int]]]]]) -> bool: ...


