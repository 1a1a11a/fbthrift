/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {
NestedContainersClientWrapper::NestedContainersClientWrapper(
    std::shared_ptr<cpp2::NestedContainersAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    async_client(async_client),
    event_base(event_base) {}

NestedContainersClientWrapper::~NestedContainersClientWrapper() {}

void NestedContainersClientWrapper::mapList(
    std::map<int32_t,std::vector<int32_t>> arg_foo,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_mapList(
    arg_foo
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void NestedContainersClientWrapper::mapSet(
    std::map<int32_t,std::set<int32_t>> arg_foo,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_mapSet(
    arg_foo
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void NestedContainersClientWrapper::listMap(
    std::vector<std::map<int32_t,int32_t>> arg_foo,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_listMap(
    arg_foo
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void NestedContainersClientWrapper::listSet(
    std::vector<std::set<int32_t>> arg_foo,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_listSet(
    arg_foo
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void NestedContainersClientWrapper::turtles(
    std::vector<std::vector<std::map<int32_t,std::map<int32_t,std::set<int32_t>>>>> arg_foo,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_turtles(
    arg_foo
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


} // namespace cpp2
