/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.basic;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial", "unchecked" })
public class MyUnion extends TUnion<MyUnion> implements Comparable<MyUnion> {
  public static boolean DEFAULT_PRETTY_PRINT = true;
  private static final TStruct STRUCT_DESC = new TStruct("MyUnion");
  private static final TField MY_ENUM_FIELD_DESC = new TField("myEnum", TType.I32, (short)1);
  private static final TField MY_STRUCT_FIELD_DESC = new TField("myStruct", TType.STRUCT, (short)2);
  private static final TField MY_DATA_ITEM_FIELD_DESC = new TField("myDataItem", TType.STRUCT, (short)3);

  public static final int MYENUM = 1;
  public static final int MYSTRUCT = 2;
  public static final int MYDATAITEM = 3;

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(MYENUM, new FieldMetaData("myEnum", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(MYSTRUCT, new FieldMetaData("myStruct", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyStruct.class)));
    tmpMetaDataMap.put(MYDATAITEM, new FieldMetaData("myDataItem", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyDataItem.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  public MyUnion() {
    super();
  }

  public MyUnion(int setField, Object value) {
    super(setField, value);
  }

  public MyUnion(MyUnion other) {
    super(other);
  }
  public MyUnion deepCopy() {
    return new MyUnion(this);
  }

  public static MyUnion myEnum(MyEnum value) {
    MyUnion x = new MyUnion();
    x.setMyEnum(value);
    return x;
  }

  public static MyUnion myStruct(MyStruct value) {
    MyUnion x = new MyUnion();
    x.setMyStruct(value);
    return x;
  }

  public static MyUnion myDataItem(MyDataItem value) {
    MyUnion x = new MyUnion();
    x.setMyDataItem(value);
    return x;
  }


  @Override
  protected void checkType(short setField, Object value) throws ClassCastException {
    switch (setField) {
      case MYENUM:
        if (value instanceof MyEnum) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MyEnum for field 'myEnum', but got " + value.getClass().getSimpleName());
      case MYSTRUCT:
        if (value instanceof MyStruct) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MyStruct for field 'myStruct', but got " + value.getClass().getSimpleName());
      case MYDATAITEM:
        if (value instanceof MyDataItem) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MyDataItem for field 'myDataItem', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  public void read(TProtocol iprot) throws TException {
    setField_ = 0;
    value_ = null;
    iprot.readStructBegin(metaDataMap);
    TField field = iprot.readFieldBegin();
    if (field.type != TType.STOP)
    {
      value_ = readValue(iprot, field);
      if (value_ != null)
      {
        switch (field.id) {
          case MYENUM:
            if (field.type == MY_ENUM_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
          case MYSTRUCT:
            if (field.type == MY_STRUCT_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
          case MYDATAITEM:
            if (field.type == MY_DATA_ITEM_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
        }
      }
      iprot.readFieldEnd();
      iprot.readFieldBegin();
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  @Override
  protected Object readValue(TProtocol iprot, TField field) throws TException {
    switch (field.id) {
      case MYENUM:
        if (field.type == MY_ENUM_FIELD_DESC.type) {
          MyEnum myEnum;
          myEnum = MyEnum.findByValue(iprot.readI32());
          return myEnum;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      case MYSTRUCT:
        if (field.type == MY_STRUCT_FIELD_DESC.type) {
          MyStruct myStruct;
          myStruct = new MyStruct();
          myStruct.read(iprot);
          return myStruct;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      case MYDATAITEM:
        if (field.type == MY_DATA_ITEM_FIELD_DESC.type) {
          MyDataItem myDataItem;
          myDataItem = new MyDataItem();
          myDataItem.read(iprot);
          return myDataItem;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      default:
        TProtocolUtil.skip(iprot, field.type);
        return null;
    }
  }

  @Override
  protected void writeValue(TProtocol oprot, short setField, Object value) throws TException {
    switch (setField) {
      case MYENUM:
        MyEnum myEnum = (MyEnum)getFieldValue();
        oprot.writeI32(myEnum == null ? 0 : myEnum.getValue());
        return;
      case MYSTRUCT:
        MyStruct myStruct = (MyStruct)getFieldValue();
        myStruct.write(oprot);
        return;
      case MYDATAITEM:
        MyDataItem myDataItem = (MyDataItem)getFieldValue();
        myDataItem.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField);
    }
  }

  @Override
  protected TField getFieldDesc(int setField) {
    switch (setField) {
      case MYENUM:
        return MY_ENUM_FIELD_DESC;
      case MYSTRUCT:
        return MY_STRUCT_FIELD_DESC;
      case MYDATAITEM:
        return MY_DATA_ITEM_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getMyEnum() {
    if (getSetField() == MYENUM) {
      return (MyEnum)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'myEnum' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see MyEnum
   */
  public void setMyEnum(MyEnum value) {
    setField_ = MYENUM;
    value_ = value;
  }

  public MyStruct getMyStruct() {
    if (getSetField() == MYSTRUCT) {
      return (MyStruct)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'myStruct' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMyStruct(MyStruct value) {
    if (value == null) throw new NullPointerException();
    setField_ = MYSTRUCT;
    value_ = value;
  }

  public MyDataItem getMyDataItem() {
    if (getSetField() == MYDATAITEM) {
      return (MyDataItem)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'myDataItem' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMyDataItem(MyDataItem value) {
    if (value == null) throw new NullPointerException();
    setField_ = MYDATAITEM;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof MyUnion) {
      return equals((MyUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(MyUnion other) {
    return equalsNobinaryImpl(other);
  }

  @Override
  public int compareTo(MyUnion other) {
    return compareToImpl(other);
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyUnion");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    // Only print this field if it is the set field
    if (getSetField() == MYENUM)
    {
      sb.append(indentStr);
      sb.append("myEnum");
      sb.append(space);
      sb.append(":").append(space);
      String myEnum_name = MyEnum.VALUES_TO_NAMES.get(this.getMyEnum());
      if (myEnum_name != null) {
        sb.append(myEnum_name);
        sb.append(" (");
      }
      sb.append(this.getMyEnum());
      if (myEnum_name != null) {
        sb.append(")");
      }
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == MYSTRUCT)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("myStruct");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getMyStruct() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getMyStruct(), indent + 1, prettyPrint));
      }
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == MYDATAITEM)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("myDataItem");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getMyDataItem() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getMyDataItem(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }


}
