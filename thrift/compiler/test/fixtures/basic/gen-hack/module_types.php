<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift enum:-
 * MyEnum
 */
enum MyEnum: int {
  MyValue1 = 0;
  MyValue2 = 1;
  DOMAIN = 2;
}

/**
 * Original thrift struct:-
 * MyStruct
 */
class MyStruct implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'MyIntField',
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'MyStringField',
      'type' => \TType::STRING,
    ),
    3 => shape(
      'var' => 'MyDataField',
      'type' => \TType::STRUCT,
      'class' => MyDataItem::class,
    ),
    4 => shape(
      'var' => 'major',
      'type' => \TType::I64,
    ),
    5 => shape(
      'var' => 'myEnum',
      'type' => \TType::I32,
      'enum' => MyEnum::class,
    ),
    6 => shape(
      'var' => 'package',
      'type' => \TType::STRING,
    ),
    7 => shape(
      'var' => 'annotation_with_quote',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'MyIntField' => 1,
    'MyStringField' => 2,
    'MyDataField' => 3,
    'major' => 4,
    'myEnum' => 5,
    'package' => 6,
    'annotation_with_quote' => 7,
  ];
  const type TShape = shape(
    'MyIntField' => int,
    'MyStringField' => string,
    ?'MyDataField' => ?MyDataItem::TShape,
    'major' => int,
    ?'myEnum' => ?MyEnum,
    'package' => string,
    'annotation_with_quote' => string,
    ...
  );
  const int STRUCTURAL_ID = 5409774042669733538;
  /**
   * Original thrift field:-
   * 1: i64 MyIntField
   */
  public int $MyIntField;
  /**
   * Original thrift field:-
   * 2: string MyStringField
   */
  public string $MyStringField;
  /**
   * Original thrift field:-
   * 3: struct module.MyDataItem MyDataField
   */
  public ?MyDataItem $MyDataField;
  /**
   * Original thrift field:-
   * 4: i64 major
   */
  public int $major;
  /**
   * Original thrift field:-
   * 5: enum module.MyEnum myEnum
   */
  public ?MyEnum $myEnum;
  /**
   * Original thrift field:-
   * 6: string package
   */
  public string $package;
  /**
   * Original thrift field:-
   * 7: string annotation_with_quote
   */
  public string $annotation_with_quote;

  <<__Rx>>
  public function __construct(?int $MyIntField = null, ?string $MyStringField = null, ?MyDataItem $MyDataField = null, ?int $major = null, ?MyEnum $myEnum = null, ?string $package = null, ?string $annotation_with_quote = null  ) {
    if ($MyIntField === null) {
      $this->MyIntField = 0;
    } else {
      $this->MyIntField = $MyIntField;
    }
    if ($MyStringField === null) {
      $this->MyStringField = '';
    } else {
      $this->MyStringField = $MyStringField;
    }
    $this->MyDataField = $MyDataField;
    if ($major === null) {
      $this->major = 0;
    } else {
      $this->major = $major;
    }
    $this->myEnum = $myEnum;
    if ($package === null) {
      $this->package = '';
    } else {
      $this->package = $package;
    }
    if ($annotation_with_quote === null) {
      $this->annotation_with_quote = '';
    } else {
      $this->annotation_with_quote = $annotation_with_quote;
    }
  }

  public function getName(): string {
    return 'MyStruct';
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = new static();
    $me->MyIntField = $shape['MyIntField'];
    $me->MyStringField = $shape['MyStringField'];
    if (Shapes::idx($shape, 'MyDataField') !== null) {
      $me->MyDataField = MyDataItem::__fromShape($shape['MyDataField']);
    }
    $me->major = $shape['major'];
    if (Shapes::idx($shape, 'myEnum') !== null) {
      $me->myEnum = $shape['myEnum'];
    }
    $me->package = $shape['package'];
    $me->annotation_with_quote = $shape['annotation_with_quote'];
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'MyIntField' => $this->MyIntField,
      'MyStringField' => $this->MyStringField,
      'MyDataField' => $this->MyDataField?->__toShape(),
      'major' => $this->major,
      'myEnum' => $this->myEnum,
      'package' => $this->package,
      'annotation_with_quote' => $this->annotation_with_quote,
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !is_array($parsed)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'MyIntField') !== null) {
      $this->MyIntField = $parsed['MyIntField'];
    }    
    if (idx($parsed, 'MyStringField') !== null) {
      $this->MyStringField = $parsed['MyStringField'];
    }    
    if (idx($parsed, 'MyDataField') !== null) {
      $_tmp0 = json_encode($parsed['MyDataField']);
      $_tmp1 = new MyDataItem();
      $_tmp1->readFromJson($_tmp0);
      $this->MyDataField = $_tmp1;
    }    
    if (idx($parsed, 'major') !== null) {
      $this->major = $parsed['major'];
    }    
    if (idx($parsed, 'myEnum') !== null) {
      $this->myEnum = MyEnum::coerce($parsed['myEnum']);    }    
    if (idx($parsed, 'package') !== null) {
      $this->package = $parsed['package'];
    }    
    if (idx($parsed, 'annotation_with_quote') !== null) {
      $this->annotation_with_quote = $parsed['annotation_with_quote'];
    }    
  }

}

/**
 * Original thrift struct:-
 * MyDataItem
 */
class MyDataItem implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];
  const type TShape = shape(
    ...
  );
  const int STRUCTURAL_ID = 957977401221134810;

  <<__Rx>>
  public function __construct(  ) {
  }

  public function getName(): string {
    return 'MyDataItem';
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = new static();
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !is_array($parsed)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

  }

}

