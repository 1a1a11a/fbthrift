/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.basic;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStruct");
  private static final TField MY_INT_FIELD_FIELD_DESC = new TField("MyIntField", TType.I64, (short)1);
  private static final TField MY_STRING_FIELD_FIELD_DESC = new TField("MyStringField", TType.STRING, (short)2);
  private static final TField MY_DATA_FIELD_FIELD_DESC = new TField("MyDataField", TType.STRUCT, (short)3);
  private static final TField MY_ENUM_FIELD_DESC = new TField("myEnum", TType.I32, (short)4);

  public final Long MyIntField;
  public final String MyStringField;
  public final MyDataItem MyDataField;
  /**
   * 
   * @see MyEnum
   */
  public final MyEnum myEnum;
  public static final int MYINTFIELD = 1;
  public static final int MYSTRINGFIELD = 2;
  public static final int MYDATAFIELD = 3;
  public static final int MYENUM = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  public MyStruct(
    Long MyIntField,
    String MyStringField,
    MyDataItem MyDataField,
    MyEnum myEnum)
  {
    this.MyIntField = MyIntField;
    this.MyStringField = MyStringField;
    this.MyDataField = MyDataField;
    this.myEnum = myEnum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStruct(MyStruct other) {
    if (other.isSetMyIntField()) {
      this.MyIntField = TBaseHelper.deepCopy(other.MyIntField);
    } else {
      this.MyIntField = null;
    }
    if (other.isSetMyStringField()) {
      this.MyStringField = TBaseHelper.deepCopy(other.MyStringField);
    } else {
      this.MyStringField = null;
    }
    if (other.isSetMyDataField()) {
      this.MyDataField = TBaseHelper.deepCopy(other.MyDataField);
    } else {
      this.MyDataField = null;
    }
    if (other.isSetMyEnum()) {
      this.myEnum = TBaseHelper.deepCopy(other.myEnum);
    } else {
      this.myEnum = null;
    }
  }

  public MyStruct deepCopy() {
    return new MyStruct(this);
  }

  @Deprecated
  public MyStruct clone() {
    return new MyStruct(this);
  }

  public Long getMyIntField() {
    return this.MyIntField;
  }

  // Returns true if field MyIntField is set (has been assigned a value) and false otherwise
  public boolean isSetMyIntField() {
    return this.MyIntField != null;
  }

  public String getMyStringField() {
    return this.MyStringField;
  }

  // Returns true if field MyStringField is set (has been assigned a value) and false otherwise
  public boolean isSetMyStringField() {
    return this.MyStringField != null;
  }

  public MyDataItem getMyDataField() {
    return this.MyDataField;
  }

  // Returns true if field MyDataField is set (has been assigned a value) and false otherwise
  public boolean isSetMyDataField() {
    return this.MyDataField != null;
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getMyEnum() {
    return this.myEnum;
  }

  // Returns true if field myEnum is set (has been assigned a value) and false otherwise
  public boolean isSetMyEnum() {
    return this.myEnum != null;
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case MYINTFIELD:
      return new Long(getMyIntField());

    case MYSTRINGFIELD:
      return getMyStringField();

    case MYDATAFIELD:
      return getMyDataField();

    case MYENUM:
      return getMyEnum();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case MYINTFIELD:
      return isSetMyIntField();
    case MYSTRINGFIELD:
      return isSetMyStringField();
    case MYDATAFIELD:
      return isSetMyDataField();
    case MYENUM:
      return isSetMyEnum();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MyStruct)
      return this.equals((MyStruct)that);
    return false;
  }

  public boolean equals(MyStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_MyIntField = true && this.isSetMyIntField();
    boolean that_present_MyIntField = true && that.isSetMyIntField();
    if (this_present_MyIntField || that_present_MyIntField) {
      if (!(this_present_MyIntField && that_present_MyIntField))
        return false;
      if (!TBaseHelper.equalsNobinary(this.MyIntField, that.MyIntField))
        return false;
    }

    boolean this_present_MyStringField = true && this.isSetMyStringField();
    boolean that_present_MyStringField = true && that.isSetMyStringField();
    if (this_present_MyStringField || that_present_MyStringField) {
      if (!(this_present_MyStringField && that_present_MyStringField))
        return false;
      if (!TBaseHelper.equalsNobinary(this.MyStringField, that.MyStringField))
        return false;
    }

    boolean this_present_MyDataField = true && this.isSetMyDataField();
    boolean that_present_MyDataField = true && that.isSetMyDataField();
    if (this_present_MyDataField || that_present_MyDataField) {
      if (!(this_present_MyDataField && that_present_MyDataField))
        return false;
      if (!TBaseHelper.equalsNobinary(this.MyDataField, that.MyDataField))
        return false;
    }

    boolean this_present_myEnum = true && this.isSetMyEnum();
    boolean that_present_myEnum = true && that.isSetMyEnum();
    if (this_present_myEnum || that_present_myEnum) {
      if (!(this_present_myEnum && that_present_myEnum))
        return false;
      if (!TBaseHelper.equalsNobinary(this.myEnum, that.myEnum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {MyIntField, MyStringField, MyDataField, myEnum});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStruct deserialize(TProtocol iprot) throws TException {
    Long tmp_MyIntField = null;
    String tmp_MyStringField = null;
    MyDataItem tmp_MyDataField = null;
    MyEnum tmp_myEnum = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case MYINTFIELD:
          if (__field.type == TType.I64) {
            tmp_MyIntField = iprot.readI64();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYSTRINGFIELD:
          if (__field.type == TType.STRING) {
            tmp_MyStringField = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYDATAFIELD:
          if (__field.type == TType.STRUCT) {
            tmp_MyDataField = MyDataItem.deserialize(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYENUM:
          if (__field.type == TType.I32) {
            tmp_myEnum = MyEnum.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStruct _that;
    _that = new MyStruct(
      tmp_MyIntField
      ,tmp_MyStringField
      ,tmp_MyDataField
      ,tmp_myEnum
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.MyIntField != null) {
      oprot.writeFieldBegin(MY_INT_FIELD_FIELD_DESC);
      oprot.writeI64(this.MyIntField);
      oprot.writeFieldEnd();
    }
    if (this.MyStringField != null) {
      oprot.writeFieldBegin(MY_STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.MyStringField);
      oprot.writeFieldEnd();
    }
    if (this.MyDataField != null) {
      oprot.writeFieldBegin(MY_DATA_FIELD_FIELD_DESC);
      this.MyDataField.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.myEnum != null) {
      oprot.writeFieldBegin(MY_ENUM_FIELD_DESC);
      oprot.writeI32(this.myEnum == null ? 0 : this.myEnum.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("MyIntField");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyIntField() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMyIntField(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("MyStringField");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyStringField() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMyStringField(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("MyDataField");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyDataField() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMyDataField(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("myEnum");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyEnum() == null) {
      sb.append("null");
    } else {
      String myEnum_name = this.getMyEnum() == null ? "null" : this.getMyEnum().name();
      if (myEnum_name != null) {
        sb.append(myEnum_name);
        sb.append(" (");
      }
      sb.append(this.getMyEnum());
      if (myEnum_name != null) {
        sb.append(")");
      }
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

