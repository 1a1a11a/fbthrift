/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/module/clients_wrapper.h>

namespace cpp2 {
MyServiceClientWrapper::MyServiceClientWrapper(
    std::shared_ptr<cpp2::MyServiceAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    async_client(async_client),
    event_base(event_base) {}

MyServiceClientWrapper::~MyServiceClientWrapper() {}

void MyServiceClientWrapper::ping(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_ping(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceClientWrapper::getRandomData(
    std::function<void(PyObject*, folly::Try<std::string>)> callback,
    PyObject* py_future) {
  async_client->future_getRandomData(
  ).via(event_base.get()).then(
    [=] (folly::Try<std::string>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceClientWrapper::hasDataById(
    int64_t arg_id,
    std::function<void(PyObject*, folly::Try<bool>)> callback,
    PyObject* py_future) {
  async_client->future_hasDataById(
    arg_id
  ).via(event_base.get()).then(
    [=] (folly::Try<bool>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceClientWrapper::getDataById(
    int64_t arg_id,
    std::function<void(PyObject*, folly::Try<std::string>)> callback,
    PyObject* py_future) {
  async_client->future_getDataById(
    arg_id
  ).via(event_base.get()).then(
    [=] (folly::Try<std::string>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceClientWrapper::putDataById(
    int64_t arg_id,
    std::string arg_data,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_putDataById(
    arg_id,
    arg_data
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceClientWrapper::lobDataById(
    int64_t arg_id,
    std::string arg_data,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_lobDataById(
    arg_id,
    arg_data
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


MyServiceFastClientWrapper::MyServiceFastClientWrapper(
    std::shared_ptr<cpp2::MyServiceFastAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    async_client(async_client),
    event_base(event_base) {}

MyServiceFastClientWrapper::~MyServiceFastClientWrapper() {}

void MyServiceFastClientWrapper::ping(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_ping(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceFastClientWrapper::getRandomData(
    std::function<void(PyObject*, folly::Try<std::string>)> callback,
    PyObject* py_future) {
  async_client->future_getRandomData(
  ).via(event_base.get()).then(
    [=] (folly::Try<std::string>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceFastClientWrapper::hasDataById(
    int64_t arg_id,
    std::function<void(PyObject*, folly::Try<bool>)> callback,
    PyObject* py_future) {
  async_client->future_hasDataById(
    arg_id
  ).via(event_base.get()).then(
    [=] (folly::Try<bool>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceFastClientWrapper::getDataById(
    int64_t arg_id,
    std::function<void(PyObject*, folly::Try<std::string>)> callback,
    PyObject* py_future) {
  async_client->future_getDataById(
    arg_id
  ).via(event_base.get()).then(
    [=] (folly::Try<std::string>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceFastClientWrapper::putDataById(
    int64_t arg_id,
    std::string arg_data,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_putDataById(
    arg_id,
    arg_data
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServiceFastClientWrapper::lobDataById(
    int64_t arg_id,
    std::string arg_data,
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_lobDataById(
    arg_id,
    arg_data
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


MyServiceEmptyClientWrapper::MyServiceEmptyClientWrapper(
    std::shared_ptr<cpp2::MyServiceEmptyAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    async_client(async_client),
    event_base(event_base) {}

MyServiceEmptyClientWrapper::~MyServiceEmptyClientWrapper() {}


MyServicePrioParentClientWrapper::MyServicePrioParentClientWrapper(
    std::shared_ptr<cpp2::MyServicePrioParentAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    async_client(async_client),
    event_base(event_base) {}

MyServicePrioParentClientWrapper::~MyServicePrioParentClientWrapper() {}

void MyServicePrioParentClientWrapper::ping(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_ping(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}

void MyServicePrioParentClientWrapper::pong(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_pong(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


MyServicePrioChildClientWrapper::MyServicePrioChildClientWrapper(
    std::shared_ptr<cpp2::MyServicePrioChildAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    MyServicePrioParentClientWrapper(std::dynamic_pointer_cast<MyServicePrioParentAsyncClient>(async_client), event_base),
    async_client(async_client) {}

MyServicePrioChildClientWrapper::~MyServicePrioChildClientWrapper() {}

void MyServicePrioChildClientWrapper::pang(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_pang(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


} // namespace cpp2
