/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#include <src/gen-cpp2/MyService.h>
#include <src/gen-cpp2/MyServiceFast.h>
#include <src/gen-cpp2/MyServiceEmpty.h>
#include <src/gen-cpp2/MyServicePrioParent.h>
#include <src/gen-cpp2/MyServicePrioChild.h>

#include <folly/Try.h>
#include <folly/Unit.h>
#include <folly/io/async/EventBase.h>

#include <Python.h>

#include <cstdint>
#include <functional>
#include <map>
#include <memory>
#include <set>
#include <vector>

namespace cpp2 {

class MyServiceClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyServiceAsyncClient> async_client;
    std::shared_ptr<folly::EventBase> event_base;
  public:
    explicit MyServiceClientWrapper(
      std::shared_ptr<cpp2::MyServiceAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    virtual ~MyServiceClientWrapper();
    void ping(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
    void getRandomData(
      std::function<void(PyObject*, folly::Try<std::string>)> callback,
      PyObject* py_future);
    void hasDataById(
      int64_t arg_id,
      std::function<void(PyObject*, folly::Try<bool>)> callback,
      PyObject* py_future);
    void getDataById(
      int64_t arg_id,
      std::function<void(PyObject*, folly::Try<std::string>)> callback,
      PyObject* py_future);
    void putDataById(
      int64_t arg_id,
      std::string arg_data,
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
    void lobDataById(
      int64_t arg_id,
      std::string arg_data,
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


class MyServiceFastClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyServiceFastAsyncClient> async_client;
    std::shared_ptr<folly::EventBase> event_base;
  public:
    explicit MyServiceFastClientWrapper(
      std::shared_ptr<cpp2::MyServiceFastAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    virtual ~MyServiceFastClientWrapper();
    void ping(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
    void getRandomData(
      std::function<void(PyObject*, folly::Try<std::string>)> callback,
      PyObject* py_future);
    void hasDataById(
      int64_t arg_id,
      std::function<void(PyObject*, folly::Try<bool>)> callback,
      PyObject* py_future);
    void getDataById(
      int64_t arg_id,
      std::function<void(PyObject*, folly::Try<std::string>)> callback,
      PyObject* py_future);
    void putDataById(
      int64_t arg_id,
      std::string arg_data,
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
    void lobDataById(
      int64_t arg_id,
      std::string arg_data,
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


class MyServiceEmptyClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyServiceEmptyAsyncClient> async_client;
    std::shared_ptr<folly::EventBase> event_base;
  public:
    explicit MyServiceEmptyClientWrapper(
      std::shared_ptr<cpp2::MyServiceEmptyAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    virtual ~MyServiceEmptyClientWrapper();
};


class MyServicePrioParentClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyServicePrioParentAsyncClient> async_client;
    std::shared_ptr<folly::EventBase> event_base;
  public:
    explicit MyServicePrioParentClientWrapper(
      std::shared_ptr<cpp2::MyServicePrioParentAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    virtual ~MyServicePrioParentClientWrapper();
    void ping(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
    void pong(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


class MyServicePrioChildClientWrapper: virtual public cpp2::MyServicePrioParentClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyServicePrioChildAsyncClient> async_client;
  public:
    explicit MyServicePrioChildClientWrapper(
      std::shared_ptr<cpp2::MyServicePrioChildAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    void pang(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


} // namespace cpp2
