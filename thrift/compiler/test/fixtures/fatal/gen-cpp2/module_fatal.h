/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/reflection/reflection.h>

#include <fatal/type/list.h>
#include <fatal/type/pair.h>
#include <fatal/type/sequence.h>

#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_types.h"
namespace test_cpp2 { namespace cpp_reflection {

namespace __fbthrift_refl {

struct __fbthrift_strings_module {
  using Type = ::fatal::sequence<char, 'T', 'y', 'p', 'e'>;
  using _now_with_an_underscore = ::fatal::sequence<char, '_', 'n', 'o', 'w', '.', 'w', 'i', 't', 'h', '.', 'a', 'n', '.', 'u', 'n', 'd', 'e', 'r', 's', 'c', 'o', 'r', 'e'>;
  using a = ::fatal::sequence<char, 'a'>;
  using annotate_here = ::fatal::sequence<char, 'a', 'n', 'n', 'o', 't', 'a', 't', 'e', '_', 'h', 'e', 'r', 'e'>;
  using annotated = ::fatal::sequence<char, 'a', 'n', 'n', 'o', 't', 'a', 't', 'e', 'd'>;
  using annotation = ::fatal::sequence<char, 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using annotations = ::fatal::sequence<char, 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's'>;
  using another_annotation = ::fatal::sequence<char, 'a', 'n', 'o', 't', 'h', 'e', 'r', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using another_there = ::fatal::sequence<char, 'a', 'n', 'o', 't', 'h', 'e', 'r', '.', 't', 'h', 'e', 'r', 'e'>;
  using b = ::fatal::sequence<char, 'b'>;
  using bi = ::fatal::sequence<char, 'b', 'i'>;
  using c = ::fatal::sequence<char, 'c'>;
  using constant1 = ::fatal::sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '1'>;
  using constant2 = ::fatal::sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '2'>;
  using constant3 = ::fatal::sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '3'>;
  using constant_with_special_name = ::fatal::sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '_', 'w', 'i', 't', 'h', '_', 's', 'p', 'e', 'c', 'i', 'a', 'l', '_', 'n', 'a', 'm', 'e'>;
  using cpp = ::fatal::sequence<char, 'c', 'p', 'p'>;
  using cpp2 = ::fatal::sequence<char, 'c', 'p', 'p', '2'>;
  using d = ::fatal::sequence<char, 'd'>;
  using dep_A_struct = ::fatal::sequence<char, 'd', 'e', 'p', '_', 'A', '_', 's', 't', 'r', 'u', 'c', 't'>;
  using dep_B_struct = ::fatal::sequence<char, 'd', 'e', 'p', '_', 'B', '_', 's', 't', 'r', 'u', 'c', 't'>;
  using descriptor = ::fatal::sequence<char, 'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'o', 'r'>;
  using descriptors = ::fatal::sequence<char, 'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'o', 'r', 's'>;
  using duplicate_id_annotation_1 = ::fatal::sequence<char, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', '_', 'i', 'd', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', '1'>;
  using duplicate_id_annotation_2 = ::fatal::sequence<char, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', '_', 'i', 'd', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', '2'>;
  using e = ::fatal::sequence<char, 'e'>;
  using enum1 = ::fatal::sequence<char, 'e', 'n', 'u', 'm', '1'>;
  using enum2 = ::fatal::sequence<char, 'e', 'n', 'u', 'm', '2'>;
  using enum3 = ::fatal::sequence<char, 'e', 'n', 'u', 'm', '3'>;
  using enum_with_special_names = ::fatal::sequence<char, 'e', 'n', 'u', 'm', '_', 'w', 'i', 't', 'h', '_', 's', 'p', 'e', 'c', 'i', 'a', 'l', '_', 'n', 'a', 'm', 'e', 's'>;
  using f = ::fatal::sequence<char, 'f'>;
  using fake = ::fatal::sequence<char, 'f', 'a', 'k', 'e'>;
  using field = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd'>;
  using field0 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '0'>;
  using field0_2 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '0', '_', '2'>;
  using field0_3 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '0', '_', '3'>;
  using field1 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '1'>;
  using field1_2 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '1', '_', '2'>;
  using field1_3 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '1', '_', '3'>;
  using field2 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '2'>;
  using field2_2 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '2', '_', '2'>;
  using field3 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '3'>;
  using field4 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '4'>;
  using field5 = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '5'>;
  using fieldA = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'A'>;
  using fieldB = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'B'>;
  using fieldC = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'C'>;
  using fieldD = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'D'>;
  using fieldE = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'E'>;
  using fieldF = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'F'>;
  using fieldG = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'G'>;
  using fieldH = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'H'>;
  using fieldI = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'I'>;
  using fieldJ = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'J'>;
  using fieldK = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'K'>;
  using fieldL = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'L'>;
  using fieldM = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'M'>;
  using fieldN = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'N'>;
  using fieldO = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'O'>;
  using fieldP = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'P'>;
  using fieldQ = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'Q'>;
  using fieldR = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'R'>;
  using field_annotation = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using fields = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 's'>;
  using g = ::fatal::sequence<char, 'g'>;
  using get = ::fatal::sequence<char, 'g', 'e', 't'>;
  using getter = ::fatal::sequence<char, 'g', 'e', 't', 't', 'e', 'r'>;
  using h = ::fatal::sequence<char, 'h'>;
  using i = ::fatal::sequence<char, 'i'>;
  using i_a = ::fatal::sequence<char, 'i', '_', 'a'>;
  using id = ::fatal::sequence<char, 'i', 'd'>;
  using ids = ::fatal::sequence<char, 'i', 'd', 's'>;
  using j = ::fatal::sequence<char, 'j'>;
  using j1 = ::fatal::sequence<char, 'j', '1'>;
  using j2 = ::fatal::sequence<char, 'j', '2'>;
  using j3 = ::fatal::sequence<char, 'j', '3'>;
  using java = ::fatal::sequence<char, 'j', 'a', 'v', 'a'>;
  using java_swift = ::fatal::sequence<char, 'j', 'a', 'v', 'a', '.', 's', 'w', 'i', 'f', 't'>;
  using k = ::fatal::sequence<char, 'k'>;
  using k1 = ::fatal::sequence<char, 'k', '1'>;
  using k2 = ::fatal::sequence<char, 'k', '2'>;
  using k3 = ::fatal::sequence<char, 'k', '3'>;
  using key = ::fatal::sequence<char, 'k', 'e', 'y'>;
  using keys = ::fatal::sequence<char, 'k', 'e', 'y', 's'>;
  using l = ::fatal::sequence<char, 'l'>;
  using l1 = ::fatal::sequence<char, 'l', '1'>;
  using l2 = ::fatal::sequence<char, 'l', '2'>;
  using l3 = ::fatal::sequence<char, 'l', '3'>;
  using lists = ::fatal::sequence<char, 'l', 'i', 's', 't', 's'>;
  using m = ::fatal::sequence<char, 'm'>;
  using m1 = ::fatal::sequence<char, 'm', '1'>;
  using m2 = ::fatal::sequence<char, 'm', '2'>;
  using m3 = ::fatal::sequence<char, 'm', '3'>;
  using m_b_false = ::fatal::sequence<char, 'm', '_', 'b', '_', 'f', 'a', 'l', 's', 'e'>;
  using m_b_true = ::fatal::sequence<char, 'm', '_', 'b', '_', 't', 'r', 'u', 'e'>;
  using m_int = ::fatal::sequence<char, 'm', '_', 'i', 'n', 't'>;
  using m_int_list = ::fatal::sequence<char, 'm', '_', 'i', 'n', 't', '_', 'l', 'i', 's', 't'>;
  using m_int_map = ::fatal::sequence<char, 'm', '_', 'i', 'n', 't', '_', 'm', 'a', 'p'>;
  using m_mixed_list = ::fatal::sequence<char, 'm', '_', 'm', 'i', 'x', 'e', 'd', '_', 'l', 'i', 's', 't'>;
  using m_mixed_map = ::fatal::sequence<char, 'm', '_', 'm', 'i', 'x', 'e', 'd', '_', 'm', 'a', 'p'>;
  using m_str_list = ::fatal::sequence<char, 'm', '_', 's', 't', 'r', '_', 'l', 'i', 's', 't'>;
  using m_str_map = ::fatal::sequence<char, 'm', '_', 's', 't', 'r', '_', 'm', 'a', 'p'>;
  using m_string = ::fatal::sequence<char, 'm', '_', 's', 't', 'r', 'i', 'n', 'g'>;
  using maps = ::fatal::sequence<char, 'm', 'a', 'p', 's'>;
  using member = ::fatal::sequence<char, 'm', 'e', 'm', 'b', 'e', 'r'>;
  using members = ::fatal::sequence<char, 'm', 'e', 'm', 'b', 'e', 'r', 's'>;
  using method1 = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '1'>;
  using method2 = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '2'>;
  using method3 = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '3'>;
  using method4 = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '4'>;
  using method5 = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '5'>;
  using method6 = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '6'>;
  using methodA = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'A'>;
  using methodB = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'B'>;
  using methodC = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'C'>;
  using methodD = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'D'>;
  using methodE = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'E'>;
  using methodF = ::fatal::sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'F'>;
  using module = ::fatal::sequence<char, 'm', 'o', 'd', 'u', 'l', 'e'>;
  using multi_line_annotation = ::fatal::sequence<char, 'm', 'u', 'l', 't', 'i', '_', 'l', 'i', 'n', 'e', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using my_structA = ::fatal::sequence<char, 'm', 'y', '_', 's', 't', 'r', 'u', 'c', 't', 'A'>;
  using n = ::fatal::sequence<char, 'n'>;
  using n1 = ::fatal::sequence<char, 'n', '1'>;
  using n2 = ::fatal::sequence<char, 'n', '2'>;
  using n3 = ::fatal::sequence<char, 'n', '3'>;
  using name = ::fatal::sequence<char, 'n', 'a', 'm', 'e'>;
  using name_to_value = ::fatal::sequence<char, 'n', 'a', 'm', 'e', '_', 't', 'o', '_', 'v', 'a', 'l', 'u', 'e'>;
  using names = ::fatal::sequence<char, 'n', 'a', 'm', 'e', 's'>;
  using number = ::fatal::sequence<char, 'n', 'u', 'm', 'b', 'e', 'r'>;
  using o1 = ::fatal::sequence<char, 'o', '1'>;
  using o2 = ::fatal::sequence<char, 'o', '2'>;
  using o3 = ::fatal::sequence<char, 'o', '3'>;
  using one_here = ::fatal::sequence<char, 'o', 'n', 'e', '.', 'h', 'e', 'r', 'e'>;
  using php = ::fatal::sequence<char, 'p', 'h', 'p'>;
  using phrase = ::fatal::sequence<char, 'p', 'h', 'r', 'a', 's', 'e'>;
  using prefix_tree = ::fatal::sequence<char, 'p', 'r', 'e', 'f', 'i', 'x', '_', 't', 'r', 'e', 'e'>;
  using py3 = ::fatal::sequence<char, 'p', 'y', '3'>;
  using real = ::fatal::sequence<char, 'r', 'e', 'a', 'l'>;
  using result = ::fatal::sequence<char, 'r', 'e', 's', 'u', 'l', 't'>;
  using s = ::fatal::sequence<char, 's'>;
  using s_b_false = ::fatal::sequence<char, 's', '_', 'b', '_', 'f', 'a', 'l', 's', 'e'>;
  using s_b_true = ::fatal::sequence<char, 's', '_', 'b', '_', 't', 'r', 'u', 'e'>;
  using s_int = ::fatal::sequence<char, 's', '_', 'i', 'n', 't'>;
  using s_int_list = ::fatal::sequence<char, 's', '_', 'i', 'n', 't', '_', 'l', 'i', 's', 't'>;
  using s_int_map = ::fatal::sequence<char, 's', '_', 'i', 'n', 't', '_', 'm', 'a', 'p'>;
  using s_mixed_list = ::fatal::sequence<char, 's', '_', 'm', 'i', 'x', 'e', 'd', '_', 'l', 'i', 's', 't'>;
  using s_mixed_map = ::fatal::sequence<char, 's', '_', 'm', 'i', 'x', 'e', 'd', '_', 'm', 'a', 'p'>;
  using s_str_list = ::fatal::sequence<char, 's', '_', 's', 't', 'r', '_', 'l', 'i', 's', 't'>;
  using s_str_map = ::fatal::sequence<char, 's', '_', 's', 't', 'r', '_', 'm', 'a', 'p'>;
  using s_string = ::fatal::sequence<char, 's', '_', 's', 't', 'r', 'i', 'n', 'g'>;
  using sample_annotation = ::fatal::sequence<char, 's', 'a', 'm', 'p', 'l', 'e', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using service1 = ::fatal::sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '1'>;
  using service2 = ::fatal::sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '2'>;
  using service3 = ::fatal::sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '3'>;
  using service_with_special_names = ::fatal::sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '_', 'w', 'i', 't', 'h', '_', 's', 'p', 'e', 'c', 'i', 'a', 'l', '_', 'n', 'a', 'm', 'e', 's'>;
  using sets = ::fatal::sequence<char, 's', 'e', 't', 's'>;
  using setter = ::fatal::sequence<char, 's', 'e', 't', 't', 'e', 'r'>;
  using some_annotation = ::fatal::sequence<char, 's', 'o', 'm', 'e', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using some_other_annotation = ::fatal::sequence<char, 's', 'o', 'm', 'e', '.', 'o', 't', 'h', 'e', 'r', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using str = ::fatal::sequence<char, 's', 't', 'r'>;
  using strings = ::fatal::sequence<char, 's', 't', 'r', 'i', 'n', 'g', 's'>;
  using struct1 = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '1'>;
  using struct2 = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '2'>;
  using struct3 = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '3'>;
  using struct4 = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '4'>;
  using struct5 = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '5'>;
  using structA = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', 'A'>;
  using structB = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', 'B'>;
  using structC = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', 'C'>;
  using struct_binary = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '_', 'b', 'i', 'n', 'a', 'r', 'y'>;
  using struct_with_indirections = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '_', 'w', 'i', 't', 'h', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 's'>;
  using struct_with_special_names = ::fatal::sequence<char, 's', 't', 'r', 'u', 'c', 't', '_', 'w', 'i', 't', 'h', '_', 's', 'p', 'e', 'c', 'i', 'a', 'l', '_', 'n', 'a', 'm', 'e', 's'>;
  using test_cpp1__cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 'c', 'p', 'p', '1', ':', ':', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using test_cpp2__cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 'c', 'p', 'p', '2', ':', ':', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using test_d_cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 'd', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using test_java_cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 'j', 'a', 'v', 'a', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using test_php_cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 'p', 'h', 'p', '_', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using test_py_cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 'p', 'y', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using test_swift_cpp_reflection = ::fatal::sequence<char, 't', 'e', 's', 't', '_', 's', 'w', 'i', 'f', 't', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using type = ::fatal::sequence<char, 't', 'y', 'p', 'e'>;
  using ud = ::fatal::sequence<char, 'u', 'd'>;
  using ud_2 = ::fatal::sequence<char, 'u', 'd', '_', '2'>;
  using ud_3 = ::fatal::sequence<char, 'u', 'd', '_', '3'>;
  using ue = ::fatal::sequence<char, 'u', 'e'>;
  using ue_2 = ::fatal::sequence<char, 'u', 'e', '_', '2'>;
  using ue_3 = ::fatal::sequence<char, 'u', 'e', '_', '3'>;
  using ui = ::fatal::sequence<char, 'u', 'i'>;
  using ui_2 = ::fatal::sequence<char, 'u', 'i', '_', '2'>;
  using ui_3 = ::fatal::sequence<char, 'u', 'i', '_', '3'>;
  using union1 = ::fatal::sequence<char, 'u', 'n', 'i', 'o', 'n', '1'>;
  using union2 = ::fatal::sequence<char, 'u', 'n', 'i', 'o', 'n', '2'>;
  using union3 = ::fatal::sequence<char, 'u', 'n', 'i', 'o', 'n', '3'>;
  using unionA = ::fatal::sequence<char, 'u', 'n', 'i', 'o', 'n', 'A'>;
  using union_with_special_names = ::fatal::sequence<char, 'u', 'n', 'i', 'o', 'n', '_', 'w', 'i', 't', 'h', '_', 's', 'p', 'e', 'c', 'i', 'a', 'l', '_', 'n', 'a', 'm', 'e', 's'>;
  using us = ::fatal::sequence<char, 'u', 's'>;
  using us_2 = ::fatal::sequence<char, 'u', 's', '_', '2'>;
  using us_3 = ::fatal::sequence<char, 'u', 's', '_', '3'>;
  using value = ::fatal::sequence<char, 'v', 'a', 'l', 'u', 'e'>;
  using value_to_name = ::fatal::sequence<char, 'v', 'a', 'l', 'u', 'e', '_', 't', 'o', '_', 'n', 'a', 'm', 'e'>;
  using values = ::fatal::sequence<char, 'v', 'a', 'l', 'u', 'e', 's'>;
  using x = ::fatal::sequence<char, 'x'>;
  using y = ::fatal::sequence<char, 'y'>;
  using yet_another = ::fatal::sequence<char, 'y', 'e', 't', '.', 'a', 'n', 'o', 't', 'h', 'e', 'r'>;
  using z = ::fatal::sequence<char, 'z'>;
};

} // __fbthrift_refl

class module_tags {
  using __fbthrift_strings = __fbthrift_refl::__fbthrift_strings_module;
  struct __fbthrift_languages {
    using cpp = __fbthrift_strings::cpp;
    using cpp2 = __fbthrift_strings::cpp2;
    using d = __fbthrift_strings::d;
    using java = __fbthrift_strings::java;
    using java_swift = __fbthrift_strings::java_swift;
    using php = __fbthrift_strings::php;
    using py3 = __fbthrift_strings::py3;
  };
  struct __fbthrift_enums {
    using enum1 = __fbthrift_strings::enum1;
    using enum2 = __fbthrift_strings::enum2;
    using enum3 = __fbthrift_strings::enum3;
    using enum_with_special_names = __fbthrift_strings::enum_with_special_names;
  };
  struct __fbthrift_unions {
    using union1 = __fbthrift_strings::union1;
    using union2 = __fbthrift_strings::union2;
    using union3 = __fbthrift_strings::union3;
    using unionA = __fbthrift_strings::unionA;
    using union_with_special_names = __fbthrift_strings::union_with_special_names;
  };
  struct __fbthrift_structs {
    using structA = __fbthrift_strings::structA;
    using structB = __fbthrift_strings::structB;
    using structC = __fbthrift_strings::structC;
    using struct1 = __fbthrift_strings::struct1;
    using struct2 = __fbthrift_strings::struct2;
    using struct3 = __fbthrift_strings::struct3;
    using struct4 = __fbthrift_strings::struct4;
    using struct5 = __fbthrift_strings::struct5;
    using struct_binary = __fbthrift_strings::struct_binary;
    using dep_A_struct = __fbthrift_strings::dep_A_struct;
    using dep_B_struct = __fbthrift_strings::dep_B_struct;
    using annotated = __fbthrift_strings::annotated;
    using struct_with_special_names = __fbthrift_strings::struct_with_special_names;
    using struct_with_indirections = __fbthrift_strings::struct_with_indirections;
    using my_structA = __fbthrift_strings::my_structA;
  };
  struct __fbthrift_constants {
    using constant1 = __fbthrift_strings::constant1;
    using constant2 = __fbthrift_strings::constant2;
    using constant3 = __fbthrift_strings::constant3;
    using constant_with_special_name = __fbthrift_strings::constant_with_special_name;
  };
  struct __fbthrift_services {
    using service1 = __fbthrift_strings::service1;
    using service2 = __fbthrift_strings::service2;
    using service3 = __fbthrift_strings::service3;
    using service_with_special_names = __fbthrift_strings::service_with_special_names;
  };
 public:
  struct module {};

  using strings = __fbthrift_strings;
  using languages = __fbthrift_languages;
  using enums = __fbthrift_enums;
  using unions = __fbthrift_unions;
  using structs = __fbthrift_structs;
  using constants = __fbthrift_constants;
  using services = __fbthrift_services;
};

THRIFT_REGISTER_REFLECTION_METADATA(
  module_tags::module,
  __fbthrift_refl::__fbthrift_strings_module::module,
  // languages
  ::fatal::list<
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::cpp, __fbthrift_refl::__fbthrift_strings_module::test_cpp1__cpp_reflection>,
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::cpp2, __fbthrift_refl::__fbthrift_strings_module::test_cpp2__cpp_reflection>,
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::d, __fbthrift_refl::__fbthrift_strings_module::test_d_cpp_reflection>,
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::java, __fbthrift_refl::__fbthrift_strings_module::test_java_cpp_reflection>,
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::java_swift, __fbthrift_refl::__fbthrift_strings_module::test_swift_cpp_reflection>,
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::php, __fbthrift_refl::__fbthrift_strings_module::test_php_cpp_reflection>,
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_module::py3, __fbthrift_refl::__fbthrift_strings_module::test_py_cpp_reflection>
  >,
  // enums
  ::fatal::list<
    ::fatal::pair<enum1, __fbthrift_refl::__fbthrift_strings_module::enum1>,
    ::fatal::pair<enum2, __fbthrift_refl::__fbthrift_strings_module::enum2>,
    ::fatal::pair<enum3, __fbthrift_refl::__fbthrift_strings_module::enum3>,
    ::fatal::pair<enum_with_special_names, __fbthrift_refl::__fbthrift_strings_module::enum_with_special_names>
  >,
  // unions
  ::fatal::list<
    ::fatal::pair<union1, __fbthrift_refl::__fbthrift_strings_module::union1>,
    ::fatal::pair<union2, __fbthrift_refl::__fbthrift_strings_module::union2>,
    ::fatal::pair<union3, __fbthrift_refl::__fbthrift_strings_module::union3>,
    ::fatal::pair<unionA, __fbthrift_refl::__fbthrift_strings_module::unionA>,
    ::fatal::pair<union_with_special_names, __fbthrift_refl::__fbthrift_strings_module::union_with_special_names>
  >,
  // structs
  ::fatal::list<
    ::fatal::pair<structA, __fbthrift_refl::__fbthrift_strings_module::structA>,
    ::fatal::pair<structB, __fbthrift_refl::__fbthrift_strings_module::structB>,
    ::fatal::pair<structC, __fbthrift_refl::__fbthrift_strings_module::structC>,
    ::fatal::pair<struct1, __fbthrift_refl::__fbthrift_strings_module::struct1>,
    ::fatal::pair<struct2, __fbthrift_refl::__fbthrift_strings_module::struct2>,
    ::fatal::pair<struct3, __fbthrift_refl::__fbthrift_strings_module::struct3>,
    ::fatal::pair<struct4, __fbthrift_refl::__fbthrift_strings_module::struct4>,
    ::fatal::pair<struct5, __fbthrift_refl::__fbthrift_strings_module::struct5>,
    ::fatal::pair<struct_binary, __fbthrift_refl::__fbthrift_strings_module::struct_binary>,
    ::fatal::pair<dep_A_struct, __fbthrift_refl::__fbthrift_strings_module::dep_A_struct>,
    ::fatal::pair<dep_B_struct, __fbthrift_refl::__fbthrift_strings_module::dep_B_struct>,
    ::fatal::pair<annotated, __fbthrift_refl::__fbthrift_strings_module::annotated>,
    ::fatal::pair<struct_with_special_names, __fbthrift_refl::__fbthrift_strings_module::struct_with_special_names>,
    ::fatal::pair<struct_with_indirections, __fbthrift_refl::__fbthrift_strings_module::struct_with_indirections>,
    ::fatal::pair<my_structA, __fbthrift_refl::__fbthrift_strings_module::my_structA>
  >,
  // constants
  ::fatal::list<
    __fbthrift_refl::__fbthrift_strings_module::constant1,
    __fbthrift_refl::__fbthrift_strings_module::constant2,
    __fbthrift_refl::__fbthrift_strings_module::constant3,
    __fbthrift_refl::__fbthrift_strings_module::constant_with_special_name
  >,
  // services
  ::fatal::list<
    __fbthrift_refl::__fbthrift_strings_module::service1,
    __fbthrift_refl::__fbthrift_strings_module::service2,
    __fbthrift_refl::__fbthrift_strings_module::service3,
    __fbthrift_refl::__fbthrift_strings_module::service_with_special_names
  >
);

}} // test_cpp2::cpp_reflection
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_fatal_types.h"
