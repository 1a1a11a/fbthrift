/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_metadata.h"
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/reflection_dep_B_metadata.h"
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/reflection_dep_C_metadata.h"

namespace apache::thrift::detail::metadata {

using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;

void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum1>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum1", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum1 = res.first->second;
  module_enum1.name = "module.enum1";
  module_enum1.elements[0] = "field0";
  module_enum1.elements[1] = "field1";
  module_enum1.elements[2] = "field2";
}
void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum2>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum2", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum2 = res.first->second;
  module_enum2.name = "module.enum2";
  module_enum2.elements[0] = "field0_2";
  module_enum2.elements[1] = "field1_2";
  module_enum2.elements[2] = "field2_2";
}
void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum3>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum3", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum3 = res.first->second;
  module_enum3.name = "module.enum3";
  module_enum3.elements[0] = "field0_3";
  module_enum3.elements[1] = "field1_3";
}
void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum_with_special_names>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum_with_special_names", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum_with_special_names = res.first->second;
  module_enum_with_special_names.name = "module.enum_with_special_names";
  module_enum_with_special_names.elements[0] = "get";
  module_enum_with_special_names.elements[1] = "getter";
  module_enum_with_special_names.elements[2] = "lists";
  module_enum_with_special_names.elements[3] = "maps";
  module_enum_with_special_names.elements[4] = "name";
  module_enum_with_special_names.elements[5] = "name_to_value";
  module_enum_with_special_names.elements[6] = "names";
  module_enum_with_special_names.elements[7] = "prefix_tree";
  module_enum_with_special_names.elements[8] = "sets";
  module_enum_with_special_names.elements[9] = "setter";
  module_enum_with_special_names.elements[10] = "str";
  module_enum_with_special_names.elements[11] = "strings";
  module_enum_with_special_names.elements[12] = "type";
  module_enum_with_special_names.elements[13] = "value";
  module_enum_with_special_names.elements[14] = "value_to_name";
  module_enum_with_special_names.elements[15] = "values";
  module_enum_with_special_names.elements[16] = "id";
  module_enum_with_special_names.elements[17] = "ids";
  module_enum_with_special_names.elements[18] = "descriptor";
  module_enum_with_special_names.elements[19] = "descriptors";
  module_enum_with_special_names.elements[20] = "key";
  module_enum_with_special_names.elements[21] = "keys";
  module_enum_with_special_names.elements[22] = "annotation";
  module_enum_with_special_names.elements[23] = "annotations";
  module_enum_with_special_names.elements[24] = "member";
  module_enum_with_special_names.elements[25] = "members";
  module_enum_with_special_names.elements[26] = "field";
  module_enum_with_special_names.elements[27] = "fields";
}

void GeneratedStructMetadata<::test_cpp2::cpp_reflection::union1>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.union1", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union1 = res.first->second;
  module_union1.name = "module.union1";
  module_union1.is_union = true;
  ::apache::thrift::metadata::ThriftField module_union1_ui_1;
  module_union1_ui_1.id = 1;
  module_union1_ui_1.name = "ui";
  module_union1_ui_1.is_optional = false;
  auto module_union1_ui_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union1_ui_1_type->initialize(module_union1_ui_1.type);
  module_union1.fields.push_back(std::move(module_union1_ui_1));
  ::apache::thrift::metadata::ThriftField module_union1_ud_2;
  module_union1_ud_2.id = 2;
  module_union1_ud_2.name = "ud";
  module_union1_ud_2.is_optional = false;
  auto module_union1_ud_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::DOUBLE);
  module_union1_ud_2_type->initialize(module_union1_ud_2.type);
  module_union1.fields.push_back(std::move(module_union1_ud_2));
  ::apache::thrift::metadata::ThriftField module_union1_us_3;
  module_union1_us_3.id = 3;
  module_union1_us_3.name = "us";
  module_union1_us_3.is_optional = false;
  auto module_union1_us_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_union1_us_3_type->initialize(module_union1_us_3.type);
  module_union1.fields.push_back(std::move(module_union1_us_3));
  ::apache::thrift::metadata::ThriftField module_union1_ue_4;
  module_union1_ue_4.id = 4;
  module_union1_ue_4.name = "ue";
  module_union1_ue_4.is_optional = false;
  auto module_union1_ue_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_union1_ue_4_type->initialize(module_union1_ue_4.type);
  module_union1.fields.push_back(std::move(module_union1_ue_4));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::union2>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.union2", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union2 = res.first->second;
  module_union2.name = "module.union2";
  module_union2.is_union = true;
  ::apache::thrift::metadata::ThriftField module_union2_ui_2_1;
  module_union2_ui_2_1.id = 1;
  module_union2_ui_2_1.name = "ui_2";
  module_union2_ui_2_1.is_optional = false;
  auto module_union2_ui_2_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union2_ui_2_1_type->initialize(module_union2_ui_2_1.type);
  module_union2.fields.push_back(std::move(module_union2_ui_2_1));
  ::apache::thrift::metadata::ThriftField module_union2_ud_2_2;
  module_union2_ud_2_2.id = 2;
  module_union2_ud_2_2.name = "ud_2";
  module_union2_ud_2_2.is_optional = false;
  auto module_union2_ud_2_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::DOUBLE);
  module_union2_ud_2_2_type->initialize(module_union2_ud_2_2.type);
  module_union2.fields.push_back(std::move(module_union2_ud_2_2));
  ::apache::thrift::metadata::ThriftField module_union2_us_2_3;
  module_union2_us_2_3.id = 3;
  module_union2_us_2_3.name = "us_2";
  module_union2_us_2_3.is_optional = false;
  auto module_union2_us_2_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_union2_us_2_3_type->initialize(module_union2_us_2_3.type);
  module_union2.fields.push_back(std::move(module_union2_us_2_3));
  ::apache::thrift::metadata::ThriftField module_union2_ue_2_4;
  module_union2_ue_2_4.id = 4;
  module_union2_ue_2_4.name = "ue_2";
  module_union2_ue_2_4.is_optional = false;
  auto module_union2_ue_2_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_union2_ue_2_4_type->initialize(module_union2_ue_2_4.type);
  module_union2.fields.push_back(std::move(module_union2_ue_2_4));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::union3>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.union3", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union3 = res.first->second;
  module_union3.name = "module.union3";
  module_union3.is_union = true;
  ::apache::thrift::metadata::ThriftField module_union3_ui_3_1;
  module_union3_ui_3_1.id = 1;
  module_union3_ui_3_1.name = "ui_3";
  module_union3_ui_3_1.is_optional = false;
  auto module_union3_ui_3_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union3_ui_3_1_type->initialize(module_union3_ui_3_1.type);
  module_union3.fields.push_back(std::move(module_union3_ui_3_1));
  ::apache::thrift::metadata::ThriftField module_union3_ud_3_2;
  module_union3_ud_3_2.id = 2;
  module_union3_ud_3_2.name = "ud_3";
  module_union3_ud_3_2.is_optional = false;
  auto module_union3_ud_3_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::DOUBLE);
  module_union3_ud_3_2_type->initialize(module_union3_ud_3_2.type);
  module_union3.fields.push_back(std::move(module_union3_ud_3_2));
  ::apache::thrift::metadata::ThriftField module_union3_us_3_3;
  module_union3_us_3_3.id = 3;
  module_union3_us_3_3.name = "us_3";
  module_union3_us_3_3.is_optional = false;
  auto module_union3_us_3_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_union3_us_3_3_type->initialize(module_union3_us_3_3.type);
  module_union3.fields.push_back(std::move(module_union3_us_3_3));
  ::apache::thrift::metadata::ThriftField module_union3_ue_3_4;
  module_union3_ue_3_4.id = 4;
  module_union3_ue_3_4.name = "ue_3";
  module_union3_ue_3_4.is_optional = false;
  auto module_union3_ue_3_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_union3_ue_3_4_type->initialize(module_union3_ue_3_4.type);
  module_union3.fields.push_back(std::move(module_union3_ue_3_4));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::structA>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.structA", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_structA = res.first->second;
  module_structA.name = "module.structA";
  module_structA.is_union = false;
  ::apache::thrift::metadata::ThriftField module_structA_a_1;
  module_structA_a_1.id = 1;
  module_structA_a_1.name = "a";
  module_structA_a_1.is_optional = false;
  auto module_structA_a_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_structA_a_1_type->initialize(module_structA_a_1.type);
  module_structA.fields.push_back(std::move(module_structA_a_1));
  ::apache::thrift::metadata::ThriftField module_structA_b_2;
  module_structA_b_2.id = 2;
  module_structA_b_2.name = "b";
  module_structA_b_2.is_optional = false;
  auto module_structA_b_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_structA_b_2_type->initialize(module_structA_b_2.type);
  module_structA.fields.push_back(std::move(module_structA_b_2));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::unionA>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.unionA", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_unionA = res.first->second;
  module_unionA.name = "module.unionA";
  module_unionA.is_union = true;
  ::apache::thrift::metadata::ThriftField module_unionA_i_1;
  module_unionA_i_1.id = 1;
  module_unionA_i_1.name = "i";
  module_unionA_i_1.is_optional = false;
  auto module_unionA_i_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_unionA_i_1_type->initialize(module_unionA_i_1.type);
  module_unionA.fields.push_back(std::move(module_unionA_i_1));
  ::apache::thrift::metadata::ThriftField module_unionA_d_2;
  module_unionA_d_2.id = 2;
  module_unionA_d_2.name = "d";
  module_unionA_d_2.is_optional = false;
  auto module_unionA_d_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::DOUBLE);
  module_unionA_d_2_type->initialize(module_unionA_d_2.type);
  module_unionA.fields.push_back(std::move(module_unionA_d_2));
  ::apache::thrift::metadata::ThriftField module_unionA_s_3;
  module_unionA_s_3.id = 3;
  module_unionA_s_3.name = "s";
  module_unionA_s_3.is_optional = false;
  auto module_unionA_s_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_unionA_s_3_type->initialize(module_unionA_s_3.type);
  module_unionA.fields.push_back(std::move(module_unionA_s_3));
  ::apache::thrift::metadata::ThriftField module_unionA_e_4;
  module_unionA_e_4.id = 4;
  module_unionA_e_4.name = "e";
  module_unionA_e_4.is_optional = false;
  auto module_unionA_e_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_unionA_e_4_type->initialize(module_unionA_e_4.type);
  module_unionA.fields.push_back(std::move(module_unionA_e_4));
  ::apache::thrift::metadata::ThriftField module_unionA_a_5;
  module_unionA_a_5.id = 5;
  module_unionA_a_5.name = "a";
  module_unionA_a_5.is_optional = false;
  auto module_unionA_a_5_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata);
  module_unionA_a_5_type->initialize(module_unionA_a_5.type);
  module_unionA.fields.push_back(std::move(module_unionA_a_5));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::structB>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.structB", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_structB = res.first->second;
  module_structB.name = "module.structB";
  module_structB.is_union = false;
  ::apache::thrift::metadata::ThriftField module_structB_c_1;
  module_structB_c_1.id = 1;
  module_structB_c_1.name = "c";
  module_structB_c_1.is_optional = false;
  auto module_structB_c_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::DOUBLE);
  module_structB_c_1_type->initialize(module_structB_c_1.type);
  module_structB.fields.push_back(std::move(module_structB_c_1));
  ::apache::thrift::metadata::ThriftField module_structB_d_2;
  module_structB_d_2.id = 2;
  module_structB_d_2.name = "d";
  module_structB_d_2.is_optional = false;
  auto module_structB_d_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::BOOL);
  module_structB_d_2_type->initialize(module_structB_d_2.type);
  module_structB.fields.push_back(std::move(module_structB_d_2));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::structC>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.structC", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_structC = res.first->second;
  module_structC.name = "module.structC";
  module_structC.is_union = false;
  ::apache::thrift::metadata::ThriftField module_structC_a_1;
  module_structC_a_1.id = 1;
  module_structC_a_1.name = "a";
  module_structC_a_1.is_optional = false;
  auto module_structC_a_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_structC_a_1_type->initialize(module_structC_a_1.type);
  module_structC.fields.push_back(std::move(module_structC_a_1));
  ::apache::thrift::metadata::ThriftField module_structC_b_2;
  module_structC_b_2.id = 2;
  module_structC_b_2.name = "b";
  module_structC_b_2.is_optional = false;
  auto module_structC_b_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_structC_b_2_type->initialize(module_structC_b_2.type);
  module_structC.fields.push_back(std::move(module_structC_b_2));
  ::apache::thrift::metadata::ThriftField module_structC_c_3;
  module_structC_c_3.id = 3;
  module_structC_c_3.name = "c";
  module_structC_c_3.is_optional = false;
  auto module_structC_c_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::DOUBLE);
  module_structC_c_3_type->initialize(module_structC_c_3.type);
  module_structC.fields.push_back(std::move(module_structC_c_3));
  ::apache::thrift::metadata::ThriftField module_structC_d_4;
  module_structC_d_4.id = 4;
  module_structC_d_4.name = "d";
  module_structC_d_4.is_optional = false;
  auto module_structC_d_4_type = std::make_unique<Primitive>(ThriftPrimitiveType::BOOL);
  module_structC_d_4_type->initialize(module_structC_d_4.type);
  module_structC.fields.push_back(std::move(module_structC_d_4));
  ::apache::thrift::metadata::ThriftField module_structC_e_5;
  module_structC_e_5.id = 5;
  module_structC_e_5.name = "e";
  module_structC_e_5.is_optional = false;
  auto module_structC_e_5_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_structC_e_5_type->initialize(module_structC_e_5.type);
  module_structC.fields.push_back(std::move(module_structC_e_5));
  ::apache::thrift::metadata::ThriftField module_structC_f_6;
  module_structC_f_6.id = 6;
  module_structC_f_6.name = "f";
  module_structC_f_6.is_optional = false;
  auto module_structC_f_6_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2", metadata);
  module_structC_f_6_type->initialize(module_structC_f_6.type);
  module_structC.fields.push_back(std::move(module_structC_f_6));
  ::apache::thrift::metadata::ThriftField module_structC_g_7;
  module_structC_g_7.id = 7;
  module_structC_g_7.name = "g";
  module_structC_g_7.is_optional = false;
  auto module_structC_g_7_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1", metadata);
  module_structC_g_7_type->initialize(module_structC_g_7.type);
  module_structC.fields.push_back(std::move(module_structC_g_7));
  ::apache::thrift::metadata::ThriftField module_structC_h_8;
  module_structC_h_8.id = 8;
  module_structC_h_8.name = "h";
  module_structC_h_8.is_optional = false;
  auto module_structC_h_8_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::unionA>>("module.unionA", metadata);
  module_structC_h_8_type->initialize(module_structC_h_8.type);
  module_structC.fields.push_back(std::move(module_structC_h_8));
  ::apache::thrift::metadata::ThriftField module_structC_i_9;
  module_structC_i_9.id = 9;
  module_structC_i_9.name = "i";
  module_structC_i_9.is_optional = false;
  auto module_structC_i_9_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::unionA>>("module.unionA", metadata);
  module_structC_i_9_type->initialize(module_structC_i_9.type);
  module_structC.fields.push_back(std::move(module_structC_i_9));
  ::apache::thrift::metadata::ThriftField module_structC_j_10;
  module_structC_j_10.id = 10;
  module_structC_j_10.name = "j";
  module_structC_j_10.is_optional = false;
  auto module_structC_j_10_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_j_10_type->initialize(module_structC_j_10.type);
  module_structC.fields.push_back(std::move(module_structC_j_10));
  ::apache::thrift::metadata::ThriftField module_structC_j1_11;
  module_structC_j1_11.id = 11;
  module_structC_j1_11.name = "j1";
  module_structC_j1_11.is_optional = false;
  auto module_structC_j1_11_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_j1_11_type->initialize(module_structC_j1_11.type);
  module_structC.fields.push_back(std::move(module_structC_j1_11));
  ::apache::thrift::metadata::ThriftField module_structC_j2_12;
  module_structC_j2_12.id = 12;
  module_structC_j2_12.name = "j2";
  module_structC_j2_12.is_optional = false;
  auto module_structC_j2_12_type = std::make_unique<List>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata));
  module_structC_j2_12_type->initialize(module_structC_j2_12.type);
  module_structC.fields.push_back(std::move(module_structC_j2_12));
  ::apache::thrift::metadata::ThriftField module_structC_j3_13;
  module_structC_j3_13.id = 13;
  module_structC_j3_13.name = "j3";
  module_structC_j3_13.is_optional = false;
  auto module_structC_j3_13_type = std::make_unique<List>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata));
  module_structC_j3_13_type->initialize(module_structC_j3_13.type);
  module_structC.fields.push_back(std::move(module_structC_j3_13));
  ::apache::thrift::metadata::ThriftField module_structC_k_14;
  module_structC_k_14.id = 14;
  module_structC_k_14.name = "k";
  module_structC_k_14.is_optional = false;
  auto module_structC_k_14_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_k_14_type->initialize(module_structC_k_14.type);
  module_structC.fields.push_back(std::move(module_structC_k_14));
  ::apache::thrift::metadata::ThriftField module_structC_k1_15;
  module_structC_k1_15.id = 15;
  module_structC_k1_15.name = "k1";
  module_structC_k1_15.is_optional = false;
  auto module_structC_k1_15_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_k1_15_type->initialize(module_structC_k1_15.type);
  module_structC.fields.push_back(std::move(module_structC_k1_15));
  ::apache::thrift::metadata::ThriftField module_structC_k2_16;
  module_structC_k2_16.id = 16;
  module_structC_k2_16.name = "k2";
  module_structC_k2_16.is_optional = false;
  auto module_structC_k2_16_type = std::make_unique<Set>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2", metadata));
  module_structC_k2_16_type->initialize(module_structC_k2_16.type);
  module_structC.fields.push_back(std::move(module_structC_k2_16));
  ::apache::thrift::metadata::ThriftField module_structC_k3_17;
  module_structC_k3_17.id = 17;
  module_structC_k3_17.name = "k3";
  module_structC_k3_17.is_optional = false;
  auto module_structC_k3_17_type = std::make_unique<Set>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_structC_k3_17_type->initialize(module_structC_k3_17.type);
  module_structC.fields.push_back(std::move(module_structC_k3_17));
  ::apache::thrift::metadata::ThriftField module_structC_l_18;
  module_structC_l_18.id = 18;
  module_structC_l_18.name = "l";
  module_structC_l_18.is_optional = false;
  auto module_structC_l_18_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::I32), std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_l_18_type->initialize(module_structC_l_18.type);
  module_structC.fields.push_back(std::move(module_structC_l_18));
  ::apache::thrift::metadata::ThriftField module_structC_l1_19;
  module_structC_l1_19.id = 19;
  module_structC_l1_19.name = "l1";
  module_structC_l1_19.is_optional = false;
  auto module_structC_l1_19_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::I32), std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_l1_19_type->initialize(module_structC_l1_19.type);
  module_structC.fields.push_back(std::move(module_structC_l1_19));
  ::apache::thrift::metadata::ThriftField module_structC_l2_20;
  module_structC_l2_20.id = 20;
  module_structC_l2_20.name = "l2";
  module_structC_l2_20.is_optional = false;
  auto module_structC_l2_20_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::I32), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata));
  module_structC_l2_20_type->initialize(module_structC_l2_20.type);
  module_structC.fields.push_back(std::move(module_structC_l2_20));
  ::apache::thrift::metadata::ThriftField module_structC_l3_21;
  module_structC_l3_21.id = 21;
  module_structC_l3_21.name = "l3";
  module_structC_l3_21.is_optional = false;
  auto module_structC_l3_21_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::I32), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_structC_l3_21_type->initialize(module_structC_l3_21.type);
  module_structC.fields.push_back(std::move(module_structC_l3_21));
  ::apache::thrift::metadata::ThriftField module_structC_m1_22;
  module_structC_m1_22.id = 22;
  module_structC_m1_22.name = "m1";
  module_structC_m1_22.is_optional = false;
  auto module_structC_m1_22_type = std::make_unique<Map>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata), std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_m1_22_type->initialize(module_structC_m1_22.type);
  module_structC.fields.push_back(std::move(module_structC_m1_22));
  ::apache::thrift::metadata::ThriftField module_structC_m2_23;
  module_structC_m2_23.id = 23;
  module_structC_m2_23.name = "m2";
  module_structC_m2_23.is_optional = false;
  auto module_structC_m2_23_type = std::make_unique<Map>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2", metadata));
  module_structC_m2_23_type->initialize(module_structC_m2_23.type);
  module_structC.fields.push_back(std::move(module_structC_m2_23));
  ::apache::thrift::metadata::ThriftField module_structC_m3_24;
  module_structC_m3_24.id = 24;
  module_structC_m3_24.name = "m3";
  module_structC_m3_24.is_optional = false;
  auto module_structC_m3_24_type = std::make_unique<Map>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_structC_m3_24_type->initialize(module_structC_m3_24.type);
  module_structC.fields.push_back(std::move(module_structC_m3_24));
  ::apache::thrift::metadata::ThriftField module_structC_n1_25;
  module_structC_n1_25.id = 25;
  module_structC_n1_25.name = "n1";
  module_structC_n1_25.is_optional = false;
  auto module_structC_n1_25_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING), std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_n1_25_type->initialize(module_structC_n1_25.type);
  module_structC.fields.push_back(std::move(module_structC_n1_25));
  ::apache::thrift::metadata::ThriftField module_structC_n2_26;
  module_structC_n2_26.id = 26;
  module_structC_n2_26.name = "n2";
  module_structC_n2_26.is_optional = false;
  auto module_structC_n2_26_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata));
  module_structC_n2_26_type->initialize(module_structC_n2_26.type);
  module_structC.fields.push_back(std::move(module_structC_n2_26));
  ::apache::thrift::metadata::ThriftField module_structC_n3_27;
  module_structC_n3_27.id = 27;
  module_structC_n3_27.name = "n3";
  module_structC_n3_27.is_optional = false;
  auto module_structC_n3_27_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_structC_n3_27_type->initialize(module_structC_n3_27.type);
  module_structC.fields.push_back(std::move(module_structC_n3_27));
  ::apache::thrift::metadata::ThriftField module_structC_o1_28;
  module_structC_o1_28.id = 28;
  module_structC_o1_28.name = "o1";
  module_structC_o1_28.is_optional = false;
  auto module_structC_o1_28_type = std::make_unique<Map>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata), std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_structC_o1_28_type->initialize(module_structC_o1_28.type);
  module_structC.fields.push_back(std::move(module_structC_o1_28));
  ::apache::thrift::metadata::ThriftField module_structC_o2_29;
  module_structC_o2_29.id = 29;
  module_structC_o2_29.name = "o2";
  module_structC_o2_29.is_optional = false;
  auto module_structC_o2_29_type = std::make_unique<Map>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata));
  module_structC_o2_29_type->initialize(module_structC_o2_29.type);
  module_structC.fields.push_back(std::move(module_structC_o2_29));
  ::apache::thrift::metadata::ThriftField module_structC_o3_30;
  module_structC_o3_30.id = 30;
  module_structC_o3_30.name = "o3";
  module_structC_o3_30.is_optional = false;
  auto module_structC_o3_30_type = std::make_unique<Map>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_structC_o3_30_type->initialize(module_structC_o3_30.type);
  module_structC.fields.push_back(std::move(module_structC_o3_30));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct1>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct1", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct1 = res.first->second;
  module_struct1.name = "module.struct1";
  module_struct1.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct1_field0_1;
  module_struct1_field0_1.id = 1;
  module_struct1_field0_1.name = "field0";
  module_struct1_field0_1.is_optional = false;
  auto module_struct1_field0_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct1_field0_1_type->initialize(module_struct1_field0_1.type);
  module_struct1.fields.push_back(std::move(module_struct1_field0_1));
  ::apache::thrift::metadata::ThriftField module_struct1_field1_2;
  module_struct1_field1_2.id = 2;
  module_struct1_field1_2.name = "field1";
  module_struct1_field1_2.is_optional = true;
  auto module_struct1_field1_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_struct1_field1_2_type->initialize(module_struct1_field1_2.type);
  module_struct1.fields.push_back(std::move(module_struct1_field1_2));
  ::apache::thrift::metadata::ThriftField module_struct1_field2_3;
  module_struct1_field2_3.id = 3;
  module_struct1_field2_3.name = "field2";
  module_struct1_field2_3.is_optional = false;
  auto module_struct1_field2_3_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_struct1_field2_3_type->initialize(module_struct1_field2_3.type);
  module_struct1.fields.push_back(std::move(module_struct1_field2_3));
  ::apache::thrift::metadata::ThriftField module_struct1_field3_4;
  module_struct1_field3_4.id = 4;
  module_struct1_field3_4.name = "field3";
  module_struct1_field3_4.is_optional = false;
  auto module_struct1_field3_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2", metadata);
  module_struct1_field3_4_type->initialize(module_struct1_field3_4.type);
  module_struct1.fields.push_back(std::move(module_struct1_field3_4));
  ::apache::thrift::metadata::ThriftField module_struct1_field4_5;
  module_struct1_field4_5.id = 5;
  module_struct1_field4_5.name = "field4";
  module_struct1_field4_5.is_optional = true;
  auto module_struct1_field4_5_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1", metadata);
  module_struct1_field4_5_type->initialize(module_struct1_field4_5.type);
  module_struct1.fields.push_back(std::move(module_struct1_field4_5));
  ::apache::thrift::metadata::ThriftField module_struct1_field5_6;
  module_struct1_field5_6.id = 6;
  module_struct1_field5_6.name = "field5";
  module_struct1_field5_6.is_optional = false;
  auto module_struct1_field5_6_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2", metadata);
  module_struct1_field5_6_type->initialize(module_struct1_field5_6.type);
  module_struct1.fields.push_back(std::move(module_struct1_field5_6));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct2>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct2", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct2 = res.first->second;
  module_struct2.name = "module.struct2";
  module_struct2.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct2_fieldA_1;
  module_struct2_fieldA_1.id = 1;
  module_struct2_fieldA_1.name = "fieldA";
  module_struct2_fieldA_1.is_optional = false;
  auto module_struct2_fieldA_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct2_fieldA_1_type->initialize(module_struct2_fieldA_1.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldA_1));
  ::apache::thrift::metadata::ThriftField module_struct2_fieldB_2;
  module_struct2_fieldB_2.id = 2;
  module_struct2_fieldB_2.name = "fieldB";
  module_struct2_fieldB_2.is_optional = false;
  auto module_struct2_fieldB_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_struct2_fieldB_2_type->initialize(module_struct2_fieldB_2.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldB_2));
  ::apache::thrift::metadata::ThriftField module_struct2_fieldC_3;
  module_struct2_fieldC_3.id = 3;
  module_struct2_fieldC_3.name = "fieldC";
  module_struct2_fieldC_3.is_optional = false;
  auto module_struct2_fieldC_3_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_struct2_fieldC_3_type->initialize(module_struct2_fieldC_3.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldC_3));
  ::apache::thrift::metadata::ThriftField module_struct2_fieldD_4;
  module_struct2_fieldD_4.id = 4;
  module_struct2_fieldD_4.name = "fieldD";
  module_struct2_fieldD_4.is_optional = false;
  auto module_struct2_fieldD_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2", metadata);
  module_struct2_fieldD_4_type->initialize(module_struct2_fieldD_4.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldD_4));
  ::apache::thrift::metadata::ThriftField module_struct2_fieldE_5;
  module_struct2_fieldE_5.id = 5;
  module_struct2_fieldE_5.name = "fieldE";
  module_struct2_fieldE_5.is_optional = false;
  auto module_struct2_fieldE_5_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1", metadata);
  module_struct2_fieldE_5_type->initialize(module_struct2_fieldE_5.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldE_5));
  ::apache::thrift::metadata::ThriftField module_struct2_fieldF_6;
  module_struct2_fieldF_6.id = 6;
  module_struct2_fieldF_6.name = "fieldF";
  module_struct2_fieldF_6.is_optional = false;
  auto module_struct2_fieldF_6_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2", metadata);
  module_struct2_fieldF_6_type->initialize(module_struct2_fieldF_6.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldF_6));
  ::apache::thrift::metadata::ThriftField module_struct2_fieldG_7;
  module_struct2_fieldG_7.id = 7;
  module_struct2_fieldG_7.name = "fieldG";
  module_struct2_fieldG_7.is_optional = false;
  auto module_struct2_fieldG_7_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1", metadata);
  module_struct2_fieldG_7_type->initialize(module_struct2_fieldG_7.type);
  module_struct2.fields.push_back(std::move(module_struct2_fieldG_7));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct3>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct3", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct3 = res.first->second;
  module_struct3.name = "module.struct3";
  module_struct3.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct3_fieldA_1;
  module_struct3_fieldA_1.id = 1;
  module_struct3_fieldA_1.name = "fieldA";
  module_struct3_fieldA_1.is_optional = false;
  auto module_struct3_fieldA_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct3_fieldA_1_type->initialize(module_struct3_fieldA_1.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldA_1));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldB_2;
  module_struct3_fieldB_2.id = 2;
  module_struct3_fieldB_2.name = "fieldB";
  module_struct3_fieldB_2.is_optional = false;
  auto module_struct3_fieldB_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_struct3_fieldB_2_type->initialize(module_struct3_fieldB_2.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldB_2));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldC_3;
  module_struct3_fieldC_3.id = 3;
  module_struct3_fieldC_3.name = "fieldC";
  module_struct3_fieldC_3.is_optional = false;
  auto module_struct3_fieldC_3_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_struct3_fieldC_3_type->initialize(module_struct3_fieldC_3.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldC_3));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldD_4;
  module_struct3_fieldD_4.id = 4;
  module_struct3_fieldD_4.name = "fieldD";
  module_struct3_fieldD_4.is_optional = false;
  auto module_struct3_fieldD_4_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2", metadata);
  module_struct3_fieldD_4_type->initialize(module_struct3_fieldD_4.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldD_4));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldE_5;
  module_struct3_fieldE_5.id = 5;
  module_struct3_fieldE_5.name = "fieldE";
  module_struct3_fieldE_5.is_optional = false;
  auto module_struct3_fieldE_5_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1", metadata);
  module_struct3_fieldE_5_type->initialize(module_struct3_fieldE_5.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldE_5));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldF_6;
  module_struct3_fieldF_6.id = 6;
  module_struct3_fieldF_6.name = "fieldF";
  module_struct3_fieldF_6.is_optional = false;
  auto module_struct3_fieldF_6_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2", metadata);
  module_struct3_fieldF_6_type->initialize(module_struct3_fieldF_6.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldF_6));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldG_7;
  module_struct3_fieldG_7.id = 7;
  module_struct3_fieldG_7.name = "fieldG";
  module_struct3_fieldG_7.is_optional = false;
  auto module_struct3_fieldG_7_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1", metadata);
  module_struct3_fieldG_7_type->initialize(module_struct3_fieldG_7.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldG_7));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldH_8;
  module_struct3_fieldH_8.id = 8;
  module_struct3_fieldH_8.name = "fieldH";
  module_struct3_fieldH_8.is_optional = false;
  auto module_struct3_fieldH_8_type = std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2", metadata);
  module_struct3_fieldH_8_type->initialize(module_struct3_fieldH_8.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldH_8));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldI_9;
  module_struct3_fieldI_9.id = 9;
  module_struct3_fieldI_9.name = "fieldI";
  module_struct3_fieldI_9.is_optional = false;
  auto module_struct3_fieldI_9_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_struct3_fieldI_9_type->initialize(module_struct3_fieldI_9.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldI_9));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldJ_10;
  module_struct3_fieldJ_10.id = 10;
  module_struct3_fieldJ_10.name = "fieldJ";
  module_struct3_fieldJ_10.is_optional = false;
  auto module_struct3_fieldJ_10_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING));
  module_struct3_fieldJ_10_type->initialize(module_struct3_fieldJ_10.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldJ_10));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldK_11;
  module_struct3_fieldK_11.id = 11;
  module_struct3_fieldK_11.name = "fieldK";
  module_struct3_fieldK_11.is_optional = false;
  auto module_struct3_fieldK_11_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING));
  module_struct3_fieldK_11_type->initialize(module_struct3_fieldK_11.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldK_11));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldL_12;
  module_struct3_fieldL_12.id = 12;
  module_struct3_fieldL_12.name = "fieldL";
  module_struct3_fieldL_12.is_optional = false;
  auto module_struct3_fieldL_12_type = std::make_unique<List>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata));
  module_struct3_fieldL_12_type->initialize(module_struct3_fieldL_12.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldL_12));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldM_13;
  module_struct3_fieldM_13.id = 13;
  module_struct3_fieldM_13.name = "fieldM";
  module_struct3_fieldM_13.is_optional = false;
  auto module_struct3_fieldM_13_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_struct3_fieldM_13_type->initialize(module_struct3_fieldM_13.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldM_13));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldN_14;
  module_struct3_fieldN_14.id = 14;
  module_struct3_fieldN_14.name = "fieldN";
  module_struct3_fieldN_14.is_optional = false;
  auto module_struct3_fieldN_14_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING));
  module_struct3_fieldN_14_type->initialize(module_struct3_fieldN_14.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldN_14));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldO_15;
  module_struct3_fieldO_15.id = 15;
  module_struct3_fieldO_15.name = "fieldO";
  module_struct3_fieldO_15.is_optional = false;
  auto module_struct3_fieldO_15_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING));
  module_struct3_fieldO_15_type->initialize(module_struct3_fieldO_15.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldO_15));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldP_16;
  module_struct3_fieldP_16.id = 16;
  module_struct3_fieldP_16.name = "fieldP";
  module_struct3_fieldP_16.is_optional = false;
  auto module_struct3_fieldP_16_type = std::make_unique<Set>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_struct3_fieldP_16_type->initialize(module_struct3_fieldP_16.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldP_16));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldQ_17;
  module_struct3_fieldQ_17.id = 17;
  module_struct3_fieldQ_17.name = "fieldQ";
  module_struct3_fieldQ_17.is_optional = false;
  auto module_struct3_fieldQ_17_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata));
  module_struct3_fieldQ_17_type->initialize(module_struct3_fieldQ_17.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldQ_17));
  ::apache::thrift::metadata::ThriftField module_struct3_fieldR_18;
  module_struct3_fieldR_18.id = 18;
  module_struct3_fieldR_18.name = "fieldR";
  module_struct3_fieldR_18.is_optional = false;
  auto module_struct3_fieldR_18_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::STRING), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata));
  module_struct3_fieldR_18_type->initialize(module_struct3_fieldR_18.type);
  module_struct3.fields.push_back(std::move(module_struct3_fieldR_18));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct4>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct4", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct4 = res.first->second;
  module_struct4.name = "module.struct4";
  module_struct4.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct4_field0_1;
  module_struct4_field0_1.id = 1;
  module_struct4_field0_1.name = "field0";
  module_struct4_field0_1.is_optional = false;
  auto module_struct4_field0_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct4_field0_1_type->initialize(module_struct4_field0_1.type);
  module_struct4.fields.push_back(std::move(module_struct4_field0_1));
  ::apache::thrift::metadata::ThriftField module_struct4_field1_2;
  module_struct4_field1_2.id = 2;
  module_struct4_field1_2.name = "field1";
  module_struct4_field1_2.is_optional = true;
  auto module_struct4_field1_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_struct4_field1_2_type->initialize(module_struct4_field1_2.type);
  module_struct4.fields.push_back(std::move(module_struct4_field1_2));
  ::apache::thrift::metadata::ThriftField module_struct4_field2_3;
  module_struct4_field2_3.id = 3;
  module_struct4_field2_3.name = "field2";
  module_struct4_field2_3.is_optional = false;
  auto module_struct4_field2_3_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_struct4_field2_3_type->initialize(module_struct4_field2_3.type);
  module_struct4.fields.push_back(std::move(module_struct4_field2_3));
  ::apache::thrift::metadata::ThriftField module_struct4_field3_6;
  module_struct4_field3_6.id = 6;
  module_struct4_field3_6.name = "field3";
  module_struct4_field3_6.is_optional = false;
  auto module_struct4_field3_6_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata);
  module_struct4_field3_6_type->initialize(module_struct4_field3_6.type);
  module_struct4.fields.push_back(std::move(module_struct4_field3_6));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct5>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct5", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct5 = res.first->second;
  module_struct5.name = "module.struct5";
  module_struct5.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct5_field0_1;
  module_struct5_field0_1.id = 1;
  module_struct5_field0_1.name = "field0";
  module_struct5_field0_1.is_optional = false;
  auto module_struct5_field0_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct5_field0_1_type->initialize(module_struct5_field0_1.type);
  module_struct5.fields.push_back(std::move(module_struct5_field0_1));
  ::apache::thrift::metadata::ThriftField module_struct5_field1_2;
  module_struct5_field1_2.id = 2;
  module_struct5_field1_2.name = "field1";
  module_struct5_field1_2.is_optional = true;
  auto module_struct5_field1_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::STRING);
  module_struct5_field1_2_type->initialize(module_struct5_field1_2.type);
  module_struct5.fields.push_back(std::move(module_struct5_field1_2));
  ::apache::thrift::metadata::ThriftField module_struct5_field2_3;
  module_struct5_field2_3.id = 3;
  module_struct5_field2_3.name = "field2";
  module_struct5_field2_3.is_optional = false;
  auto module_struct5_field2_3_type = std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1", metadata);
  module_struct5_field2_3_type->initialize(module_struct5_field2_3.type);
  module_struct5.fields.push_back(std::move(module_struct5_field2_3));
  ::apache::thrift::metadata::ThriftField module_struct5_field3_4;
  module_struct5_field3_4.id = 4;
  module_struct5_field3_4.name = "field3";
  module_struct5_field3_4.is_optional = false;
  auto module_struct5_field3_4_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA", metadata);
  module_struct5_field3_4_type->initialize(module_struct5_field3_4.type);
  module_struct5.fields.push_back(std::move(module_struct5_field3_4));
  ::apache::thrift::metadata::ThriftField module_struct5_field4_5;
  module_struct5_field4_5.id = 5;
  module_struct5_field4_5.name = "field4";
  module_struct5_field4_5.is_optional = false;
  auto module_struct5_field4_5_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB", metadata);
  module_struct5_field4_5_type->initialize(module_struct5_field4_5.type);
  module_struct5.fields.push_back(std::move(module_struct5_field4_5));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct_binary>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct_binary", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct_binary = res.first->second;
  module_struct_binary.name = "module.struct_binary";
  module_struct_binary.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct_binary_bi_1;
  module_struct_binary_bi_1.id = 1;
  module_struct_binary_bi_1.name = "bi";
  module_struct_binary_bi_1.is_optional = false;
  auto module_struct_binary_bi_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::BINARY);
  module_struct_binary_bi_1_type->initialize(module_struct_binary_bi_1.type);
  module_struct_binary.fields.push_back(std::move(module_struct_binary_bi_1));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::dep_A_struct>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.dep_A_struct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_dep_A_struct = res.first->second;
  module_dep_A_struct.name = "module.dep_A_struct";
  module_dep_A_struct.is_union = false;
  ::apache::thrift::metadata::ThriftField module_dep_A_struct_b_1;
  module_dep_A_struct_b_1.id = 1;
  module_dep_A_struct_b_1.name = "b";
  module_dep_A_struct_b_1.is_optional = false;
  auto module_dep_A_struct_b_1_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_B_struct>>("reflection_dep_B.dep_B_struct", metadata);
  module_dep_A_struct_b_1_type->initialize(module_dep_A_struct_b_1.type);
  module_dep_A_struct.fields.push_back(std::move(module_dep_A_struct_b_1));
  ::apache::thrift::metadata::ThriftField module_dep_A_struct_c_2;
  module_dep_A_struct_c_2.id = 2;
  module_dep_A_struct_c_2.name = "c";
  module_dep_A_struct_c_2.is_optional = false;
  auto module_dep_A_struct_c_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_C_struct>>("reflection_dep_C.dep_C_struct", metadata);
  module_dep_A_struct_c_2_type->initialize(module_dep_A_struct_c_2.type);
  module_dep_A_struct.fields.push_back(std::move(module_dep_A_struct_c_2));
  ::apache::thrift::metadata::ThriftField module_dep_A_struct_i_a_3;
  module_dep_A_struct_i_a_3.id = 3;
  module_dep_A_struct_i_a_3.name = "i_a";
  module_dep_A_struct_i_a_3.is_optional = false;
  auto module_dep_A_struct_i_a_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_dep_A_struct_i_a_3_type->initialize(module_dep_A_struct_i_a_3.type);
  module_dep_A_struct.fields.push_back(std::move(module_dep_A_struct_i_a_3));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::dep_B_struct>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.dep_B_struct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_dep_B_struct = res.first->second;
  module_dep_B_struct.name = "module.dep_B_struct";
  module_dep_B_struct.is_union = false;
  ::apache::thrift::metadata::ThriftField module_dep_B_struct_b_1;
  module_dep_B_struct_b_1.id = 1;
  module_dep_B_struct_b_1.name = "b";
  module_dep_B_struct_b_1.is_optional = false;
  auto module_dep_B_struct_b_1_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_B_struct>>("reflection_dep_B.dep_B_struct", metadata);
  module_dep_B_struct_b_1_type->initialize(module_dep_B_struct_b_1.type);
  module_dep_B_struct.fields.push_back(std::move(module_dep_B_struct_b_1));
  ::apache::thrift::metadata::ThriftField module_dep_B_struct_c_2;
  module_dep_B_struct_c_2.id = 2;
  module_dep_B_struct_c_2.name = "c";
  module_dep_B_struct_c_2.is_optional = false;
  auto module_dep_B_struct_c_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_C_struct>>("reflection_dep_C.dep_C_struct", metadata);
  module_dep_B_struct_c_2_type->initialize(module_dep_B_struct_c_2.type);
  module_dep_B_struct.fields.push_back(std::move(module_dep_B_struct_c_2));
  ::apache::thrift::metadata::ThriftField module_dep_B_struct_i_a_3;
  module_dep_B_struct_i_a_3.id = 3;
  module_dep_B_struct_i_a_3.name = "i_a";
  module_dep_B_struct_i_a_3.is_optional = false;
  auto module_dep_B_struct_i_a_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_dep_B_struct_i_a_3_type->initialize(module_dep_B_struct_i_a_3.type);
  module_dep_B_struct.fields.push_back(std::move(module_dep_B_struct_i_a_3));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::annotated>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.annotated", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_annotated = res.first->second;
  module_annotated.name = "module.annotated";
  module_annotated.is_union = false;
  ::apache::thrift::metadata::ThriftField module_annotated_a_1;
  module_annotated_a_1.id = 1;
  module_annotated_a_1.name = "a";
  module_annotated_a_1.is_optional = false;
  auto module_annotated_a_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_annotated_a_1_type->initialize(module_annotated_a_1.type);
  module_annotated.fields.push_back(std::move(module_annotated_a_1));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::union_with_special_names>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.union_with_special_names", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union_with_special_names = res.first->second;
  module_union_with_special_names.name = "module.union_with_special_names";
  module_union_with_special_names.is_union = true;
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_get_1;
  module_union_with_special_names_get_1.id = 1;
  module_union_with_special_names_get_1.name = "get";
  module_union_with_special_names_get_1.is_optional = false;
  auto module_union_with_special_names_get_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_get_1_type->initialize(module_union_with_special_names_get_1.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_get_1));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_getter_2;
  module_union_with_special_names_getter_2.id = 2;
  module_union_with_special_names_getter_2.name = "getter";
  module_union_with_special_names_getter_2.is_optional = false;
  auto module_union_with_special_names_getter_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_getter_2_type->initialize(module_union_with_special_names_getter_2.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_getter_2));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_lists_3;
  module_union_with_special_names_lists_3.id = 3;
  module_union_with_special_names_lists_3.name = "lists";
  module_union_with_special_names_lists_3.is_optional = false;
  auto module_union_with_special_names_lists_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_lists_3_type->initialize(module_union_with_special_names_lists_3.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_lists_3));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_maps_4;
  module_union_with_special_names_maps_4.id = 4;
  module_union_with_special_names_maps_4.name = "maps";
  module_union_with_special_names_maps_4.is_optional = false;
  auto module_union_with_special_names_maps_4_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_maps_4_type->initialize(module_union_with_special_names_maps_4.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_maps_4));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_name_5;
  module_union_with_special_names_name_5.id = 5;
  module_union_with_special_names_name_5.name = "name";
  module_union_with_special_names_name_5.is_optional = false;
  auto module_union_with_special_names_name_5_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_name_5_type->initialize(module_union_with_special_names_name_5.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_name_5));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_name_to_value_6;
  module_union_with_special_names_name_to_value_6.id = 6;
  module_union_with_special_names_name_to_value_6.name = "name_to_value";
  module_union_with_special_names_name_to_value_6.is_optional = false;
  auto module_union_with_special_names_name_to_value_6_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_name_to_value_6_type->initialize(module_union_with_special_names_name_to_value_6.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_name_to_value_6));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_names_7;
  module_union_with_special_names_names_7.id = 7;
  module_union_with_special_names_names_7.name = "names";
  module_union_with_special_names_names_7.is_optional = false;
  auto module_union_with_special_names_names_7_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_names_7_type->initialize(module_union_with_special_names_names_7.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_names_7));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_prefix_tree_8;
  module_union_with_special_names_prefix_tree_8.id = 8;
  module_union_with_special_names_prefix_tree_8.name = "prefix_tree";
  module_union_with_special_names_prefix_tree_8.is_optional = false;
  auto module_union_with_special_names_prefix_tree_8_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_prefix_tree_8_type->initialize(module_union_with_special_names_prefix_tree_8.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_prefix_tree_8));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_sets_9;
  module_union_with_special_names_sets_9.id = 9;
  module_union_with_special_names_sets_9.name = "sets";
  module_union_with_special_names_sets_9.is_optional = false;
  auto module_union_with_special_names_sets_9_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_sets_9_type->initialize(module_union_with_special_names_sets_9.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_sets_9));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_setter_10;
  module_union_with_special_names_setter_10.id = 10;
  module_union_with_special_names_setter_10.name = "setter";
  module_union_with_special_names_setter_10.is_optional = false;
  auto module_union_with_special_names_setter_10_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_setter_10_type->initialize(module_union_with_special_names_setter_10.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_setter_10));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_str_11;
  module_union_with_special_names_str_11.id = 11;
  module_union_with_special_names_str_11.name = "str";
  module_union_with_special_names_str_11.is_optional = false;
  auto module_union_with_special_names_str_11_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_str_11_type->initialize(module_union_with_special_names_str_11.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_str_11));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_strings_12;
  module_union_with_special_names_strings_12.id = 12;
  module_union_with_special_names_strings_12.name = "strings";
  module_union_with_special_names_strings_12.is_optional = false;
  auto module_union_with_special_names_strings_12_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_strings_12_type->initialize(module_union_with_special_names_strings_12.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_strings_12));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_type_13;
  module_union_with_special_names_type_13.id = 13;
  module_union_with_special_names_type_13.name = "type";
  module_union_with_special_names_type_13.is_optional = false;
  auto module_union_with_special_names_type_13_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_type_13_type->initialize(module_union_with_special_names_type_13.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_type_13));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_value_14;
  module_union_with_special_names_value_14.id = 14;
  module_union_with_special_names_value_14.name = "value";
  module_union_with_special_names_value_14.is_optional = false;
  auto module_union_with_special_names_value_14_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_value_14_type->initialize(module_union_with_special_names_value_14.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_value_14));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_value_to_name_15;
  module_union_with_special_names_value_to_name_15.id = 15;
  module_union_with_special_names_value_to_name_15.name = "value_to_name";
  module_union_with_special_names_value_to_name_15.is_optional = false;
  auto module_union_with_special_names_value_to_name_15_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_value_to_name_15_type->initialize(module_union_with_special_names_value_to_name_15.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_value_to_name_15));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_values_16;
  module_union_with_special_names_values_16.id = 16;
  module_union_with_special_names_values_16.name = "values";
  module_union_with_special_names_values_16.is_optional = false;
  auto module_union_with_special_names_values_16_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_values_16_type->initialize(module_union_with_special_names_values_16.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_values_16));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_id_17;
  module_union_with_special_names_id_17.id = 17;
  module_union_with_special_names_id_17.name = "id";
  module_union_with_special_names_id_17.is_optional = false;
  auto module_union_with_special_names_id_17_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_id_17_type->initialize(module_union_with_special_names_id_17.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_id_17));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_ids_18;
  module_union_with_special_names_ids_18.id = 18;
  module_union_with_special_names_ids_18.name = "ids";
  module_union_with_special_names_ids_18.is_optional = false;
  auto module_union_with_special_names_ids_18_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_ids_18_type->initialize(module_union_with_special_names_ids_18.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_ids_18));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_descriptor_19;
  module_union_with_special_names_descriptor_19.id = 19;
  module_union_with_special_names_descriptor_19.name = "descriptor";
  module_union_with_special_names_descriptor_19.is_optional = false;
  auto module_union_with_special_names_descriptor_19_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_descriptor_19_type->initialize(module_union_with_special_names_descriptor_19.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_descriptor_19));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_descriptors_20;
  module_union_with_special_names_descriptors_20.id = 20;
  module_union_with_special_names_descriptors_20.name = "descriptors";
  module_union_with_special_names_descriptors_20.is_optional = false;
  auto module_union_with_special_names_descriptors_20_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_descriptors_20_type->initialize(module_union_with_special_names_descriptors_20.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_descriptors_20));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_key_21;
  module_union_with_special_names_key_21.id = 21;
  module_union_with_special_names_key_21.name = "key";
  module_union_with_special_names_key_21.is_optional = false;
  auto module_union_with_special_names_key_21_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_key_21_type->initialize(module_union_with_special_names_key_21.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_key_21));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_keys_22;
  module_union_with_special_names_keys_22.id = 22;
  module_union_with_special_names_keys_22.name = "keys";
  module_union_with_special_names_keys_22.is_optional = false;
  auto module_union_with_special_names_keys_22_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_keys_22_type->initialize(module_union_with_special_names_keys_22.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_keys_22));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_annotation_23;
  module_union_with_special_names_annotation_23.id = 23;
  module_union_with_special_names_annotation_23.name = "annotation";
  module_union_with_special_names_annotation_23.is_optional = false;
  auto module_union_with_special_names_annotation_23_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_annotation_23_type->initialize(module_union_with_special_names_annotation_23.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_annotation_23));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_annotations_24;
  module_union_with_special_names_annotations_24.id = 24;
  module_union_with_special_names_annotations_24.name = "annotations";
  module_union_with_special_names_annotations_24.is_optional = false;
  auto module_union_with_special_names_annotations_24_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_annotations_24_type->initialize(module_union_with_special_names_annotations_24.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_annotations_24));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_member_25;
  module_union_with_special_names_member_25.id = 25;
  module_union_with_special_names_member_25.name = "member";
  module_union_with_special_names_member_25.is_optional = false;
  auto module_union_with_special_names_member_25_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_member_25_type->initialize(module_union_with_special_names_member_25.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_member_25));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_members_26;
  module_union_with_special_names_members_26.id = 26;
  module_union_with_special_names_members_26.name = "members";
  module_union_with_special_names_members_26.is_optional = false;
  auto module_union_with_special_names_members_26_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_members_26_type->initialize(module_union_with_special_names_members_26.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_members_26));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_field_27;
  module_union_with_special_names_field_27.id = 27;
  module_union_with_special_names_field_27.name = "field";
  module_union_with_special_names_field_27.is_optional = false;
  auto module_union_with_special_names_field_27_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_field_27_type->initialize(module_union_with_special_names_field_27.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_field_27));
  ::apache::thrift::metadata::ThriftField module_union_with_special_names_fields_28;
  module_union_with_special_names_fields_28.id = 28;
  module_union_with_special_names_fields_28.name = "fields";
  module_union_with_special_names_fields_28.is_optional = false;
  auto module_union_with_special_names_fields_28_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_union_with_special_names_fields_28_type->initialize(module_union_with_special_names_fields_28.type);
  module_union_with_special_names.fields.push_back(std::move(module_union_with_special_names_fields_28));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct_with_special_names>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct_with_special_names", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct_with_special_names = res.first->second;
  module_struct_with_special_names.name = "module.struct_with_special_names";
  module_struct_with_special_names.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_get_1;
  module_struct_with_special_names_get_1.id = 1;
  module_struct_with_special_names_get_1.name = "get";
  module_struct_with_special_names_get_1.is_optional = false;
  auto module_struct_with_special_names_get_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_get_1_type->initialize(module_struct_with_special_names_get_1.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_get_1));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_getter_2;
  module_struct_with_special_names_getter_2.id = 2;
  module_struct_with_special_names_getter_2.name = "getter";
  module_struct_with_special_names_getter_2.is_optional = false;
  auto module_struct_with_special_names_getter_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_getter_2_type->initialize(module_struct_with_special_names_getter_2.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_getter_2));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_lists_3;
  module_struct_with_special_names_lists_3.id = 3;
  module_struct_with_special_names_lists_3.name = "lists";
  module_struct_with_special_names_lists_3.is_optional = false;
  auto module_struct_with_special_names_lists_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_lists_3_type->initialize(module_struct_with_special_names_lists_3.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_lists_3));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_maps_4;
  module_struct_with_special_names_maps_4.id = 4;
  module_struct_with_special_names_maps_4.name = "maps";
  module_struct_with_special_names_maps_4.is_optional = false;
  auto module_struct_with_special_names_maps_4_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_maps_4_type->initialize(module_struct_with_special_names_maps_4.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_maps_4));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_name_5;
  module_struct_with_special_names_name_5.id = 5;
  module_struct_with_special_names_name_5.name = "name";
  module_struct_with_special_names_name_5.is_optional = false;
  auto module_struct_with_special_names_name_5_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_name_5_type->initialize(module_struct_with_special_names_name_5.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_name_5));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_name_to_value_6;
  module_struct_with_special_names_name_to_value_6.id = 6;
  module_struct_with_special_names_name_to_value_6.name = "name_to_value";
  module_struct_with_special_names_name_to_value_6.is_optional = false;
  auto module_struct_with_special_names_name_to_value_6_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_name_to_value_6_type->initialize(module_struct_with_special_names_name_to_value_6.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_name_to_value_6));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_names_7;
  module_struct_with_special_names_names_7.id = 7;
  module_struct_with_special_names_names_7.name = "names";
  module_struct_with_special_names_names_7.is_optional = false;
  auto module_struct_with_special_names_names_7_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_names_7_type->initialize(module_struct_with_special_names_names_7.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_names_7));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_prefix_tree_8;
  module_struct_with_special_names_prefix_tree_8.id = 8;
  module_struct_with_special_names_prefix_tree_8.name = "prefix_tree";
  module_struct_with_special_names_prefix_tree_8.is_optional = false;
  auto module_struct_with_special_names_prefix_tree_8_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_prefix_tree_8_type->initialize(module_struct_with_special_names_prefix_tree_8.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_prefix_tree_8));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_sets_9;
  module_struct_with_special_names_sets_9.id = 9;
  module_struct_with_special_names_sets_9.name = "sets";
  module_struct_with_special_names_sets_9.is_optional = false;
  auto module_struct_with_special_names_sets_9_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_sets_9_type->initialize(module_struct_with_special_names_sets_9.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_sets_9));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_setter_10;
  module_struct_with_special_names_setter_10.id = 10;
  module_struct_with_special_names_setter_10.name = "setter";
  module_struct_with_special_names_setter_10.is_optional = false;
  auto module_struct_with_special_names_setter_10_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_setter_10_type->initialize(module_struct_with_special_names_setter_10.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_setter_10));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_str_11;
  module_struct_with_special_names_str_11.id = 11;
  module_struct_with_special_names_str_11.name = "str";
  module_struct_with_special_names_str_11.is_optional = false;
  auto module_struct_with_special_names_str_11_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_str_11_type->initialize(module_struct_with_special_names_str_11.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_str_11));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_strings_12;
  module_struct_with_special_names_strings_12.id = 12;
  module_struct_with_special_names_strings_12.name = "strings";
  module_struct_with_special_names_strings_12.is_optional = false;
  auto module_struct_with_special_names_strings_12_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_strings_12_type->initialize(module_struct_with_special_names_strings_12.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_strings_12));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_type_13;
  module_struct_with_special_names_type_13.id = 13;
  module_struct_with_special_names_type_13.name = "type";
  module_struct_with_special_names_type_13.is_optional = false;
  auto module_struct_with_special_names_type_13_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_type_13_type->initialize(module_struct_with_special_names_type_13.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_type_13));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_value_14;
  module_struct_with_special_names_value_14.id = 14;
  module_struct_with_special_names_value_14.name = "value";
  module_struct_with_special_names_value_14.is_optional = false;
  auto module_struct_with_special_names_value_14_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_value_14_type->initialize(module_struct_with_special_names_value_14.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_value_14));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_value_to_name_15;
  module_struct_with_special_names_value_to_name_15.id = 15;
  module_struct_with_special_names_value_to_name_15.name = "value_to_name";
  module_struct_with_special_names_value_to_name_15.is_optional = false;
  auto module_struct_with_special_names_value_to_name_15_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_value_to_name_15_type->initialize(module_struct_with_special_names_value_to_name_15.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_value_to_name_15));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_values_16;
  module_struct_with_special_names_values_16.id = 16;
  module_struct_with_special_names_values_16.name = "values";
  module_struct_with_special_names_values_16.is_optional = false;
  auto module_struct_with_special_names_values_16_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_values_16_type->initialize(module_struct_with_special_names_values_16.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_values_16));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_id_17;
  module_struct_with_special_names_id_17.id = 17;
  module_struct_with_special_names_id_17.name = "id";
  module_struct_with_special_names_id_17.is_optional = false;
  auto module_struct_with_special_names_id_17_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_id_17_type->initialize(module_struct_with_special_names_id_17.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_id_17));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_ids_18;
  module_struct_with_special_names_ids_18.id = 18;
  module_struct_with_special_names_ids_18.name = "ids";
  module_struct_with_special_names_ids_18.is_optional = false;
  auto module_struct_with_special_names_ids_18_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_ids_18_type->initialize(module_struct_with_special_names_ids_18.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_ids_18));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_descriptor_19;
  module_struct_with_special_names_descriptor_19.id = 19;
  module_struct_with_special_names_descriptor_19.name = "descriptor";
  module_struct_with_special_names_descriptor_19.is_optional = false;
  auto module_struct_with_special_names_descriptor_19_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_descriptor_19_type->initialize(module_struct_with_special_names_descriptor_19.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_descriptor_19));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_descriptors_20;
  module_struct_with_special_names_descriptors_20.id = 20;
  module_struct_with_special_names_descriptors_20.name = "descriptors";
  module_struct_with_special_names_descriptors_20.is_optional = false;
  auto module_struct_with_special_names_descriptors_20_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_descriptors_20_type->initialize(module_struct_with_special_names_descriptors_20.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_descriptors_20));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_key_21;
  module_struct_with_special_names_key_21.id = 21;
  module_struct_with_special_names_key_21.name = "key";
  module_struct_with_special_names_key_21.is_optional = false;
  auto module_struct_with_special_names_key_21_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_key_21_type->initialize(module_struct_with_special_names_key_21.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_key_21));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_keys_22;
  module_struct_with_special_names_keys_22.id = 22;
  module_struct_with_special_names_keys_22.name = "keys";
  module_struct_with_special_names_keys_22.is_optional = false;
  auto module_struct_with_special_names_keys_22_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_keys_22_type->initialize(module_struct_with_special_names_keys_22.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_keys_22));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_annotation_23;
  module_struct_with_special_names_annotation_23.id = 23;
  module_struct_with_special_names_annotation_23.name = "annotation";
  module_struct_with_special_names_annotation_23.is_optional = false;
  auto module_struct_with_special_names_annotation_23_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_annotation_23_type->initialize(module_struct_with_special_names_annotation_23.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_annotation_23));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_annotations_24;
  module_struct_with_special_names_annotations_24.id = 24;
  module_struct_with_special_names_annotations_24.name = "annotations";
  module_struct_with_special_names_annotations_24.is_optional = false;
  auto module_struct_with_special_names_annotations_24_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_annotations_24_type->initialize(module_struct_with_special_names_annotations_24.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_annotations_24));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_member_25;
  module_struct_with_special_names_member_25.id = 25;
  module_struct_with_special_names_member_25.name = "member";
  module_struct_with_special_names_member_25.is_optional = false;
  auto module_struct_with_special_names_member_25_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_member_25_type->initialize(module_struct_with_special_names_member_25.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_member_25));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_members_26;
  module_struct_with_special_names_members_26.id = 26;
  module_struct_with_special_names_members_26.name = "members";
  module_struct_with_special_names_members_26.is_optional = false;
  auto module_struct_with_special_names_members_26_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_members_26_type->initialize(module_struct_with_special_names_members_26.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_members_26));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_field_27;
  module_struct_with_special_names_field_27.id = 27;
  module_struct_with_special_names_field_27.name = "field";
  module_struct_with_special_names_field_27.is_optional = false;
  auto module_struct_with_special_names_field_27_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_field_27_type->initialize(module_struct_with_special_names_field_27.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_field_27));
  ::apache::thrift::metadata::ThriftField module_struct_with_special_names_fields_28;
  module_struct_with_special_names_fields_28.id = 28;
  module_struct_with_special_names_fields_28.name = "fields";
  module_struct_with_special_names_fields_28.is_optional = false;
  auto module_struct_with_special_names_fields_28_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_special_names_fields_28_type->initialize(module_struct_with_special_names_fields_28.type);
  module_struct_with_special_names.fields.push_back(std::move(module_struct_with_special_names_fields_28));
}
void GeneratedStructMetadata<::test_cpp2::cpp_reflection::struct_with_indirections>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("module.struct_with_indirections", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct_with_indirections = res.first->second;
  module_struct_with_indirections.name = "module.struct_with_indirections";
  module_struct_with_indirections.is_union = false;
  ::apache::thrift::metadata::ThriftField module_struct_with_indirections_real_1;
  module_struct_with_indirections_real_1.id = 1;
  module_struct_with_indirections_real_1.name = "real";
  module_struct_with_indirections_real_1.is_optional = false;
  auto module_struct_with_indirections_real_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::I32);
  module_struct_with_indirections_real_1_type->initialize(module_struct_with_indirections_real_1.type);
  module_struct_with_indirections.fields.push_back(std::move(module_struct_with_indirections_real_1));
  ::apache::thrift::metadata::ThriftField module_struct_with_indirections_fake_2;
  module_struct_with_indirections_fake_2.id = 2;
  module_struct_with_indirections_fake_2.name = "fake";
  module_struct_with_indirections_fake_2.is_optional = false;
  auto module_struct_with_indirections_fake_2_type = std::make_unique<Typedef>("module.FakeI32", std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_struct_with_indirections_fake_2_type->initialize(module_struct_with_indirections_fake_2.type);
  module_struct_with_indirections.fields.push_back(std::move(module_struct_with_indirections_fake_2));
  ::apache::thrift::metadata::ThriftField module_struct_with_indirections_number_3;
  module_struct_with_indirections_number_3.id = 3;
  module_struct_with_indirections_number_3.name = "number";
  module_struct_with_indirections_number_3.is_optional = false;
  auto module_struct_with_indirections_number_3_type = std::make_unique<Typedef>("module.HasANumber", std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_struct_with_indirections_number_3_type->initialize(module_struct_with_indirections_number_3.type);
  module_struct_with_indirections.fields.push_back(std::move(module_struct_with_indirections_number_3));
  ::apache::thrift::metadata::ThriftField module_struct_with_indirections_result_4;
  module_struct_with_indirections_result_4.id = 4;
  module_struct_with_indirections_result_4.name = "result";
  module_struct_with_indirections_result_4.is_optional = false;
  auto module_struct_with_indirections_result_4_type = std::make_unique<Typedef>("module.HasAResult", std::make_unique<Primitive>(ThriftPrimitiveType::I32));
  module_struct_with_indirections_result_4_type->initialize(module_struct_with_indirections_result_4.type);
  module_struct_with_indirections.fields.push_back(std::move(module_struct_with_indirections_result_4));
  ::apache::thrift::metadata::ThriftField module_struct_with_indirections_phrase_5;
  module_struct_with_indirections_phrase_5.id = 5;
  module_struct_with_indirections_phrase_5.name = "phrase";
  module_struct_with_indirections_phrase_5.is_optional = false;
  auto module_struct_with_indirections_phrase_5_type = std::make_unique<Typedef>("module.HasAPhrase", std::make_unique<Primitive>(ThriftPrimitiveType::STRING));
  module_struct_with_indirections_phrase_5_type->initialize(module_struct_with_indirections_phrase_5.type);
  module_struct_with_indirections.fields.push_back(std::move(module_struct_with_indirections_phrase_5));
}

} // apache::thrift::detail::metadata
