/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_metadata.h"
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/reflection_dep_B_metadata.h"
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/reflection_dep_C_metadata.h"

namespace apache::thrift::detail::metadata {

using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;

void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum1>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum1", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum1 = res.first->second;
  module_enum1.name = "module.enum1";
  module_enum1.elements[0] = "field0";
  module_enum1.elements[1] = "field1";
  module_enum1.elements[2] = "field2";
}
void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum2>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum2", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum2 = res.first->second;
  module_enum2.name = "module.enum2";
  module_enum2.elements[0] = "field0_2";
  module_enum2.elements[1] = "field1_2";
  module_enum2.elements[2] = "field2_2";
}
void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum3>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum3", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum3 = res.first->second;
  module_enum3.name = "module.enum3";
  module_enum3.elements[0] = "field0_3";
  module_enum3.elements[1] = "field1_3";
}
void GeneratedEnumMetadata<::test_cpp2::cpp_reflection::enum_with_special_names>::genMetadata(ThriftMetadata& metadata) {
  auto res = metadata.enums.emplace("module.enum_with_special_names", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& module_enum_with_special_names = res.first->second;
  module_enum_with_special_names.name = "module.enum_with_special_names";
  module_enum_with_special_names.elements[0] = "get";
  module_enum_with_special_names.elements[1] = "getter";
  module_enum_with_special_names.elements[2] = "lists";
  module_enum_with_special_names.elements[3] = "maps";
  module_enum_with_special_names.elements[4] = "name";
  module_enum_with_special_names.elements[5] = "name_to_value";
  module_enum_with_special_names.elements[6] = "names";
  module_enum_with_special_names.elements[7] = "prefix_tree";
  module_enum_with_special_names.elements[8] = "sets";
  module_enum_with_special_names.elements[9] = "setter";
  module_enum_with_special_names.elements[10] = "str";
  module_enum_with_special_names.elements[11] = "strings";
  module_enum_with_special_names.elements[12] = "type";
  module_enum_with_special_names.elements[13] = "value";
  module_enum_with_special_names.elements[14] = "value_to_name";
  module_enum_with_special_names.elements[15] = "values";
  module_enum_with_special_names.elements[16] = "id";
  module_enum_with_special_names.elements[17] = "ids";
  module_enum_with_special_names.elements[18] = "descriptor";
  module_enum_with_special_names.elements[19] = "descriptors";
  module_enum_with_special_names.elements[20] = "key";
  module_enum_with_special_names.elements[21] = "keys";
  module_enum_with_special_names.elements[22] = "annotation";
  module_enum_with_special_names.elements[23] = "annotations";
  module_enum_with_special_names.elements[24] = "member";
  module_enum_with_special_names.elements[25] = "members";
  module_enum_with_special_names.elements[26] = "field";
  module_enum_with_special_names.elements[27] = "fields";
}

} // apache::thrift::detail::metadata
