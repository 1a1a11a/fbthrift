/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_fatal.h"

#include <fatal/type/enum.h>

#include <type_traits>

namespace test_cpp2 { namespace cpp_reflection {

namespace __fbthrift_refl {

class enum1_enum_traits {
 public:
  using type = ::test_cpp2::cpp_reflection::enum1;

 private:
  struct __fbthrift_strings {
    using field0 = __fbthrift_strings_module::field0;
    using field1 = __fbthrift_strings_module::field1;
    using field2 = __fbthrift_strings_module::field2;
  };

  struct __fbthrift_value_field0 {
    using name = __fbthrift_strings::field0;
    using value = std::integral_constant<type, type::field0>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_field1 {
    using name = __fbthrift_strings::field1;
    using value = std::integral_constant<type, type::field1>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_field2 {
    using name = __fbthrift_strings::field2;
    using value = std::integral_constant<type, type::field2>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_member {
    using field0 = __fbthrift_value_field0;
    using field1 = __fbthrift_value_field1;
    using field2 = __fbthrift_value_field2;
  };

 public:
  using name = __fbthrift_strings_module::enum1;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::field0,
      member::field1,
      member::field2
  >;

  class annotations {
    public:
    using keys = void;
    using values = void;
    using map = ::fatal::list<
    >;
  };
  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::field0: return "field0";
      case type::field1: return "field1";
      case type::field2: return "field2";
      default: return fallback;
    }
  }
};

} // __fbthrift_refl

FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::enum1_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
    module_tags::module,
    ::apache::thrift::reflected_annotations<__fbthrift_refl::enum1_enum_traits::annotations>,
    static_cast<::apache::thrift::legacy_type_id_t>(4992076682252594856ull)
  >
);
namespace __fbthrift_refl {

class enum2_enum_traits {
 public:
  using type = ::test_cpp2::cpp_reflection::enum2;

 private:
  struct __fbthrift_strings {
    using field0_2 = __fbthrift_strings_module::field0_2;
    using field1_2 = __fbthrift_strings_module::field1_2;
    using field2_2 = __fbthrift_strings_module::field2_2;
  };

  struct __fbthrift_value_field0_2 {
    using name = __fbthrift_strings::field0_2;
    using value = std::integral_constant<type, type::field0_2>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_field1_2 {
    using name = __fbthrift_strings::field1_2;
    using value = std::integral_constant<type, type::field1_2>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_field2_2 {
    using name = __fbthrift_strings::field2_2;
    using value = std::integral_constant<type, type::field2_2>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_member {
    using field0_2 = __fbthrift_value_field0_2;
    using field1_2 = __fbthrift_value_field1_2;
    using field2_2 = __fbthrift_value_field2_2;
  };

 public:
  using name = __fbthrift_strings_module::enum2;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::field0_2,
      member::field1_2,
      member::field2_2
  >;

  class annotations {
    public:
    using keys = void;
    using values = void;
    using map = ::fatal::list<
    >;
  };
  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::field0_2: return "field0_2";
      case type::field1_2: return "field1_2";
      case type::field2_2: return "field2_2";
      default: return fallback;
    }
  }
};

} // __fbthrift_refl

FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::enum2_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
    module_tags::module,
    ::apache::thrift::reflected_annotations<__fbthrift_refl::enum2_enum_traits::annotations>,
    static_cast<::apache::thrift::legacy_type_id_t>(6888467747342894920ull)
  >
);
namespace __fbthrift_refl {

class enum3_enum_traits {
 public:
  using type = ::test_cpp2::cpp_reflection::enum3;

 private:
  struct __fbthrift_strings {
    using field0_3 = __fbthrift_strings_module::field0_3;
    using field1_3 = __fbthrift_strings_module::field1_3;
  };

  struct __fbthrift_value_field0_3 {
    using name = __fbthrift_strings::field0_3;
    using value = std::integral_constant<type, type::field0_3>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_field1_3 {
    using name = __fbthrift_strings::field1_3;
    using value = std::integral_constant<type, type::field1_3>;

    class annotations {
      struct __fbthrift_keys {
        using field_annotation = __fbthrift_strings_module::field_annotation;
      };

      struct __fbthrift_values {
        using field_annotation = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', ' ', 'a', 'n', 'n', 'o', 't', 'a', 't', 'e', 'd'>;
      };
     public:
      using keys = __fbthrift_keys;
      using values = __fbthrift_values;
      using map = ::fatal::list<
        ::apache::thrift::annotation<keys::field_annotation, values::field_annotation>
      >;
    };
  };

  struct __fbthrift_member {
    using field0_3 = __fbthrift_value_field0_3;
    using field1_3 = __fbthrift_value_field1_3;
  };

 public:
  using name = __fbthrift_strings_module::enum3;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::field0_3,
      member::field1_3
  >;

  class annotations {
    struct __fbthrift_keys {
      using _now_with_an_underscore = __fbthrift_strings_module::_now_with_an_underscore;
      using another_there = __fbthrift_strings_module::another_there;
      using duplicate_id_annotation_1 = __fbthrift_strings_module::duplicate_id_annotation_1;
      using duplicate_id_annotation_2 = __fbthrift_strings_module::duplicate_id_annotation_2;
      using one_here = __fbthrift_strings_module::one_here;
      using yet_another = __fbthrift_strings_module::yet_another;
    };

    struct __fbthrift_values {
      using _now_with_an_underscore = ::fatal::sequence<char, '_', 'n', 'o', 'w', '.', 'w', 'i', 't', 'h', '.', 'a', 'n', '.', 'u', 'n', 'd', 'e', 'r', 's', 'c', 'o', 'r', 'e'>;
      using another_there = ::fatal::sequence<char, '.'>;
      using duplicate_id_annotation_1 = ::fatal::sequence<char, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', ' ', 'i', 'd', ' ', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
      using duplicate_id_annotation_2 = ::fatal::sequence<char, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', '.', 'i', 'd', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
      using one_here = ::fatal::sequence<char, 'w', 'i', 't', 'h', ' ', 's', 'o', 'm', 'e', ' ', 'v', 'a', 'l', 'u', 'e', ' ', 'a', 's', 's', 'o', 'c', 'i', 'a', 't', 'e', 'd'>;
      using yet_another = ::fatal::sequence<char, 'a', 'n', 'd', ' ', 'y', 'e', 't', ' ', 'm', 'o', 'r', 'e', ' ', 't', 'e', 'x', 't', ' ', '-', ' ', 'i', 't', '\'', 's', ' ', 't', 'h', 'a', 't', ' ', 'e', 'a', 's', 'y'>;
    };

   public:
    using keys = __fbthrift_keys;
    using values = __fbthrift_values;
    using map = ::fatal::list<
      ::apache::thrift::annotation<keys::_now_with_an_underscore, values::_now_with_an_underscore>,
      ::apache::thrift::annotation<keys::another_there, values::another_there>,
      ::apache::thrift::annotation<keys::duplicate_id_annotation_1, values::duplicate_id_annotation_1>,
      ::apache::thrift::annotation<keys::duplicate_id_annotation_2, values::duplicate_id_annotation_2>,
      ::apache::thrift::annotation<keys::one_here, values::one_here>,
      ::apache::thrift::annotation<keys::yet_another, values::yet_another>
    >;
  };

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::field0_3: return "field0_3";
      case type::field1_3: return "field1_3";
      default: return fallback;
    }
  }
};

} // __fbthrift_refl

FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::enum3_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
    module_tags::module,
    ::apache::thrift::reflected_annotations<__fbthrift_refl::enum3_enum_traits::annotations>,
    static_cast<::apache::thrift::legacy_type_id_t>(4626344424889780008ull)
  >
);
namespace __fbthrift_refl {

class enum_with_special_names_enum_traits {
 public:
  using type = ::test_cpp2::cpp_reflection::enum_with_special_names;

 private:
  struct __fbthrift_strings {
    using get = __fbthrift_strings_module::get;
    using getter = __fbthrift_strings_module::getter;
    using lists = __fbthrift_strings_module::lists;
    using maps = __fbthrift_strings_module::maps;
    using name = __fbthrift_strings_module::name;
    using name_to_value = __fbthrift_strings_module::name_to_value;
    using names = __fbthrift_strings_module::names;
    using prefix_tree = __fbthrift_strings_module::prefix_tree;
    using sets = __fbthrift_strings_module::sets;
    using setter = __fbthrift_strings_module::setter;
    using str = __fbthrift_strings_module::str;
    using strings = __fbthrift_strings_module::strings;
    using type = __fbthrift_strings_module::type;
    using value = __fbthrift_strings_module::value;
    using value_to_name = __fbthrift_strings_module::value_to_name;
    using values = __fbthrift_strings_module::values;
    using id = __fbthrift_strings_module::id;
    using ids = __fbthrift_strings_module::ids;
    using descriptor = __fbthrift_strings_module::descriptor;
    using descriptors = __fbthrift_strings_module::descriptors;
    using key = __fbthrift_strings_module::key;
    using keys = __fbthrift_strings_module::keys;
    using annotation = __fbthrift_strings_module::annotation;
    using annotations = __fbthrift_strings_module::annotations;
    using member = __fbthrift_strings_module::member;
    using members = __fbthrift_strings_module::members;
    using field = __fbthrift_strings_module::field;
    using fields = __fbthrift_strings_module::fields;
  };

  struct __fbthrift_value_get {
    using name = __fbthrift_strings::get;
    using value = std::integral_constant<type, type::get>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_getter {
    using name = __fbthrift_strings::getter;
    using value = std::integral_constant<type, type::getter>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_lists {
    using name = __fbthrift_strings::lists;
    using value = std::integral_constant<type, type::lists>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_maps {
    using name = __fbthrift_strings::maps;
    using value = std::integral_constant<type, type::maps>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_name {
    using name = __fbthrift_strings::name;
    using value = std::integral_constant<type, type::name>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_name_to_value {
    using name = __fbthrift_strings::name_to_value;
    using value = std::integral_constant<type, type::name_to_value>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_names {
    using name = __fbthrift_strings::names;
    using value = std::integral_constant<type, type::names>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_prefix_tree {
    using name = __fbthrift_strings::prefix_tree;
    using value = std::integral_constant<type, type::prefix_tree>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_sets {
    using name = __fbthrift_strings::sets;
    using value = std::integral_constant<type, type::sets>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_setter {
    using name = __fbthrift_strings::setter;
    using value = std::integral_constant<type, type::setter>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_str {
    using name = __fbthrift_strings::str;
    using value = std::integral_constant<type, type::str>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_strings {
    using name = __fbthrift_strings::strings;
    using value = std::integral_constant<type, type::strings>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_type {
    using name = __fbthrift_strings::type;
    using value = std::integral_constant<type, type::type>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_value {
    using name = __fbthrift_strings::value;
    using value = std::integral_constant<type, type::value>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_value_to_name {
    using name = __fbthrift_strings::value_to_name;
    using value = std::integral_constant<type, type::value_to_name>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_values {
    using name = __fbthrift_strings::values;
    using value = std::integral_constant<type, type::values>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_id {
    using name = __fbthrift_strings::id;
    using value = std::integral_constant<type, type::id>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_ids {
    using name = __fbthrift_strings::ids;
    using value = std::integral_constant<type, type::ids>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_descriptor {
    using name = __fbthrift_strings::descriptor;
    using value = std::integral_constant<type, type::descriptor>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_descriptors {
    using name = __fbthrift_strings::descriptors;
    using value = std::integral_constant<type, type::descriptors>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_key {
    using name = __fbthrift_strings::key;
    using value = std::integral_constant<type, type::key>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_keys {
    using name = __fbthrift_strings::keys;
    using value = std::integral_constant<type, type::keys>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_annotation {
    using name = __fbthrift_strings::annotation;
    using value = std::integral_constant<type, type::annotation>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_annotations {
    using name = __fbthrift_strings::annotations;
    using value = std::integral_constant<type, type::annotations>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_member {
    using name = __fbthrift_strings::member;
    using value = std::integral_constant<type, type::member>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_members {
    using name = __fbthrift_strings::members;
    using value = std::integral_constant<type, type::members>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_field {
    using name = __fbthrift_strings::field;
    using value = std::integral_constant<type, type::field>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_value_fields {
    using name = __fbthrift_strings::fields;
    using value = std::integral_constant<type, type::fields>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct __fbthrift_member {
    using get = __fbthrift_value_get;
    using getter = __fbthrift_value_getter;
    using lists = __fbthrift_value_lists;
    using maps = __fbthrift_value_maps;
    using name = __fbthrift_value_name;
    using name_to_value = __fbthrift_value_name_to_value;
    using names = __fbthrift_value_names;
    using prefix_tree = __fbthrift_value_prefix_tree;
    using sets = __fbthrift_value_sets;
    using setter = __fbthrift_value_setter;
    using str = __fbthrift_value_str;
    using strings = __fbthrift_value_strings;
    using type = __fbthrift_value_type;
    using value = __fbthrift_value_value;
    using value_to_name = __fbthrift_value_value_to_name;
    using values = __fbthrift_value_values;
    using id = __fbthrift_value_id;
    using ids = __fbthrift_value_ids;
    using descriptor = __fbthrift_value_descriptor;
    using descriptors = __fbthrift_value_descriptors;
    using key = __fbthrift_value_key;
    using keys = __fbthrift_value_keys;
    using annotation = __fbthrift_value_annotation;
    using annotations = __fbthrift_value_annotations;
    using member = __fbthrift_value_member;
    using members = __fbthrift_value_members;
    using field = __fbthrift_value_field;
    using fields = __fbthrift_value_fields;
  };

 public:
  using name = __fbthrift_strings_module::enum_with_special_names;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::get,
      member::getter,
      member::lists,
      member::maps,
      member::name,
      member::name_to_value,
      member::names,
      member::prefix_tree,
      member::sets,
      member::setter,
      member::str,
      member::strings,
      member::type,
      member::value,
      member::value_to_name,
      member::values,
      member::id,
      member::ids,
      member::descriptor,
      member::descriptors,
      member::key,
      member::keys,
      member::annotation,
      member::annotations,
      member::member,
      member::members,
      member::field,
      member::fields
  >;

  class annotations {
    public:
    using keys = void;
    using values = void;
    using map = ::fatal::list<
    >;
  };
  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::get: return "get";
      case type::getter: return "getter";
      case type::lists: return "lists";
      case type::maps: return "maps";
      case type::name: return "name";
      case type::name_to_value: return "name_to_value";
      case type::names: return "names";
      case type::prefix_tree: return "prefix_tree";
      case type::sets: return "sets";
      case type::setter: return "setter";
      case type::str: return "str";
      case type::strings: return "strings";
      case type::type: return "type";
      case type::value: return "value";
      case type::value_to_name: return "value_to_name";
      case type::values: return "values";
      case type::id: return "id";
      case type::ids: return "ids";
      case type::descriptor: return "descriptor";
      case type::descriptors: return "descriptors";
      case type::key: return "key";
      case type::keys: return "keys";
      case type::annotation: return "annotation";
      case type::annotations: return "annotations";
      case type::member: return "member";
      case type::members: return "members";
      case type::field: return "field";
      case type::fields: return "fields";
      default: return fallback;
    }
  }
};

} // __fbthrift_refl

FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::enum_with_special_names_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
    module_tags::module,
    ::apache::thrift::reflected_annotations<__fbthrift_refl::enum_with_special_names_enum_traits::annotations>,
    static_cast<::apache::thrift::legacy_type_id_t>(958943865626138984ull)
  >
);
}} // test_cpp2::cpp_reflection
