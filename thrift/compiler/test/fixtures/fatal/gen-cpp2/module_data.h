/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_types.h"

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test_cpp2::cpp_reflection::enum1> {
  using type = ::test_cpp2::cpp_reflection::enum1;
  static constexpr const std::size_t size = 3;
  static constexpr const std::array<type, 3> values = {{
    type::field0,
    type::field1,
    type::field2,
  }};
  static constexpr const std::array<folly::StringPiece, 3> names = {{
    "field0",
    "field1",
    "field2",
  }};
};
template <> struct TEnumDataStorage<::test_cpp2::cpp_reflection::enum2> {
  using type = ::test_cpp2::cpp_reflection::enum2;
  static constexpr const std::size_t size = 3;
  static constexpr const std::array<type, 3> values = {{
    type::field0_2,
    type::field1_2,
    type::field2_2,
  }};
  static constexpr const std::array<folly::StringPiece, 3> names = {{
    "field0_2",
    "field1_2",
    "field2_2",
  }};
};
template <> struct TEnumDataStorage<::test_cpp2::cpp_reflection::enum3> {
  using type = ::test_cpp2::cpp_reflection::enum3;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, 2> values = {{
    type::field0_3,
    type::field1_3,
  }};
  static constexpr const std::array<folly::StringPiece, 2> names = {{
    "field0_3",
    "field1_3",
  }};
};
template <> struct TEnumDataStorage<::test_cpp2::cpp_reflection::enum_with_special_names> {
  using type = ::test_cpp2::cpp_reflection::enum_with_special_names;
  static constexpr const std::size_t size = 28;
  static constexpr const std::array<type, 28> values = {{
    type::get,
    type::getter,
    type::lists,
    type::maps,
    type::name,
    type::name_to_value,
    type::names,
    type::prefix_tree,
    type::sets,
    type::setter,
    type::str,
    type::strings,
    type::type,
    type::value,
    type::value_to_name,
    type::values,
    type::id,
    type::ids,
    type::descriptor,
    type::descriptors,
    type::key,
    type::keys,
    type::annotation,
    type::annotations,
    type::member,
    type::members,
    type::field,
    type::fields,
  }};
  static constexpr const std::array<folly::StringPiece, 28> names = {{
    "get",
    "getter",
    "lists",
    "maps",
    "name",
    "name_to_value",
    "names",
    "prefix_tree",
    "sets",
    "setter",
    "str",
    "strings",
    "type",
    "value",
    "value_to_name",
    "values",
    "id",
    "ids",
    "descriptor",
    "descriptors",
    "key",
    "keys",
    "annotation",
    "annotations",
    "member",
    "members",
    "field",
    "fields",
  }};
};

}} // apache::thrift
