/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.annotation;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="MyStruct", builder=MyStruct.Builder.class) @com.foo.Enabled 
public final class MyStruct {
    @ThriftConstructor
    public MyStruct(
        @ThriftField(value=1, name="intField", requiredness=Requiredness.NONE) final long intField,
        @ThriftField(value=2, name="stringField", requiredness=Requiredness.NONE) final String stringField,
        @ThriftField(value=3, name="detailField", requiredness=Requiredness.NONE) final String detailField,
        @ThriftField(value=4, name="detailMap", requiredness=Requiredness.NONE) final com.foo.FastIntLongMap detailMap
    ) {
        this.intField = intField;
        this.stringField = stringField;
        this.detailField = detailField;
        this.detailMap = detailMap;
    }
    
    @ThriftConstructor
    protected MyStruct() {
      this.intField = 0L;
      this.stringField = null;
      this.detailField = null;
      this.detailMap = null;
    }
    
    public static class Builder {
        private long intField;
        @ThriftField(value=1, name="intField", requiredness=Requiredness.NONE)
        public Builder setIntField(long intField) {
            this.intField = intField;
            return this;
        }
        private String stringField;
        @ThriftField(value=2, name="stringField", requiredness=Requiredness.NONE)
        public Builder setStringField(String stringField) {
            this.stringField = stringField;
            return this;
        }
        private String detailField;
        @ThriftField(value=3, name="detailField", requiredness=Requiredness.NONE) @com.foo.Ignored
        public Builder setDetailField(String detailField) {
            this.detailField = detailField;
            return this;
        }
        private com.foo.FastIntLongMap detailMap;
        @ThriftField(value=4, name="detailMap", requiredness=Requiredness.NONE) @com.foo.Ignored
        public Builder setDetailMap(com.foo.FastIntLongMap detailMap) {
            this.detailMap = detailMap;
            return this;
        }
    
        public Builder() { }
        public Builder(MyStruct other) {
            this.intField = other.intField;
            this.stringField = other.stringField;
            this.detailField = other.detailField;
            this.detailMap = other.detailMap;
        }
    
        @ThriftConstructor
        public MyStruct build() {
            return new MyStruct (
                this.intField,
                this.stringField,
                this.detailField,
                this.detailMap
            );
        }
    }
    
    private final long intField;
    private final String stringField;
    private final String detailField;
    private final com.foo.FastIntLongMap detailMap;

    
    @ThriftField(value=1, name="intField", requiredness=Requiredness.NONE)
    public long getIntField() { return intField; }
        
    @ThriftField(value=2, name="stringField", requiredness=Requiredness.NONE)
    public String getStringField() { return stringField; }
        
    @ThriftField(value=3, name="detailField", requiredness=Requiredness.NONE) @com.foo.Ignored
    public String getDetailField() { return detailField; }
        
    @ThriftField(value=4, name="detailMap", requiredness=Requiredness.NONE) @com.foo.Ignored
    public com.foo.FastIntLongMap getDetailMap() { return detailMap; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("intField", intField)
            .add("stringField", stringField)
            .add("detailField", detailField)
            .add("detailMap", detailMap)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStruct other = (MyStruct)o;
    
        return
            Objects.equals(intField, other.intField) &&
            Objects.equals(stringField, other.stringField) &&
            Objects.equals(detailField, other.detailField) &&
            Objects.equals(detailMap, other.detailMap) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            intField,
            stringField,
            detailField,
            detailMap
        });
    }
    
}
