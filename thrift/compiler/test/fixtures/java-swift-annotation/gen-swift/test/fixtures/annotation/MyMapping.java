/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.annotation;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="MyMapping", builder=MyMapping.Builder.class)
public final class MyMapping {
    @ThriftConstructor
    public MyMapping(
        @ThriftField(value=1, name="lsMap", requiredness=Requiredness.NONE) final com.foo.FastLongStringMap lsMap,
        @ThriftField(value=2, name="ioMap", requiredness=Requiredness.NONE) final com.foo.FastIntObjectMap<com.foo.FastIntLongMap> ioMap
    ) {
        this.lsMap = lsMap;
        this.ioMap = ioMap;
    }
    
    @ThriftConstructor
    protected MyMapping() {
      this.lsMap = null;
      this.ioMap = null;
    }
    
    public static class Builder {
        private com.foo.FastLongStringMap lsMap;
        @ThriftField(value=1, name="lsMap", requiredness=Requiredness.NONE)
        public Builder setLsMap(com.foo.FastLongStringMap lsMap) {
            this.lsMap = lsMap;
            return this;
        }
        private com.foo.FastIntObjectMap<com.foo.FastIntLongMap> ioMap;
        @ThriftField(value=2, name="ioMap", requiredness=Requiredness.NONE)
        public Builder setIoMap(com.foo.FastIntObjectMap<com.foo.FastIntLongMap> ioMap) {
            this.ioMap = ioMap;
            return this;
        }
    
        public Builder() { }
        public Builder(MyMapping other) {
            this.lsMap = other.lsMap;
            this.ioMap = other.ioMap;
        }
    
        @ThriftConstructor
        public MyMapping build() {
            return new MyMapping (
                this.lsMap,
                this.ioMap
            );
        }
    }
    
    private final com.foo.FastLongStringMap lsMap;
    private final com.foo.FastIntObjectMap<com.foo.FastIntLongMap> ioMap;

    
    @ThriftField(value=1, name="lsMap", requiredness=Requiredness.NONE)
    public com.foo.FastLongStringMap getLsMap() { return lsMap; }
        
    @ThriftField(value=2, name="ioMap", requiredness=Requiredness.NONE)
    public com.foo.FastIntObjectMap<com.foo.FastIntLongMap> getIoMap() { return ioMap; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("lsMap", lsMap)
            .add("ioMap", ioMap)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyMapping other = (MyMapping)o;
    
        return
            Objects.equals(lsMap, other.lsMap) &&
            Objects.equals(ioMap, other.ioMap) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            lsMap,
            ioMap
        });
    }
    
}
