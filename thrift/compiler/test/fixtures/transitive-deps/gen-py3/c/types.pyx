#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    cSetOp as __cSetOp,
    richcmp as __richcmp,
    set_op as __set_op,
    setcmp as __setcmp,
    list_index as __list_index,
    list_count as __list_count,
    list_slice as __list_slice,
    list_getitem as __list_getitem,
    set_iter as __set_iter,
    map_iter as __map_iter,
    map_contains as __map_contains,
    map_getitem as __map_getitem,
    reference_shared_ptr as __reference_shared_ptr,
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as __iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins

cimport c.types_reflection as _types_reflection



@__cython.auto_pickle(False)
cdef class C(thrift.py3.types.Struct):

    def __init__(
        C self, *,
        i=None
    ):
        if i is not None:
            if not isinstance(i, int):
                raise TypeError(f'i is not a { int !r}.')
            i = <cint64_t> i

        self._cpp_obj = __to_shared_ptr(cmove(C._make_instance(
          NULL,
          NULL,
          i,
        )))

    def __call__(
        C self,
        i=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if i is ___NOTSET:
            __isNOTSET[0] = True
            i = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if i is not None:
            if not isinstance(i, int):
                raise TypeError(f'i is not a { int !r}.')
            i = <cint64_t> i

        __fbthrift_inst = <C>C.__new__(C)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(C._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          i,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cC] _make_instance(
        cC* base_instance,
        bint* __isNOTSET,
        object i 
    ) except *:
        cdef unique_ptr[cC] c_inst
        if base_instance:
            c_inst = make_unique[cC](deref(base_instance))
        else:
            c_inst = make_unique[cC]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and i is None:
                deref(c_inst).i_ref().assign(default_inst[cC]().i_ref().value())
                deref(c_inst).__isset.i = False
                pass

        if i is not None:
            deref(c_inst).i_ref().assign(i)
            deref(c_inst).__isset.i = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("C", {
          "i": deref(self._cpp_obj).i_ref().has_value(),
        })

    def __iter__(self):
        yield 'i', self.i

    @staticmethod
    cdef create(shared_ptr[cC] cpp_obj):
        __fbthrift_inst = <C>C.__new__(C)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def i(self):

        return deref(self._cpp_obj).i_ref().value()


    def __hash__(C self):
        return  super().__hash__()

    def __copy__(C self):
        cdef shared_ptr[cC] cpp_obj = make_shared[cC](
            deref(self._cpp_obj)
        )
        return C.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cC](
            self._cpp_obj,
            (<C>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__C()

    cdef __iobuf.IOBuf _serialize(C self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cC](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(C self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cC]()
        with nogil:
            needed = serializer.cdeserialize[cC](buf, self._cpp_obj.get(), proto)
        return needed


