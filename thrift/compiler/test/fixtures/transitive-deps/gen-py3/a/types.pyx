#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    default_inst,
    reference_shared_ptr as __reference_shared_ptr,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as __iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport b.types as _b_types
import b.types as _b_types
cimport c.types as _c_types
import c.types as _c_types

cimport a.types_reflection as _types_reflection



@__cython.auto_pickle(False)
cdef class A(thrift.py3.types.Struct):

    def __init__(
        A self, *,
        b=None,
        other=None
    ):
        self._cpp_obj = __to_shared_ptr(cmove(A._make_instance(
          NULL,
          NULL,
          b,
          other,
        )))

    def __call__(
        A self,
        b=__NOTSET,
        other=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if b is ___NOTSET:
            __isNOTSET[0] = True
            b = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if other is ___NOTSET:
            __isNOTSET[1] = True
            other = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        __fbthrift_inst = <A>A.__new__(A)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(A._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          b,
          other,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cA] _make_instance(
        cA* base_instance,
        bint* __isNOTSET,
        object b ,
        object other 
    ) except *:
        cdef unique_ptr[cA] c_inst
        if base_instance:
            c_inst = make_unique[cA](deref(base_instance))
        else:
            c_inst = make_unique[cA]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and b is None:
                deref(c_inst).b_ref().assign(default_inst[cA]().b_ref().value())
                deref(c_inst).__isset.b = False
                pass

            if not __isNOTSET[1] and other is None:
                deref(c_inst).other_ref().assign(default_inst[cA]().other_ref().value())
                deref(c_inst).__isset.other = False
                pass

        if b is not None:
            deref(c_inst).b_ref().assign(deref(List__List__c_C(b)._cpp_obj))
            deref(c_inst).__isset.b = True
        if other is not None:
            deref(c_inst).other_ref().assign(deref(List__c_C(other)._cpp_obj))
            deref(c_inst).__isset.other = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("A", {
          "b": deref(self._cpp_obj).b_ref().has_value(),
          "other": deref(self._cpp_obj).other_ref().has_value(),
        })

    def __iter__(self):
        yield 'b', self.b
        yield 'other', self.other

    @staticmethod
    cdef create(shared_ptr[cA] cpp_obj):
        __fbthrift_inst = <A>A.__new__(A)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def b(self):

        if self.__field_b is None:
            self.__field_b = List__List__c_C.create(__reference_shared_ptr(deref(self._cpp_obj).b_ref().ref(), self._cpp_obj))
        return self.__field_b

    @property
    def other(self):

        if self.__field_other is None:
            self.__field_other = List__c_C.create(__reference_shared_ptr(deref(self._cpp_obj).other_ref().ref(), self._cpp_obj))
        return self.__field_other


    def __hash__(A self):
        return  super().__hash__()

    def __copy__(A self):
        cdef shared_ptr[cA] cpp_obj = make_shared[cA](
            deref(self._cpp_obj)
        )
        return A.create(cmove(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, A) and
                isinstance(other, A)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cA* cself = (<A>self)._cpp_obj.get()
        cdef cA* cother = (<A>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__A()

    cdef __iobuf.IOBuf _serialize(A self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cA](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(A self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cA]()
        with nogil:
            needed = serializer.cdeserialize[cA](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class List__c_C(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__c_C):
            self._cpp_obj = (<List__c_C> items)._cpp_obj
        else:
            self._cpp_obj = List__c_C._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[_c_types.cC]] c_items):
        __fbthrift_inst = <List__c_C>List__c_C.__new__(List__c_C)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__c_C self):
        cdef shared_ptr[vector[_c_types.cC]] cpp_obj = make_shared[vector[_c_types.cC]](
            deref(self._cpp_obj)
        )
        return List__c_C.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[_c_types.cC]] _make_instance(object items) except *:
        cdef shared_ptr[vector[_c_types.cC]] c_inst = make_shared[vector[_c_types.cC]]()
        if items is not None:
            for item in items:
                if not isinstance(item, _c_types.C):
                    raise TypeError(f"{item!r} is not of type _c_types.C")
                deref(c_inst).push_back(deref((<_c_types.C>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[_c_types.cC]] c_inst
        cdef shared_ptr[_c_types.cC] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[_c_types.cC]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__c_C.create(cmove(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = __reference_shared_ptr(deref(self._cpp_obj)[index], self._cpp_obj)
            return _c_types.C.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, _c_types.C):
            return False
        return std_libcpp.find[vector[_c_types.cC].iterator, _c_types.cC](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<_c_types.C>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[_c_types.cC] citem
        cdef vector[_c_types.cC].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = __reference_shared_ptr(deref(loc), self._cpp_obj)
            yield _c_types.C.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[_c_types.cC] citem
        cdef vector[_c_types.cC].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = __reference_shared_ptr(deref(loc), self._cpp_obj)
            yield _c_types.C.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, _c_types.C):
            raise err
        cdef vector[_c_types.cC].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[_c_types.cC].iterator loc = std_libcpp.find[vector[_c_types.cC].iterator, _c_types.cC](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<_c_types.C>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, _c_types.C):
            return 0
        return <cint64_t> std_libcpp.count[vector[_c_types.cC].iterator, _c_types.cC](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<_c_types.C>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__c_C()


Sequence.register(List__c_C)

@__cython.auto_pickle(False)
cdef class List__List__c_C(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__c_C):
            self._cpp_obj = (<List__List__c_C> items)._cpp_obj
        else:
            self._cpp_obj = List__List__c_C._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[_c_types.cC]]] c_items):
        __fbthrift_inst = <List__List__c_C>List__List__c_C.__new__(List__List__c_C)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__c_C self):
        cdef shared_ptr[vector[vector[_c_types.cC]]] cpp_obj = make_shared[vector[vector[_c_types.cC]]](
            deref(self._cpp_obj)
        )
        return List__List__c_C.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[_c_types.cC]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[_c_types.cC]]] c_inst = make_shared[vector[vector[_c_types.cC]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_c_types.C]")
                if not isinstance(item, List__c_C):
                    item = List__c_C(item)
                deref(c_inst).push_back(deref((<List__c_C>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[vector[_c_types.cC]]] c_inst
        cdef shared_ptr[vector[_c_types.cC]] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[vector[_c_types.cC]]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__List__c_C.create(cmove(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = __reference_shared_ptr(deref(self._cpp_obj)[index], self._cpp_obj)
            return List__c_C.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, List__c_C):
                item = List__c_C(item)
        except Exception:
            return False
        if not isinstance(item, List__c_C):
            return False
        return std_libcpp.find[vector[vector[_c_types.cC]].iterator, vector[_c_types.cC]](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<List__c_C>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[vector[_c_types.cC]] citem
        cdef vector[vector[_c_types.cC]].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = __reference_shared_ptr(deref(loc), self._cpp_obj)
            yield List__c_C.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[vector[_c_types.cC]] citem
        cdef vector[vector[_c_types.cC]].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = __reference_shared_ptr(deref(loc), self._cpp_obj)
            yield List__c_C.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        try:
            if not isinstance(item, List__c_C):
                item = List__c_C(item)
        except Exception:
            raise err from None
        if not isinstance(item, List__c_C):
            raise err
        cdef vector[vector[_c_types.cC]].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[vector[_c_types.cC]].iterator loc = std_libcpp.find[vector[vector[_c_types.cC]].iterator, vector[_c_types.cC]](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<List__c_C>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        try:
            if not isinstance(item, List__c_C):
                item = List__c_C(item)
        except Exception:
            return 0
        if not isinstance(item, List__c_C):
            return 0
        return <cint64_t> std_libcpp.count[vector[vector[_c_types.cC]].iterator, vector[_c_types.cC]](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<List__c_C>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__c_C()


Sequence.register(List__List__c_C)

