#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    cSetOp as __cSetOp,
    richcmp as __richcmp,
    set_op as __set_op,
    setcmp as __setcmp,
    list_index as __list_index,
    list_count as __list_count,
    list_slice as __list_slice,
    list_getitem as __list_getitem,
    set_iter as __set_iter,
    map_iter as __map_iter,
    map_contains as __map_contains,
    map_getitem as __map_getitem,
    reference_shared_ptr as __reference_shared_ptr,
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as __iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport includes.types as _includes_types
import includes.types as _includes_types

cimport module.types_reflection as _types_reflection


cdef __EnumData __MyEnumA_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cMyEnumA](), MyEnumA)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __MyEnumAMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __MyEnumA_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __MyEnumA_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __MyEnumA_enum_data.get_all_names()

    def __len__(cls):
        return __MyEnumA_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class MyEnumA(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __MyEnumA_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> MyEnumA, <PyTypeObject*> __MyEnumAMeta)


cdef __EnumData __AnnotatedEnum_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cAnnotatedEnum](), AnnotatedEnum)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __AnnotatedEnumMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __AnnotatedEnum_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __AnnotatedEnum_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __AnnotatedEnum_enum_data.get_all_names()

    def __len__(cls):
        return __AnnotatedEnum_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class AnnotatedEnum(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __AnnotatedEnum_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> AnnotatedEnum, <PyTypeObject*> __AnnotatedEnumMeta)


cdef __EnumData __AnnotatedEnum2_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cAnnotatedEnum2](), AnnotatedEnum2)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __AnnotatedEnum2Meta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __AnnotatedEnum2_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __AnnotatedEnum2_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __AnnotatedEnum2_enum_data.get_all_names()

    def __len__(cls):
        return __AnnotatedEnum2_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class AnnotatedEnum2(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __AnnotatedEnum2_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> AnnotatedEnum2, <PyTypeObject*> __AnnotatedEnum2Meta)


cdef __EnumData __MyEnumB_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cMyEnumB](), MyEnumB)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __MyEnumBMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __MyEnumB_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __MyEnumB_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __MyEnumB_enum_data.get_all_names()

    def __len__(cls):
        return __MyEnumB_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class MyEnumB(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __MyEnumB_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> MyEnumB, <PyTypeObject*> __MyEnumBMeta)



cdef __UnionTypeEnumData __SimpleUnion_union_type_enum_data  = __UnionTypeEnumData.create(
    __createEnumDataForUnionType[cSimpleUnion](),
    __SimpleUnionType,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __SimpleUnion_Union_TypeMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __SimpleUnion_union_type_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __SimpleUnion_union_type_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __SimpleUnion_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __SimpleUnion_union_type_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class __SimpleUnionType(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __SimpleUnion_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __SimpleUnionType, <PyTypeObject*> __SimpleUnion_Union_TypeMeta)


cdef __UnionTypeEnumData __ComplexUnion_union_type_enum_data  = __UnionTypeEnumData.create(
    __createEnumDataForUnionType[cComplexUnion](),
    __ComplexUnionType,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __ComplexUnion_Union_TypeMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __ComplexUnion_union_type_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __ComplexUnion_union_type_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __ComplexUnion_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __ComplexUnion_union_type_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class __ComplexUnionType(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __ComplexUnion_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __ComplexUnionType, <PyTypeObject*> __ComplexUnion_Union_TypeMeta)


cdef __UnionTypeEnumData __FloatUnion_union_type_enum_data  = __UnionTypeEnumData.create(
    __createEnumDataForUnionType[cFloatUnion](),
    __FloatUnionType,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __FloatUnion_Union_TypeMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __FloatUnion_union_type_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __FloatUnion_union_type_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __FloatUnion_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __FloatUnion_union_type_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class __FloatUnionType(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __FloatUnion_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __FloatUnionType, <PyTypeObject*> __FloatUnion_Union_TypeMeta)


@__cython.auto_pickle(False)
cdef class Empty(thrift.py3.types.Struct):

    def __init__(
        Empty self, *
    ):
        self._cpp_obj = __to_shared_ptr(cmove(Empty._make_instance(
          NULL,
          NULL,
        )))

    def __call__(
        Empty self
    ):
        return self

    @staticmethod
    cdef unique_ptr[cEmpty] _make_instance(
        cEmpty* base_instance,
        bint* __isNOTSET
    ) except *:
        cdef unique_ptr[cEmpty] c_inst
        if base_instance:
            c_inst = make_unique[cEmpty](deref(base_instance))
        else:
            c_inst = make_unique[cEmpty]()

        if base_instance:
            # Convert None's to default value. (or unset)
            pass
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("Empty", {
        })

    def __iter__(self):
        yield from ()

    @staticmethod
    cdef create(shared_ptr[cEmpty] cpp_obj):
        __fbthrift_inst = <Empty>Empty.__new__(Empty)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(Empty self):
        return  super().__hash__()

    def __copy__(Empty self):
        cdef shared_ptr[cEmpty] cpp_obj = make_shared[cEmpty](
            deref(self._cpp_obj)
        )
        return Empty.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cEmpty](
            self._cpp_obj,
            (<Empty>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Empty()

    cdef __iobuf.IOBuf _serialize(Empty self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cEmpty](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(Empty self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cEmpty]()
        with nogil:
            needed = serializer.cdeserialize[cEmpty](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class ASimpleStruct(thrift.py3.types.Struct):

    def __init__(
        ASimpleStruct self, *,
        boolField=None
    ):
        if boolField is not None:
            if not isinstance(boolField, int):
                raise TypeError(f'boolField is not a { int !r}.')
            boolField = <cint64_t> boolField

        self._cpp_obj = __to_shared_ptr(cmove(ASimpleStruct._make_instance(
          NULL,
          NULL,
          boolField,
        )))

    def __call__(
        ASimpleStruct self,
        boolField=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if boolField is ___NOTSET:
            __isNOTSET[0] = True
            boolField = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if boolField is not None:
            if not isinstance(boolField, int):
                raise TypeError(f'boolField is not a { int !r}.')
            boolField = <cint64_t> boolField

        __fbthrift_inst = <ASimpleStruct>ASimpleStruct.__new__(ASimpleStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(ASimpleStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          boolField,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cASimpleStruct] _make_instance(
        cASimpleStruct* base_instance,
        bint* __isNOTSET,
        object boolField 
    ) except *:
        cdef unique_ptr[cASimpleStruct] c_inst
        if base_instance:
            c_inst = make_unique[cASimpleStruct](deref(base_instance))
        else:
            c_inst = make_unique[cASimpleStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and boolField is None:
                deref(c_inst).boolField_ref().assign(default_inst[cASimpleStruct]().boolField_ref().value())
                deref(c_inst).__isset.boolField = False
                pass

        if boolField is not None:
            deref(c_inst).boolField_ref().assign(boolField)
            deref(c_inst).__isset.boolField = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("ASimpleStruct", {
          "boolField": deref(self._cpp_obj).boolField_ref().has_value(),
        })

    def __iter__(self):
        yield 'boolField', self.boolField

    @staticmethod
    cdef create(shared_ptr[cASimpleStruct] cpp_obj):
        __fbthrift_inst = <ASimpleStruct>ASimpleStruct.__new__(ASimpleStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def boolField(self):

        return deref(self._cpp_obj).boolField_ref().value()


    def __hash__(ASimpleStruct self):
        return  super().__hash__()

    def __copy__(ASimpleStruct self):
        cdef shared_ptr[cASimpleStruct] cpp_obj = make_shared[cASimpleStruct](
            deref(self._cpp_obj)
        )
        return ASimpleStruct.create(cmove(cpp_obj))

    def __eq__(ASimpleStruct self, other):
        if not isinstance(other, ASimpleStruct):
            return False
        return deref(self._cpp_obj.get()) == deref((<ASimpleStruct>other)._cpp_obj.get())

    def __ne__(ASimpleStruct self, other):
        if not isinstance(other, ASimpleStruct):
            return True
        return deref(self._cpp_obj) != deref((<ASimpleStruct>other)._cpp_obj)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ASimpleStruct()

    cdef __iobuf.IOBuf _serialize(ASimpleStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cASimpleStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(ASimpleStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cASimpleStruct]()
        with nogil:
            needed = serializer.cdeserialize[cASimpleStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class ASimpleStructNoexcept(thrift.py3.types.Struct):

    def __init__(
        ASimpleStructNoexcept self, *,
        boolField=None
    ):
        if boolField is not None:
            if not isinstance(boolField, int):
                raise TypeError(f'boolField is not a { int !r}.')
            boolField = <cint64_t> boolField

        self._cpp_obj = __to_shared_ptr(cmove(ASimpleStructNoexcept._make_instance(
          NULL,
          NULL,
          boolField,
        )))

    def __call__(
        ASimpleStructNoexcept self,
        boolField=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if boolField is ___NOTSET:
            __isNOTSET[0] = True
            boolField = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if boolField is not None:
            if not isinstance(boolField, int):
                raise TypeError(f'boolField is not a { int !r}.')
            boolField = <cint64_t> boolField

        __fbthrift_inst = <ASimpleStructNoexcept>ASimpleStructNoexcept.__new__(ASimpleStructNoexcept)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(ASimpleStructNoexcept._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          boolField,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cASimpleStructNoexcept] _make_instance(
        cASimpleStructNoexcept* base_instance,
        bint* __isNOTSET,
        object boolField 
    ) except *:
        cdef unique_ptr[cASimpleStructNoexcept] c_inst
        if base_instance:
            c_inst = make_unique[cASimpleStructNoexcept](deref(base_instance))
        else:
            c_inst = make_unique[cASimpleStructNoexcept]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and boolField is None:
                deref(c_inst).boolField_ref().assign(default_inst[cASimpleStructNoexcept]().boolField_ref().value())
                deref(c_inst).__isset.boolField = False
                pass

        if boolField is not None:
            deref(c_inst).boolField_ref().assign(boolField)
            deref(c_inst).__isset.boolField = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("ASimpleStructNoexcept", {
          "boolField": deref(self._cpp_obj).boolField_ref().has_value(),
        })

    def __iter__(self):
        yield 'boolField', self.boolField

    @staticmethod
    cdef create(shared_ptr[cASimpleStructNoexcept] cpp_obj):
        __fbthrift_inst = <ASimpleStructNoexcept>ASimpleStructNoexcept.__new__(ASimpleStructNoexcept)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def boolField(self):

        return deref(self._cpp_obj).boolField_ref().value()


    def __hash__(ASimpleStructNoexcept self):
        return  super().__hash__()

    def __copy__(ASimpleStructNoexcept self):
        cdef shared_ptr[cASimpleStructNoexcept] cpp_obj = make_shared[cASimpleStructNoexcept](
            deref(self._cpp_obj)
        )
        return ASimpleStructNoexcept.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cASimpleStructNoexcept](
            self._cpp_obj,
            (<ASimpleStructNoexcept>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ASimpleStructNoexcept()

    cdef __iobuf.IOBuf _serialize(ASimpleStructNoexcept self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cASimpleStructNoexcept](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(ASimpleStructNoexcept self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cASimpleStructNoexcept]()
        with nogil:
            needed = serializer.cdeserialize[cASimpleStructNoexcept](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):

    def __init__(
        MyStruct self, *,
        pbool MyBoolField=None,
        MyIntField=None,
        str MyStringField=None,
        str MyStringField2=None,
        bytes MyBinaryField=None,
        bytes MyBinaryField2=None,
        bytes MyBinaryField3=None,
        MyBinaryListField4=None,
        MyMapEnumAndInt=None
    ):
        if MyIntField is not None:
            if not isinstance(MyIntField, int):
                raise TypeError(f'MyIntField is not a { int !r}.')
            MyIntField = <cint64_t> MyIntField

        self._cpp_obj = __to_shared_ptr(cmove(MyStruct._make_instance(
          NULL,
          NULL,
          MyBoolField,
          MyIntField,
          MyStringField,
          MyStringField2,
          MyBinaryField,
          MyBinaryField2,
          MyBinaryField3,
          MyBinaryListField4,
          MyMapEnumAndInt,
        )))

    def __call__(
        MyStruct self,
        MyBoolField=__NOTSET,
        MyIntField=__NOTSET,
        MyStringField=__NOTSET,
        MyStringField2=__NOTSET,
        MyBinaryField=__NOTSET,
        MyBinaryField2=__NOTSET,
        MyBinaryField3=__NOTSET,
        MyBinaryListField4=__NOTSET,
        MyMapEnumAndInt=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[9] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if MyBoolField is ___NOTSET:
            __isNOTSET[0] = True
            MyBoolField = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if MyIntField is ___NOTSET:
            __isNOTSET[1] = True
            MyIntField = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if MyStringField is ___NOTSET:
            __isNOTSET[2] = True
            MyStringField = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if MyStringField2 is ___NOTSET:
            __isNOTSET[3] = True
            MyStringField2 = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True

        if MyBinaryField is ___NOTSET:
            __isNOTSET[4] = True
            MyBinaryField = None
        else:
            __isNOTSET[4] = False
            __fbthrift_changed = True

        if MyBinaryField2 is ___NOTSET:
            __isNOTSET[5] = True
            MyBinaryField2 = None
        else:
            __isNOTSET[5] = False
            __fbthrift_changed = True

        if MyBinaryField3 is ___NOTSET:
            __isNOTSET[6] = True
            MyBinaryField3 = None
        else:
            __isNOTSET[6] = False
            __fbthrift_changed = True

        if MyBinaryListField4 is ___NOTSET:
            __isNOTSET[7] = True
            MyBinaryListField4 = None
        else:
            __isNOTSET[7] = False
            __fbthrift_changed = True

        if MyMapEnumAndInt is ___NOTSET:
            __isNOTSET[8] = True
            MyMapEnumAndInt = None
        else:
            __isNOTSET[8] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if MyBoolField is not None:
            if not isinstance(MyBoolField, bool):
                raise TypeError(f'MyBoolField is not a { bool !r}.')

        if MyIntField is not None:
            if not isinstance(MyIntField, int):
                raise TypeError(f'MyIntField is not a { int !r}.')
            MyIntField = <cint64_t> MyIntField

        if MyStringField is not None:
            if not isinstance(MyStringField, str):
                raise TypeError(f'MyStringField is not a { str !r}.')

        if MyStringField2 is not None:
            if not isinstance(MyStringField2, str):
                raise TypeError(f'MyStringField2 is not a { str !r}.')

        if MyBinaryField is not None:
            if not isinstance(MyBinaryField, bytes):
                raise TypeError(f'MyBinaryField is not a { bytes !r}.')

        if MyBinaryField2 is not None:
            if not isinstance(MyBinaryField2, bytes):
                raise TypeError(f'MyBinaryField2 is not a { bytes !r}.')

        if MyBinaryField3 is not None:
            if not isinstance(MyBinaryField3, bytes):
                raise TypeError(f'MyBinaryField3 is not a { bytes !r}.')

        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(MyStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          MyBoolField,
          MyIntField,
          MyStringField,
          MyStringField2,
          MyBinaryField,
          MyBinaryField2,
          MyBinaryField3,
          MyBinaryListField4,
          MyMapEnumAndInt,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        bint* __isNOTSET,
        pbool MyBoolField ,
        object MyIntField ,
        str MyStringField ,
        str MyStringField2 ,
        bytes MyBinaryField ,
        bytes MyBinaryField2 ,
        bytes MyBinaryField3 ,
        object MyBinaryListField4 ,
        object MyMapEnumAndInt 
    ) except *:
        cdef unique_ptr[cMyStruct] c_inst
        if base_instance:
            c_inst = make_unique[cMyStruct](deref(base_instance))
        else:
            c_inst = make_unique[cMyStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and MyBoolField is None:
                deref(c_inst).MyBoolField_ref().assign(default_inst[cMyStruct]().MyBoolField_ref().value())
                deref(c_inst).__isset.MyBoolField = False
                pass

            if not __isNOTSET[1] and MyIntField is None:
                deref(c_inst).MyIntField_ref().assign(default_inst[cMyStruct]().MyIntField_ref().value())
                deref(c_inst).__isset.MyIntField = False
                pass

            if not __isNOTSET[2] and MyStringField is None:
                deref(c_inst).MyStringField_ref().assign(default_inst[cMyStruct]().MyStringField_ref().value())
                deref(c_inst).__isset.MyStringField = False
                pass

            if not __isNOTSET[3] and MyStringField2 is None:
                deref(c_inst).MyStringField2_ref().assign(default_inst[cMyStruct]().MyStringField2_ref().value())
                deref(c_inst).__isset.MyStringField2 = False
                pass

            if not __isNOTSET[4] and MyBinaryField is None:
                deref(c_inst).MyBinaryField_ref().assign(default_inst[cMyStruct]().MyBinaryField_ref().value())
                deref(c_inst).__isset.MyBinaryField = False
                pass

            if not __isNOTSET[5] and MyBinaryField2 is None:
                deref(c_inst).__isset.MyBinaryField2 = False
                pass

            if not __isNOTSET[6] and MyBinaryField3 is None:
                deref(c_inst).MyBinaryField3_ref().assign(default_inst[cMyStruct]().MyBinaryField3_ref().value())
                pass

            if not __isNOTSET[7] and MyBinaryListField4 is None:
                deref(c_inst).MyBinaryListField4_ref().assign(default_inst[cMyStruct]().MyBinaryListField4_ref().value())
                deref(c_inst).__isset.MyBinaryListField4 = False
                pass

            if not __isNOTSET[8] and MyMapEnumAndInt is None:
                deref(c_inst).MyMapEnumAndInt_ref().assign(default_inst[cMyStruct]().MyMapEnumAndInt_ref().value())
                deref(c_inst).__isset.MyMapEnumAndInt = False
                pass

        if MyBoolField is not None:
            deref(c_inst).MyBoolField_ref().assign(MyBoolField)
            deref(c_inst).__isset.MyBoolField = True
        if MyIntField is not None:
            deref(c_inst).MyIntField_ref().assign(MyIntField)
            deref(c_inst).__isset.MyIntField = True
        if MyStringField is not None:
            deref(c_inst).MyStringField_ref().assign(cmove(thrift.py3.types.bytes_to_string(MyStringField.encode('utf-8'))))
            deref(c_inst).__isset.MyStringField = True
        if MyStringField2 is not None:
            deref(c_inst).MyStringField2_ref().assign(cmove(thrift.py3.types.bytes_to_string(MyStringField2.encode('utf-8'))))
            deref(c_inst).__isset.MyStringField2 = True
        if MyBinaryField is not None:
            deref(c_inst).MyBinaryField_ref().assign(cmove(thrift.py3.types.bytes_to_string(MyBinaryField)))
            deref(c_inst).__isset.MyBinaryField = True
        if MyBinaryField2 is not None:
            deref(c_inst).MyBinaryField2_ref().assign(cmove(thrift.py3.types.bytes_to_string(MyBinaryField2)))
            deref(c_inst).__isset.MyBinaryField2 = True
        if MyBinaryField3 is not None:
            deref(c_inst).MyBinaryField3_ref().assign(cmove(thrift.py3.types.bytes_to_string(MyBinaryField3)))
        if MyBinaryListField4 is not None:
            deref(c_inst).MyBinaryListField4_ref().assign(deref(List__binary(MyBinaryListField4)._cpp_obj))
            deref(c_inst).__isset.MyBinaryListField4 = True
        if MyMapEnumAndInt is not None:
            deref(c_inst).MyMapEnumAndInt_ref().assign(deref(Map__MyEnumA_string(MyMapEnumAndInt)._cpp_obj))
            deref(c_inst).__isset.MyMapEnumAndInt = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("MyStruct", {
          "MyBoolField": deref(self._cpp_obj).MyBoolField_ref().has_value(),
          "MyIntField": deref(self._cpp_obj).MyIntField_ref().has_value(),
          "MyStringField": deref(self._cpp_obj).MyStringField_ref().has_value(),
          "MyStringField2": deref(self._cpp_obj).MyStringField2_ref().has_value(),
          "MyBinaryField": deref(self._cpp_obj).MyBinaryField_ref().has_value(),
          "MyBinaryField2": deref(self._cpp_obj).MyBinaryField2_ref().has_value(),
          "MyBinaryField3": deref(self._cpp_obj).MyBinaryField3_ref().has_value(),
          "MyBinaryListField4": deref(self._cpp_obj).MyBinaryListField4_ref().has_value(),
          "MyMapEnumAndInt": deref(self._cpp_obj).MyMapEnumAndInt_ref().has_value(),
        })

    def __iter__(self):
        yield 'MyBoolField', self.MyBoolField
        yield 'MyIntField', self.MyIntField
        yield 'MyStringField', self.MyStringField
        yield 'MyStringField2', self.MyStringField2
        yield 'MyBinaryField', self.MyBinaryField
        yield 'MyBinaryField2', self.MyBinaryField2
        yield 'MyBinaryField3', self.MyBinaryField3
        yield 'MyBinaryListField4', self.MyBinaryListField4
        yield 'MyMapEnumAndInt', self.MyMapEnumAndInt

    @staticmethod
    cdef create(shared_ptr[cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def MyBoolField(self):

        return <pbool> deref(self._cpp_obj).MyBoolField_ref().value()

    @property
    def MyIntField(self):

        return deref(self._cpp_obj).MyIntField_ref().value()

    @property
    def MyStringField(self):

        return (<bytes>deref(self._cpp_obj).MyStringField_ref().value()).decode('UTF-8')

    @property
    def MyStringField2(self):

        return (<bytes>deref(self._cpp_obj).MyStringField2_ref().value()).decode('UTF-8')

    @property
    def MyBinaryField(self):

        return deref(self._cpp_obj).MyBinaryField_ref().value()

    @property
    def MyBinaryField2(self):
        if not deref(self._cpp_obj).__isset.MyBinaryField2:
            return None

        return deref(self._cpp_obj).MyBinaryField2_ref().value_unchecked()

    @property
    def MyBinaryField3(self):

        return deref(self._cpp_obj).MyBinaryField3_ref().value()

    @property
    def MyBinaryListField4(self):

        if self.__field_MyBinaryListField4 is None:
            self.__field_MyBinaryListField4 = List__binary.create(__reference_shared_ptr(deref(self._cpp_obj).MyBinaryListField4_ref().ref(), self._cpp_obj))
        return self.__field_MyBinaryListField4

    @property
    def MyMapEnumAndInt(self):

        if self.__field_MyMapEnumAndInt is None:
            self.__field_MyMapEnumAndInt = Map__MyEnumA_string.create(__reference_shared_ptr(deref(self._cpp_obj).MyMapEnumAndInt_ref().ref(), self._cpp_obj))
        return self.__field_MyMapEnumAndInt


    def __hash__(MyStruct self):
        return  super().__hash__()

    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cMyStruct](
            self._cpp_obj,
            (<MyStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStruct()

    cdef __iobuf.IOBuf _serialize(MyStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(MyStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        with nogil:
            needed = serializer.cdeserialize[cMyStruct](buf, self._cpp_obj.get(), proto)
        return needed




@__cython.auto_pickle(False)
cdef class SimpleUnion(thrift.py3.types.Union):
    Type = __SimpleUnionType

    def __init__(
        self, *,
        intValue=None,
        str stringValue=None
    ):
        if intValue is not None:
            if not isinstance(intValue, int):
                raise TypeError(f'intValue is not a { int !r}.')
            intValue = <cint64_t> intValue

        self._cpp_obj = __to_shared_ptr(cmove(SimpleUnion._make_instance(
          NULL,
          intValue,
          stringValue,
        )))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return SimpleUnion()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint64_t> value
                    return SimpleUnion(intValue=value)
                except OverflowError:
                    pass
        if isinstance(value, str):
            return SimpleUnion(stringValue=value)
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cSimpleUnion] _make_instance(
        cSimpleUnion* base_instance,
        object intValue,
        str stringValue
    ) except *:
        cdef unique_ptr[cSimpleUnion] c_inst = make_unique[cSimpleUnion]()
        cdef bint any_set = False
        if intValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue(intValue)
            any_set = True
        if stringValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_stringValue(stringValue.encode('UTF-8'))
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef create(shared_ptr[cSimpleUnion] cpp_obj):
        __fbthrift_inst = <SimpleUnion>SimpleUnion.__new__(SimpleUnion)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def intValue(self):
        if self.type.value != 7:
            raise TypeError(f'Union contains a value of type {self.type.name}, not intValue')
        return self.value

    @property
    def stringValue(self):
        if self.type.value != 2:
            raise TypeError(f'Union contains a value of type {self.type.name}, not stringValue')
        return self.value


    def __hash__(SimpleUnion self):
        return  super().__hash__()

    cdef _load_cache(SimpleUnion self):
        self.type = SimpleUnion.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 7:
            self.value = deref(self._cpp_obj).get_intValue()
        elif type == 2:
            self.value = bytes(deref(self._cpp_obj).get_stringValue()).decode('UTF-8')

    def __copy__(SimpleUnion self):
        cdef shared_ptr[cSimpleUnion] cpp_obj = make_shared[cSimpleUnion](
            deref(self._cpp_obj)
        )
        return SimpleUnion.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cSimpleUnion](
            self._cpp_obj,
            (<SimpleUnion>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__SimpleUnion()

    cdef __iobuf.IOBuf _serialize(SimpleUnion self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cSimpleUnion](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(SimpleUnion self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cSimpleUnion]()
        with nogil:
            needed = serializer.cdeserialize[cSimpleUnion](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed




@__cython.auto_pickle(False)
cdef class ComplexUnion(thrift.py3.types.Union):
    Type = __ComplexUnionType

    def __init__(
        self, *,
        intValue=None,
        opt_intValue=None,
        str stringValue=None,
        str opt_stringValue=None,
        intValue2=None,
        intValue3=None,
        doubelValue=None,
        pbool boolValue=None,
        union_list=None,
        union_set=None,
        union_map=None,
        opt_union_map=None,
        MyEnumA enum_field=None,
        enum_container=None,
        MyStruct a_struct=None,
        a_set_struct=None,
        SimpleUnion a_union=None,
        SimpleUnion opt_a_union=None,
        a_union_list=None,
        a_union_typedef=None,
        a_union_typedef_list=None,
        bytes MyBinaryField=None,
        bytes MyBinaryField2=None,
        MyBinaryListField4=None,
        MyStruct ref_field=None,
        MyStruct ref_field2=None,
        AnException excp_field=None
    ):
        if intValue is not None:
            if not isinstance(intValue, int):
                raise TypeError(f'intValue is not a { int !r}.')
            intValue = <cint64_t> intValue

        if opt_intValue is not None:
            if not isinstance(opt_intValue, int):
                raise TypeError(f'opt_intValue is not a { int !r}.')
            opt_intValue = <cint64_t> opt_intValue

        if intValue2 is not None:
            if not isinstance(intValue2, int):
                raise TypeError(f'intValue2 is not a { int !r}.')
            intValue2 = <cint16_t> intValue2

        if intValue3 is not None:
            if not isinstance(intValue3, int):
                raise TypeError(f'intValue3 is not a { int !r}.')
            intValue3 = <cint32_t> intValue3

        if doubelValue is not None:
            if not isinstance(doubelValue, (float, int)):
                raise TypeError(f'doubelValue is not a { float !r}.')

        self._cpp_obj = __to_shared_ptr(cmove(ComplexUnion._make_instance(
          NULL,
          intValue,
          opt_intValue,
          stringValue,
          opt_stringValue,
          intValue2,
          intValue3,
          doubelValue,
          boolValue,
          union_list,
          union_set,
          union_map,
          opt_union_map,
          enum_field,
          enum_container,
          a_struct,
          a_set_struct,
          a_union,
          opt_a_union,
          a_union_list,
          a_union_typedef,
          a_union_typedef_list,
          MyBinaryField,
          MyBinaryField2,
          MyBinaryListField4,
          ref_field,
          ref_field2,
          excp_field,
        )))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return ComplexUnion()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint64_t> value
                    return ComplexUnion(intValue=value)
                except OverflowError:
                    pass
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint64_t> value
                    return ComplexUnion(opt_intValue=value)
                except OverflowError:
                    pass
        if isinstance(value, str):
            return ComplexUnion(stringValue=value)
        if isinstance(value, str):
            return ComplexUnion(opt_stringValue=value)
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint16_t> value
                    return ComplexUnion(intValue2=value)
                except OverflowError:
                    pass
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return ComplexUnion(intValue3=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return ComplexUnion(doubelValue=value)
                except OverflowError:
                    pass
        if isinstance(value, bool):
            return ComplexUnion(boolValue=value)
        if isinstance(value, List__i32):
            return ComplexUnion(union_list=value)
        if isinstance(value, Set__i64):
            return ComplexUnion(union_set=value)
        if isinstance(value, Map__string_i32):
            return ComplexUnion(union_map=value)
        if isinstance(value, Map__string_i32):
            return ComplexUnion(opt_union_map=value)
        if isinstance(value, MyEnumA):
            return ComplexUnion(enum_field=value)
        if isinstance(value, List__MyEnumA):
            return ComplexUnion(enum_container=value)
        if isinstance(value, MyStruct):
            return ComplexUnion(a_struct=value)
        if isinstance(value, Set__MyStruct):
            return ComplexUnion(a_set_struct=value)
        if isinstance(value, SimpleUnion):
            return ComplexUnion(a_union=value)
        if isinstance(value, SimpleUnion):
            return ComplexUnion(opt_a_union=value)
        if isinstance(value, List__SimpleUnion):
            return ComplexUnion(a_union_list=value)
        if isinstance(value, Set__SimpleUnion):
            return ComplexUnion(a_union_typedef=value)
        if isinstance(value, List__Set__SimpleUnion):
            return ComplexUnion(a_union_typedef_list=value)
        if isinstance(value, bytes):
            return ComplexUnion(MyBinaryField=value)
        if isinstance(value, bytes):
            return ComplexUnion(MyBinaryField2=value)
        if isinstance(value, List__binary):
            return ComplexUnion(MyBinaryListField4=value)
        if isinstance(value, MyStruct):
            return ComplexUnion(ref_field=value)
        if isinstance(value, MyStruct):
            return ComplexUnion(ref_field2=value)
        if isinstance(value, AnException):
            return ComplexUnion(excp_field=value)
        if isinstance(value, (float, int)):
            try:
                <double> value
                return ComplexUnion(doubelValue=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cComplexUnion] _make_instance(
        cComplexUnion* base_instance,
        object intValue,
        object opt_intValue,
        str stringValue,
        str opt_stringValue,
        object intValue2,
        object intValue3,
        object doubelValue,
        pbool boolValue,
        object union_list,
        object union_set,
        object union_map,
        object opt_union_map,
        MyEnumA enum_field,
        object enum_container,
        MyStruct a_struct,
        object a_set_struct,
        SimpleUnion a_union,
        SimpleUnion opt_a_union,
        object a_union_list,
        object a_union_typedef,
        object a_union_typedef_list,
        bytes MyBinaryField,
        bytes MyBinaryField2,
        object MyBinaryListField4,
        MyStruct ref_field,
        MyStruct ref_field2,
        AnException excp_field
    ) except *:
        cdef unique_ptr[cComplexUnion] c_inst = make_unique[cComplexUnion]()
        cdef bint any_set = False
        if intValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue(intValue)
            any_set = True
        if opt_intValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_intValue(opt_intValue)
            any_set = True
        if stringValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_stringValue(stringValue.encode('UTF-8'))
            any_set = True
        if opt_stringValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_stringValue(opt_stringValue.encode('UTF-8'))
            any_set = True
        if intValue2 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue2(intValue2)
            any_set = True
        if intValue3 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue3(intValue3)
            any_set = True
        if doubelValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_doubelValue(doubelValue)
            any_set = True
        if boolValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_boolValue(boolValue)
            any_set = True
        if union_list is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_union_list(<vector[cint32_t]>deref(List__i32(union_list)._cpp_obj))
            any_set = True
        if union_set is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_union_set(<cset[cint64_t]>deref(Set__i64(union_set)._cpp_obj))
            any_set = True
        if union_map is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_union_map(<cmap[string,cint32_t]>deref(Map__string_i32(union_map)._cpp_obj))
            any_set = True
        if opt_union_map is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_union_map(<cmap[string,cint32_t]>deref(Map__string_i32(opt_union_map)._cpp_obj))
            any_set = True
        if enum_field is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_enum_field(<cMyEnumA><int>enum_field)
            any_set = True
        if enum_container is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_enum_container(<vector[cMyEnumA]>deref(List__MyEnumA(enum_container)._cpp_obj))
            any_set = True
        if a_struct is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_struct(deref((<MyStruct?> a_struct)._cpp_obj))
            any_set = True
        if a_set_struct is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_set_struct(<cset[cMyStruct]>deref(Set__MyStruct(a_set_struct)._cpp_obj))
            any_set = True
        if a_union is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union(deref((<SimpleUnion?> a_union)._cpp_obj))
            any_set = True
        if opt_a_union is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_a_union(deref((<SimpleUnion?> opt_a_union)._cpp_obj))
            any_set = True
        if a_union_list is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union_list(<vector[cSimpleUnion]>deref(List__SimpleUnion(a_union_list)._cpp_obj))
            any_set = True
        if a_union_typedef is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union_typedef(<cset[cSimpleUnion]>deref(Set__SimpleUnion(a_union_typedef)._cpp_obj))
            any_set = True
        if a_union_typedef_list is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union_typedef_list(<vector[cset[cSimpleUnion]]>deref(List__Set__SimpleUnion(a_union_typedef_list)._cpp_obj))
            any_set = True
        if MyBinaryField is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyBinaryField(MyBinaryField)
            any_set = True
        if MyBinaryField2 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyBinaryField2(MyBinaryField2)
            any_set = True
        if MyBinaryListField4 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyBinaryListField4(<vector[string]>deref(List__binary(MyBinaryListField4)._cpp_obj))
            any_set = True
        if ref_field is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_ref_field(cMyStruct(deref((<MyStruct?>ref_field)._cpp_obj)))
            any_set = True
        if ref_field2 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_ref_field2(deref((<MyStruct?>ref_field2)._cpp_obj))
            any_set = True
        if excp_field is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_excp_field(deref((<AnException?> excp_field)._cpp_obj))
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef create(shared_ptr[cComplexUnion] cpp_obj):
        __fbthrift_inst = <ComplexUnion>ComplexUnion.__new__(ComplexUnion)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def intValue(self):
        if self.type.value != 1:
            raise TypeError(f'Union contains a value of type {self.type.name}, not intValue')
        return self.value

    @property
    def opt_intValue(self):
        if self.type.value != 201:
            raise TypeError(f'Union contains a value of type {self.type.name}, not opt_intValue')
        return self.value

    @property
    def stringValue(self):
        if self.type.value != 3:
            raise TypeError(f'Union contains a value of type {self.type.name}, not stringValue')
        return self.value

    @property
    def opt_stringValue(self):
        if self.type.value != 203:
            raise TypeError(f'Union contains a value of type {self.type.name}, not opt_stringValue')
        return self.value

    @property
    def intValue2(self):
        if self.type.value != 4:
            raise TypeError(f'Union contains a value of type {self.type.name}, not intValue2')
        return self.value

    @property
    def intValue3(self):
        if self.type.value != 6:
            raise TypeError(f'Union contains a value of type {self.type.name}, not intValue3')
        return self.value

    @property
    def doubelValue(self):
        if self.type.value != 7:
            raise TypeError(f'Union contains a value of type {self.type.name}, not doubelValue')
        return self.value

    @property
    def boolValue(self):
        if self.type.value != 8:
            raise TypeError(f'Union contains a value of type {self.type.name}, not boolValue')
        return self.value

    @property
    def union_list(self):
        if self.type.value != 9:
            raise TypeError(f'Union contains a value of type {self.type.name}, not union_list')
        return self.value

    @property
    def union_set(self):
        if self.type.value != 10:
            raise TypeError(f'Union contains a value of type {self.type.name}, not union_set')
        return self.value

    @property
    def union_map(self):
        if self.type.value != 11:
            raise TypeError(f'Union contains a value of type {self.type.name}, not union_map')
        return self.value

    @property
    def opt_union_map(self):
        if self.type.value != 211:
            raise TypeError(f'Union contains a value of type {self.type.name}, not opt_union_map')
        return self.value

    @property
    def enum_field(self):
        if self.type.value != 12:
            raise TypeError(f'Union contains a value of type {self.type.name}, not enum_field')
        return self.value

    @property
    def enum_container(self):
        if self.type.value != 13:
            raise TypeError(f'Union contains a value of type {self.type.name}, not enum_container')
        return self.value

    @property
    def a_struct(self):
        if self.type.value != 14:
            raise TypeError(f'Union contains a value of type {self.type.name}, not a_struct')
        return self.value

    @property
    def a_set_struct(self):
        if self.type.value != 15:
            raise TypeError(f'Union contains a value of type {self.type.name}, not a_set_struct')
        return self.value

    @property
    def a_union(self):
        if self.type.value != 16:
            raise TypeError(f'Union contains a value of type {self.type.name}, not a_union')
        return self.value

    @property
    def opt_a_union(self):
        if self.type.value != 216:
            raise TypeError(f'Union contains a value of type {self.type.name}, not opt_a_union')
        return self.value

    @property
    def a_union_list(self):
        if self.type.value != 17:
            raise TypeError(f'Union contains a value of type {self.type.name}, not a_union_list')
        return self.value

    @property
    def a_union_typedef(self):
        if self.type.value != 18:
            raise TypeError(f'Union contains a value of type {self.type.name}, not a_union_typedef')
        return self.value

    @property
    def a_union_typedef_list(self):
        if self.type.value != 19:
            raise TypeError(f'Union contains a value of type {self.type.name}, not a_union_typedef_list')
        return self.value

    @property
    def MyBinaryField(self):
        if self.type.value != 20:
            raise TypeError(f'Union contains a value of type {self.type.name}, not MyBinaryField')
        return self.value

    @property
    def MyBinaryField2(self):
        if self.type.value != 21:
            raise TypeError(f'Union contains a value of type {self.type.name}, not MyBinaryField2')
        return self.value

    @property
    def MyBinaryListField4(self):
        if self.type.value != 23:
            raise TypeError(f'Union contains a value of type {self.type.name}, not MyBinaryListField4')
        return self.value

    @property
    def ref_field(self):
        if self.type.value != 24:
            raise TypeError(f'Union contains a value of type {self.type.name}, not ref_field')
        return self.value

    @property
    def ref_field2(self):
        if self.type.value != 25:
            raise TypeError(f'Union contains a value of type {self.type.name}, not ref_field2')
        return self.value

    @property
    def excp_field(self):
        if self.type.value != 26:
            raise TypeError(f'Union contains a value of type {self.type.name}, not excp_field')
        return self.value


    def __hash__(ComplexUnion self):
        return  super().__hash__()

    cdef _load_cache(ComplexUnion self):
        self.type = ComplexUnion.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = deref(self._cpp_obj).get_intValue()
        elif type == 201:
            self.value = deref(self._cpp_obj).get_opt_intValue()
        elif type == 3:
            self.value = bytes(deref(self._cpp_obj).get_stringValue()).decode('UTF-8')
        elif type == 203:
            self.value = bytes(deref(self._cpp_obj).get_opt_stringValue()).decode('UTF-8')
        elif type == 4:
            self.value = deref(self._cpp_obj).get_intValue2()
        elif type == 6:
            self.value = deref(self._cpp_obj).get_intValue3()
        elif type == 7:
            self.value = deref(self._cpp_obj).get_doubelValue()
        elif type == 8:
            self.value = <bint>(deref(self._cpp_obj).get_boolValue())
        elif type == 9:
            self.value = List__i32.create(make_shared[vector[cint32_t]](deref(self._cpp_obj).get_union_list()))
        elif type == 10:
            self.value = Set__i64.create(make_shared[cset[cint64_t]](deref(self._cpp_obj).get_union_set()))
        elif type == 11:
            self.value = Map__string_i32.create(make_shared[cmap[string,cint32_t]](deref(self._cpp_obj).get_union_map()))
        elif type == 211:
            self.value = Map__string_i32.create(make_shared[cmap[string,cint32_t]](deref(self._cpp_obj).get_opt_union_map()))
        elif type == 12:
            self.value = translate_cpp_enum_to_python(MyEnumA, <int>deref(self._cpp_obj).get_enum_field())
        elif type == 13:
            self.value = List__MyEnumA.create(make_shared[vector[cMyEnumA]](deref(self._cpp_obj).get_enum_container()))
        elif type == 14:
            self.value = MyStruct.create(make_shared[cMyStruct](deref(self._cpp_obj).get_a_struct()))
        elif type == 15:
            self.value = Set__MyStruct.create(make_shared[cset[cMyStruct]](deref(self._cpp_obj).get_a_set_struct()))
        elif type == 16:
            self.value = SimpleUnion.create(make_shared[cSimpleUnion](deref(self._cpp_obj).get_a_union()))
        elif type == 216:
            self.value = SimpleUnion.create(make_shared[cSimpleUnion](deref(self._cpp_obj).get_opt_a_union()))
        elif type == 17:
            self.value = List__SimpleUnion.create(make_shared[vector[cSimpleUnion]](deref(self._cpp_obj).get_a_union_list()))
        elif type == 18:
            self.value = Set__SimpleUnion.create(make_shared[cset[cSimpleUnion]](deref(self._cpp_obj).get_a_union_typedef()))
        elif type == 19:
            self.value = List__Set__SimpleUnion.create(make_shared[vector[cset[cSimpleUnion]]](deref(self._cpp_obj).get_a_union_typedef_list()))
        elif type == 20:
            self.value = deref(self._cpp_obj).get_MyBinaryField()
        elif type == 21:
            self.value = deref(self._cpp_obj).get_MyBinaryField2()
        elif type == 23:
            self.value = List__binary.create(make_shared[vector[string]](deref(self._cpp_obj).get_MyBinaryListField4()))
        elif type == 24:
            if not deref(self._cpp_obj).get_ref_field():
                self.value = None
            else:
                self.value = MyStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).get_ref_field()), self._cpp_obj))
        elif type == 25:
            if not deref(self._cpp_obj).get_ref_field2():
                self.value = None
            else:
                self.value = MyStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).get_ref_field2()), self._cpp_obj))
        elif type == 26:
            self.value = AnException.create(make_shared[cAnException](deref(self._cpp_obj).get_excp_field()))

    def __copy__(ComplexUnion self):
        cdef shared_ptr[cComplexUnion] cpp_obj = make_shared[cComplexUnion](
            deref(self._cpp_obj)
        )
        return ComplexUnion.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cComplexUnion](
            self._cpp_obj,
            (<ComplexUnion>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ComplexUnion()

    cdef __iobuf.IOBuf _serialize(ComplexUnion self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cComplexUnion](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(ComplexUnion self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cComplexUnion]()
        with nogil:
            needed = serializer.cdeserialize[cComplexUnion](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed


@__cython.auto_pickle(False)
cdef class AnException(thrift.py3.exceptions.GeneratedError):

    def __init__(
        AnException self,
        code=None,
        req_code=None,
        str message2=None,
        str req_message=None,
        exception_list=None,
        exception_set=None,
        exception_map=None,
        req_exception_map=None,
        MyEnumA enum_field=None,
        enum_container=None,
        MyStruct a_struct=None,
        a_set_struct=None,
        a_union_list=None,
        union_typedef=None,
        a_union_typedef_list=None
    ):
        if code is not None:
            if not isinstance(code, int):
                raise TypeError(f'code is not a { int !r}.')
            code = <cint32_t> code

        if req_code is not None:
            if not isinstance(req_code, int):
                raise TypeError(f'req_code is not a { int !r}.')
            req_code = <cint32_t> req_code

        self._cpp_obj = __to_shared_ptr(cmove(AnException._make_instance(
          NULL,
          NULL,
          code,
          req_code,
          message2,
          req_message,
          exception_list,
          exception_set,
          exception_map,
          req_exception_map,
          enum_field,
          enum_container,
          a_struct,
          a_set_struct,
          a_union_list,
          union_typedef,
          a_union_typedef_list,
        )))
        _builtins.Exception.__init__(self, self.code, self.req_code, self.message2, self.req_message, self.exception_list, self.exception_set, self.exception_map, self.req_exception_map, self.enum_field, self.enum_container, self.a_struct, self.a_set_struct, self.a_union_list, self.union_typedef, self.a_union_typedef_list)


    @staticmethod
    cdef unique_ptr[cAnException] _make_instance(
        cAnException* base_instance,
        bint* __isNOTSET,
        object code ,
        object req_code ,
        str message2 ,
        str req_message ,
        object exception_list ,
        object exception_set ,
        object exception_map ,
        object req_exception_map ,
        MyEnumA enum_field ,
        object enum_container ,
        MyStruct a_struct ,
        object a_set_struct ,
        object a_union_list ,
        object union_typedef ,
        object a_union_typedef_list 
    ) except *:
        cdef unique_ptr[cAnException] c_inst
        if base_instance:
            c_inst = make_unique[cAnException](deref(base_instance))
        else:
            c_inst = make_unique[cAnException]()

        if code is not None:
            deref(c_inst).code_ref().assign(code)
            deref(c_inst).__isset.code = True
        if req_code is not None:
            deref(c_inst).req_code_ref().assign(req_code)
        if message2 is not None:
            deref(c_inst).message2_ref().assign(cmove(thrift.py3.types.bytes_to_string(message2.encode('utf-8'))))
            deref(c_inst).__isset.message2 = True
        if req_message is not None:
            deref(c_inst).req_message_ref().assign(cmove(thrift.py3.types.bytes_to_string(req_message.encode('utf-8'))))
        if exception_list is not None:
            deref(c_inst).exception_list_ref().assign(deref(List__i32(exception_list)._cpp_obj))
            deref(c_inst).__isset.exception_list = True
        if exception_set is not None:
            deref(c_inst).exception_set_ref().assign(deref(Set__i64(exception_set)._cpp_obj))
            deref(c_inst).__isset.exception_set = True
        if exception_map is not None:
            deref(c_inst).exception_map_ref().assign(deref(Map__string_i32(exception_map)._cpp_obj))
            deref(c_inst).__isset.exception_map = True
        if req_exception_map is not None:
            deref(c_inst).req_exception_map_ref().assign(deref(Map__string_i32(req_exception_map)._cpp_obj))
        if enum_field is not None:
            deref(c_inst).enum_field_ref().assign(<cMyEnumA><int>enum_field)
            deref(c_inst).__isset.enum_field = True
        if enum_container is not None:
            deref(c_inst).enum_container_ref().assign(deref(List__MyEnumA(enum_container)._cpp_obj))
            deref(c_inst).__isset.enum_container = True
        if a_struct is not None:
            deref(c_inst).a_struct_ref().assign(deref((<MyStruct?> a_struct)._cpp_obj))
            deref(c_inst).__isset.a_struct = True
        if a_set_struct is not None:
            deref(c_inst).a_set_struct_ref().assign(deref(Set__MyStruct(a_set_struct)._cpp_obj))
            deref(c_inst).__isset.a_set_struct = True
        if a_union_list is not None:
            deref(c_inst).a_union_list_ref().assign(deref(List__SimpleUnion(a_union_list)._cpp_obj))
            deref(c_inst).__isset.a_union_list = True
        if union_typedef is not None:
            deref(c_inst).union_typedef_ref().assign(deref(Set__SimpleUnion(union_typedef)._cpp_obj))
            deref(c_inst).__isset.union_typedef = True
        if a_union_typedef_list is not None:
            deref(c_inst).a_union_typedef_list_ref().assign(deref(List__Set__SimpleUnion(a_union_typedef_list)._cpp_obj))
            deref(c_inst).__isset.a_union_typedef_list = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("AnException", {
          "code": deref(self._cpp_obj).code_ref().has_value(),
          "req_code": deref(self._cpp_obj).req_code_ref().has_value(),
          "message2": deref(self._cpp_obj).message2_ref().has_value(),
          "req_message": deref(self._cpp_obj).req_message_ref().has_value(),
          "exception_list": deref(self._cpp_obj).exception_list_ref().has_value(),
          "exception_set": deref(self._cpp_obj).exception_set_ref().has_value(),
          "exception_map": deref(self._cpp_obj).exception_map_ref().has_value(),
          "req_exception_map": deref(self._cpp_obj).req_exception_map_ref().has_value(),
          "enum_field": deref(self._cpp_obj).enum_field_ref().has_value(),
          "enum_container": deref(self._cpp_obj).enum_container_ref().has_value(),
          "a_struct": deref(self._cpp_obj).a_struct_ref().has_value(),
          "a_set_struct": deref(self._cpp_obj).a_set_struct_ref().has_value(),
          "a_union_list": deref(self._cpp_obj).a_union_list_ref().has_value(),
          "union_typedef": deref(self._cpp_obj).union_typedef_ref().has_value(),
          "a_union_typedef_list": deref(self._cpp_obj).a_union_typedef_list_ref().has_value(),
        })

    def __iter__(self):
        yield 'code', self.code
        yield 'req_code', self.req_code
        yield 'message2', self.message2
        yield 'req_message', self.req_message
        yield 'exception_list', self.exception_list
        yield 'exception_set', self.exception_set
        yield 'exception_map', self.exception_map
        yield 'req_exception_map', self.req_exception_map
        yield 'enum_field', self.enum_field
        yield 'enum_container', self.enum_container
        yield 'a_struct', self.a_struct
        yield 'a_set_struct', self.a_set_struct
        yield 'a_union_list', self.a_union_list
        yield 'union_typedef', self.union_typedef
        yield 'a_union_typedef_list', self.a_union_typedef_list

    @staticmethod
    cdef create(shared_ptr[cAnException] cpp_obj):
        __fbthrift_inst = <AnException>AnException.__new__(AnException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        _builtins.Exception.__init__(__fbthrift_inst, __fbthrift_inst.code, __fbthrift_inst.req_code, __fbthrift_inst.message2, __fbthrift_inst.req_message, __fbthrift_inst.exception_list, __fbthrift_inst.exception_set, __fbthrift_inst.exception_map, __fbthrift_inst.req_exception_map, __fbthrift_inst.enum_field, __fbthrift_inst.enum_container, __fbthrift_inst.a_struct, __fbthrift_inst.a_set_struct, __fbthrift_inst.a_union_list, __fbthrift_inst.union_typedef, __fbthrift_inst.a_union_typedef_list)
        return __fbthrift_inst

    @property
    def code(self):

        return deref(self._cpp_obj).code_ref().value()

    @property
    def req_code(self):

        return deref(self._cpp_obj).req_code_ref().value()

    @property
    def message2(self):

        return (<bytes>deref(self._cpp_obj).message2_ref().value()).decode('UTF-8')

    @property
    def req_message(self):

        return (<bytes>deref(self._cpp_obj).req_message_ref().value()).decode('UTF-8')

    @property
    def exception_list(self):

        if self.__field_exception_list is None:
            self.__field_exception_list = List__i32.create(__reference_shared_ptr(deref(self._cpp_obj).exception_list_ref().ref(), self._cpp_obj))
        return self.__field_exception_list

    @property
    def exception_set(self):

        if self.__field_exception_set is None:
            self.__field_exception_set = Set__i64.create(__reference_shared_ptr(deref(self._cpp_obj).exception_set_ref().ref(), self._cpp_obj))
        return self.__field_exception_set

    @property
    def exception_map(self):

        if self.__field_exception_map is None:
            self.__field_exception_map = Map__string_i32.create(__reference_shared_ptr(deref(self._cpp_obj).exception_map_ref().ref(), self._cpp_obj))
        return self.__field_exception_map

    @property
    def req_exception_map(self):

        if self.__field_req_exception_map is None:
            self.__field_req_exception_map = Map__string_i32.create(__reference_shared_ptr(deref(self._cpp_obj).req_exception_map_ref().ref(), self._cpp_obj))
        return self.__field_req_exception_map

    @property
    def enum_field(self):

        return translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj).enum_field_ref().value()))

    @property
    def enum_container(self):

        if self.__field_enum_container is None:
            self.__field_enum_container = List__MyEnumA.create(__reference_shared_ptr(deref(self._cpp_obj).enum_container_ref().ref(), self._cpp_obj))
        return self.__field_enum_container

    @property
    def a_struct(self):

        if self.__field_a_struct is None:
            self.__field_a_struct = MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).a_struct_ref().ref(), self._cpp_obj))
        return self.__field_a_struct

    @property
    def a_set_struct(self):

        if self.__field_a_set_struct is None:
            self.__field_a_set_struct = Set__MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).a_set_struct_ref().ref(), self._cpp_obj))
        return self.__field_a_set_struct

    @property
    def a_union_list(self):

        if self.__field_a_union_list is None:
            self.__field_a_union_list = List__SimpleUnion.create(__reference_shared_ptr(deref(self._cpp_obj).a_union_list_ref().ref(), self._cpp_obj))
        return self.__field_a_union_list

    @property
    def union_typedef(self):

        if self.__field_union_typedef is None:
            self.__field_union_typedef = Set__SimpleUnion.create(__reference_shared_ptr(deref(self._cpp_obj).union_typedef_ref().ref(), self._cpp_obj))
        return self.__field_union_typedef

    @property
    def a_union_typedef_list(self):

        if self.__field_a_union_typedef_list is None:
            self.__field_a_union_typedef_list = List__Set__SimpleUnion.create(__reference_shared_ptr(deref(self._cpp_obj).a_union_typedef_list_ref().ref(), self._cpp_obj))
        return self.__field_a_union_typedef_list


    def __hash__(AnException self):
        return  super().__hash__()

    def __str__(AnException self):
        field = self.message2
        if field is None:
            return str(field)
        return field

    def __copy__(AnException self):
        cdef shared_ptr[cAnException] cpp_obj = make_shared[cAnException](
            deref(self._cpp_obj)
        )
        return AnException.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cAnException](
            self._cpp_obj,
            (<AnException>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AnException()



@__cython.auto_pickle(False)
cdef class AnotherException(thrift.py3.exceptions.GeneratedError):

    def __init__(
        AnotherException self,
        code=None,
        req_code=None,
        str message=None
    ):
        if code is not None:
            if not isinstance(code, int):
                raise TypeError(f'code is not a { int !r}.')
            code = <cint32_t> code

        if req_code is not None:
            if not isinstance(req_code, int):
                raise TypeError(f'req_code is not a { int !r}.')
            req_code = <cint32_t> req_code

        self._cpp_obj = __to_shared_ptr(cmove(AnotherException._make_instance(
          NULL,
          NULL,
          code,
          req_code,
          message,
        )))
        _builtins.Exception.__init__(self, self.code, self.req_code, self.message)


    @staticmethod
    cdef unique_ptr[cAnotherException] _make_instance(
        cAnotherException* base_instance,
        bint* __isNOTSET,
        object code ,
        object req_code ,
        str message 
    ) except *:
        cdef unique_ptr[cAnotherException] c_inst
        if base_instance:
            c_inst = make_unique[cAnotherException](deref(base_instance))
        else:
            c_inst = make_unique[cAnotherException]()

        if code is not None:
            deref(c_inst).code_ref().assign(code)
            deref(c_inst).__isset.code = True
        if req_code is not None:
            deref(c_inst).req_code_ref().assign(req_code)
        if message is not None:
            deref(c_inst).message_ref().assign(cmove(thrift.py3.types.bytes_to_string(message.encode('utf-8'))))
            deref(c_inst).__isset.message = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("AnotherException", {
          "code": deref(self._cpp_obj).code_ref().has_value(),
          "req_code": deref(self._cpp_obj).req_code_ref().has_value(),
          "message": deref(self._cpp_obj).message_ref().has_value(),
        })

    def __iter__(self):
        yield 'code', self.code
        yield 'req_code', self.req_code
        yield 'message', self.message

    @staticmethod
    cdef create(shared_ptr[cAnotherException] cpp_obj):
        __fbthrift_inst = <AnotherException>AnotherException.__new__(AnotherException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        _builtins.Exception.__init__(__fbthrift_inst, __fbthrift_inst.code, __fbthrift_inst.req_code, __fbthrift_inst.message)
        return __fbthrift_inst

    @property
    def code(self):

        return deref(self._cpp_obj).code_ref().value()

    @property
    def req_code(self):

        return deref(self._cpp_obj).req_code_ref().value()

    @property
    def message(self):

        return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')


    def __hash__(AnotherException self):
        return  super().__hash__()

    def __copy__(AnotherException self):
        cdef shared_ptr[cAnotherException] cpp_obj = make_shared[cAnotherException](
            deref(self._cpp_obj)
        )
        return AnotherException.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cAnotherException](
            self._cpp_obj,
            (<AnotherException>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AnotherException()



@__cython.auto_pickle(False)
cdef class containerStruct(thrift.py3.types.Struct):

    def __init__(
        containerStruct self, *,
        pbool fieldA=None,
        pbool req_fieldA=None,
        pbool opt_fieldA=None,
        fieldB=None,
        req_fieldB=None,
        opt_fieldB=None,
        fieldC=None,
        req_fieldC=None,
        opt_fieldC=None,
        str fieldD=None,
        str fieldE=None,
        str req_fieldE=None,
        str opt_fieldE=None,
        fieldF=None,
        fieldG=None,
        fieldH=None,
        pbool fieldI=None,
        fieldJ=None,
        fieldK=None,
        fieldL=None,
        fieldM=None,
        fieldN=None,
        fieldO=None,
        fieldP=None,
        MyEnumA fieldQ=None,
        MyEnumA fieldR=None,
        MyEnumA req_fieldR=None,
        MyEnumA opt_fieldR=None,
        MyEnumA fieldS=None,
        fieldT=None,
        fieldU=None,
        MyStruct fieldV=None,
        MyStruct req_fieldV=None,
        MyStruct opt_fieldV=None,
        fieldW=None,
        ComplexUnion fieldX=None,
        ComplexUnion req_fieldX=None,
        ComplexUnion opt_fieldX=None,
        fieldY=None,
        fieldZ=None,
        fieldAA=None,
        fieldAB=None,
        MyEnumB fieldAC=None,
        _includes_types.AnEnum fieldAD=None,
        fieldAE=None,
        str fieldSD=None
    ):
        if fieldN is not None:
            if not isinstance(fieldN, int):
                raise TypeError(f'fieldN is not a { int !r}.')
            fieldN = <cint32_t> fieldN

        self._cpp_obj = __to_shared_ptr(cmove(containerStruct._make_instance(
          NULL,
          NULL,
          fieldA,
          req_fieldA,
          opt_fieldA,
          fieldB,
          req_fieldB,
          opt_fieldB,
          fieldC,
          req_fieldC,
          opt_fieldC,
          fieldD,
          fieldE,
          req_fieldE,
          opt_fieldE,
          fieldF,
          fieldG,
          fieldH,
          fieldI,
          fieldJ,
          fieldK,
          fieldL,
          fieldM,
          fieldN,
          fieldO,
          fieldP,
          fieldQ,
          fieldR,
          req_fieldR,
          opt_fieldR,
          fieldS,
          fieldT,
          fieldU,
          fieldV,
          req_fieldV,
          opt_fieldV,
          fieldW,
          fieldX,
          req_fieldX,
          opt_fieldX,
          fieldY,
          fieldZ,
          fieldAA,
          fieldAB,
          fieldAC,
          fieldAD,
          fieldAE,
          fieldSD,
        )))


    @staticmethod
    cdef unique_ptr[ccontainerStruct] _make_instance(
        ccontainerStruct* base_instance,
        bint* __isNOTSET,
        pbool fieldA ,
        pbool req_fieldA ,
        pbool opt_fieldA ,
        object fieldB ,
        object req_fieldB ,
        object opt_fieldB ,
        object fieldC ,
        object req_fieldC ,
        object opt_fieldC ,
        str fieldD ,
        str fieldE ,
        str req_fieldE ,
        str opt_fieldE ,
        object fieldF ,
        object fieldG ,
        object fieldH ,
        pbool fieldI ,
        object fieldJ ,
        object fieldK ,
        object fieldL ,
        object fieldM ,
        object fieldN ,
        object fieldO ,
        object fieldP ,
        MyEnumA fieldQ ,
        MyEnumA fieldR ,
        MyEnumA req_fieldR ,
        MyEnumA opt_fieldR ,
        MyEnumA fieldS ,
        object fieldT ,
        object fieldU ,
        MyStruct fieldV ,
        MyStruct req_fieldV ,
        MyStruct opt_fieldV ,
        object fieldW ,
        ComplexUnion fieldX ,
        ComplexUnion req_fieldX ,
        ComplexUnion opt_fieldX ,
        object fieldY ,
        object fieldZ ,
        object fieldAA ,
        object fieldAB ,
        MyEnumB fieldAC ,
        _includes_types.AnEnum fieldAD ,
        object fieldAE ,
        str fieldSD 
    ) except *:
        cdef unique_ptr[ccontainerStruct] c_inst
        if base_instance:
            raise TypeError("containerStruct is noncopyable")
        else:
            c_inst = make_unique[ccontainerStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and fieldA is None:
                deref(c_inst).fieldA_ref().assign(default_inst[ccontainerStruct]().fieldA_ref().value())
                deref(c_inst).__isset.fieldA = False
                pass

            if not __isNOTSET[1] and req_fieldA is None:
                deref(c_inst).req_fieldA_ref().assign(default_inst[ccontainerStruct]().req_fieldA_ref().value())
                pass

            if not __isNOTSET[2] and opt_fieldA is None:
                deref(c_inst).__isset.opt_fieldA = False
                pass

            if not __isNOTSET[3] and fieldB is None:
                deref(c_inst).fieldB_ref().assign(default_inst[ccontainerStruct]().fieldB_ref().value())
                deref(c_inst).__isset.fieldB = False
                pass

            if not __isNOTSET[4] and req_fieldB is None:
                deref(c_inst).req_fieldB_ref().assign(default_inst[ccontainerStruct]().req_fieldB_ref().value())
                pass

            if not __isNOTSET[5] and opt_fieldB is None:
                deref(c_inst).__isset.opt_fieldB = False
                pass

            if not __isNOTSET[6] and fieldC is None:
                deref(c_inst).fieldC_ref().assign(default_inst[ccontainerStruct]().fieldC_ref().value())
                deref(c_inst).__isset.fieldC = False
                pass

            if not __isNOTSET[7] and req_fieldC is None:
                deref(c_inst).req_fieldC_ref().assign(default_inst[ccontainerStruct]().req_fieldC_ref().value())
                pass

            if not __isNOTSET[8] and opt_fieldC is None:
                deref(c_inst).opt_fieldC_ref().assign(default_inst[ccontainerStruct]().opt_fieldC_ref().value_unchecked())
                deref(c_inst).__isset.opt_fieldC = False
                pass

            if not __isNOTSET[9] and fieldD is None:
                deref(c_inst).fieldD_ref().assign(default_inst[ccontainerStruct]().fieldD_ref().value())
                deref(c_inst).__isset.fieldD = False
                pass

            if not __isNOTSET[10] and fieldE is None:
                deref(c_inst).fieldE_ref().assign(default_inst[ccontainerStruct]().fieldE_ref().value())
                deref(c_inst).__isset.fieldE = False
                pass

            if not __isNOTSET[11] and req_fieldE is None:
                deref(c_inst).req_fieldE_ref().assign(default_inst[ccontainerStruct]().req_fieldE_ref().value())
                pass

            if not __isNOTSET[12] and opt_fieldE is None:
                deref(c_inst).opt_fieldE_ref().assign(default_inst[ccontainerStruct]().opt_fieldE_ref().value_unchecked())
                deref(c_inst).__isset.opt_fieldE = False
                pass

            if not __isNOTSET[13] and fieldF is None:
                deref(c_inst).fieldF_ref().assign(default_inst[ccontainerStruct]().fieldF_ref().value())
                deref(c_inst).__isset.fieldF = False
                pass

            if not __isNOTSET[14] and fieldG is None:
                deref(c_inst).fieldG_ref().assign(default_inst[ccontainerStruct]().fieldG_ref().value())
                deref(c_inst).__isset.fieldG = False
                pass

            if not __isNOTSET[15] and fieldH is None:
                deref(c_inst).fieldH_ref().assign(default_inst[ccontainerStruct]().fieldH_ref().value())
                deref(c_inst).__isset.fieldH = False
                pass

            if not __isNOTSET[16] and fieldI is None:
                deref(c_inst).fieldI_ref().assign(default_inst[ccontainerStruct]().fieldI_ref().value())
                deref(c_inst).__isset.fieldI = False
                pass

            if not __isNOTSET[17] and fieldJ is None:
                deref(c_inst).fieldJ_ref().assign(default_inst[ccontainerStruct]().fieldJ_ref().value())
                deref(c_inst).__isset.fieldJ = False
                pass

            if not __isNOTSET[18] and fieldK is None:
                deref(c_inst).fieldK_ref().assign(default_inst[ccontainerStruct]().fieldK_ref().value())
                deref(c_inst).__isset.fieldK = False
                pass

            if not __isNOTSET[19] and fieldL is None:
                deref(c_inst).fieldL_ref().assign(default_inst[ccontainerStruct]().fieldL_ref().value())
                deref(c_inst).__isset.fieldL = False
                pass

            if not __isNOTSET[20] and fieldM is None:
                deref(c_inst).fieldM_ref().assign(default_inst[ccontainerStruct]().fieldM_ref().value())
                deref(c_inst).__isset.fieldM = False
                pass

            if not __isNOTSET[21] and fieldN is None:
                deref(c_inst).fieldN_ref().assign(default_inst[ccontainerStruct]().fieldN_ref().value())
                deref(c_inst).__isset.fieldN = False
                pass

            if not __isNOTSET[22] and fieldO is None:
                deref(c_inst).fieldO_ref().assign(default_inst[ccontainerStruct]().fieldO_ref().value())
                deref(c_inst).__isset.fieldO = False
                pass

            if not __isNOTSET[23] and fieldP is None:
                deref(c_inst).fieldP_ref().assign(default_inst[ccontainerStruct]().fieldP_ref().value())
                deref(c_inst).__isset.fieldP = False
                pass

            if not __isNOTSET[24] and fieldQ is None:
                deref(c_inst).fieldQ_ref().assign(default_inst[ccontainerStruct]().fieldQ_ref().value())
                deref(c_inst).__isset.fieldQ = False
                pass

            if not __isNOTSET[25] and fieldR is None:
                deref(c_inst).fieldR_ref().assign(default_inst[ccontainerStruct]().fieldR_ref().value())
                deref(c_inst).__isset.fieldR = False
                pass

            if not __isNOTSET[26] and req_fieldR is None:
                deref(c_inst).req_fieldR_ref().assign(default_inst[ccontainerStruct]().req_fieldR_ref().value())
                pass

            if not __isNOTSET[27] and opt_fieldR is None:
                deref(c_inst).opt_fieldR_ref().assign(default_inst[ccontainerStruct]().opt_fieldR_ref().value_unchecked())
                deref(c_inst).__isset.opt_fieldR = False
                pass

            if not __isNOTSET[28] and fieldS is None:
                deref(c_inst).fieldS_ref().assign(default_inst[ccontainerStruct]().fieldS_ref().value())
                deref(c_inst).__isset.fieldS = False
                pass

            if not __isNOTSET[29] and fieldT is None:
                deref(c_inst).fieldT_ref().assign(default_inst[ccontainerStruct]().fieldT_ref().value())
                deref(c_inst).__isset.fieldT = False
                pass

            if not __isNOTSET[30] and fieldU is None:
                deref(c_inst).fieldU_ref().assign(default_inst[ccontainerStruct]().fieldU_ref().value())
                deref(c_inst).__isset.fieldU = False
                pass

            if not __isNOTSET[31] and fieldV is None:
                deref(c_inst).fieldV_ref().assign(default_inst[ccontainerStruct]().fieldV_ref().value())
                deref(c_inst).__isset.fieldV = False
                pass

            if not __isNOTSET[32] and req_fieldV is None:
                deref(c_inst).req_fieldV_ref().assign(default_inst[ccontainerStruct]().req_fieldV_ref().value())
                pass

            if not __isNOTSET[33] and opt_fieldV is None:
                deref(c_inst).__isset.opt_fieldV = False
                pass

            if not __isNOTSET[34] and fieldW is None:
                deref(c_inst).fieldW_ref().assign(default_inst[ccontainerStruct]().fieldW_ref().value())
                deref(c_inst).__isset.fieldW = False
                pass

            if not __isNOTSET[35] and fieldX is None:
                deref(c_inst).fieldX_ref().assign(default_inst[ccontainerStruct]().fieldX_ref().value())
                deref(c_inst).__isset.fieldX = False
                pass

            if not __isNOTSET[36] and req_fieldX is None:
                deref(c_inst).req_fieldX_ref().assign(default_inst[ccontainerStruct]().req_fieldX_ref().value())
                pass

            if not __isNOTSET[37] and opt_fieldX is None:
                deref(c_inst).__isset.opt_fieldX = False
                pass

            if not __isNOTSET[38] and fieldY is None:
                deref(c_inst).fieldY_ref().assign(default_inst[ccontainerStruct]().fieldY_ref().value())
                deref(c_inst).__isset.fieldY = False
                pass

            if not __isNOTSET[39] and fieldZ is None:
                deref(c_inst).fieldZ_ref().assign(default_inst[ccontainerStruct]().fieldZ_ref().value())
                deref(c_inst).__isset.fieldZ = False
                pass

            if not __isNOTSET[40] and fieldAA is None:
                deref(c_inst).fieldAA_ref().assign(default_inst[ccontainerStruct]().fieldAA_ref().value())
                deref(c_inst).__isset.fieldAA = False
                pass

            if not __isNOTSET[41] and fieldAB is None:
                deref(c_inst).fieldAB_ref().assign(default_inst[ccontainerStruct]().fieldAB_ref().value())
                deref(c_inst).__isset.fieldAB = False
                pass

            if not __isNOTSET[42] and fieldAC is None:
                deref(c_inst).fieldAC_ref().assign(default_inst[ccontainerStruct]().fieldAC_ref().value())
                deref(c_inst).__isset.fieldAC = False
                pass

            if not __isNOTSET[43] and fieldAD is None:
                deref(c_inst).fieldAD_ref().assign(default_inst[ccontainerStruct]().fieldAD_ref().value())
                deref(c_inst).__isset.fieldAD = False
                pass

            if not __isNOTSET[44] and fieldAE is None:
                deref(c_inst).fieldAE_ref().assign(default_inst[ccontainerStruct]().fieldAE_ref().value())
                deref(c_inst).__isset.fieldAE = False
                pass

            if not __isNOTSET[45] and fieldSD is None:
                deref(c_inst).fieldSD_ref().assign(default_inst[ccontainerStruct]().fieldSD_ref().value())
                deref(c_inst).__isset.fieldSD = False
                pass

        if fieldA is not None:
            deref(c_inst).fieldA_ref().assign(fieldA)
            deref(c_inst).__isset.fieldA = True
        if req_fieldA is not None:
            deref(c_inst).req_fieldA_ref().assign(req_fieldA)
        if opt_fieldA is not None:
            deref(c_inst).opt_fieldA_ref().assign(opt_fieldA)
            deref(c_inst).__isset.opt_fieldA = True
        if fieldB is not None:
            deref(c_inst).fieldB_ref().assign(deref(Map__string_bool(fieldB)._cpp_obj))
            deref(c_inst).__isset.fieldB = True
        if req_fieldB is not None:
            deref(c_inst).req_fieldB_ref().assign(deref(Map__string_bool(req_fieldB)._cpp_obj))
        if opt_fieldB is not None:
            deref(c_inst).opt_fieldB_ref().assign(deref(Map__string_bool(opt_fieldB)._cpp_obj))
            deref(c_inst).__isset.opt_fieldB = True
        if fieldC is not None:
            deref(c_inst).fieldC_ref().assign(deref(Set__i32(fieldC)._cpp_obj))
            deref(c_inst).__isset.fieldC = True
        if req_fieldC is not None:
            deref(c_inst).req_fieldC_ref().assign(deref(Set__i32(req_fieldC)._cpp_obj))
        if opt_fieldC is not None:
            deref(c_inst).opt_fieldC_ref().assign(deref(Set__i32(opt_fieldC)._cpp_obj))
            deref(c_inst).__isset.opt_fieldC = True
        if fieldD is not None:
            deref(c_inst).fieldD_ref().assign(cmove(thrift.py3.types.bytes_to_string(fieldD.encode('utf-8'))))
            deref(c_inst).__isset.fieldD = True
        if fieldE is not None:
            deref(c_inst).fieldE_ref().assign(cmove(thrift.py3.types.bytes_to_string(fieldE.encode('utf-8'))))
            deref(c_inst).__isset.fieldE = True
        if req_fieldE is not None:
            deref(c_inst).req_fieldE_ref().assign(cmove(thrift.py3.types.bytes_to_string(req_fieldE.encode('utf-8'))))
        if opt_fieldE is not None:
            deref(c_inst).opt_fieldE_ref().assign(cmove(thrift.py3.types.bytes_to_string(opt_fieldE.encode('utf-8'))))
            deref(c_inst).__isset.opt_fieldE = True
        if fieldF is not None:
            deref(c_inst).fieldF_ref().assign(deref(List__List__i32(fieldF)._cpp_obj))
            deref(c_inst).__isset.fieldF = True
        if fieldG is not None:
            deref(c_inst).fieldG_ref().assign(deref(Map__string_Map__string_Map__string_i32(fieldG)._cpp_obj))
            deref(c_inst).__isset.fieldG = True
        if fieldH is not None:
            deref(c_inst).fieldH_ref().assign(deref(List__Set__i32(fieldH)._cpp_obj))
            deref(c_inst).__isset.fieldH = True
        if fieldI is not None:
            deref(c_inst).fieldI_ref().assign(fieldI)
            deref(c_inst).__isset.fieldI = True
        if fieldJ is not None:
            deref(c_inst).fieldJ_ref().assign(deref(Map__string_List__i32(fieldJ)._cpp_obj))
            deref(c_inst).__isset.fieldJ = True
        if fieldK is not None:
            deref(c_inst).fieldK_ref().assign(deref(List__List__List__List__i32(fieldK)._cpp_obj))
            deref(c_inst).__isset.fieldK = True
        if fieldL is not None:
            deref(c_inst).fieldL_ref().assign(deref(Set__Set__Set__bool(fieldL)._cpp_obj))
            deref(c_inst).__isset.fieldL = True
        if fieldM is not None:
            deref(c_inst).fieldM_ref().assign(deref(Map__Set__List__i32_Map__List__Set__string_string(fieldM)._cpp_obj))
            deref(c_inst).__isset.fieldM = True
        if fieldN is not None:
            deref(c_inst).fieldN_ref().assign(fieldN)
            deref(c_inst).__isset.fieldN = True
        if fieldO is not None:
            deref(c_inst).fieldO_ref().assign(deref(List__Map__Empty_MyStruct(fieldO)._cpp_obj))
            deref(c_inst).__isset.fieldO = True
        if fieldP is not None:
            deref(c_inst).fieldP_ref().assign(deref(List__List__List__Map__Empty_MyStruct(fieldP)._cpp_obj))
            deref(c_inst).__isset.fieldP = True
        if fieldQ is not None:
            deref(c_inst).fieldQ_ref().assign(<cMyEnumA><int>fieldQ)
            deref(c_inst).__isset.fieldQ = True
        if fieldR is not None:
            deref(c_inst).fieldR_ref().assign(<cMyEnumA><int>fieldR)
            deref(c_inst).__isset.fieldR = True
        if req_fieldR is not None:
            deref(c_inst).req_fieldR_ref().assign(<cMyEnumA><int>req_fieldR)
        if opt_fieldR is not None:
            deref(c_inst).opt_fieldR_ref().assign(<cMyEnumA><int>opt_fieldR)
            deref(c_inst).__isset.opt_fieldR = True
        if fieldS is not None:
            deref(c_inst).fieldS_ref().assign(<cMyEnumA><int>fieldS)
            deref(c_inst).__isset.fieldS = True
        if fieldT is not None:
            deref(c_inst).fieldT_ref().assign(deref(List__MyEnumA(fieldT)._cpp_obj))
            deref(c_inst).__isset.fieldT = True
        if fieldU is not None:
            deref(c_inst).fieldU_ref().assign(deref(List__MyEnumA(fieldU)._cpp_obj))
            deref(c_inst).__isset.fieldU = True
        if fieldV is not None:
            deref(c_inst).fieldV_ref().assign(deref((<MyStruct?> fieldV)._cpp_obj))
            deref(c_inst).__isset.fieldV = True
        if req_fieldV is not None:
            deref(c_inst).req_fieldV_ref().assign(deref((<MyStruct?> req_fieldV)._cpp_obj))
        if opt_fieldV is not None:
            deref(c_inst).opt_fieldV_ref().assign(deref((<MyStruct?> opt_fieldV)._cpp_obj))
            deref(c_inst).__isset.opt_fieldV = True
        if fieldW is not None:
            deref(c_inst).fieldW_ref().assign(deref(Set__MyStruct(fieldW)._cpp_obj))
            deref(c_inst).__isset.fieldW = True
        if fieldX is not None:
            deref(c_inst).fieldX_ref().assign(deref((<ComplexUnion?> fieldX)._cpp_obj))
            deref(c_inst).__isset.fieldX = True
        if req_fieldX is not None:
            deref(c_inst).req_fieldX_ref().assign(deref((<ComplexUnion?> req_fieldX)._cpp_obj))
        if opt_fieldX is not None:
            deref(c_inst).opt_fieldX_ref().assign(deref((<ComplexUnion?> opt_fieldX)._cpp_obj))
            deref(c_inst).__isset.opt_fieldX = True
        if fieldY is not None:
            deref(c_inst).fieldY_ref().assign(deref(List__ComplexUnion(fieldY)._cpp_obj))
            deref(c_inst).__isset.fieldY = True
        if fieldZ is not None:
            deref(c_inst).fieldZ_ref().assign(deref(Set__SimpleUnion(fieldZ)._cpp_obj))
            deref(c_inst).__isset.fieldZ = True
        if fieldAA is not None:
            deref(c_inst).fieldAA_ref().assign(deref(List__Set__SimpleUnion(fieldAA)._cpp_obj))
            deref(c_inst).__isset.fieldAA = True
        if fieldAB is not None:
            deref(c_inst).fieldAB_ref().assign(deref(Map__Bar__double_Baz__i32(fieldAB)._cpp_obj))
            deref(c_inst).__isset.fieldAB = True
        if fieldAC is not None:
            deref(c_inst).fieldAC_ref().assign(<cMyEnumB><int>fieldAC)
            deref(c_inst).__isset.fieldAC = True
        if fieldAD is not None:
            deref(c_inst).fieldAD_ref().assign(<_includes_types.cAnEnum><int>fieldAD)
            deref(c_inst).__isset.fieldAD = True
        if fieldAE is not None:
            deref(c_inst).fieldAE_ref().assign(deref(Map__string_i32(fieldAE)._cpp_obj))
            deref(c_inst).__isset.fieldAE = True
        if fieldSD is not None:
            deref(c_inst).fieldSD_ref().assign(cmove(thrift.py3.types.bytes_to_string(fieldSD.encode('utf-8'))))
            deref(c_inst).__isset.fieldSD = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("containerStruct", {
          "fieldA": deref(self._cpp_obj).fieldA_ref().has_value(),
          "req_fieldA": deref(self._cpp_obj).req_fieldA_ref().has_value(),
          "opt_fieldA": deref(self._cpp_obj).opt_fieldA_ref().has_value(),
          "fieldB": deref(self._cpp_obj).fieldB_ref().has_value(),
          "req_fieldB": deref(self._cpp_obj).req_fieldB_ref().has_value(),
          "opt_fieldB": deref(self._cpp_obj).opt_fieldB_ref().has_value(),
          "fieldC": deref(self._cpp_obj).fieldC_ref().has_value(),
          "req_fieldC": deref(self._cpp_obj).req_fieldC_ref().has_value(),
          "opt_fieldC": deref(self._cpp_obj).opt_fieldC_ref().has_value(),
          "fieldD": deref(self._cpp_obj).fieldD_ref().has_value(),
          "fieldE": deref(self._cpp_obj).fieldE_ref().has_value(),
          "req_fieldE": deref(self._cpp_obj).req_fieldE_ref().has_value(),
          "opt_fieldE": deref(self._cpp_obj).opt_fieldE_ref().has_value(),
          "fieldF": deref(self._cpp_obj).fieldF_ref().has_value(),
          "fieldG": deref(self._cpp_obj).fieldG_ref().has_value(),
          "fieldH": deref(self._cpp_obj).fieldH_ref().has_value(),
          "fieldI": deref(self._cpp_obj).fieldI_ref().has_value(),
          "fieldJ": deref(self._cpp_obj).fieldJ_ref().has_value(),
          "fieldK": deref(self._cpp_obj).fieldK_ref().has_value(),
          "fieldL": deref(self._cpp_obj).fieldL_ref().has_value(),
          "fieldM": deref(self._cpp_obj).fieldM_ref().has_value(),
          "fieldN": deref(self._cpp_obj).fieldN_ref().has_value(),
          "fieldO": deref(self._cpp_obj).fieldO_ref().has_value(),
          "fieldP": deref(self._cpp_obj).fieldP_ref().has_value(),
          "fieldQ": deref(self._cpp_obj).fieldQ_ref().has_value(),
          "fieldR": deref(self._cpp_obj).fieldR_ref().has_value(),
          "req_fieldR": deref(self._cpp_obj).req_fieldR_ref().has_value(),
          "opt_fieldR": deref(self._cpp_obj).opt_fieldR_ref().has_value(),
          "fieldS": deref(self._cpp_obj).fieldS_ref().has_value(),
          "fieldT": deref(self._cpp_obj).fieldT_ref().has_value(),
          "fieldU": deref(self._cpp_obj).fieldU_ref().has_value(),
          "fieldV": deref(self._cpp_obj).fieldV_ref().has_value(),
          "req_fieldV": deref(self._cpp_obj).req_fieldV_ref().has_value(),
          "opt_fieldV": deref(self._cpp_obj).opt_fieldV_ref().has_value(),
          "fieldW": deref(self._cpp_obj).fieldW_ref().has_value(),
          "fieldX": deref(self._cpp_obj).fieldX_ref().has_value(),
          "req_fieldX": deref(self._cpp_obj).req_fieldX_ref().has_value(),
          "opt_fieldX": deref(self._cpp_obj).opt_fieldX_ref().has_value(),
          "fieldY": deref(self._cpp_obj).fieldY_ref().has_value(),
          "fieldZ": deref(self._cpp_obj).fieldZ_ref().has_value(),
          "fieldAA": deref(self._cpp_obj).fieldAA_ref().has_value(),
          "fieldAB": deref(self._cpp_obj).fieldAB_ref().has_value(),
          "fieldAC": deref(self._cpp_obj).fieldAC_ref().has_value(),
          "fieldAD": deref(self._cpp_obj).fieldAD_ref().has_value(),
          "fieldAE": deref(self._cpp_obj).fieldAE_ref().has_value(),
          "fieldSD": deref(self._cpp_obj).fieldSD_ref().has_value(),
        })

    def __iter__(self):
        yield 'fieldA', self.fieldA
        yield 'req_fieldA', self.req_fieldA
        yield 'opt_fieldA', self.opt_fieldA
        yield 'fieldB', self.fieldB
        yield 'req_fieldB', self.req_fieldB
        yield 'opt_fieldB', self.opt_fieldB
        yield 'fieldC', self.fieldC
        yield 'req_fieldC', self.req_fieldC
        yield 'opt_fieldC', self.opt_fieldC
        yield 'fieldD', self.fieldD
        yield 'fieldE', self.fieldE
        yield 'req_fieldE', self.req_fieldE
        yield 'opt_fieldE', self.opt_fieldE
        yield 'fieldF', self.fieldF
        yield 'fieldG', self.fieldG
        yield 'fieldH', self.fieldH
        yield 'fieldI', self.fieldI
        yield 'fieldJ', self.fieldJ
        yield 'fieldK', self.fieldK
        yield 'fieldL', self.fieldL
        yield 'fieldM', self.fieldM
        yield 'fieldN', self.fieldN
        yield 'fieldO', self.fieldO
        yield 'fieldP', self.fieldP
        yield 'fieldQ', self.fieldQ
        yield 'fieldR', self.fieldR
        yield 'req_fieldR', self.req_fieldR
        yield 'opt_fieldR', self.opt_fieldR
        yield 'fieldS', self.fieldS
        yield 'fieldT', self.fieldT
        yield 'fieldU', self.fieldU
        yield 'fieldV', self.fieldV
        yield 'req_fieldV', self.req_fieldV
        yield 'opt_fieldV', self.opt_fieldV
        yield 'fieldW', self.fieldW
        yield 'fieldX', self.fieldX
        yield 'req_fieldX', self.req_fieldX
        yield 'opt_fieldX', self.opt_fieldX
        yield 'fieldY', self.fieldY
        yield 'fieldZ', self.fieldZ
        yield 'fieldAA', self.fieldAA
        yield 'fieldAB', self.fieldAB
        yield 'fieldAC', self.fieldAC
        yield 'fieldAD', self.fieldAD
        yield 'fieldAE', self.fieldAE
        yield 'fieldSD', self.fieldSD

    @staticmethod
    cdef create(shared_ptr[ccontainerStruct] cpp_obj):
        __fbthrift_inst = <containerStruct>containerStruct.__new__(containerStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def fieldA(self):

        return <pbool> deref(self._cpp_obj).fieldA_ref().value()

    @property
    def req_fieldA(self):

        return <pbool> deref(self._cpp_obj).req_fieldA_ref().value()

    @property
    def opt_fieldA(self):
        if not deref(self._cpp_obj).__isset.opt_fieldA:
            return None

        return <pbool> deref(self._cpp_obj).opt_fieldA_ref().value_unchecked()

    @property
    def fieldB(self):

        if self.__field_fieldB is None:
            self.__field_fieldB = Map__string_bool.create(__reference_shared_ptr(deref(self._cpp_obj).fieldB_ref().ref(), self._cpp_obj))
        return self.__field_fieldB

    @property
    def req_fieldB(self):

        if self.__field_req_fieldB is None:
            self.__field_req_fieldB = Map__string_bool.create(__reference_shared_ptr(deref(self._cpp_obj).req_fieldB_ref().ref(), self._cpp_obj))
        return self.__field_req_fieldB

    @property
    def opt_fieldB(self):
        if not deref(self._cpp_obj).__isset.opt_fieldB:
            return None

        if self.__field_opt_fieldB is None:
            self.__field_opt_fieldB = Map__string_bool.create(__reference_shared_ptr(deref(self._cpp_obj).opt_fieldB_ref().ref_unchecked(), self._cpp_obj))
        return self.__field_opt_fieldB

    @property
    def fieldC(self):

        if self.__field_fieldC is None:
            self.__field_fieldC = Set__i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldC_ref().ref(), self._cpp_obj))
        return self.__field_fieldC

    @property
    def req_fieldC(self):

        if self.__field_req_fieldC is None:
            self.__field_req_fieldC = Set__i32.create(__reference_shared_ptr(deref(self._cpp_obj).req_fieldC_ref().ref(), self._cpp_obj))
        return self.__field_req_fieldC

    @property
    def opt_fieldC(self):

        if self.__field_opt_fieldC is None:
            self.__field_opt_fieldC = Set__i32.create(__reference_shared_ptr(deref(self._cpp_obj).opt_fieldC_ref().ref_unchecked(), self._cpp_obj))
        return self.__field_opt_fieldC

    @property
    def fieldD(self):

        return (<bytes>deref(self._cpp_obj).fieldD_ref().value()).decode('UTF-8')

    @property
    def fieldE(self):

        return (<bytes>deref(self._cpp_obj).fieldE_ref().value()).decode('UTF-8')

    @property
    def req_fieldE(self):

        return (<bytes>deref(self._cpp_obj).req_fieldE_ref().value()).decode('UTF-8')

    @property
    def opt_fieldE(self):

        return (<bytes>deref(self._cpp_obj).opt_fieldE_ref().value_unchecked()).decode('UTF-8')

    @property
    def fieldF(self):

        if self.__field_fieldF is None:
            self.__field_fieldF = List__List__i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldF_ref().ref(), self._cpp_obj))
        return self.__field_fieldF

    @property
    def fieldG(self):

        if self.__field_fieldG is None:
            self.__field_fieldG = Map__string_Map__string_Map__string_i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldG_ref().ref(), self._cpp_obj))
        return self.__field_fieldG

    @property
    def fieldH(self):

        if self.__field_fieldH is None:
            self.__field_fieldH = List__Set__i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldH_ref().ref(), self._cpp_obj))
        return self.__field_fieldH

    @property
    def fieldI(self):

        return <pbool> deref(self._cpp_obj).fieldI_ref().value()

    @property
    def fieldJ(self):

        if self.__field_fieldJ is None:
            self.__field_fieldJ = Map__string_List__i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldJ_ref().ref(), self._cpp_obj))
        return self.__field_fieldJ

    @property
    def fieldK(self):

        if self.__field_fieldK is None:
            self.__field_fieldK = List__List__List__List__i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldK_ref().ref(), self._cpp_obj))
        return self.__field_fieldK

    @property
    def fieldL(self):

        if self.__field_fieldL is None:
            self.__field_fieldL = Set__Set__Set__bool.create(__reference_shared_ptr(deref(self._cpp_obj).fieldL_ref().ref(), self._cpp_obj))
        return self.__field_fieldL

    @property
    def fieldM(self):

        if self.__field_fieldM is None:
            self.__field_fieldM = Map__Set__List__i32_Map__List__Set__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).fieldM_ref().ref(), self._cpp_obj))
        return self.__field_fieldM

    @property
    def fieldN(self):

        return deref(self._cpp_obj).fieldN_ref().value()

    @property
    def fieldO(self):

        if self.__field_fieldO is None:
            self.__field_fieldO = List__Map__Empty_MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).fieldO_ref().ref(), self._cpp_obj))
        return self.__field_fieldO

    @property
    def fieldP(self):

        if self.__field_fieldP is None:
            self.__field_fieldP = List__List__List__Map__Empty_MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).fieldP_ref().ref(), self._cpp_obj))
        return self.__field_fieldP

    @property
    def fieldQ(self):

        return translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj).fieldQ_ref().value()))

    @property
    def fieldR(self):

        return translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj).fieldR_ref().value()))

    @property
    def req_fieldR(self):

        return translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj).req_fieldR_ref().value()))

    @property
    def opt_fieldR(self):

        return translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj).opt_fieldR_ref().value_unchecked()))

    @property
    def fieldS(self):

        return translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj).fieldS_ref().value()))

    @property
    def fieldT(self):

        if self.__field_fieldT is None:
            self.__field_fieldT = List__MyEnumA.create(__reference_shared_ptr(deref(self._cpp_obj).fieldT_ref().ref(), self._cpp_obj))
        return self.__field_fieldT

    @property
    def fieldU(self):

        if self.__field_fieldU is None:
            self.__field_fieldU = List__MyEnumA.create(__reference_shared_ptr(deref(self._cpp_obj).fieldU_ref().ref(), self._cpp_obj))
        return self.__field_fieldU

    @property
    def fieldV(self):

        if self.__field_fieldV is None:
            self.__field_fieldV = MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).fieldV_ref().ref(), self._cpp_obj))
        return self.__field_fieldV

    @property
    def req_fieldV(self):

        if self.__field_req_fieldV is None:
            self.__field_req_fieldV = MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).req_fieldV_ref().ref(), self._cpp_obj))
        return self.__field_req_fieldV

    @property
    def opt_fieldV(self):
        if not deref(self._cpp_obj).__isset.opt_fieldV:
            return None

        if self.__field_opt_fieldV is None:
            self.__field_opt_fieldV = MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).opt_fieldV_ref().ref_unchecked(), self._cpp_obj))
        return self.__field_opt_fieldV

    @property
    def fieldW(self):

        if self.__field_fieldW is None:
            self.__field_fieldW = Set__MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).fieldW_ref().ref(), self._cpp_obj))
        return self.__field_fieldW

    @property
    def fieldX(self):

        if self.__field_fieldX is None:
            self.__field_fieldX = ComplexUnion.create(__reference_shared_ptr(deref(self._cpp_obj).fieldX_ref().ref(), self._cpp_obj))
        return self.__field_fieldX

    @property
    def req_fieldX(self):

        if self.__field_req_fieldX is None:
            self.__field_req_fieldX = ComplexUnion.create(__reference_shared_ptr(deref(self._cpp_obj).req_fieldX_ref().ref(), self._cpp_obj))
        return self.__field_req_fieldX

    @property
    def opt_fieldX(self):
        if not deref(self._cpp_obj).__isset.opt_fieldX:
            return None

        if self.__field_opt_fieldX is None:
            self.__field_opt_fieldX = ComplexUnion.create(__reference_shared_ptr(deref(self._cpp_obj).opt_fieldX_ref().ref_unchecked(), self._cpp_obj))
        return self.__field_opt_fieldX

    @property
    def fieldY(self):

        if self.__field_fieldY is None:
            self.__field_fieldY = List__ComplexUnion.create(__reference_shared_ptr(deref(self._cpp_obj).fieldY_ref().ref(), self._cpp_obj))
        return self.__field_fieldY

    @property
    def fieldZ(self):

        if self.__field_fieldZ is None:
            self.__field_fieldZ = Set__SimpleUnion.create(__reference_shared_ptr(deref(self._cpp_obj).fieldZ_ref().ref(), self._cpp_obj))
        return self.__field_fieldZ

    @property
    def fieldAA(self):

        if self.__field_fieldAA is None:
            self.__field_fieldAA = List__Set__SimpleUnion.create(__reference_shared_ptr(deref(self._cpp_obj).fieldAA_ref().ref(), self._cpp_obj))
        return self.__field_fieldAA

    @property
    def fieldAB(self):

        if self.__field_fieldAB is None:
            self.__field_fieldAB = Map__Bar__double_Baz__i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldAB_ref().ref(), self._cpp_obj))
        return self.__field_fieldAB

    @property
    def fieldAC(self):

        return translate_cpp_enum_to_python(MyEnumB, <int>(deref(self._cpp_obj).fieldAC_ref().value()))

    @property
    def fieldAD(self):

        return translate_cpp_enum_to_python(_includes_types.AnEnum, <int>(deref(self._cpp_obj).fieldAD_ref().value()))

    @property
    def fieldAE(self):

        if self.__field_fieldAE is None:
            self.__field_fieldAE = Map__string_i32.create(__reference_shared_ptr(deref(self._cpp_obj).fieldAE_ref().ref(), self._cpp_obj))
        return self.__field_fieldAE

    @property
    def fieldSD(self):

        return (<bytes>deref(self._cpp_obj).fieldSD_ref().value()).decode('UTF-8')


    def __hash__(containerStruct self):
        return  super().__hash__()

    def __copy__(containerStruct self):
        raise TypeError("containerStruct is noncopyable")

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[ccontainerStruct](
            self._cpp_obj,
            (<containerStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__containerStruct()

    cdef __iobuf.IOBuf _serialize(containerStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[ccontainerStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(containerStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[ccontainerStruct]()
        with nogil:
            needed = serializer.cdeserialize[ccontainerStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class MyIncludedStruct(thrift.py3.types.Struct):

    def __init__(
        MyIncludedStruct self, *,
        MyIncludedInt=None,
        _includes_types.AStruct MyIncludedStruct=None,
        _includes_types.AStruct ARefField=None,
        _includes_types.AStruct ARequiredField=None
    ):
        if MyIncludedInt is not None:
            if not isinstance(MyIncludedInt, int):
                raise TypeError(f'MyIncludedInt is not a { int !r}.')
            MyIncludedInt = <cint64_t> MyIncludedInt

        self._cpp_obj = __to_shared_ptr(cmove(MyIncludedStruct._make_instance(
          NULL,
          NULL,
          MyIncludedInt,
          MyIncludedStruct,
          ARefField,
          ARequiredField,
        )))

    def __call__(
        MyIncludedStruct self,
        MyIncludedInt=__NOTSET,
        MyIncludedStruct=__NOTSET,
        ARefField=__NOTSET,
        ARequiredField=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[4] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if MyIncludedInt is ___NOTSET:
            __isNOTSET[0] = True
            MyIncludedInt = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if MyIncludedStruct is ___NOTSET:
            __isNOTSET[1] = True
            MyIncludedStruct = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if ARefField is ___NOTSET:
            __isNOTSET[2] = True
            ARefField = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if ARequiredField is ___NOTSET:
            __isNOTSET[3] = True
            ARequiredField = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if MyIncludedInt is not None:
            if not isinstance(MyIncludedInt, int):
                raise TypeError(f'MyIncludedInt is not a { int !r}.')
            MyIncludedInt = <cint64_t> MyIncludedInt

        if MyIncludedStruct is not None:
            if not isinstance(MyIncludedStruct, _includes_types.AStruct):
                raise TypeError(f'MyIncludedStruct is not a { _includes_types.AStruct !r}.')

        if ARefField is not None:
            if not isinstance(ARefField, _includes_types.AStruct):
                raise TypeError(f'ARefField is not a { _includes_types.AStruct !r}.')

        if ARequiredField is not None:
            if not isinstance(ARequiredField, _includes_types.AStruct):
                raise TypeError(f'ARequiredField is not a { _includes_types.AStruct !r}.')

        __fbthrift_inst = <MyIncludedStruct>MyIncludedStruct.__new__(MyIncludedStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(MyIncludedStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          MyIncludedInt,
          MyIncludedStruct,
          ARefField,
          ARequiredField,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cMyIncludedStruct] _make_instance(
        cMyIncludedStruct* base_instance,
        bint* __isNOTSET,
        object MyIncludedInt ,
        _includes_types.AStruct MyIncludedStruct ,
        _includes_types.AStruct ARefField ,
        _includes_types.AStruct ARequiredField 
    ) except *:
        cdef unique_ptr[cMyIncludedStruct] c_inst
        if base_instance:
            c_inst = make_unique[cMyIncludedStruct](deref(base_instance))
        else:
            c_inst = make_unique[cMyIncludedStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and MyIncludedInt is None:
                deref(c_inst).MyIncludedInt_ref().assign(default_inst[cMyIncludedStruct]().MyIncludedInt_ref().value())
                deref(c_inst).__isset.MyIncludedInt = False
                pass

            if not __isNOTSET[1] and MyIncludedStruct is None:
                deref(c_inst).MyIncludedStruct_ref().assign(default_inst[cMyIncludedStruct]().MyIncludedStruct_ref().value())
                deref(c_inst).__isset.MyIncludedStruct = False
                pass

            if not __isNOTSET[2] and ARefField is None:
                deref(c_inst).ARefField.reset()
                pass

            if not __isNOTSET[3] and ARequiredField is None:
                deref(c_inst).ARequiredField_ref().assign(default_inst[cMyIncludedStruct]().ARequiredField_ref().value())
                pass

        if MyIncludedInt is not None:
            deref(c_inst).MyIncludedInt_ref().assign(MyIncludedInt)
            deref(c_inst).__isset.MyIncludedInt = True
        if MyIncludedStruct is not None:
            deref(c_inst).MyIncludedStruct_ref().assign(deref((<_includes_types.AStruct?> MyIncludedStruct)._cpp_obj))
            deref(c_inst).__isset.MyIncludedStruct = True
        if ARefField is not None:
            deref(c_inst).ARefField = make_unique[_includes_types.cAStruct](deref((<_includes_types.AStruct?>ARefField)._cpp_obj))
        if ARequiredField is not None:
            deref(c_inst).ARequiredField_ref().assign(deref((<_includes_types.AStruct?> ARequiredField)._cpp_obj))
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("MyIncludedStruct", {
          "MyIncludedInt": deref(self._cpp_obj).MyIncludedInt_ref().has_value(),
          "MyIncludedStruct": deref(self._cpp_obj).MyIncludedStruct_ref().has_value(),
          "ARequiredField": deref(self._cpp_obj).ARequiredField_ref().has_value(),
        })

    def __iter__(self):
        yield 'MyIncludedInt', self.MyIncludedInt
        yield 'MyIncludedStruct', self.MyIncludedStruct
        yield 'ARefField', self.ARefField
        yield 'ARequiredField', self.ARequiredField

    @staticmethod
    cdef create(shared_ptr[cMyIncludedStruct] cpp_obj):
        __fbthrift_inst = <MyIncludedStruct>MyIncludedStruct.__new__(MyIncludedStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def MyIncludedInt(self):

        return deref(self._cpp_obj).MyIncludedInt_ref().value()

    @property
    def MyIncludedStruct(self):

        if self.__field_MyIncludedStruct is None:
            self.__field_MyIncludedStruct = _includes_types.AStruct.create(__reference_shared_ptr(deref(self._cpp_obj).MyIncludedStruct_ref().ref(), self._cpp_obj))
        return self.__field_MyIncludedStruct

    @property
    def ARefField(self):

        if self.__field_ARefField is None:
            if not deref(self._cpp_obj).ARefField:
                return None
            self.__field_ARefField = _includes_types.AStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).ARefField), self._cpp_obj))
        return self.__field_ARefField

    @property
    def ARequiredField(self):

        if self.__field_ARequiredField is None:
            self.__field_ARequiredField = _includes_types.AStruct.create(__reference_shared_ptr(deref(self._cpp_obj).ARequiredField_ref().ref(), self._cpp_obj))
        return self.__field_ARequiredField


    def __hash__(MyIncludedStruct self):
        return  super().__hash__()

    def __copy__(MyIncludedStruct self):
        cdef shared_ptr[cMyIncludedStruct] cpp_obj = make_shared[cMyIncludedStruct](
            deref(self._cpp_obj)
        )
        return MyIncludedStruct.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cMyIncludedStruct](
            self._cpp_obj,
            (<MyIncludedStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyIncludedStruct()

    cdef __iobuf.IOBuf _serialize(MyIncludedStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyIncludedStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(MyIncludedStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyIncludedStruct]()
        with nogil:
            needed = serializer.cdeserialize[cMyIncludedStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class AnnotatedStruct(thrift.py3.types.Struct):

    def __init__(
        AnnotatedStruct self, *,
        containerStruct no_annotation=None,
        containerStruct cpp_unique_ref=None,
        containerStruct cpp2_unique_ref=None,
        container_with_ref=None,
        containerStruct req_cpp_unique_ref=None,
        containerStruct req_cpp2_unique_ref=None,
        req_container_with_ref=None,
        containerStruct opt_cpp_unique_ref=None,
        containerStruct opt_cpp2_unique_ref=None,
        opt_container_with_ref=None,
        containerStruct ref_type_unique=None,
        containerStruct ref_type_shared=None,
        ref_type_const=None,
        containerStruct req_ref_type_shared=None,
        containerStruct req_ref_type_const=None,
        req_ref_type_unique=None,
        containerStruct opt_ref_type_const=None,
        containerStruct opt_ref_type_unique=None,
        opt_ref_type_shared=None,
        base_type=None,
        list_type=None,
        set_type=None,
        map_type=None,
        map_struct_type=None,
        __iobuf.IOBuf iobuf_type=None,
        __iobuf.IOBuf iobuf_ptr=None,
        list_i32_template=None,
        list_string_template=None,
        set_template=None,
        map_template=None,
        typedef_list_template=None,
        typedef_deque_template=None,
        typedef_set_template=None,
        typedef_map_template=None,
        indirection_a=None,
        indirection_b=None,
        indirection_c=None,
        __iobuf.IOBuf iobuf_type_val=None,
        __iobuf.IOBuf iobuf_ptr_val=None,
        containerStruct struct_struct=None
    ):
        if base_type is not None:
            if not isinstance(base_type, int):
                raise TypeError(f'base_type is not a { int !r}.')
            base_type = <cint32_t> base_type

        if indirection_a is not None:
            if not isinstance(indirection_a, int):
                raise TypeError(f'indirection_a is not a { int !r}.')
            indirection_a = <cint64_t> indirection_a

        self._cpp_obj = __to_shared_ptr(cmove(AnnotatedStruct._make_instance(
          NULL,
          NULL,
          no_annotation,
          cpp_unique_ref,
          cpp2_unique_ref,
          container_with_ref,
          req_cpp_unique_ref,
          req_cpp2_unique_ref,
          req_container_with_ref,
          opt_cpp_unique_ref,
          opt_cpp2_unique_ref,
          opt_container_with_ref,
          ref_type_unique,
          ref_type_shared,
          ref_type_const,
          req_ref_type_shared,
          req_ref_type_const,
          req_ref_type_unique,
          opt_ref_type_const,
          opt_ref_type_unique,
          opt_ref_type_shared,
          base_type,
          list_type,
          set_type,
          map_type,
          map_struct_type,
          iobuf_type,
          iobuf_ptr,
          list_i32_template,
          list_string_template,
          set_template,
          map_template,
          typedef_list_template,
          typedef_deque_template,
          typedef_set_template,
          typedef_map_template,
          indirection_a,
          indirection_b,
          indirection_c,
          iobuf_type_val,
          iobuf_ptr_val,
          struct_struct,
        )))


    @staticmethod
    cdef unique_ptr[cAnnotatedStruct] _make_instance(
        cAnnotatedStruct* base_instance,
        bint* __isNOTSET,
        containerStruct no_annotation ,
        containerStruct cpp_unique_ref ,
        containerStruct cpp2_unique_ref ,
        object container_with_ref ,
        containerStruct req_cpp_unique_ref ,
        containerStruct req_cpp2_unique_ref ,
        object req_container_with_ref ,
        containerStruct opt_cpp_unique_ref ,
        containerStruct opt_cpp2_unique_ref ,
        object opt_container_with_ref ,
        containerStruct ref_type_unique ,
        containerStruct ref_type_shared ,
        object ref_type_const ,
        containerStruct req_ref_type_shared ,
        containerStruct req_ref_type_const ,
        object req_ref_type_unique ,
        containerStruct opt_ref_type_const ,
        containerStruct opt_ref_type_unique ,
        object opt_ref_type_shared ,
        object base_type ,
        object list_type ,
        object set_type ,
        object map_type ,
        object map_struct_type ,
        __iobuf.IOBuf iobuf_type ,
        __iobuf.IOBuf iobuf_ptr ,
        object list_i32_template ,
        object list_string_template ,
        object set_template ,
        object map_template ,
        object typedef_list_template ,
        object typedef_deque_template ,
        object typedef_set_template ,
        object typedef_map_template ,
        object indirection_a ,
        object indirection_b ,
        object indirection_c ,
        __iobuf.IOBuf iobuf_type_val ,
        __iobuf.IOBuf iobuf_ptr_val ,
        containerStruct struct_struct 
    ) except *:
        cdef unique_ptr[cAnnotatedStruct] c_inst
        if base_instance:
            raise TypeError("AnnotatedStruct is noncopyable")
        else:
            c_inst = make_unique[cAnnotatedStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and no_annotation is None:
                deref(c_inst).no_annotation_ref().assign(default_inst[cAnnotatedStruct]().no_annotation_ref().value())
                deref(c_inst).__isset.no_annotation = False
                pass

            if not __isNOTSET[1] and cpp_unique_ref is None:
                deref(c_inst).cpp_unique_ref.reset()
                pass

            if not __isNOTSET[2] and cpp2_unique_ref is None:
                deref(c_inst).cpp2_unique_ref.reset()
                pass

            if not __isNOTSET[3] and container_with_ref is None:
                deref(c_inst).container_with_ref.reset()
                pass

            if not __isNOTSET[4] and req_cpp_unique_ref is None:
                deref(c_inst).req_cpp_unique_ref.reset()
                pass

            if not __isNOTSET[5] and req_cpp2_unique_ref is None:
                deref(c_inst).req_cpp2_unique_ref.reset()
                pass

            if not __isNOTSET[6] and req_container_with_ref is None:
                deref(c_inst).req_container_with_ref.reset()
                pass

            if not __isNOTSET[7] and opt_cpp_unique_ref is None:
                deref(c_inst).opt_cpp_unique_ref.reset()
                pass

            if not __isNOTSET[8] and opt_cpp2_unique_ref is None:
                deref(c_inst).opt_cpp2_unique_ref.reset()
                pass

            if not __isNOTSET[9] and opt_container_with_ref is None:
                deref(c_inst).opt_container_with_ref.reset()
                pass

            if not __isNOTSET[10] and ref_type_unique is None:
                deref(c_inst).ref_type_unique.reset()
                pass

            if not __isNOTSET[11] and ref_type_shared is None:
                deref(c_inst).ref_type_shared.reset()
                pass

            if not __isNOTSET[12] and ref_type_const is None:
                deref(c_inst).ref_type_const.reset()
                pass

            if not __isNOTSET[13] and req_ref_type_shared is None:
                deref(c_inst).req_ref_type_shared.reset()
                pass

            if not __isNOTSET[14] and req_ref_type_const is None:
                deref(c_inst).req_ref_type_const.reset()
                pass

            if not __isNOTSET[15] and req_ref_type_unique is None:
                deref(c_inst).req_ref_type_unique.reset()
                pass

            if not __isNOTSET[16] and opt_ref_type_const is None:
                deref(c_inst).opt_ref_type_const.reset()
                pass

            if not __isNOTSET[17] and opt_ref_type_unique is None:
                deref(c_inst).opt_ref_type_unique.reset()
                pass

            if not __isNOTSET[18] and opt_ref_type_shared is None:
                deref(c_inst).opt_ref_type_shared.reset()
                pass

            if not __isNOTSET[19] and base_type is None:
                deref(c_inst).base_type_ref().assign(default_inst[cAnnotatedStruct]().base_type_ref().value())
                deref(c_inst).__isset.base_type = False
                pass

            if not __isNOTSET[20] and list_type is None:
                deref(c_inst).list_type_ref().assign(default_inst[cAnnotatedStruct]().list_type_ref().value())
                deref(c_inst).__isset.list_type = False
                pass

            if not __isNOTSET[21] and set_type is None:
                deref(c_inst).set_type_ref().assign(default_inst[cAnnotatedStruct]().set_type_ref().value())
                deref(c_inst).__isset.set_type = False
                pass

            if not __isNOTSET[22] and map_type is None:
                deref(c_inst).map_type_ref().assign(default_inst[cAnnotatedStruct]().map_type_ref().value())
                deref(c_inst).__isset.map_type = False
                pass

            if not __isNOTSET[23] and map_struct_type is None:
                deref(c_inst).map_struct_type_ref().assign(default_inst[cAnnotatedStruct]().map_struct_type_ref().value())
                deref(c_inst).__isset.map_struct_type = False
                pass

            if not __isNOTSET[24] and iobuf_type is None:
                deref(c_inst).iobuf_type_ref().assign(default_inst[cAnnotatedStruct]().iobuf_type_ref().value())
                deref(c_inst).__isset.iobuf_type = False
                pass

            if not __isNOTSET[25] and iobuf_ptr is None:
                deref(c_inst).__isset.iobuf_ptr = False
                deref(c_inst).iobuf_ptr.reset()
                pass

            if not __isNOTSET[26] and list_i32_template is None:
                deref(c_inst).list_i32_template_ref().assign(default_inst[cAnnotatedStruct]().list_i32_template_ref().value())
                deref(c_inst).__isset.list_i32_template = False
                pass

            if not __isNOTSET[27] and list_string_template is None:
                deref(c_inst).list_string_template_ref().assign(default_inst[cAnnotatedStruct]().list_string_template_ref().value())
                deref(c_inst).__isset.list_string_template = False
                pass

            if not __isNOTSET[28] and set_template is None:
                deref(c_inst).set_template_ref().assign(default_inst[cAnnotatedStruct]().set_template_ref().value())
                deref(c_inst).__isset.set_template = False
                pass

            if not __isNOTSET[29] and map_template is None:
                deref(c_inst).map_template_ref().assign(default_inst[cAnnotatedStruct]().map_template_ref().value())
                deref(c_inst).__isset.map_template = False
                pass

            if not __isNOTSET[30] and typedef_list_template is None:
                deref(c_inst).typedef_list_template_ref().assign(default_inst[cAnnotatedStruct]().typedef_list_template_ref().value())
                deref(c_inst).__isset.typedef_list_template = False
                pass

            if not __isNOTSET[31] and typedef_deque_template is None:
                deref(c_inst).typedef_deque_template_ref().assign(default_inst[cAnnotatedStruct]().typedef_deque_template_ref().value())
                deref(c_inst).__isset.typedef_deque_template = False
                pass

            if not __isNOTSET[32] and typedef_set_template is None:
                deref(c_inst).typedef_set_template_ref().assign(default_inst[cAnnotatedStruct]().typedef_set_template_ref().value())
                deref(c_inst).__isset.typedef_set_template = False
                pass

            if not __isNOTSET[33] and typedef_map_template is None:
                deref(c_inst).typedef_map_template_ref().assign(default_inst[cAnnotatedStruct]().typedef_map_template_ref().value())
                deref(c_inst).__isset.typedef_map_template = False
                pass

            if not __isNOTSET[34] and indirection_a is None:
                deref(c_inst).indirection_a_ref().assign(default_inst[cAnnotatedStruct]().indirection_a_ref().value())
                deref(c_inst).__isset.indirection_a = False
                pass

            if not __isNOTSET[35] and indirection_b is None:
                deref(c_inst).indirection_b_ref().assign(default_inst[cAnnotatedStruct]().indirection_b_ref().value())
                deref(c_inst).__isset.indirection_b = False
                pass

            if not __isNOTSET[36] and indirection_c is None:
                deref(c_inst).indirection_c_ref().assign(default_inst[cAnnotatedStruct]().indirection_c_ref().value())
                deref(c_inst).__isset.indirection_c = False
                pass

            if not __isNOTSET[37] and iobuf_type_val is None:
                deref(c_inst).iobuf_type_val_ref().assign(default_inst[cAnnotatedStruct]().iobuf_type_val_ref().value())
                deref(c_inst).__isset.iobuf_type_val = False
                pass

            if not __isNOTSET[38] and iobuf_ptr_val is None:
                deref(c_inst).__isset.iobuf_ptr_val = False
                deref(c_inst).iobuf_ptr_val.reset()
                pass

            if not __isNOTSET[39] and struct_struct is None:
                deref(c_inst).struct_struct_ref().assign(default_inst[cAnnotatedStruct]().struct_struct_ref().value())
                deref(c_inst).__isset.struct_struct = False
                pass

        if no_annotation is not None:
            deref(c_inst).no_annotation_ref().assign(deref((<containerStruct?> no_annotation)._cpp_obj))
            deref(c_inst).__isset.no_annotation = True
        if cpp_unique_ref is not None:
            deref(c_inst).cpp_unique_ref = make_unique[ccontainerStruct](deref((<containerStruct?>cpp_unique_ref)._cpp_obj))
        if cpp2_unique_ref is not None:
            deref(c_inst).cpp2_unique_ref = make_unique[ccontainerStruct](deref((<containerStruct?>cpp2_unique_ref)._cpp_obj))
        if container_with_ref is not None:
            deref(c_inst).container_with_ref = make_unique[cmap[cint32_t,vector[string]]](deref(Map__i32_List__string(container_with_ref)._cpp_obj))
        if req_cpp_unique_ref is not None:
            deref(c_inst).req_cpp_unique_ref = make_unique[ccontainerStruct](deref((<containerStruct?>req_cpp_unique_ref)._cpp_obj))
        if req_cpp2_unique_ref is not None:
            deref(c_inst).req_cpp2_unique_ref = make_unique[ccontainerStruct](deref((<containerStruct?>req_cpp2_unique_ref)._cpp_obj))
        if req_container_with_ref is not None:
            deref(c_inst).req_container_with_ref = make_unique[vector[string]](deref(List__string(req_container_with_ref)._cpp_obj))
        if opt_cpp_unique_ref is not None:
            deref(c_inst).opt_cpp_unique_ref = make_unique[ccontainerStruct](deref((<containerStruct?>opt_cpp_unique_ref)._cpp_obj))
        if opt_cpp2_unique_ref is not None:
            deref(c_inst).opt_cpp2_unique_ref = make_unique[ccontainerStruct](deref((<containerStruct?>opt_cpp2_unique_ref)._cpp_obj))
        if opt_container_with_ref is not None:
            deref(c_inst).opt_container_with_ref = make_unique[cset[cint32_t]](deref(Set__i32(opt_container_with_ref)._cpp_obj))
        if ref_type_unique is not None:
            deref(c_inst).ref_type_unique = make_unique[ccontainerStruct](deref((<containerStruct?>ref_type_unique)._cpp_obj))
        if ref_type_shared is not None:
            deref(c_inst).ref_type_shared = (<containerStruct?>ref_type_shared)._cpp_obj
        if ref_type_const is not None:
            deref(c_inst).ref_type_const = const_pointer_cast(Map__i32_List__string(ref_type_const)._cpp_obj)
        if req_ref_type_shared is not None:
            deref(c_inst).req_ref_type_shared = (<containerStruct?>req_ref_type_shared)._cpp_obj
        if req_ref_type_const is not None:
            deref(c_inst).req_ref_type_const = const_pointer_cast((<containerStruct?>req_ref_type_const)._cpp_obj)
        if req_ref_type_unique is not None:
            deref(c_inst).req_ref_type_unique = make_unique[vector[string]](deref(List__string(req_ref_type_unique)._cpp_obj))
        if opt_ref_type_const is not None:
            deref(c_inst).opt_ref_type_const = const_pointer_cast((<containerStruct?>opt_ref_type_const)._cpp_obj)
        if opt_ref_type_unique is not None:
            deref(c_inst).opt_ref_type_unique = make_unique[ccontainerStruct](deref((<containerStruct?>opt_ref_type_unique)._cpp_obj))
        if opt_ref_type_shared is not None:
            deref(c_inst).opt_ref_type_shared = Set__i32(opt_ref_type_shared)._cpp_obj
        if base_type is not None:
            deref(c_inst).base_type_ref().assign(base_type)
            deref(c_inst).__isset.base_type = True
        if list_type is not None:
            deref(c_inst).list_type_ref().assign(deref(folly_small_vector_int64_t_8__List__i64(list_type)._cpp_obj))
            deref(c_inst).__isset.list_type = True
        if set_type is not None:
            deref(c_inst).set_type_ref().assign(deref(folly_sorted_vector_set_std_string__Set__string(set_type)._cpp_obj))
            deref(c_inst).__isset.set_type = True
        if map_type is not None:
            deref(c_inst).map_type_ref().assign(deref(FakeMap__Map__i64_double(map_type)._cpp_obj))
            deref(c_inst).__isset.map_type = True
        if map_struct_type is not None:
            deref(c_inst).map_struct_type_ref().assign(deref(std_unordered_map_std_string_containerStruct__Map__string_containerStruct(map_struct_type)._cpp_obj))
            deref(c_inst).__isset.map_struct_type = True
        if iobuf_type is not None:
            deref(c_inst).iobuf_type_ref().assign(deref((<__iobuf.IOBuf?>iobuf_type).c_clone()))
            deref(c_inst).__isset.iobuf_type = True
        if iobuf_ptr is not None:
            deref(c_inst).iobuf_ptr_ref().assign((<__iobuf.IOBuf?>iobuf_ptr).c_clone())
            deref(c_inst).__isset.iobuf_ptr = True
        if list_i32_template is not None:
            deref(c_inst).list_i32_template_ref().assign(deref(std_list__List__i32(list_i32_template)._cpp_obj))
            deref(c_inst).__isset.list_i32_template = True
        if list_string_template is not None:
            deref(c_inst).list_string_template_ref().assign(deref(std_deque__List__string(list_string_template)._cpp_obj))
            deref(c_inst).__isset.list_string_template = True
        if set_template is not None:
            deref(c_inst).set_template_ref().assign(deref(folly_sorted_vector_set__Set__string(set_template)._cpp_obj))
            deref(c_inst).__isset.set_template = True
        if map_template is not None:
            deref(c_inst).map_template_ref().assign(deref(folly_sorted_vector_map__Map__i64_string(map_template)._cpp_obj))
            deref(c_inst).__isset.map_template = True
        if typedef_list_template is not None:
            deref(c_inst).typedef_list_template_ref().assign(deref(std_list__List__i32(typedef_list_template)._cpp_obj))
            deref(c_inst).__isset.typedef_list_template = True
        if typedef_deque_template is not None:
            deref(c_inst).typedef_deque_template_ref().assign(deref(std_deque__List__string(typedef_deque_template)._cpp_obj))
            deref(c_inst).__isset.typedef_deque_template = True
        if typedef_set_template is not None:
            deref(c_inst).typedef_set_template_ref().assign(deref(folly_sorted_vector_set__Set__string(typedef_set_template)._cpp_obj))
            deref(c_inst).__isset.typedef_set_template = True
        if typedef_map_template is not None:
            deref(c_inst).typedef_map_template_ref().assign(deref(folly_sorted_vector_map__Map__i64_string(typedef_map_template)._cpp_obj))
            deref(c_inst).__isset.typedef_map_template = True
        if indirection_a is not None:
            deref(c_inst).indirection_a_ref().assign(indirection_a)
            deref(c_inst).__isset.indirection_a = True
        if indirection_b is not None:
            deref(c_inst).indirection_b_ref().assign(deref(List__Bar__double(indirection_b)._cpp_obj))
            deref(c_inst).__isset.indirection_b = True
        if indirection_c is not None:
            deref(c_inst).indirection_c_ref().assign(deref(Set__Baz__i32(indirection_c)._cpp_obj))
            deref(c_inst).__isset.indirection_c = True
        if iobuf_type_val is not None:
            deref(c_inst).iobuf_type_val_ref().assign(deref((<__iobuf.IOBuf?>iobuf_type_val).c_clone()))
            deref(c_inst).__isset.iobuf_type_val = True
        if iobuf_ptr_val is not None:
            deref(c_inst).iobuf_ptr_val_ref().assign((<__iobuf.IOBuf?>iobuf_ptr_val).c_clone())
            deref(c_inst).__isset.iobuf_ptr_val = True
        if struct_struct is not None:
            deref(c_inst).struct_struct_ref().assign(deref((<containerStruct?> struct_struct)._cpp_obj))
            deref(c_inst).__isset.struct_struct = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("AnnotatedStruct", {
          "no_annotation": deref(self._cpp_obj).no_annotation_ref().has_value(),
          "base_type": deref(self._cpp_obj).base_type_ref().has_value(),
          "list_type": deref(self._cpp_obj).list_type_ref().has_value(),
          "set_type": deref(self._cpp_obj).set_type_ref().has_value(),
          "map_type": deref(self._cpp_obj).map_type_ref().has_value(),
          "map_struct_type": deref(self._cpp_obj).map_struct_type_ref().has_value(),
          "iobuf_type": deref(self._cpp_obj).iobuf_type_ref().has_value(),
          "iobuf_ptr": deref(self._cpp_obj).iobuf_ptr_ref().has_value(),
          "list_i32_template": deref(self._cpp_obj).list_i32_template_ref().has_value(),
          "list_string_template": deref(self._cpp_obj).list_string_template_ref().has_value(),
          "set_template": deref(self._cpp_obj).set_template_ref().has_value(),
          "map_template": deref(self._cpp_obj).map_template_ref().has_value(),
          "typedef_list_template": deref(self._cpp_obj).typedef_list_template_ref().has_value(),
          "typedef_deque_template": deref(self._cpp_obj).typedef_deque_template_ref().has_value(),
          "typedef_set_template": deref(self._cpp_obj).typedef_set_template_ref().has_value(),
          "typedef_map_template": deref(self._cpp_obj).typedef_map_template_ref().has_value(),
          "indirection_a": deref(self._cpp_obj).indirection_a_ref().has_value(),
          "indirection_b": deref(self._cpp_obj).indirection_b_ref().has_value(),
          "indirection_c": deref(self._cpp_obj).indirection_c_ref().has_value(),
          "iobuf_type_val": deref(self._cpp_obj).iobuf_type_val_ref().has_value(),
          "iobuf_ptr_val": deref(self._cpp_obj).iobuf_ptr_val_ref().has_value(),
          "struct_struct": deref(self._cpp_obj).struct_struct_ref().has_value(),
        })

    def __iter__(self):
        yield 'no_annotation', self.no_annotation
        yield 'cpp_unique_ref', self.cpp_unique_ref
        yield 'cpp2_unique_ref', self.cpp2_unique_ref
        yield 'container_with_ref', self.container_with_ref
        yield 'req_cpp_unique_ref', self.req_cpp_unique_ref
        yield 'req_cpp2_unique_ref', self.req_cpp2_unique_ref
        yield 'req_container_with_ref', self.req_container_with_ref
        yield 'opt_cpp_unique_ref', self.opt_cpp_unique_ref
        yield 'opt_cpp2_unique_ref', self.opt_cpp2_unique_ref
        yield 'opt_container_with_ref', self.opt_container_with_ref
        yield 'ref_type_unique', self.ref_type_unique
        yield 'ref_type_shared', self.ref_type_shared
        yield 'ref_type_const', self.ref_type_const
        yield 'req_ref_type_shared', self.req_ref_type_shared
        yield 'req_ref_type_const', self.req_ref_type_const
        yield 'req_ref_type_unique', self.req_ref_type_unique
        yield 'opt_ref_type_const', self.opt_ref_type_const
        yield 'opt_ref_type_unique', self.opt_ref_type_unique
        yield 'opt_ref_type_shared', self.opt_ref_type_shared
        yield 'base_type', self.base_type
        yield 'list_type', self.list_type
        yield 'set_type', self.set_type
        yield 'map_type', self.map_type
        yield 'map_struct_type', self.map_struct_type
        yield 'iobuf_type', self.iobuf_type
        yield 'iobuf_ptr', self.iobuf_ptr
        yield 'list_i32_template', self.list_i32_template
        yield 'list_string_template', self.list_string_template
        yield 'set_template', self.set_template
        yield 'map_template', self.map_template
        yield 'typedef_list_template', self.typedef_list_template
        yield 'typedef_deque_template', self.typedef_deque_template
        yield 'typedef_set_template', self.typedef_set_template
        yield 'typedef_map_template', self.typedef_map_template
        yield 'indirection_a', self.indirection_a
        yield 'indirection_b', self.indirection_b
        yield 'indirection_c', self.indirection_c
        yield 'iobuf_type_val', self.iobuf_type_val
        yield 'iobuf_ptr_val', self.iobuf_ptr_val
        yield 'struct_struct', self.struct_struct

    @staticmethod
    cdef create(shared_ptr[cAnnotatedStruct] cpp_obj):
        __fbthrift_inst = <AnnotatedStruct>AnnotatedStruct.__new__(AnnotatedStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def no_annotation(self):

        if self.__field_no_annotation is None:
            self.__field_no_annotation = containerStruct.create(__reference_shared_ptr(deref(self._cpp_obj).no_annotation_ref().ref(), self._cpp_obj))
        return self.__field_no_annotation

    @property
    def cpp_unique_ref(self):

        if self.__field_cpp_unique_ref is None:
            if not deref(self._cpp_obj).cpp_unique_ref:
                return None
            self.__field_cpp_unique_ref = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).cpp_unique_ref), self._cpp_obj))
        return self.__field_cpp_unique_ref

    @property
    def cpp2_unique_ref(self):

        if self.__field_cpp2_unique_ref is None:
            if not deref(self._cpp_obj).cpp2_unique_ref:
                return None
            self.__field_cpp2_unique_ref = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).cpp2_unique_ref), self._cpp_obj))
        return self.__field_cpp2_unique_ref

    @property
    def container_with_ref(self):

        if self.__field_container_with_ref is None:
            if not deref(self._cpp_obj).container_with_ref:
                return None
            self.__field_container_with_ref = Map__i32_List__string.create(__reference_shared_ptr(deref(deref(self._cpp_obj).container_with_ref), self._cpp_obj))
        return self.__field_container_with_ref

    @property
    def req_cpp_unique_ref(self):

        if self.__field_req_cpp_unique_ref is None:
            if not deref(self._cpp_obj).req_cpp_unique_ref:
                return None
            self.__field_req_cpp_unique_ref = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).req_cpp_unique_ref), self._cpp_obj))
        return self.__field_req_cpp_unique_ref

    @property
    def req_cpp2_unique_ref(self):

        if self.__field_req_cpp2_unique_ref is None:
            if not deref(self._cpp_obj).req_cpp2_unique_ref:
                return None
            self.__field_req_cpp2_unique_ref = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).req_cpp2_unique_ref), self._cpp_obj))
        return self.__field_req_cpp2_unique_ref

    @property
    def req_container_with_ref(self):

        if self.__field_req_container_with_ref is None:
            if not deref(self._cpp_obj).req_container_with_ref:
                return None
            self.__field_req_container_with_ref = List__string.create(__reference_shared_ptr(deref(deref(self._cpp_obj).req_container_with_ref), self._cpp_obj))
        return self.__field_req_container_with_ref

    @property
    def opt_cpp_unique_ref(self):

        if self.__field_opt_cpp_unique_ref is None:
            if not deref(self._cpp_obj).opt_cpp_unique_ref:
                return None
            self.__field_opt_cpp_unique_ref = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).opt_cpp_unique_ref), self._cpp_obj))
        return self.__field_opt_cpp_unique_ref

    @property
    def opt_cpp2_unique_ref(self):

        if self.__field_opt_cpp2_unique_ref is None:
            if not deref(self._cpp_obj).opt_cpp2_unique_ref:
                return None
            self.__field_opt_cpp2_unique_ref = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).opt_cpp2_unique_ref), self._cpp_obj))
        return self.__field_opt_cpp2_unique_ref

    @property
    def opt_container_with_ref(self):

        if self.__field_opt_container_with_ref is None:
            if not deref(self._cpp_obj).opt_container_with_ref:
                return None
            self.__field_opt_container_with_ref = Set__i32.create(__reference_shared_ptr(deref(deref(self._cpp_obj).opt_container_with_ref), self._cpp_obj))
        return self.__field_opt_container_with_ref

    @property
    def ref_type_unique(self):

        if self.__field_ref_type_unique is None:
            if not deref(self._cpp_obj).ref_type_unique:
                return None
            self.__field_ref_type_unique = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).ref_type_unique), self._cpp_obj))
        return self.__field_ref_type_unique

    @property
    def ref_type_shared(self):

        if self.__field_ref_type_shared is None:
            if not deref(self._cpp_obj).ref_type_shared:
                return None
            self.__field_ref_type_shared = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).ref_type_shared), self._cpp_obj))
        return self.__field_ref_type_shared

    @property
    def ref_type_const(self):

        if self.__field_ref_type_const is None:
            if not deref(self._cpp_obj).ref_type_const:
                return None
            self.__field_ref_type_const = Map__i32_List__string.create(__reference_shared_ptr(deref(deref(self._cpp_obj).ref_type_const), self._cpp_obj))
        return self.__field_ref_type_const

    @property
    def req_ref_type_shared(self):

        if self.__field_req_ref_type_shared is None:
            if not deref(self._cpp_obj).req_ref_type_shared:
                return None
            self.__field_req_ref_type_shared = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).req_ref_type_shared), self._cpp_obj))
        return self.__field_req_ref_type_shared

    @property
    def req_ref_type_const(self):

        if self.__field_req_ref_type_const is None:
            if not deref(self._cpp_obj).req_ref_type_const:
                return None
            self.__field_req_ref_type_const = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).req_ref_type_const), self._cpp_obj))
        return self.__field_req_ref_type_const

    @property
    def req_ref_type_unique(self):

        if self.__field_req_ref_type_unique is None:
            if not deref(self._cpp_obj).req_ref_type_unique:
                return None
            self.__field_req_ref_type_unique = List__string.create(__reference_shared_ptr(deref(deref(self._cpp_obj).req_ref_type_unique), self._cpp_obj))
        return self.__field_req_ref_type_unique

    @property
    def opt_ref_type_const(self):

        if self.__field_opt_ref_type_const is None:
            if not deref(self._cpp_obj).opt_ref_type_const:
                return None
            self.__field_opt_ref_type_const = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).opt_ref_type_const), self._cpp_obj))
        return self.__field_opt_ref_type_const

    @property
    def opt_ref_type_unique(self):

        if self.__field_opt_ref_type_unique is None:
            if not deref(self._cpp_obj).opt_ref_type_unique:
                return None
            self.__field_opt_ref_type_unique = containerStruct.create(__reference_shared_ptr(deref(deref(self._cpp_obj).opt_ref_type_unique), self._cpp_obj))
        return self.__field_opt_ref_type_unique

    @property
    def opt_ref_type_shared(self):

        if self.__field_opt_ref_type_shared is None:
            if not deref(self._cpp_obj).opt_ref_type_shared:
                return None
            self.__field_opt_ref_type_shared = Set__i32.create(__reference_shared_ptr(deref(deref(self._cpp_obj).opt_ref_type_shared), self._cpp_obj))
        return self.__field_opt_ref_type_shared

    @property
    def base_type(self):

        return deref(self._cpp_obj).base_type_ref().value()

    @property
    def list_type(self):

        if self.__field_list_type is None:
            self.__field_list_type = folly_small_vector_int64_t_8__List__i64.create(__reference_shared_ptr(deref(self._cpp_obj).list_type_ref().ref(), self._cpp_obj))
        return self.__field_list_type

    @property
    def set_type(self):

        if self.__field_set_type is None:
            self.__field_set_type = folly_sorted_vector_set_std_string__Set__string.create(__reference_shared_ptr(deref(self._cpp_obj).set_type_ref().ref(), self._cpp_obj))
        return self.__field_set_type

    @property
    def map_type(self):

        if self.__field_map_type is None:
            self.__field_map_type = FakeMap__Map__i64_double.create(__reference_shared_ptr(deref(self._cpp_obj).map_type_ref().ref(), self._cpp_obj))
        return self.__field_map_type

    @property
    def map_struct_type(self):

        if self.__field_map_struct_type is None:
            self.__field_map_struct_type = std_unordered_map_std_string_containerStruct__Map__string_containerStruct.create(__reference_shared_ptr(deref(self._cpp_obj).map_struct_type_ref().ref(), self._cpp_obj))
        return self.__field_map_struct_type

    @property
    def iobuf_type(self):

        if self.__field_iobuf_type is None:
            self.__field_iobuf_type = __iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj).iobuf_type_ref().ref()), self)
        return self.__field_iobuf_type

    @property
    def iobuf_ptr(self):

        if self.__field_iobuf_ptr is None:
            if not deref(self._cpp_obj).iobuf_ptr_ref().value():
                return None
            self.__field_iobuf_ptr = __iobuf.IOBuf.create(deref(self._cpp_obj).iobuf_ptr_ref().value().get(), self)
        return self.__field_iobuf_ptr

    @property
    def list_i32_template(self):

        if self.__field_list_i32_template is None:
            self.__field_list_i32_template = std_list__List__i32.create(__reference_shared_ptr(deref(self._cpp_obj).list_i32_template_ref().ref(), self._cpp_obj))
        return self.__field_list_i32_template

    @property
    def list_string_template(self):

        if self.__field_list_string_template is None:
            self.__field_list_string_template = std_deque__List__string.create(__reference_shared_ptr(deref(self._cpp_obj).list_string_template_ref().ref(), self._cpp_obj))
        return self.__field_list_string_template

    @property
    def set_template(self):

        if self.__field_set_template is None:
            self.__field_set_template = folly_sorted_vector_set__Set__string.create(__reference_shared_ptr(deref(self._cpp_obj).set_template_ref().ref(), self._cpp_obj))
        return self.__field_set_template

    @property
    def map_template(self):

        if self.__field_map_template is None:
            self.__field_map_template = folly_sorted_vector_map__Map__i64_string.create(__reference_shared_ptr(deref(self._cpp_obj).map_template_ref().ref(), self._cpp_obj))
        return self.__field_map_template

    @property
    def typedef_list_template(self):

        if self.__field_typedef_list_template is None:
            self.__field_typedef_list_template = std_list__List__i32.create(__reference_shared_ptr(deref(self._cpp_obj).typedef_list_template_ref().ref(), self._cpp_obj))
        return self.__field_typedef_list_template

    @property
    def typedef_deque_template(self):

        if self.__field_typedef_deque_template is None:
            self.__field_typedef_deque_template = std_deque__List__string.create(__reference_shared_ptr(deref(self._cpp_obj).typedef_deque_template_ref().ref(), self._cpp_obj))
        return self.__field_typedef_deque_template

    @property
    def typedef_set_template(self):

        if self.__field_typedef_set_template is None:
            self.__field_typedef_set_template = folly_sorted_vector_set__Set__string.create(__reference_shared_ptr(deref(self._cpp_obj).typedef_set_template_ref().ref(), self._cpp_obj))
        return self.__field_typedef_set_template

    @property
    def typedef_map_template(self):

        if self.__field_typedef_map_template is None:
            self.__field_typedef_map_template = folly_sorted_vector_map__Map__i64_string.create(__reference_shared_ptr(deref(self._cpp_obj).typedef_map_template_ref().ref(), self._cpp_obj))
        return self.__field_typedef_map_template

    @property
    def indirection_a(self):

        return deref(self._cpp_obj).indirection_a_ref().value()

    @property
    def indirection_b(self):

        if self.__field_indirection_b is None:
            self.__field_indirection_b = List__Bar__double.create(__reference_shared_ptr(deref(self._cpp_obj).indirection_b_ref().ref(), self._cpp_obj))
        return self.__field_indirection_b

    @property
    def indirection_c(self):

        if self.__field_indirection_c is None:
            self.__field_indirection_c = Set__Baz__i32.create(__reference_shared_ptr(deref(self._cpp_obj).indirection_c_ref().ref(), self._cpp_obj))
        return self.__field_indirection_c

    @property
    def iobuf_type_val(self):

        if self.__field_iobuf_type_val is None:
            self.__field_iobuf_type_val = __iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj).iobuf_type_val_ref().ref()), self)
        return self.__field_iobuf_type_val

    @property
    def iobuf_ptr_val(self):

        if self.__field_iobuf_ptr_val is None:
            if not deref(self._cpp_obj).iobuf_ptr_val_ref().value():
                return None
            self.__field_iobuf_ptr_val = __iobuf.IOBuf.create(deref(self._cpp_obj).iobuf_ptr_val_ref().value().get(), self)
        return self.__field_iobuf_ptr_val

    @property
    def struct_struct(self):

        if self.__field_struct_struct is None:
            self.__field_struct_struct = containerStruct.create(__reference_shared_ptr(deref(self._cpp_obj).struct_struct_ref().ref(), self._cpp_obj))
        return self.__field_struct_struct


    def __hash__(AnnotatedStruct self):
        return  super().__hash__()

    def __copy__(AnnotatedStruct self):
        raise TypeError("AnnotatedStruct is noncopyable")

    def __eq__(AnnotatedStruct self, other):
        if not isinstance(other, AnnotatedStruct):
            return False
        return deref(self._cpp_obj.get()) == deref((<AnnotatedStruct>other)._cpp_obj.get())

    def __ne__(AnnotatedStruct self, other):
        if not isinstance(other, AnnotatedStruct):
            return True
        return deref(self._cpp_obj) != deref((<AnnotatedStruct>other)._cpp_obj)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AnnotatedStruct()

    cdef __iobuf.IOBuf _serialize(AnnotatedStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cAnnotatedStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(AnnotatedStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAnnotatedStruct]()
        with nogil:
            needed = serializer.cdeserialize[cAnnotatedStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class ComplexContainerStruct(thrift.py3.types.Struct):

    def __init__(
        ComplexContainerStruct self, *,
        map_of_iobufs=None,
        map_of_iobuf_ptrs=None
    ):
        self._cpp_obj = __to_shared_ptr(cmove(ComplexContainerStruct._make_instance(
          NULL,
          NULL,
          map_of_iobufs,
          map_of_iobuf_ptrs,
        )))

    def __call__(
        ComplexContainerStruct self,
        map_of_iobufs=__NOTSET,
        map_of_iobuf_ptrs=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if map_of_iobufs is ___NOTSET:
            __isNOTSET[0] = True
            map_of_iobufs = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if map_of_iobuf_ptrs is ___NOTSET:
            __isNOTSET[1] = True
            map_of_iobuf_ptrs = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        __fbthrift_inst = <ComplexContainerStruct>ComplexContainerStruct.__new__(ComplexContainerStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(ComplexContainerStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          map_of_iobufs,
          map_of_iobuf_ptrs,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cComplexContainerStruct] _make_instance(
        cComplexContainerStruct* base_instance,
        bint* __isNOTSET,
        object map_of_iobufs ,
        object map_of_iobuf_ptrs 
    ) except *:
        cdef unique_ptr[cComplexContainerStruct] c_inst
        if base_instance:
            c_inst = make_unique[cComplexContainerStruct](deref(base_instance))
        else:
            c_inst = make_unique[cComplexContainerStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and map_of_iobufs is None:
                deref(c_inst).map_of_iobufs_ref().assign(default_inst[cComplexContainerStruct]().map_of_iobufs_ref().value())
                deref(c_inst).__isset.map_of_iobufs = False
                pass

            if not __isNOTSET[1] and map_of_iobuf_ptrs is None:
                deref(c_inst).map_of_iobuf_ptrs_ref().assign(default_inst[cComplexContainerStruct]().map_of_iobuf_ptrs_ref().value())
                deref(c_inst).__isset.map_of_iobuf_ptrs = False
                pass

        if map_of_iobufs is not None:
            deref(c_inst).map_of_iobufs_ref().assign(deref(Map__string_folly_IOBuf__binary(map_of_iobufs)._cpp_obj))
            deref(c_inst).__isset.map_of_iobufs = True
        if map_of_iobuf_ptrs is not None:
            deref(c_inst).map_of_iobuf_ptrs_ref().assign(deref(Map__string_std_unique_ptr_folly_IOBuf__binary(map_of_iobuf_ptrs)._cpp_obj))
            deref(c_inst).__isset.map_of_iobuf_ptrs = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("ComplexContainerStruct", {
          "map_of_iobufs": deref(self._cpp_obj).map_of_iobufs_ref().has_value(),
          "map_of_iobuf_ptrs": deref(self._cpp_obj).map_of_iobuf_ptrs_ref().has_value(),
        })

    def __iter__(self):
        yield 'map_of_iobufs', self.map_of_iobufs
        yield 'map_of_iobuf_ptrs', self.map_of_iobuf_ptrs

    @staticmethod
    cdef create(shared_ptr[cComplexContainerStruct] cpp_obj):
        __fbthrift_inst = <ComplexContainerStruct>ComplexContainerStruct.__new__(ComplexContainerStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def map_of_iobufs(self):

        if self.__field_map_of_iobufs is None:
            self.__field_map_of_iobufs = Map__string_folly_IOBuf__binary.create(__reference_shared_ptr(deref(self._cpp_obj).map_of_iobufs_ref().ref(), self._cpp_obj))
        return self.__field_map_of_iobufs

    @property
    def map_of_iobuf_ptrs(self):

        if self.__field_map_of_iobuf_ptrs is None:
            self.__field_map_of_iobuf_ptrs = Map__string_std_unique_ptr_folly_IOBuf__binary.create(__reference_shared_ptr(deref(self._cpp_obj).map_of_iobuf_ptrs_ref().ref(), self._cpp_obj))
        return self.__field_map_of_iobuf_ptrs


    def __hash__(ComplexContainerStruct self):
        return  super().__hash__()

    def __copy__(ComplexContainerStruct self):
        cdef shared_ptr[cComplexContainerStruct] cpp_obj = make_shared[cComplexContainerStruct](
            deref(self._cpp_obj)
        )
        return ComplexContainerStruct.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cComplexContainerStruct](
            self._cpp_obj,
            (<ComplexContainerStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ComplexContainerStruct()

    cdef __iobuf.IOBuf _serialize(ComplexContainerStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cComplexContainerStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(ComplexContainerStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cComplexContainerStruct]()
        with nogil:
            needed = serializer.cdeserialize[cComplexContainerStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class FloatStruct(thrift.py3.types.Struct):

    def __init__(
        FloatStruct self, *,
        floatField=None,
        doubleField=None
    ):
        if floatField is not None:
            if not isinstance(floatField, (float, int)):
                raise TypeError(f'floatField is not a { float !r}.')

        if doubleField is not None:
            if not isinstance(doubleField, (float, int)):
                raise TypeError(f'doubleField is not a { float !r}.')

        self._cpp_obj = __to_shared_ptr(cmove(FloatStruct._make_instance(
          NULL,
          NULL,
          floatField,
          doubleField,
        )))

    def __call__(
        FloatStruct self,
        floatField=__NOTSET,
        doubleField=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if floatField is ___NOTSET:
            __isNOTSET[0] = True
            floatField = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if doubleField is ___NOTSET:
            __isNOTSET[1] = True
            doubleField = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if floatField is not None:
            if not isinstance(floatField, (float, int)):
                raise TypeError(f'floatField is not a { float !r}.')

        if doubleField is not None:
            if not isinstance(doubleField, (float, int)):
                raise TypeError(f'doubleField is not a { float !r}.')

        __fbthrift_inst = <FloatStruct>FloatStruct.__new__(FloatStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(FloatStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          floatField,
          doubleField,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cFloatStruct] _make_instance(
        cFloatStruct* base_instance,
        bint* __isNOTSET,
        object floatField ,
        object doubleField 
    ) except *:
        cdef unique_ptr[cFloatStruct] c_inst
        if base_instance:
            c_inst = make_unique[cFloatStruct](deref(base_instance))
        else:
            c_inst = make_unique[cFloatStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and floatField is None:
                deref(c_inst).floatField_ref().assign(default_inst[cFloatStruct]().floatField_ref().value())
                deref(c_inst).__isset.floatField = False
                pass

            if not __isNOTSET[1] and doubleField is None:
                deref(c_inst).doubleField_ref().assign(default_inst[cFloatStruct]().doubleField_ref().value())
                deref(c_inst).__isset.doubleField = False
                pass

        if floatField is not None:
            deref(c_inst).floatField_ref().assign(floatField)
            deref(c_inst).__isset.floatField = True
        if doubleField is not None:
            deref(c_inst).doubleField_ref().assign(doubleField)
            deref(c_inst).__isset.doubleField = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("FloatStruct", {
          "floatField": deref(self._cpp_obj).floatField_ref().has_value(),
          "doubleField": deref(self._cpp_obj).doubleField_ref().has_value(),
        })

    def __iter__(self):
        yield 'floatField', self.floatField
        yield 'doubleField', self.doubleField

    @staticmethod
    cdef create(shared_ptr[cFloatStruct] cpp_obj):
        __fbthrift_inst = <FloatStruct>FloatStruct.__new__(FloatStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def floatField(self):

        return deref(self._cpp_obj).floatField_ref().value()

    @property
    def doubleField(self):

        return deref(self._cpp_obj).doubleField_ref().value()


    def __hash__(FloatStruct self):
        return  super().__hash__()

    def __copy__(FloatStruct self):
        cdef shared_ptr[cFloatStruct] cpp_obj = make_shared[cFloatStruct](
            deref(self._cpp_obj)
        )
        return FloatStruct.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cFloatStruct](
            self._cpp_obj,
            (<FloatStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__FloatStruct()

    cdef __iobuf.IOBuf _serialize(FloatStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cFloatStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(FloatStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cFloatStruct]()
        with nogil:
            needed = serializer.cdeserialize[cFloatStruct](buf, self._cpp_obj.get(), proto)
        return needed




@__cython.auto_pickle(False)
cdef class FloatUnion(thrift.py3.types.Union):
    Type = __FloatUnionType

    def __init__(
        self, *,
        floatSide=None,
        doubleSide=None
    ):
        if floatSide is not None:
            if not isinstance(floatSide, (float, int)):
                raise TypeError(f'floatSide is not a { float !r}.')

        if doubleSide is not None:
            if not isinstance(doubleSide, (float, int)):
                raise TypeError(f'doubleSide is not a { float !r}.')

        self._cpp_obj = __to_shared_ptr(cmove(FloatUnion._make_instance(
          NULL,
          floatSide,
          doubleSide,
        )))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return FloatUnion()
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    if <float>value != value:
                        raise OverflowError
                    return FloatUnion(floatSide=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return FloatUnion(doubleSide=value)
                except OverflowError:
                    pass
        if isinstance(value, (float, int)):
            try:
                <float> value
                return FloatUnion(floatSide=value)
            except OverflowError:
                pass
        if isinstance(value, (float, int)):
            try:
                <double> value
                return FloatUnion(doubleSide=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cFloatUnion] _make_instance(
        cFloatUnion* base_instance,
        object floatSide,
        object doubleSide
    ) except *:
        cdef unique_ptr[cFloatUnion] c_inst = make_unique[cFloatUnion]()
        cdef bint any_set = False
        if floatSide is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_floatSide(floatSide)
            any_set = True
        if doubleSide is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_doubleSide(doubleSide)
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef create(shared_ptr[cFloatUnion] cpp_obj):
        __fbthrift_inst = <FloatUnion>FloatUnion.__new__(FloatUnion)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def floatSide(self):
        if self.type.value != 1:
            raise TypeError(f'Union contains a value of type {self.type.name}, not floatSide')
        return self.value

    @property
    def doubleSide(self):
        if self.type.value != 2:
            raise TypeError(f'Union contains a value of type {self.type.name}, not doubleSide')
        return self.value


    def __hash__(FloatUnion self):
        return  super().__hash__()

    cdef _load_cache(FloatUnion self):
        self.type = FloatUnion.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = deref(self._cpp_obj).get_floatSide()
        elif type == 2:
            self.value = deref(self._cpp_obj).get_doubleSide()

    def __copy__(FloatUnion self):
        cdef shared_ptr[cFloatUnion] cpp_obj = make_shared[cFloatUnion](
            deref(self._cpp_obj)
        )
        return FloatUnion.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cFloatUnion](
            self._cpp_obj,
            (<FloatUnion>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__FloatUnion()

    cdef __iobuf.IOBuf _serialize(FloatUnion self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cFloatUnion](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(FloatUnion self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cFloatUnion]()
        with nogil:
            needed = serializer.cdeserialize[cFloatUnion](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed


@__cython.auto_pickle(False)
cdef class AllRequiredNoExceptMoveCtrStruct(thrift.py3.types.Struct):

    def __init__(
        AllRequiredNoExceptMoveCtrStruct self, *,
        intField=None
    ):
        if intField is not None:
            if not isinstance(intField, int):
                raise TypeError(f'intField is not a { int !r}.')
            intField = <cint64_t> intField

        self._cpp_obj = __to_shared_ptr(cmove(AllRequiredNoExceptMoveCtrStruct._make_instance(
          NULL,
          NULL,
          intField,
        )))

    def __call__(
        AllRequiredNoExceptMoveCtrStruct self,
        intField=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if intField is ___NOTSET:
            __isNOTSET[0] = True
            intField = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if intField is not None:
            if not isinstance(intField, int):
                raise TypeError(f'intField is not a { int !r}.')
            intField = <cint64_t> intField

        __fbthrift_inst = <AllRequiredNoExceptMoveCtrStruct>AllRequiredNoExceptMoveCtrStruct.__new__(AllRequiredNoExceptMoveCtrStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(AllRequiredNoExceptMoveCtrStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          intField,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cAllRequiredNoExceptMoveCtrStruct] _make_instance(
        cAllRequiredNoExceptMoveCtrStruct* base_instance,
        bint* __isNOTSET,
        object intField 
    ) except *:
        cdef unique_ptr[cAllRequiredNoExceptMoveCtrStruct] c_inst
        if base_instance:
            c_inst = make_unique[cAllRequiredNoExceptMoveCtrStruct](deref(base_instance))
        else:
            c_inst = make_unique[cAllRequiredNoExceptMoveCtrStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and intField is None:
                deref(c_inst).intField_ref().assign(default_inst[cAllRequiredNoExceptMoveCtrStruct]().intField_ref().value())
                pass

        if intField is not None:
            deref(c_inst).intField_ref().assign(intField)
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("AllRequiredNoExceptMoveCtrStruct", {
          "intField": deref(self._cpp_obj).intField_ref().has_value(),
        })

    def __iter__(self):
        yield 'intField', self.intField

    @staticmethod
    cdef create(shared_ptr[cAllRequiredNoExceptMoveCtrStruct] cpp_obj):
        __fbthrift_inst = <AllRequiredNoExceptMoveCtrStruct>AllRequiredNoExceptMoveCtrStruct.__new__(AllRequiredNoExceptMoveCtrStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def intField(self):

        return deref(self._cpp_obj).intField_ref().value()


    def __hash__(AllRequiredNoExceptMoveCtrStruct self):
        return  super().__hash__()

    def __copy__(AllRequiredNoExceptMoveCtrStruct self):
        cdef shared_ptr[cAllRequiredNoExceptMoveCtrStruct] cpp_obj = make_shared[cAllRequiredNoExceptMoveCtrStruct](
            deref(self._cpp_obj)
        )
        return AllRequiredNoExceptMoveCtrStruct.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cAllRequiredNoExceptMoveCtrStruct](
            self._cpp_obj,
            (<AllRequiredNoExceptMoveCtrStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AllRequiredNoExceptMoveCtrStruct()

    cdef __iobuf.IOBuf _serialize(AllRequiredNoExceptMoveCtrStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cAllRequiredNoExceptMoveCtrStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(AllRequiredNoExceptMoveCtrStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAllRequiredNoExceptMoveCtrStruct]()
        with nogil:
            needed = serializer.cdeserialize[cAllRequiredNoExceptMoveCtrStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class Map__string_i64(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_i64):
            self._cpp_obj = (<Map__string_i64> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_i64._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,cint64_t]] c_items):
        __fbthrift_inst = <Map__string_i64>Map__string_i64.__new__(Map__string_i64)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_i64 self):
        cdef shared_ptr[cmap[string,cint64_t]] cpp_obj = make_shared[cmap[string,cint64_t]](
            deref(self._cpp_obj)
        )
        return Map__string_i64.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cint64_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cint64_t]] c_inst = make_shared[cmap[string,cint64_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint64_t> item

                deref(c_inst)[key.encode('UTF-8')] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef cint64_t citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint64_t]] itr = __map_iter[cmap[string,cint64_t]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint64_t]] itr = __map_iter[cmap[string,cint64_t]](self._cpp_obj)
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint64_t]] itr = __map_iter[cmap[string,cint64_t]](self._cpp_obj)
        cdef string ckey
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_i64()


Mapping.register(Map__string_i64)

@__cython.auto_pickle(False)
cdef class Map__Empty_MyStruct(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__Empty_MyStruct):
            self._cpp_obj = (<Map__Empty_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = Map__Empty_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cEmpty,cMyStruct]] c_items):
        __fbthrift_inst = <Map__Empty_MyStruct>Map__Empty_MyStruct.__new__(Map__Empty_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__Empty_MyStruct self):
        cdef shared_ptr[cmap[cEmpty,cMyStruct]] cpp_obj = make_shared[cmap[cEmpty,cMyStruct]](
            deref(self._cpp_obj)
        )
        return Map__Empty_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cEmpty,cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cEmpty,cMyStruct]] c_inst = make_shared[cmap[cEmpty,cMyStruct]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, Empty):
                    raise TypeError(f"{key!r} is not of type 'Empty'")
                if not isinstance(item, MyStruct):
                    raise TypeError(f"{item!r} is not of type 'MyStruct'")

                deref(c_inst)[deref((<Empty>key)._cpp_obj)] = deref((<MyStruct>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, Empty):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cEmpty ckey = deref((<Empty>key)._cpp_obj)
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[cMyStruct] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return MyStruct.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cEmpty,cMyStruct]] itr = __map_iter[cmap[cEmpty,cMyStruct]](self._cpp_obj)
        cdef shared_ptr[cEmpty] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield Empty.create(citem)

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cEmpty ckey = deref((<Empty>key)._cpp_obj)
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cEmpty,cMyStruct]] itr = __map_iter[cmap[cEmpty,cMyStruct]](self._cpp_obj)
        cdef shared_ptr[cMyStruct] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield MyStruct.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cEmpty,cMyStruct]] itr = __map_iter[cmap[cEmpty,cMyStruct]](self._cpp_obj)
        cdef shared_ptr[cEmpty] ckey
        cdef shared_ptr[cMyStruct] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (Empty.create(ckey), MyStruct.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__Empty_MyStruct()


Mapping.register(Map__Empty_MyStruct)

@__cython.auto_pickle(False)
cdef class List__Map__Empty_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Map__Empty_MyStruct):
            self._cpp_obj = (<List__Map__Empty_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__Map__Empty_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cmap[cEmpty,cMyStruct]]] c_items):
        __fbthrift_inst = <List__Map__Empty_MyStruct>List__Map__Empty_MyStruct.__new__(List__Map__Empty_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Map__Empty_MyStruct self):
        cdef shared_ptr[vector[cmap[cEmpty,cMyStruct]]] cpp_obj = make_shared[vector[cmap[cEmpty,cMyStruct]]](
            deref(self._cpp_obj)
        )
        return List__Map__Empty_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cmap[cEmpty,cMyStruct]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cmap[cEmpty,cMyStruct]]] c_inst = make_shared[vector[cmap[cEmpty,cMyStruct]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Mapping['Empty', 'MyStruct']")
                if not isinstance(item, Map__Empty_MyStruct):
                    item = Map__Empty_MyStruct(item)
                deref(c_inst).push_back(deref((<Map__Empty_MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Map__Empty_MyStruct.create(
            __list_slice[vector[cmap[cEmpty,cMyStruct]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cmap[cEmpty,cMyStruct]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return Map__Empty_MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, Map__Empty_MyStruct):
            return item
        try:
            return Map__Empty_MyStruct(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cmap[cEmpty,cMyStruct] citem = deref((<Map__Empty_MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cmap[cEmpty,cMyStruct]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cmap[cEmpty,cMyStruct] citem = deref((<Map__Empty_MyStruct>item)._cpp_obj)
        return __list_count[vector[cmap[cEmpty,cMyStruct]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Map__Empty_MyStruct()


Sequence.register(List__Map__Empty_MyStruct)

@__cython.auto_pickle(False)
cdef class List__List__Map__Empty_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__Map__Empty_MyStruct):
            self._cpp_obj = (<List__List__Map__Empty_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__List__Map__Empty_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] c_items):
        __fbthrift_inst = <List__List__Map__Empty_MyStruct>List__List__Map__Empty_MyStruct.__new__(List__List__Map__Empty_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__Map__Empty_MyStruct self):
        cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] cpp_obj = make_shared[vector[vector[cmap[cEmpty,cMyStruct]]]](
            deref(self._cpp_obj)
        )
        return List__List__Map__Empty_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] c_inst = make_shared[vector[vector[cmap[cEmpty,cMyStruct]]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_typing.Mapping['Empty', 'MyStruct']]")
                if not isinstance(item, List__Map__Empty_MyStruct):
                    item = List__Map__Empty_MyStruct(item)
                deref(c_inst).push_back(deref((<List__Map__Empty_MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__Map__Empty_MyStruct.create(
            __list_slice[vector[vector[cmap[cEmpty,cMyStruct]]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[cmap[cEmpty,cMyStruct]]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__Map__Empty_MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__Map__Empty_MyStruct):
            return item
        try:
            return List__Map__Empty_MyStruct(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[cmap[cEmpty,cMyStruct]] citem = deref((<List__Map__Empty_MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cmap[cEmpty,cMyStruct]]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[cmap[cEmpty,cMyStruct]] citem = deref((<List__Map__Empty_MyStruct>item)._cpp_obj)
        return __list_count[vector[vector[cmap[cEmpty,cMyStruct]]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__Map__Empty_MyStruct()


Sequence.register(List__List__Map__Empty_MyStruct)

@__cython.auto_pickle(False)
cdef class List__List__List__Map__Empty_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__List__Map__Empty_MyStruct):
            self._cpp_obj = (<List__List__List__Map__Empty_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__List__List__Map__Empty_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] c_items):
        __fbthrift_inst = <List__List__List__Map__Empty_MyStruct>List__List__List__Map__Empty_MyStruct.__new__(List__List__List__Map__Empty_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__List__Map__Empty_MyStruct self):
        cdef shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] cpp_obj = make_shared[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]](
            deref(self._cpp_obj)
        )
        return List__List__List__Map__Empty_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] c_inst = make_shared[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[_typing.Mapping['Empty', 'MyStruct']]]")
                if not isinstance(item, List__List__Map__Empty_MyStruct):
                    item = List__List__Map__Empty_MyStruct(item)
                deref(c_inst).push_back(deref((<List__List__Map__Empty_MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__List__Map__Empty_MyStruct.create(
            __list_slice[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__List__Map__Empty_MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__List__Map__Empty_MyStruct):
            return item
        try:
            return List__List__Map__Empty_MyStruct(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[vector[cmap[cEmpty,cMyStruct]]] citem = deref((<List__List__Map__Empty_MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[vector[cmap[cEmpty,cMyStruct]]] citem = deref((<List__List__Map__Empty_MyStruct>item)._cpp_obj)
        return __list_count[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__List__Map__Empty_MyStruct()


Sequence.register(List__List__List__Map__Empty_MyStruct)

@__cython.auto_pickle(False)
cdef class List__MyEnumA(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__MyEnumA):
            self._cpp_obj = (<List__MyEnumA> items)._cpp_obj
        else:
            self._cpp_obj = List__MyEnumA._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cMyEnumA]] c_items):
        __fbthrift_inst = <List__MyEnumA>List__MyEnumA.__new__(List__MyEnumA)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__MyEnumA self):
        cdef shared_ptr[vector[cMyEnumA]] cpp_obj = make_shared[vector[cMyEnumA]](
            deref(self._cpp_obj)
        )
        return List__MyEnumA.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cMyEnumA]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cMyEnumA]] c_inst = make_shared[vector[cMyEnumA]]()
        if items is not None:
            for item in items:
                if not isinstance(item, MyEnumA):
                    raise TypeError(f"{item!r} is not of type MyEnumA")
                deref(c_inst).push_back(<cMyEnumA><int>item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__MyEnumA.create(
            __list_slice[vector[cMyEnumA]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cMyEnumA citem
        __list_getitem(self._cpp_obj, index, citem)
        return translate_cpp_enum_to_python(MyEnumA, <int> citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, MyEnumA):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cMyEnumA citem = <cMyEnumA><int>item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cMyEnumA]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cMyEnumA citem = <cMyEnumA><int>item
        return __list_count[vector[cMyEnumA]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__MyEnumA()


Sequence.register(List__MyEnumA)

@__cython.auto_pickle(False)
cdef class Set__MyStruct(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__MyStruct):
            self._cpp_obj = (<Set__MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = Set__MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cMyStruct]] c_items):
        __fbthrift_inst = <Set__MyStruct>Set__MyStruct.__new__(Set__MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__MyStruct self):
        cdef shared_ptr[cset[cMyStruct]] cpp_obj = make_shared[cset[cMyStruct]](
            deref(self._cpp_obj)
        )
        return Set__MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cMyStruct]] c_inst = make_shared[cset[cMyStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, MyStruct):
                    raise TypeError(f"{item!r} is not of type 'MyStruct'")
                deref(c_inst).insert(deref((<MyStruct>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, MyStruct):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<MyStruct>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cMyStruct]] itr = __set_iter[cset[cMyStruct]](self._cpp_obj)
        cdef shared_ptr[cMyStruct] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield MyStruct.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__MyStruct):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__MyStruct> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__MyStruct):
            other = Set__MyStruct(other)
        cdef shared_ptr[cset[cMyStruct]] result
        return Set__MyStruct.create(__set_op[cset[cMyStruct]](
            self._cpp_obj,
            (<Set__MyStruct>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__MyStruct()


Set.register(Set__MyStruct)

@__cython.auto_pickle(False)
cdef class List__ComplexUnion(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__ComplexUnion):
            self._cpp_obj = (<List__ComplexUnion> items)._cpp_obj
        else:
            self._cpp_obj = List__ComplexUnion._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cComplexUnion]] c_items):
        __fbthrift_inst = <List__ComplexUnion>List__ComplexUnion.__new__(List__ComplexUnion)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__ComplexUnion self):
        cdef shared_ptr[vector[cComplexUnion]] cpp_obj = make_shared[vector[cComplexUnion]](
            deref(self._cpp_obj)
        )
        return List__ComplexUnion.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cComplexUnion]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cComplexUnion]] c_inst = make_shared[vector[cComplexUnion]]()
        if items is not None:
            for item in items:
                if not isinstance(item, ComplexUnion):
                    raise TypeError(f"{item!r} is not of type 'ComplexUnion'")
                deref(c_inst).push_back(deref((<ComplexUnion>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__ComplexUnion.create(
            __list_slice[vector[cComplexUnion]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cComplexUnion] citem
        __list_getitem(self._cpp_obj, index, citem)
        return ComplexUnion.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, ComplexUnion):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cComplexUnion citem = deref((<ComplexUnion>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cComplexUnion]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cComplexUnion citem = deref((<ComplexUnion>item)._cpp_obj)
        return __list_count[vector[cComplexUnion]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__ComplexUnion()


Sequence.register(List__ComplexUnion)

@__cython.auto_pickle(False)
cdef class List__string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__string):
            self._cpp_obj = (<List__string> items)._cpp_obj
        else:
            self._cpp_obj = List__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[string]] c_items):
        __fbthrift_inst = <List__string>List__string.__new__(List__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__string self):
        cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](
            deref(self._cpp_obj)
        )
        return List__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[string]] _make_instance(object items) except *:
        cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).push_back(item.encode('UTF-8'))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__string.create(
            __list_slice[vector[string]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef string citem
        __list_getitem(self._cpp_obj, index, citem)
        return bytes(citem).decode('UTF-8')

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, str):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef string citem = item.encode('UTF-8')
        cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef string citem = item.encode('UTF-8')
        return __list_count[vector[string]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__string()


Sequence.register(List__string)

@__cython.auto_pickle(False)
cdef class Set__List__string(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__List__string):
            self._cpp_obj = (<Set__List__string> items)._cpp_obj
        else:
            self._cpp_obj = Set__List__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[vector[string]]] c_items):
        __fbthrift_inst = <Set__List__string>Set__List__string.__new__(Set__List__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__List__string self):
        cdef shared_ptr[cset[vector[string]]] cpp_obj = make_shared[cset[vector[string]]](
            deref(self._cpp_obj)
        )
        return Set__List__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[vector[string]]] _make_instance(object items) except *:
        cdef shared_ptr[cset[vector[string]]] c_inst = make_shared[cset[vector[string]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of type _typing.Sequence[str]")
                if not isinstance(item, List__string):
                    item = List__string(item)
                deref(c_inst).insert(deref((<List__string>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, List__string):
                item = List__string(item)
        except Exception:
            return False
        if not isinstance(item, List__string):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<List__string>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[vector[string]]] itr = __set_iter[cset[vector[string]]](self._cpp_obj)
        cdef shared_ptr[vector[string]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield List__string.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__List__string):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__List__string> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__List__string):
            other = Set__List__string(other)
        cdef shared_ptr[cset[vector[string]]] result
        return Set__List__string.create(__set_op[cset[vector[string]]](
            self._cpp_obj,
            (<Set__List__string>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__List__string()


Set.register(Set__List__string)

@__cython.auto_pickle(False)
cdef class Set__List__List__Map__Empty_MyStruct(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__List__List__Map__Empty_MyStruct):
            self._cpp_obj = (<Set__List__List__Map__Empty_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = Set__List__List__Map__Empty_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] c_items):
        __fbthrift_inst = <Set__List__List__Map__Empty_MyStruct>Set__List__List__Map__Empty_MyStruct.__new__(Set__List__List__Map__Empty_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__List__List__Map__Empty_MyStruct self):
        cdef shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] cpp_obj = make_shared[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]](
            deref(self._cpp_obj)
        )
        return Set__List__List__Map__Empty_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] _make_instance(object items) except *:
        cdef shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] c_inst = make_shared[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of type _typing.Sequence[_typing.Sequence[_typing.Mapping['Empty', 'MyStruct']]]")
                if not isinstance(item, List__List__Map__Empty_MyStruct):
                    item = List__List__Map__Empty_MyStruct(item)
                deref(c_inst).insert(deref((<List__List__Map__Empty_MyStruct>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, List__List__Map__Empty_MyStruct):
                item = List__List__Map__Empty_MyStruct(item)
        except Exception:
            return False
        if not isinstance(item, List__List__Map__Empty_MyStruct):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<List__List__Map__Empty_MyStruct>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] itr = __set_iter[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]](self._cpp_obj)
        cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield List__List__Map__Empty_MyStruct.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__List__List__Map__Empty_MyStruct):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__List__List__Map__Empty_MyStruct> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__List__List__Map__Empty_MyStruct):
            other = Set__List__List__Map__Empty_MyStruct(other)
        cdef shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] result
        return Set__List__List__Map__Empty_MyStruct.create(__set_op[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]](
            self._cpp_obj,
            (<Set__List__List__Map__Empty_MyStruct>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__List__List__Map__Empty_MyStruct()


Set.register(Set__List__List__Map__Empty_MyStruct)

@__cython.auto_pickle(False)
cdef class Map__i32_List__string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_List__string):
            self._cpp_obj = (<Map__i32_List__string> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_List__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cint32_t,vector[string]]] c_items):
        __fbthrift_inst = <Map__i32_List__string>Map__i32_List__string.__new__(Map__i32_List__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_List__string self):
        cdef shared_ptr[cmap[cint32_t,vector[string]]] cpp_obj = make_shared[cmap[cint32_t,vector[string]]](
            deref(self._cpp_obj)
        )
        return Map__i32_List__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,vector[string]]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,vector[string]]] c_inst = make_shared[cmap[cint32_t,vector[string]]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if item is None:
                    raise TypeError("None is not of type _typing.Sequence[str]")
                if not isinstance(item, List__string):
                    item = List__string(item)

                deref(c_inst)[key] = deref((<List__string>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[vector[string]] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return List__string.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,vector[string]]] itr = __map_iter[cmap[cint32_t,vector[string]]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,vector[string]]] itr = __map_iter[cmap[cint32_t,vector[string]]](self._cpp_obj)
        cdef shared_ptr[vector[string]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield List__string.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,vector[string]]] itr = __map_iter[cmap[cint32_t,vector[string]]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef shared_ptr[vector[string]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, List__string.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_List__string()


Mapping.register(Map__i32_List__string)

@__cython.auto_pickle(False)
cdef class List__bool(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__bool):
            self._cpp_obj = (<List__bool> items)._cpp_obj
        else:
            self._cpp_obj = List__bool._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cbool]] c_items):
        __fbthrift_inst = <List__bool>List__bool.__new__(List__bool)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__bool self):
        cdef shared_ptr[vector[cbool]] cpp_obj = make_shared[vector[cbool]](
            deref(self._cpp_obj)
        )
        return List__bool.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cbool]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cbool]] c_inst = make_shared[vector[cbool]]()
        if items is not None:
            for item in items:
                if not isinstance(item, bool):
                    raise TypeError(f"{item!r} is not of type bool")
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__bool.create(
            __list_slice[vector[cbool]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cbool citem
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, bool):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cbool citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cbool]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cbool citem = item
        return __list_count[vector[cbool]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__bool()


Sequence.register(List__bool)

@__cython.auto_pickle(False)
cdef class List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__i32):
            self._cpp_obj = (<List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cint32_t]] c_items):
        __fbthrift_inst = <List__i32>List__i32.__new__(List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__i32 self):
        cdef shared_ptr[vector[cint32_t]] cpp_obj = make_shared[vector[cint32_t]](
            deref(self._cpp_obj)
        )
        return List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cint32_t]] c_inst = make_shared[vector[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__i32.create(
            __list_slice[vector[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[vector[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__i32()


Sequence.register(List__i32)

@__cython.auto_pickle(False)
cdef class List__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__i32):
            self._cpp_obj = (<List__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[cint32_t]]] c_items):
        __fbthrift_inst = <List__List__i32>List__List__i32.__new__(List__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__i32 self):
        cdef shared_ptr[vector[vector[cint32_t]]] cpp_obj = make_shared[vector[vector[cint32_t]]](
            deref(self._cpp_obj)
        )
        return List__List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[cint32_t]]] c_inst = make_shared[vector[vector[cint32_t]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[int]")
                if not isinstance(item, List__i32):
                    item = List__i32(item)
                deref(c_inst).push_back(deref((<List__i32>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__i32.create(
            __list_slice[vector[vector[cint32_t]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[cint32_t]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__i32.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__i32):
            return item
        try:
            return List__i32(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[cint32_t] citem = deref((<List__i32>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint32_t]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[cint32_t] citem = deref((<List__i32>item)._cpp_obj)
        return __list_count[vector[vector[cint32_t]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__i32()


Sequence.register(List__List__i32)

@__cython.auto_pickle(False)
cdef class List__List__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__List__i32):
            self._cpp_obj = (<List__List__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__List__List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[vector[cint32_t]]]] c_items):
        __fbthrift_inst = <List__List__List__i32>List__List__List__i32.__new__(List__List__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__List__i32 self):
        cdef shared_ptr[vector[vector[vector[cint32_t]]]] cpp_obj = make_shared[vector[vector[vector[cint32_t]]]](
            deref(self._cpp_obj)
        )
        return List__List__List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[vector[cint32_t]]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[vector[cint32_t]]]] c_inst = make_shared[vector[vector[vector[cint32_t]]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[int]]")
                if not isinstance(item, List__List__i32):
                    item = List__List__i32(item)
                deref(c_inst).push_back(deref((<List__List__i32>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__List__i32.create(
            __list_slice[vector[vector[vector[cint32_t]]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[vector[cint32_t]]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__List__i32.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__List__i32):
            return item
        try:
            return List__List__i32(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[vector[cint32_t]] citem = deref((<List__List__i32>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[vector[cint32_t]]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[vector[cint32_t]] citem = deref((<List__List__i32>item)._cpp_obj)
        return __list_count[vector[vector[vector[cint32_t]]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__List__i32()


Sequence.register(List__List__List__i32)

@__cython.auto_pickle(False)
cdef class List__List__List__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__List__List__i32):
            self._cpp_obj = (<List__List__List__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__List__List__List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[vector[vector[cint32_t]]]]] c_items):
        __fbthrift_inst = <List__List__List__List__i32>List__List__List__List__i32.__new__(List__List__List__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__List__List__i32 self):
        cdef shared_ptr[vector[vector[vector[vector[cint32_t]]]]] cpp_obj = make_shared[vector[vector[vector[vector[cint32_t]]]]](
            deref(self._cpp_obj)
        )
        return List__List__List__List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[vector[vector[cint32_t]]]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[vector[vector[cint32_t]]]]] c_inst = make_shared[vector[vector[vector[vector[cint32_t]]]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[_typing.Sequence[int]]]")
                if not isinstance(item, List__List__List__i32):
                    item = List__List__List__i32(item)
                deref(c_inst).push_back(deref((<List__List__List__i32>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__List__List__i32.create(
            __list_slice[vector[vector[vector[vector[cint32_t]]]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[vector[vector[cint32_t]]]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__List__List__i32.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__List__List__i32):
            return item
        try:
            return List__List__List__i32(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[vector[vector[cint32_t]]] citem = deref((<List__List__List__i32>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[vector[vector[cint32_t]]]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[vector[vector[cint32_t]]] citem = deref((<List__List__List__i32>item)._cpp_obj)
        return __list_count[vector[vector[vector[vector[cint32_t]]]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__List__List__i32()


Sequence.register(List__List__List__List__i32)

@__cython.auto_pickle(False)
cdef class Set__List__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__List__i32):
            self._cpp_obj = (<Set__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = Set__List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[vector[cint32_t]]] c_items):
        __fbthrift_inst = <Set__List__i32>Set__List__i32.__new__(Set__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__List__i32 self):
        cdef shared_ptr[cset[vector[cint32_t]]] cpp_obj = make_shared[cset[vector[cint32_t]]](
            deref(self._cpp_obj)
        )
        return Set__List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[vector[cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[cset[vector[cint32_t]]] c_inst = make_shared[cset[vector[cint32_t]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of type _typing.Sequence[int]")
                if not isinstance(item, List__i32):
                    item = List__i32(item)
                deref(c_inst).insert(deref((<List__i32>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, List__i32):
                item = List__i32(item)
        except Exception:
            return False
        if not isinstance(item, List__i32):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<List__i32>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[vector[cint32_t]]] itr = __set_iter[cset[vector[cint32_t]]](self._cpp_obj)
        cdef shared_ptr[vector[cint32_t]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield List__i32.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__List__i32):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__List__i32> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__List__i32):
            other = Set__List__i32(other)
        cdef shared_ptr[cset[vector[cint32_t]]] result
        return Set__List__i32.create(__set_op[cset[vector[cint32_t]]](
            self._cpp_obj,
            (<Set__List__i32>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__List__i32()


Set.register(Set__List__i32)

@__cython.auto_pickle(False)
cdef class Set__string(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__string):
            self._cpp_obj = (<Set__string> items)._cpp_obj
        else:
            self._cpp_obj = Set__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[string]] c_items):
        __fbthrift_inst = <Set__string>Set__string.__new__(Set__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__string self):
        cdef shared_ptr[cset[string]] cpp_obj = make_shared[cset[string]](
            deref(self._cpp_obj)
        )
        return Set__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[string]] _make_instance(object items) except *:
        cdef shared_ptr[cset[string]] c_inst = make_shared[cset[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).insert(item.encode('UTF-8'))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, str):
            return False
        return pbool(deref(self._cpp_obj).count(item.encode('UTF-8')))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[string]] itr = __set_iter[cset[string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__string):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__string> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__string):
            other = Set__string(other)
        cdef shared_ptr[cset[string]] result
        return Set__string.create(__set_op[cset[string]](
            self._cpp_obj,
            (<Set__string>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__string()


Set.register(Set__string)

@__cython.auto_pickle(False)
cdef class List__Set__string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Set__string):
            self._cpp_obj = (<List__Set__string> items)._cpp_obj
        else:
            self._cpp_obj = List__Set__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cset[string]]] c_items):
        __fbthrift_inst = <List__Set__string>List__Set__string.__new__(List__Set__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Set__string self):
        cdef shared_ptr[vector[cset[string]]] cpp_obj = make_shared[vector[cset[string]]](
            deref(self._cpp_obj)
        )
        return List__Set__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cset[string]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cset[string]]] c_inst = make_shared[vector[cset[string]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.AbstractSet[str]")
                if not isinstance(item, Set__string):
                    item = Set__string(item)
                deref(c_inst).push_back(deref((<Set__string>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Set__string.create(
            __list_slice[vector[cset[string]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cset[string]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return Set__string.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, Set__string):
            return item
        try:
            return Set__string(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cset[string] citem = deref((<Set__string>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cset[string]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cset[string] citem = deref((<Set__string>item)._cpp_obj)
        return __list_count[vector[cset[string]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Set__string()


Sequence.register(List__Set__string)

@__cython.auto_pickle(False)
cdef class Map__List__Set__string_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__List__Set__string_string):
            self._cpp_obj = (<Map__List__Set__string_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__List__Set__string_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[vector[cset[string]],string]] c_items):
        __fbthrift_inst = <Map__List__Set__string_string>Map__List__Set__string_string.__new__(Map__List__Set__string_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__List__Set__string_string self):
        cdef shared_ptr[cmap[vector[cset[string]],string]] cpp_obj = make_shared[cmap[vector[cset[string]],string]](
            deref(self._cpp_obj)
        )
        return Map__List__Set__string_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[vector[cset[string]],string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[vector[cset[string]],string]] c_inst = make_shared[cmap[vector[cset[string]],string]]()
        if items is not None:
            for key, item in items.items():
                if key is None:
                    raise TypeError("None is not of type _typing.Sequence[_typing.AbstractSet[str]]")
                if not isinstance(key, List__Set__string):
                    key = List__Set__string(key)
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[deref((<List__Set__string>key)._cpp_obj)] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, List__Set__string):
            return key
        try:
            return List__Set__string(key)
        except:
            pass

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef vector[cset[string]] ckey = deref((<List__Set__string>key)._cpp_obj)
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[vector[cset[string]],string]] itr = __map_iter[cmap[vector[cset[string]],string]](self._cpp_obj)
        cdef shared_ptr[vector[cset[string]]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield List__Set__string.create(citem)

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef vector[cset[string]] ckey = deref((<List__Set__string>key)._cpp_obj)
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[vector[cset[string]],string]] itr = __map_iter[cmap[vector[cset[string]],string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[vector[cset[string]],string]] itr = __map_iter[cmap[vector[cset[string]],string]](self._cpp_obj)
        cdef shared_ptr[vector[cset[string]]] ckey
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (List__Set__string.create(ckey), bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__List__Set__string_string()


Mapping.register(Map__List__Set__string_string)

@__cython.auto_pickle(False)
cdef class Map__Set__List__i32_Map__List__Set__string_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__Set__List__i32_Map__List__Set__string_string):
            self._cpp_obj = (<Map__Set__List__i32_Map__List__Set__string_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__Set__List__i32_Map__List__Set__string_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] c_items):
        __fbthrift_inst = <Map__Set__List__i32_Map__List__Set__string_string>Map__Set__List__i32_Map__List__Set__string_string.__new__(Map__Set__List__i32_Map__List__Set__string_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__Set__List__i32_Map__List__Set__string_string self):
        cdef shared_ptr[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] cpp_obj = make_shared[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]](
            deref(self._cpp_obj)
        )
        return Map__Set__List__i32_Map__List__Set__string_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] c_inst = make_shared[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]]()
        if items is not None:
            for key, item in items.items():
                if key is None:
                    raise TypeError("None is not of type _typing.AbstractSet[_typing.Sequence[int]]")
                if not isinstance(key, Set__List__i32):
                    key = Set__List__i32(key)
                if item is None:
                    raise TypeError("None is not of type _typing.Mapping[_typing.Sequence[_typing.AbstractSet[str]], str]")
                if not isinstance(item, Map__List__Set__string_string):
                    item = Map__List__Set__string_string(item)

                deref(c_inst)[deref((<Set__List__i32>key)._cpp_obj)] = deref((<Map__List__Set__string_string>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, Set__List__i32):
            return key
        try:
            return Set__List__i32(key)
        except:
            pass

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cset[vector[cint32_t]] ckey = deref((<Set__List__i32>key)._cpp_obj)
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[cmap[vector[cset[string]],string]] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return Map__List__Set__string_string.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] itr = __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]](self._cpp_obj)
        cdef shared_ptr[cset[vector[cint32_t]]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield Set__List__i32.create(citem)

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cset[vector[cint32_t]] ckey = deref((<Set__List__i32>key)._cpp_obj)
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] itr = __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]](self._cpp_obj)
        cdef shared_ptr[cmap[vector[cset[string]],string]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield Map__List__Set__string_string.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] itr = __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]](self._cpp_obj)
        cdef shared_ptr[cset[vector[cint32_t]]] ckey
        cdef shared_ptr[cmap[vector[cset[string]],string]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (Set__List__i32.create(ckey), Map__List__Set__string_string.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__Set__List__i32_Map__List__Set__string_string()


Mapping.register(Map__Set__List__i32_Map__List__Set__string_string)

@__cython.auto_pickle(False)
cdef class List__binary(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__binary):
            self._cpp_obj = (<List__binary> items)._cpp_obj
        else:
            self._cpp_obj = List__binary._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[string]] c_items):
        __fbthrift_inst = <List__binary>List__binary.__new__(List__binary)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__binary self):
        cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](
            deref(self._cpp_obj)
        )
        return List__binary.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[string]] _make_instance(object items) except *:
        cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.Sequence[bytes] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, bytes):
                    raise TypeError(f"{item!r} is not of type bytes")
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__binary.create(
            __list_slice[vector[string]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef string citem
        __list_getitem(self._cpp_obj, index, citem)
        return bytes(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, bytes):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef string citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef string citem = item
        return __list_count[vector[string]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__binary()


Sequence.register(List__binary)

@__cython.auto_pickle(False)
cdef class Map__MyEnumA_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__MyEnumA_string):
            self._cpp_obj = (<Map__MyEnumA_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__MyEnumA_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cMyEnumA,string]] c_items):
        __fbthrift_inst = <Map__MyEnumA_string>Map__MyEnumA_string.__new__(Map__MyEnumA_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__MyEnumA_string self):
        cdef shared_ptr[cmap[cMyEnumA,string]] cpp_obj = make_shared[cmap[cMyEnumA,string]](
            deref(self._cpp_obj)
        )
        return Map__MyEnumA_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cMyEnumA,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cMyEnumA,string]] c_inst = make_shared[cmap[cMyEnumA,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, MyEnumA):
                    raise TypeError(f"{key!r} is not of type MyEnumA")
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[<cMyEnumA><int>key] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, MyEnumA):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cMyEnumA ckey = <cMyEnumA><int>key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cMyEnumA,string]] itr = __map_iter[cmap[cMyEnumA,string]](self._cpp_obj)
        cdef cMyEnumA citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield translate_cpp_enum_to_python(MyEnumA, <int> citem)

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cMyEnumA ckey = <cMyEnumA><int>key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cMyEnumA,string]] itr = __map_iter[cmap[cMyEnumA,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cMyEnumA,string]] itr = __map_iter[cmap[cMyEnumA,string]](self._cpp_obj)
        cdef cMyEnumA ckey
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (translate_cpp_enum_to_python(MyEnumA, <int> ckey), bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__MyEnumA_string()


Mapping.register(Map__MyEnumA_string)

@__cython.auto_pickle(False)
cdef class Set__i64(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__i64):
            self._cpp_obj = (<Set__i64> items)._cpp_obj
        else:
            self._cpp_obj = Set__i64._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cint64_t]] c_items):
        __fbthrift_inst = <Set__i64>Set__i64.__new__(Set__i64)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__i64 self):
        cdef shared_ptr[cset[cint64_t]] cpp_obj = make_shared[cset[cint64_t]](
            deref(self._cpp_obj)
        )
        return Set__i64.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cint64_t]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cint64_t]] c_inst = make_shared[cset[cint64_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint64_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cint64_t]] itr = __set_iter[cset[cint64_t]](self._cpp_obj)
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield citem

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__i64):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__i64> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__i64):
            other = Set__i64(other)
        cdef shared_ptr[cset[cint64_t]] result
        return Set__i64.create(__set_op[cset[cint64_t]](
            self._cpp_obj,
            (<Set__i64>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__i64()


Set.register(Set__i64)

@__cython.auto_pickle(False)
cdef class Map__string_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_i32):
            self._cpp_obj = (<Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,cint32_t]] c_items):
        __fbthrift_inst = <Map__string_i32>Map__string_i32.__new__(Map__string_i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_i32 self):
        cdef shared_ptr[cmap[string,cint32_t]] cpp_obj = make_shared[cmap[string,cint32_t]](
            deref(self._cpp_obj)
        )
        return Map__string_i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cint32_t]] c_inst = make_shared[cmap[string,cint32_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key.encode('UTF-8')] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef cint32_t citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint32_t]] itr = __map_iter[cmap[string,cint32_t]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint32_t]] itr = __map_iter[cmap[string,cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint32_t]] itr = __map_iter[cmap[string,cint32_t]](self._cpp_obj)
        cdef string ckey
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_i32()


Mapping.register(Map__string_i32)

@__cython.auto_pickle(False)
cdef class List__SimpleUnion(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__SimpleUnion):
            self._cpp_obj = (<List__SimpleUnion> items)._cpp_obj
        else:
            self._cpp_obj = List__SimpleUnion._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cSimpleUnion]] c_items):
        __fbthrift_inst = <List__SimpleUnion>List__SimpleUnion.__new__(List__SimpleUnion)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__SimpleUnion self):
        cdef shared_ptr[vector[cSimpleUnion]] cpp_obj = make_shared[vector[cSimpleUnion]](
            deref(self._cpp_obj)
        )
        return List__SimpleUnion.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cSimpleUnion]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cSimpleUnion]] c_inst = make_shared[vector[cSimpleUnion]]()
        if items is not None:
            for item in items:
                if not isinstance(item, SimpleUnion):
                    raise TypeError(f"{item!r} is not of type 'SimpleUnion'")
                deref(c_inst).push_back(deref((<SimpleUnion>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__SimpleUnion.create(
            __list_slice[vector[cSimpleUnion]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cSimpleUnion] citem
        __list_getitem(self._cpp_obj, index, citem)
        return SimpleUnion.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, SimpleUnion):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cSimpleUnion citem = deref((<SimpleUnion>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cSimpleUnion]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cSimpleUnion citem = deref((<SimpleUnion>item)._cpp_obj)
        return __list_count[vector[cSimpleUnion]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__SimpleUnion()


Sequence.register(List__SimpleUnion)

@__cython.auto_pickle(False)
cdef class Set__SimpleUnion(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__SimpleUnion):
            self._cpp_obj = (<Set__SimpleUnion> items)._cpp_obj
        else:
            self._cpp_obj = Set__SimpleUnion._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cSimpleUnion]] c_items):
        __fbthrift_inst = <Set__SimpleUnion>Set__SimpleUnion.__new__(Set__SimpleUnion)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__SimpleUnion self):
        cdef shared_ptr[cset[cSimpleUnion]] cpp_obj = make_shared[cset[cSimpleUnion]](
            deref(self._cpp_obj)
        )
        return Set__SimpleUnion.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cSimpleUnion]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cSimpleUnion]] c_inst = make_shared[cset[cSimpleUnion]]()
        if items is not None:
            for item in items:
                if not isinstance(item, SimpleUnion):
                    raise TypeError(f"{item!r} is not of type 'SimpleUnion'")
                deref(c_inst).insert(deref((<SimpleUnion>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, SimpleUnion):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<SimpleUnion>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cSimpleUnion]] itr = __set_iter[cset[cSimpleUnion]](self._cpp_obj)
        cdef shared_ptr[cSimpleUnion] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield SimpleUnion.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__SimpleUnion):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__SimpleUnion> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__SimpleUnion):
            other = Set__SimpleUnion(other)
        cdef shared_ptr[cset[cSimpleUnion]] result
        return Set__SimpleUnion.create(__set_op[cset[cSimpleUnion]](
            self._cpp_obj,
            (<Set__SimpleUnion>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__SimpleUnion()


Set.register(Set__SimpleUnion)

@__cython.auto_pickle(False)
cdef class List__Set__SimpleUnion(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Set__SimpleUnion):
            self._cpp_obj = (<List__Set__SimpleUnion> items)._cpp_obj
        else:
            self._cpp_obj = List__Set__SimpleUnion._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cset[cSimpleUnion]]] c_items):
        __fbthrift_inst = <List__Set__SimpleUnion>List__Set__SimpleUnion.__new__(List__Set__SimpleUnion)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Set__SimpleUnion self):
        cdef shared_ptr[vector[cset[cSimpleUnion]]] cpp_obj = make_shared[vector[cset[cSimpleUnion]]](
            deref(self._cpp_obj)
        )
        return List__Set__SimpleUnion.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cset[cSimpleUnion]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cset[cSimpleUnion]]] c_inst = make_shared[vector[cset[cSimpleUnion]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.AbstractSet['SimpleUnion']")
                if not isinstance(item, Set__SimpleUnion):
                    item = Set__SimpleUnion(item)
                deref(c_inst).push_back(deref((<Set__SimpleUnion>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Set__SimpleUnion.create(
            __list_slice[vector[cset[cSimpleUnion]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cset[cSimpleUnion]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return Set__SimpleUnion.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, Set__SimpleUnion):
            return item
        try:
            return Set__SimpleUnion(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cset[cSimpleUnion] citem = deref((<Set__SimpleUnion>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cset[cSimpleUnion]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cset[cSimpleUnion] citem = deref((<Set__SimpleUnion>item)._cpp_obj)
        return __list_count[vector[cset[cSimpleUnion]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Set__SimpleUnion()


Sequence.register(List__Set__SimpleUnion)

@__cython.auto_pickle(False)
cdef class Map__string_bool(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_bool):
            self._cpp_obj = (<Map__string_bool> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_bool._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,cbool]] c_items):
        __fbthrift_inst = <Map__string_bool>Map__string_bool.__new__(Map__string_bool)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_bool self):
        cdef shared_ptr[cmap[string,cbool]] cpp_obj = make_shared[cmap[string,cbool]](
            deref(self._cpp_obj)
        )
        return Map__string_bool.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cbool]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cbool]] c_inst = make_shared[cmap[string,cbool]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, bool):
                    raise TypeError(f"{item!r} is not of type bool")

                deref(c_inst)[key.encode('UTF-8')] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef cbool citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cbool]] itr = __map_iter[cmap[string,cbool]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cbool]] itr = __map_iter[cmap[string,cbool]](self._cpp_obj)
        cdef cbool citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cbool]] itr = __map_iter[cmap[string,cbool]](self._cpp_obj)
        cdef string ckey
        cdef cbool citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_bool()


Mapping.register(Map__string_bool)

@__cython.auto_pickle(False)
cdef class Set__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__i32):
            self._cpp_obj = (<Set__i32> items)._cpp_obj
        else:
            self._cpp_obj = Set__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cint32_t]] c_items):
        __fbthrift_inst = <Set__i32>Set__i32.__new__(Set__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__i32 self):
        cdef shared_ptr[cset[cint32_t]] cpp_obj = make_shared[cset[cint32_t]](
            deref(self._cpp_obj)
        )
        return Set__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cint32_t]] c_inst = make_shared[cset[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cint32_t]] itr = __set_iter[cset[cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield citem

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__i32):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__i32> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__i32):
            other = Set__i32(other)
        cdef shared_ptr[cset[cint32_t]] result
        return Set__i32.create(__set_op[cset[cint32_t]](
            self._cpp_obj,
            (<Set__i32>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__i32()


Set.register(Set__i32)

@__cython.auto_pickle(False)
cdef class Map__string_Map__string_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_Map__string_i32):
            self._cpp_obj = (<Map__string_Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_Map__string_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,cmap[string,cint32_t]]] c_items):
        __fbthrift_inst = <Map__string_Map__string_i32>Map__string_Map__string_i32.__new__(Map__string_Map__string_i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_Map__string_i32 self):
        cdef shared_ptr[cmap[string,cmap[string,cint32_t]]] cpp_obj = make_shared[cmap[string,cmap[string,cint32_t]]](
            deref(self._cpp_obj)
        )
        return Map__string_Map__string_i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cmap[string,cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cmap[string,cint32_t]]] c_inst = make_shared[cmap[string,cmap[string,cint32_t]]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if item is None:
                    raise TypeError("None is not of type _typing.Mapping[str, int]")
                if not isinstance(item, Map__string_i32):
                    item = Map__string_i32(item)

                deref(c_inst)[key.encode('UTF-8')] = deref((<Map__string_i32>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[cmap[string,cint32_t]] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return Map__string_i32.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cmap[string,cint32_t]]] itr = __map_iter[cmap[string,cmap[string,cint32_t]]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cmap[string,cint32_t]]] itr = __map_iter[cmap[string,cmap[string,cint32_t]]](self._cpp_obj)
        cdef shared_ptr[cmap[string,cint32_t]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield Map__string_i32.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cmap[string,cint32_t]]] itr = __map_iter[cmap[string,cmap[string,cint32_t]]](self._cpp_obj)
        cdef string ckey
        cdef shared_ptr[cmap[string,cint32_t]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), Map__string_i32.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_Map__string_i32()


Mapping.register(Map__string_Map__string_i32)

@__cython.auto_pickle(False)
cdef class Map__string_Map__string_Map__string_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_Map__string_Map__string_i32):
            self._cpp_obj = (<Map__string_Map__string_Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_Map__string_Map__string_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,cmap[string,cmap[string,cint32_t]]]] c_items):
        __fbthrift_inst = <Map__string_Map__string_Map__string_i32>Map__string_Map__string_Map__string_i32.__new__(Map__string_Map__string_Map__string_i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_Map__string_Map__string_i32 self):
        cdef shared_ptr[cmap[string,cmap[string,cmap[string,cint32_t]]]] cpp_obj = make_shared[cmap[string,cmap[string,cmap[string,cint32_t]]]](
            deref(self._cpp_obj)
        )
        return Map__string_Map__string_Map__string_i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cmap[string,cmap[string,cint32_t]]]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cmap[string,cmap[string,cint32_t]]]] c_inst = make_shared[cmap[string,cmap[string,cmap[string,cint32_t]]]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if item is None:
                    raise TypeError("None is not of type _typing.Mapping[str, _typing.Mapping[str, int]]")
                if not isinstance(item, Map__string_Map__string_i32):
                    item = Map__string_Map__string_i32(item)

                deref(c_inst)[key.encode('UTF-8')] = deref((<Map__string_Map__string_i32>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[cmap[string,cmap[string,cint32_t]]] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return Map__string_Map__string_i32.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]] itr = __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]] itr = __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]](self._cpp_obj)
        cdef shared_ptr[cmap[string,cmap[string,cint32_t]]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield Map__string_Map__string_i32.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]] itr = __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]](self._cpp_obj)
        cdef string ckey
        cdef shared_ptr[cmap[string,cmap[string,cint32_t]]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), Map__string_Map__string_i32.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_Map__string_Map__string_i32()


Mapping.register(Map__string_Map__string_Map__string_i32)

@__cython.auto_pickle(False)
cdef class List__Set__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Set__i32):
            self._cpp_obj = (<List__Set__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__Set__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cset[cint32_t]]] c_items):
        __fbthrift_inst = <List__Set__i32>List__Set__i32.__new__(List__Set__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Set__i32 self):
        cdef shared_ptr[vector[cset[cint32_t]]] cpp_obj = make_shared[vector[cset[cint32_t]]](
            deref(self._cpp_obj)
        )
        return List__Set__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cset[cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cset[cint32_t]]] c_inst = make_shared[vector[cset[cint32_t]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.AbstractSet[int]")
                if not isinstance(item, Set__i32):
                    item = Set__i32(item)
                deref(c_inst).push_back(deref((<Set__i32>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Set__i32.create(
            __list_slice[vector[cset[cint32_t]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cset[cint32_t]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return Set__i32.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, Set__i32):
            return item
        try:
            return Set__i32(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cset[cint32_t] citem = deref((<Set__i32>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cset[cint32_t]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cset[cint32_t] citem = deref((<Set__i32>item)._cpp_obj)
        return __list_count[vector[cset[cint32_t]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Set__i32()


Sequence.register(List__Set__i32)

@__cython.auto_pickle(False)
cdef class Map__string_List__i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_List__i32):
            self._cpp_obj = (<Map__string_List__i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,vector[cint32_t]]] c_items):
        __fbthrift_inst = <Map__string_List__i32>Map__string_List__i32.__new__(Map__string_List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_List__i32 self):
        cdef shared_ptr[cmap[string,vector[cint32_t]]] cpp_obj = make_shared[cmap[string,vector[cint32_t]]](
            deref(self._cpp_obj)
        )
        return Map__string_List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,vector[cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,vector[cint32_t]]] c_inst = make_shared[cmap[string,vector[cint32_t]]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if item is None:
                    raise TypeError("None is not of type _typing.Sequence[int]")
                if not isinstance(item, List__i32):
                    item = List__i32(item)

                deref(c_inst)[key.encode('UTF-8')] = deref((<List__i32>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[vector[cint32_t]] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return List__i32.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,vector[cint32_t]]] itr = __map_iter[cmap[string,vector[cint32_t]]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,vector[cint32_t]]] itr = __map_iter[cmap[string,vector[cint32_t]]](self._cpp_obj)
        cdef shared_ptr[vector[cint32_t]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield List__i32.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,vector[cint32_t]]] itr = __map_iter[cmap[string,vector[cint32_t]]](self._cpp_obj)
        cdef string ckey
        cdef shared_ptr[vector[cint32_t]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), List__i32.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_List__i32()


Mapping.register(Map__string_List__i32)

@__cython.auto_pickle(False)
cdef class Set__bool(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__bool):
            self._cpp_obj = (<Set__bool> items)._cpp_obj
        else:
            self._cpp_obj = Set__bool._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cbool]] c_items):
        __fbthrift_inst = <Set__bool>Set__bool.__new__(Set__bool)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__bool self):
        cdef shared_ptr[cset[cbool]] cpp_obj = make_shared[cset[cbool]](
            deref(self._cpp_obj)
        )
        return Set__bool.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cbool]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cbool]] c_inst = make_shared[cset[cbool]]()
        if items is not None:
            for item in items:
                if not isinstance(item, bool):
                    raise TypeError(f"{item!r} is not of type bool")
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, bool):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cbool]] itr = __set_iter[cset[cbool]](self._cpp_obj)
        cdef cbool citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield citem

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__bool):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__bool> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__bool):
            other = Set__bool(other)
        cdef shared_ptr[cset[cbool]] result
        return Set__bool.create(__set_op[cset[cbool]](
            self._cpp_obj,
            (<Set__bool>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__bool()


Set.register(Set__bool)

@__cython.auto_pickle(False)
cdef class Set__Set__bool(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__Set__bool):
            self._cpp_obj = (<Set__Set__bool> items)._cpp_obj
        else:
            self._cpp_obj = Set__Set__bool._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cset[cbool]]] c_items):
        __fbthrift_inst = <Set__Set__bool>Set__Set__bool.__new__(Set__Set__bool)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__Set__bool self):
        cdef shared_ptr[cset[cset[cbool]]] cpp_obj = make_shared[cset[cset[cbool]]](
            deref(self._cpp_obj)
        )
        return Set__Set__bool.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cset[cbool]]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cset[cbool]]] c_inst = make_shared[cset[cset[cbool]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of type _typing.AbstractSet[bool]")
                if not isinstance(item, Set__bool):
                    item = Set__bool(item)
                deref(c_inst).insert(deref((<Set__bool>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, Set__bool):
                item = Set__bool(item)
        except Exception:
            return False
        if not isinstance(item, Set__bool):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<Set__bool>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cset[cbool]]] itr = __set_iter[cset[cset[cbool]]](self._cpp_obj)
        cdef shared_ptr[cset[cbool]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield Set__bool.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__Set__bool):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__Set__bool> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__Set__bool):
            other = Set__Set__bool(other)
        cdef shared_ptr[cset[cset[cbool]]] result
        return Set__Set__bool.create(__set_op[cset[cset[cbool]]](
            self._cpp_obj,
            (<Set__Set__bool>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__Set__bool()


Set.register(Set__Set__bool)

@__cython.auto_pickle(False)
cdef class Set__Set__Set__bool(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__Set__Set__bool):
            self._cpp_obj = (<Set__Set__Set__bool> items)._cpp_obj
        else:
            self._cpp_obj = Set__Set__Set__bool._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cset[cset[cbool]]]] c_items):
        __fbthrift_inst = <Set__Set__Set__bool>Set__Set__Set__bool.__new__(Set__Set__Set__bool)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__Set__Set__bool self):
        cdef shared_ptr[cset[cset[cset[cbool]]]] cpp_obj = make_shared[cset[cset[cset[cbool]]]](
            deref(self._cpp_obj)
        )
        return Set__Set__Set__bool.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cset[cset[cbool]]]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cset[cset[cbool]]]] c_inst = make_shared[cset[cset[cset[cbool]]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of type _typing.AbstractSet[_typing.AbstractSet[bool]]")
                if not isinstance(item, Set__Set__bool):
                    item = Set__Set__bool(item)
                deref(c_inst).insert(deref((<Set__Set__bool>item)._cpp_obj))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, Set__Set__bool):
                item = Set__Set__bool(item)
        except Exception:
            return False
        if not isinstance(item, Set__Set__bool):
            return False
        return pbool(deref(self._cpp_obj).count(deref((<Set__Set__bool>item)._cpp_obj)))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cset[cset[cbool]]]] itr = __set_iter[cset[cset[cset[cbool]]]](self._cpp_obj)
        cdef shared_ptr[cset[cset[cbool]]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield Set__Set__bool.create(citem)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__Set__Set__bool):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__Set__Set__bool> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__Set__Set__bool):
            other = Set__Set__Set__bool(other)
        cdef shared_ptr[cset[cset[cset[cbool]]]] result
        return Set__Set__Set__bool.create(__set_op[cset[cset[cset[cbool]]]](
            self._cpp_obj,
            (<Set__Set__Set__bool>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__Set__Set__bool()


Set.register(Set__Set__Set__bool)

@__cython.auto_pickle(False)
cdef class Map__Bar__double_Baz__i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__Bar__double_Baz__i32):
            self._cpp_obj = (<Map__Bar__double_Baz__i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__Bar__double_Baz__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[Bar,Baz]] c_items):
        __fbthrift_inst = <Map__Bar__double_Baz__i32>Map__Bar__double_Baz__i32.__new__(Map__Bar__double_Baz__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__Bar__double_Baz__i32 self):
        cdef shared_ptr[cmap[Bar,Baz]] cpp_obj = make_shared[cmap[Bar,Baz]](
            deref(self._cpp_obj)
        )
        return Map__Bar__double_Baz__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[Bar,Baz]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[Bar,Baz]] c_inst = make_shared[cmap[Bar,Baz]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, (float, int)):
                    raise TypeError(f"{key!r} is not of type float")
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, float):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef Bar ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef Baz citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[Bar,Baz]] itr = __map_iter[cmap[Bar,Baz]](self._cpp_obj)
        cdef Bar citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef Bar ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[Bar,Baz]] itr = __map_iter[cmap[Bar,Baz]](self._cpp_obj)
        cdef Baz citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[Bar,Baz]] itr = __map_iter[cmap[Bar,Baz]](self._cpp_obj)
        cdef Bar ckey = 0
        cdef Baz citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__Bar__double_Baz__i32()


Mapping.register(Map__Bar__double_Baz__i32)

@__cython.auto_pickle(False)
cdef class folly_small_vector_int64_t_8__List__i64(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, folly_small_vector_int64_t_8__List__i64):
            self._cpp_obj = (<folly_small_vector_int64_t_8__List__i64> items)._cpp_obj
        else:
            self._cpp_obj = folly_small_vector_int64_t_8__List__i64._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[folly_small_vector_int64_t_8] c_items):
        __fbthrift_inst = <folly_small_vector_int64_t_8__List__i64>folly_small_vector_int64_t_8__List__i64.__new__(folly_small_vector_int64_t_8__List__i64)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_small_vector_int64_t_8__List__i64 self):
        cdef shared_ptr[folly_small_vector_int64_t_8] cpp_obj = make_shared[folly_small_vector_int64_t_8](
            deref(self._cpp_obj)
        )
        return folly_small_vector_int64_t_8__List__i64.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_small_vector_int64_t_8] _make_instance(object items) except *:
        cdef shared_ptr[folly_small_vector_int64_t_8] c_inst = make_shared[folly_small_vector_int64_t_8]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint64_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return folly_small_vector_int64_t_8__List__i64.create(
            __list_slice[folly_small_vector_int64_t_8](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint64_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint64_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[folly_small_vector_int64_t_8](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint64_t citem = item
        return __list_count[folly_small_vector_int64_t_8](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_small_vector_int64_t_8__List__i64()


Sequence.register(folly_small_vector_int64_t_8__List__i64)

@__cython.auto_pickle(False)
cdef class folly_sorted_vector_set_std_string__Set__string(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, folly_sorted_vector_set_std_string__Set__string):
            self._cpp_obj = (<folly_sorted_vector_set_std_string__Set__string> items)._cpp_obj
        else:
            self._cpp_obj = folly_sorted_vector_set_std_string__Set__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_set_std_string] c_items):
        __fbthrift_inst = <folly_sorted_vector_set_std_string__Set__string>folly_sorted_vector_set_std_string__Set__string.__new__(folly_sorted_vector_set_std_string__Set__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_sorted_vector_set_std_string__Set__string self):
        cdef shared_ptr[folly_sorted_vector_set_std_string] cpp_obj = make_shared[folly_sorted_vector_set_std_string](
            deref(self._cpp_obj)
        )
        return folly_sorted_vector_set_std_string__Set__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_sorted_vector_set_std_string] _make_instance(object items) except *:
        cdef shared_ptr[folly_sorted_vector_set_std_string] c_inst = make_shared[folly_sorted_vector_set_std_string]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).insert(item.encode('UTF-8'))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, str):
            return False
        return pbool(deref(self._cpp_obj).count(item.encode('UTF-8')))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[folly_sorted_vector_set_std_string] itr = __set_iter[folly_sorted_vector_set_std_string](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, folly_sorted_vector_set_std_string__Set__string):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<folly_sorted_vector_set_std_string__Set__string> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, folly_sorted_vector_set_std_string__Set__string):
            other = folly_sorted_vector_set_std_string__Set__string(other)
        cdef shared_ptr[folly_sorted_vector_set_std_string] result
        return folly_sorted_vector_set_std_string__Set__string.create(__set_op[folly_sorted_vector_set_std_string](
            self._cpp_obj,
            (<folly_sorted_vector_set_std_string__Set__string>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_sorted_vector_set_std_string__Set__string()


Set.register(folly_sorted_vector_set_std_string__Set__string)

@__cython.auto_pickle(False)
cdef class FakeMap__Map__i64_double(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, FakeMap__Map__i64_double):
            self._cpp_obj = (<FakeMap__Map__i64_double> items)._cpp_obj
        else:
            self._cpp_obj = FakeMap__Map__i64_double._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[FakeMap] c_items):
        __fbthrift_inst = <FakeMap__Map__i64_double>FakeMap__Map__i64_double.__new__(FakeMap__Map__i64_double)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(FakeMap__Map__i64_double self):
        cdef shared_ptr[FakeMap] cpp_obj = make_shared[FakeMap](
            deref(self._cpp_obj)
        )
        return FakeMap__Map__i64_double.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[FakeMap] _make_instance(object items) except *:
        cdef shared_ptr[FakeMap] c_inst = make_shared[FakeMap]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint64_t> key
                if not isinstance(item, (float, int)):
                    raise TypeError(f"{item!r} is not of type float")

                deref(c_inst)[key] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint64_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef double citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[FakeMap] itr = __map_iter[FakeMap](self._cpp_obj)
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint64_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[FakeMap] itr = __map_iter[FakeMap](self._cpp_obj)
        cdef double citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[FakeMap] itr = __map_iter[FakeMap](self._cpp_obj)
        cdef cint64_t ckey = 0
        cdef double citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__FakeMap__Map__i64_double()


Mapping.register(FakeMap__Map__i64_double)

@__cython.auto_pickle(False)
cdef class std_unordered_map_std_string_containerStruct__Map__string_containerStruct(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, std_unordered_map_std_string_containerStruct__Map__string_containerStruct):
            self._cpp_obj = (<std_unordered_map_std_string_containerStruct__Map__string_containerStruct> items)._cpp_obj
        else:
            self._cpp_obj = std_unordered_map_std_string_containerStruct__Map__string_containerStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[std_unordered_map_std_string_containerStruct] c_items):
        __fbthrift_inst = <std_unordered_map_std_string_containerStruct__Map__string_containerStruct>std_unordered_map_std_string_containerStruct__Map__string_containerStruct.__new__(std_unordered_map_std_string_containerStruct__Map__string_containerStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_unordered_map_std_string_containerStruct__Map__string_containerStruct self):
        cdef shared_ptr[std_unordered_map_std_string_containerStruct] cpp_obj = make_shared[std_unordered_map_std_string_containerStruct](
            deref(self._cpp_obj)
        )
        return std_unordered_map_std_string_containerStruct__Map__string_containerStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_unordered_map_std_string_containerStruct] _make_instance(object items) except *:
        cdef shared_ptr[std_unordered_map_std_string_containerStruct] c_inst = make_shared[std_unordered_map_std_string_containerStruct]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, containerStruct):
                    raise TypeError(f"{item!r} is not of type 'containerStruct'")

                deref(c_inst)[key.encode('UTF-8')] = deref((<containerStruct>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[ccontainerStruct] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return containerStruct.create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map_std_string_containerStruct] itr = __map_iter[std_unordered_map_std_string_containerStruct](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map_std_string_containerStruct] itr = __map_iter[std_unordered_map_std_string_containerStruct](self._cpp_obj)
        cdef shared_ptr[ccontainerStruct] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield containerStruct.create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map_std_string_containerStruct] itr = __map_iter[std_unordered_map_std_string_containerStruct](self._cpp_obj)
        cdef string ckey
        cdef shared_ptr[ccontainerStruct] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), containerStruct.create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_unordered_map_std_string_containerStruct__Map__string_containerStruct()


Mapping.register(std_unordered_map_std_string_containerStruct__Map__string_containerStruct)

@__cython.auto_pickle(False)
cdef class std_list__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, std_list__List__i32):
            self._cpp_obj = (<std_list__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = std_list__List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[std_list[cint32_t]] c_items):
        __fbthrift_inst = <std_list__List__i32>std_list__List__i32.__new__(std_list__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_list__List__i32 self):
        cdef shared_ptr[std_list[cint32_t]] cpp_obj = make_shared[std_list[cint32_t]](
            deref(self._cpp_obj)
        )
        return std_list__List__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_list[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[std_list[cint32_t]] c_inst = make_shared[std_list[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return std_list__List__i32.create(
            __list_slice[std_list[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[std_list[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[std_list[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_list__List__i32()


Sequence.register(std_list__List__i32)

@__cython.auto_pickle(False)
cdef class std_deque__List__string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, std_deque__List__string):
            self._cpp_obj = (<std_deque__List__string> items)._cpp_obj
        else:
            self._cpp_obj = std_deque__List__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[std_deque[string]] c_items):
        __fbthrift_inst = <std_deque__List__string>std_deque__List__string.__new__(std_deque__List__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_deque__List__string self):
        cdef shared_ptr[std_deque[string]] cpp_obj = make_shared[std_deque[string]](
            deref(self._cpp_obj)
        )
        return std_deque__List__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_deque[string]] _make_instance(object items) except *:
        cdef shared_ptr[std_deque[string]] c_inst = make_shared[std_deque[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).push_back(item.encode('UTF-8'))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return std_deque__List__string.create(
            __list_slice[std_deque[string]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef string citem
        __list_getitem(self._cpp_obj, index, citem)
        return bytes(citem).decode('UTF-8')

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, str):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef string citem = item.encode('UTF-8')
        cdef std_libcpp.optional[size_t] found = __list_index[std_deque[string]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef string citem = item.encode('UTF-8')
        return __list_count[std_deque[string]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_deque__List__string()


Sequence.register(std_deque__List__string)

@__cython.auto_pickle(False)
cdef class folly_sorted_vector_set__Set__string(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, folly_sorted_vector_set__Set__string):
            self._cpp_obj = (<folly_sorted_vector_set__Set__string> items)._cpp_obj
        else:
            self._cpp_obj = folly_sorted_vector_set__Set__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_set[string]] c_items):
        __fbthrift_inst = <folly_sorted_vector_set__Set__string>folly_sorted_vector_set__Set__string.__new__(folly_sorted_vector_set__Set__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_sorted_vector_set__Set__string self):
        cdef shared_ptr[folly_sorted_vector_set[string]] cpp_obj = make_shared[folly_sorted_vector_set[string]](
            deref(self._cpp_obj)
        )
        return folly_sorted_vector_set__Set__string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_sorted_vector_set[string]] _make_instance(object items) except *:
        cdef shared_ptr[folly_sorted_vector_set[string]] c_inst = make_shared[folly_sorted_vector_set[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).insert(item.encode('UTF-8'))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, str):
            return False
        return pbool(deref(self._cpp_obj).count(item.encode('UTF-8')))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[folly_sorted_vector_set[string]] itr = __set_iter[folly_sorted_vector_set[string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, folly_sorted_vector_set__Set__string):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<folly_sorted_vector_set__Set__string> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, folly_sorted_vector_set__Set__string):
            other = folly_sorted_vector_set__Set__string(other)
        cdef shared_ptr[folly_sorted_vector_set[string]] result
        return folly_sorted_vector_set__Set__string.create(__set_op[folly_sorted_vector_set[string]](
            self._cpp_obj,
            (<folly_sorted_vector_set__Set__string>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_sorted_vector_set__Set__string()


Set.register(folly_sorted_vector_set__Set__string)

@__cython.auto_pickle(False)
cdef class folly_sorted_vector_map__Map__i64_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, folly_sorted_vector_map__Map__i64_string):
            self._cpp_obj = (<folly_sorted_vector_map__Map__i64_string> items)._cpp_obj
        else:
            self._cpp_obj = folly_sorted_vector_map__Map__i64_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_map[cint64_t,string]] c_items):
        __fbthrift_inst = <folly_sorted_vector_map__Map__i64_string>folly_sorted_vector_map__Map__i64_string.__new__(folly_sorted_vector_map__Map__i64_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_sorted_vector_map__Map__i64_string self):
        cdef shared_ptr[folly_sorted_vector_map[cint64_t,string]] cpp_obj = make_shared[folly_sorted_vector_map[cint64_t,string]](
            deref(self._cpp_obj)
        )
        return folly_sorted_vector_map__Map__i64_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_sorted_vector_map[cint64_t,string]] _make_instance(object items) except *:
        cdef shared_ptr[folly_sorted_vector_map[cint64_t,string]] c_inst = make_shared[folly_sorted_vector_map[cint64_t,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint64_t> key
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint64_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[folly_sorted_vector_map[cint64_t,string]] itr = __map_iter[folly_sorted_vector_map[cint64_t,string]](self._cpp_obj)
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint64_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[folly_sorted_vector_map[cint64_t,string]] itr = __map_iter[folly_sorted_vector_map[cint64_t,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[folly_sorted_vector_map[cint64_t,string]] itr = __map_iter[folly_sorted_vector_map[cint64_t,string]](self._cpp_obj)
        cdef cint64_t ckey = 0
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_sorted_vector_map__Map__i64_string()


Mapping.register(folly_sorted_vector_map__Map__i64_string)

@__cython.auto_pickle(False)
cdef class List__Bar__double(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Bar__double):
            self._cpp_obj = (<List__Bar__double> items)._cpp_obj
        else:
            self._cpp_obj = List__Bar__double._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[Bar]] c_items):
        __fbthrift_inst = <List__Bar__double>List__Bar__double.__new__(List__Bar__double)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Bar__double self):
        cdef shared_ptr[vector[Bar]] cpp_obj = make_shared[vector[Bar]](
            deref(self._cpp_obj)
        )
        return List__Bar__double.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[Bar]] _make_instance(object items) except *:
        cdef shared_ptr[vector[Bar]] c_inst = make_shared[vector[Bar]]()
        if items is not None:
            for item in items:
                if not isinstance(item, (float, int)):
                    raise TypeError(f"{item!r} is not of type float")
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Bar__double.create(
            __list_slice[vector[Bar]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef Bar citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, float):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef Bar citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[Bar]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef Bar citem = item
        return __list_count[vector[Bar]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Bar__double()


Sequence.register(List__Bar__double)

@__cython.auto_pickle(False)
cdef class Set__Baz__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__Baz__i32):
            self._cpp_obj = (<Set__Baz__i32> items)._cpp_obj
        else:
            self._cpp_obj = Set__Baz__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[Baz]] c_items):
        __fbthrift_inst = <Set__Baz__i32>Set__Baz__i32.__new__(Set__Baz__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__Baz__i32 self):
        cdef shared_ptr[cset[Baz]] cpp_obj = make_shared[cset[Baz]](
            deref(self._cpp_obj)
        )
        return Set__Baz__i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[Baz]] _make_instance(object items) except *:
        cdef shared_ptr[cset[Baz]] c_inst = make_shared[cset[Baz]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[Baz]] itr = __set_iter[cset[Baz]](self._cpp_obj)
        cdef Baz citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield citem

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__Baz__i32):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__Baz__i32> other)._cpp_obj,
                op,
            )
        return self.__py_richcmp(other, op)

    cdef __do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__Baz__i32):
            other = Set__Baz__i32(other)
        cdef shared_ptr[cset[Baz]] result
        return Set__Baz__i32.create(__set_op[cset[Baz]](
            self._cpp_obj,
            (<Set__Baz__i32>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__Baz__i32()


Set.register(Set__Baz__i32)

@__cython.auto_pickle(False)
cdef class Map__string_folly_IOBuf__binary(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_folly_IOBuf__binary):
            self._cpp_obj = (<Map__string_folly_IOBuf__binary> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_folly_IOBuf__binary._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,__iobuf.cIOBuf]] c_items):
        __fbthrift_inst = <Map__string_folly_IOBuf__binary>Map__string_folly_IOBuf__binary.__new__(Map__string_folly_IOBuf__binary)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_folly_IOBuf__binary self):
        cdef shared_ptr[cmap[string,__iobuf.cIOBuf]] cpp_obj = make_shared[cmap[string,__iobuf.cIOBuf]](
            deref(self._cpp_obj)
        )
        return Map__string_folly_IOBuf__binary.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,__iobuf.cIOBuf]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,__iobuf.cIOBuf]] c_inst = make_shared[cmap[string,__iobuf.cIOBuf]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, __iobuf.IOBuf):
                    raise TypeError(f"{item!r} is not of type __iobuf.IOBuf")

                deref(c_inst)[key.encode('UTF-8')] = deref((<__iobuf.IOBuf?>item).c_clone())
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[__iobuf.cIOBuf] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return __iobuf.IOBuf.create(citem.get(), self)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,__iobuf.cIOBuf]] itr = __map_iter[cmap[string,__iobuf.cIOBuf]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,__iobuf.cIOBuf]] itr = __map_iter[cmap[string,__iobuf.cIOBuf]](self._cpp_obj)
        cdef shared_ptr[__iobuf.cIOBuf] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield __iobuf.IOBuf.create(citem.get(), self)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,__iobuf.cIOBuf]] itr = __map_iter[cmap[string,__iobuf.cIOBuf]](self._cpp_obj)
        cdef string ckey
        cdef shared_ptr[__iobuf.cIOBuf] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), __iobuf.IOBuf.create(citem.get(), self))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_folly_IOBuf__binary()


Mapping.register(Map__string_folly_IOBuf__binary)

@__cython.auto_pickle(False)
cdef class Map__string_std_unique_ptr_folly_IOBuf__binary(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_std_unique_ptr_folly_IOBuf__binary):
            self._cpp_obj = (<Map__string_std_unique_ptr_folly_IOBuf__binary> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_std_unique_ptr_folly_IOBuf__binary._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,unique_ptr[__iobuf.cIOBuf]]] c_items):
        __fbthrift_inst = <Map__string_std_unique_ptr_folly_IOBuf__binary>Map__string_std_unique_ptr_folly_IOBuf__binary.__new__(Map__string_std_unique_ptr_folly_IOBuf__binary)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_std_unique_ptr_folly_IOBuf__binary self):
        cdef shared_ptr[cmap[string,unique_ptr[__iobuf.cIOBuf]]] cpp_obj = make_shared[cmap[string,unique_ptr[__iobuf.cIOBuf]]](
            deref(self._cpp_obj)
        )
        return Map__string_std_unique_ptr_folly_IOBuf__binary.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,unique_ptr[__iobuf.cIOBuf]]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,unique_ptr[__iobuf.cIOBuf]]] c_inst = make_shared[cmap[string,unique_ptr[__iobuf.cIOBuf]]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, __iobuf.IOBuf):
                    raise TypeError(f"{item!r} is not of type __iobuf.IOBuf")

                deref(c_inst)[key.encode('UTF-8')] = (<__iobuf.IOBuf?>item).c_clone()
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[unique_ptr[__iobuf.cIOBuf]] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return __iobuf.IOBuf.create(citem.get().get(), self)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,unique_ptr[__iobuf.cIOBuf]]] itr = __map_iter[cmap[string,unique_ptr[__iobuf.cIOBuf]]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,unique_ptr[__iobuf.cIOBuf]]] itr = __map_iter[cmap[string,unique_ptr[__iobuf.cIOBuf]]](self._cpp_obj)
        cdef shared_ptr[unique_ptr[__iobuf.cIOBuf]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield __iobuf.IOBuf.create(citem.get().get(), self)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,unique_ptr[__iobuf.cIOBuf]]] itr = __map_iter[cmap[string,unique_ptr[__iobuf.cIOBuf]]](self._cpp_obj)
        cdef string ckey
        cdef shared_ptr[unique_ptr[__iobuf.cIOBuf]] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), __iobuf.IOBuf.create(citem.get().get(), self))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_std_unique_ptr_folly_IOBuf__binary()


Mapping.register(Map__string_std_unique_ptr_folly_IOBuf__binary)

@__cython.auto_pickle(False)
cdef class Map__i32_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_string):
            self._cpp_obj = (<Map__i32_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cint32_t,string]] c_items):
        __fbthrift_inst = <Map__i32_string>Map__i32_string.__new__(Map__i32_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_string self):
        cdef shared_ptr[cmap[cint32_t,string]] cpp_obj = make_shared[cmap[cint32_t,string]](
            deref(self._cpp_obj)
        )
        return Map__i32_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,string]] c_inst = make_shared[cmap[cint32_t,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,string]] itr = __map_iter[cmap[cint32_t,string]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,string]] itr = __map_iter[cmap[cint32_t,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,string]] itr = __map_iter[cmap[cint32_t,string]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_string()


Mapping.register(Map__i32_string)

@__cython.auto_pickle(False)
cdef class List__Map__string_i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Map__string_i32):
            self._cpp_obj = (<List__Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = List__Map__string_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cmap[string,cint32_t]]] c_items):
        __fbthrift_inst = <List__Map__string_i32>List__Map__string_i32.__new__(List__Map__string_i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Map__string_i32 self):
        cdef shared_ptr[vector[cmap[string,cint32_t]]] cpp_obj = make_shared[vector[cmap[string,cint32_t]]](
            deref(self._cpp_obj)
        )
        return List__Map__string_i32.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cmap[string,cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cmap[string,cint32_t]]] c_inst = make_shared[vector[cmap[string,cint32_t]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Mapping[str, int]")
                if not isinstance(item, Map__string_i32):
                    item = Map__string_i32(item)
                deref(c_inst).push_back(deref((<Map__string_i32>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Map__string_i32.create(
            __list_slice[vector[cmap[string,cint32_t]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cmap[string,cint32_t]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return Map__string_i32.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, Map__string_i32):
            return item
        try:
            return Map__string_i32(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cmap[string,cint32_t] citem = deref((<Map__string_i32>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cmap[string,cint32_t]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cmap[string,cint32_t] citem = deref((<Map__string_i32>item)._cpp_obj)
        return __list_count[vector[cmap[string,cint32_t]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Map__string_i32()


Sequence.register(List__Map__string_i32)

@__cython.auto_pickle(False)
cdef class Map__i16_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i16_string):
            self._cpp_obj = (<Map__i16_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__i16_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cint16_t,string]] c_items):
        __fbthrift_inst = <Map__i16_string>Map__i16_string.__new__(Map__i16_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__i16_string self):
        cdef shared_ptr[cmap[cint16_t,string]] cpp_obj = make_shared[cmap[cint16_t,string]](
            deref(self._cpp_obj)
        )
        return Map__i16_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint16_t,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint16_t,string]] c_inst = make_shared[cmap[cint16_t,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint16_t> key
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint16_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cint16_t,string]] itr = __map_iter[cmap[cint16_t,string]](self._cpp_obj)
        cdef cint16_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint16_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cint16_t,string]] itr = __map_iter[cmap[cint16_t,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cint16_t,string]] itr = __map_iter[cmap[cint16_t,string]](self._cpp_obj)
        cdef cint16_t ckey = 0
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i16_string()


Mapping.register(Map__i16_string)

@__cython.auto_pickle(False)
cdef class List__Map__i16_string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Map__i16_string):
            self._cpp_obj = (<List__Map__i16_string> items)._cpp_obj
        else:
            self._cpp_obj = List__Map__i16_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cmap[cint16_t,string]]] c_items):
        __fbthrift_inst = <List__Map__i16_string>List__Map__i16_string.__new__(List__Map__i16_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__Map__i16_string self):
        cdef shared_ptr[vector[cmap[cint16_t,string]]] cpp_obj = make_shared[vector[cmap[cint16_t,string]]](
            deref(self._cpp_obj)
        )
        return List__Map__i16_string.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cmap[cint16_t,string]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cmap[cint16_t,string]]] c_inst = make_shared[vector[cmap[cint16_t,string]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Mapping[int, str]")
                if not isinstance(item, Map__i16_string):
                    item = Map__i16_string(item)
                deref(c_inst).push_back(deref((<Map__i16_string>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__Map__i16_string.create(
            __list_slice[vector[cmap[cint16_t,string]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cmap[cint16_t,string]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return Map__i16_string.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, Map__i16_string):
            return item
        try:
            return Map__i16_string(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cmap[cint16_t,string] citem = deref((<Map__i16_string>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cmap[cint16_t,string]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cmap[cint16_t,string] citem = deref((<Map__i16_string>item)._cpp_obj)
        return __list_count[vector[cmap[cint16_t,string]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Map__i16_string()


Sequence.register(List__Map__i16_string)

@__cython.auto_pickle(False)
cdef class List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__MyStruct):
            self._cpp_obj = (<List__MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cMyStruct]] c_items):
        __fbthrift_inst = <List__MyStruct>List__MyStruct.__new__(List__MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__MyStruct self):
        cdef shared_ptr[vector[cMyStruct]] cpp_obj = make_shared[vector[cMyStruct]](
            deref(self._cpp_obj)
        )
        return List__MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cMyStruct]] c_inst = make_shared[vector[cMyStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, MyStruct):
                    raise TypeError(f"{item!r} is not of type 'MyStruct'")
                deref(c_inst).push_back(deref((<MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__MyStruct.create(
            __list_slice[vector[cMyStruct]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cMyStruct] citem
        __list_getitem(self._cpp_obj, index, citem)
        return MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, MyStruct):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cMyStruct citem = deref((<MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cMyStruct]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cMyStruct citem = deref((<MyStruct>item)._cpp_obj)
        return __list_count[vector[cMyStruct]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__MyStruct()


Sequence.register(List__MyStruct)

aBool = True
aByte = 1
a16BitInt = 12
a32BitInt = 123
a64BitInt = 1234
aFloat = 0.1
aDouble = 0.12
aString = caString().decode('UTF-8')
aList = List__bool.create(constant_shared_ptr(caList()))
anEmptyMap = Map__string_i32.create(constant_shared_ptr(canEmptyMap()))
aMap = Map__i32_string.create(constant_shared_ptr(caMap()))
aSet = Set__string.create(constant_shared_ptr(caSet()))
aListOfLists = List__List__i32.create(constant_shared_ptr(caListOfLists()))
states = List__Map__string_i32.create(constant_shared_ptr(cstates()))
AConstList = List__MyEnumA.create(constant_shared_ptr(cAConstList()))
AnIntegerEnum2 = 2
AnIntegerEnum2 = List__i32.create(constant_shared_ptr(cAnIntegerEnum2()))
constEnumA = MyEnumA(<int> (cconstEnumA()))
constEnumB = MyEnumA(<int> (cconstEnumB()))
AStruct = _includes_types.AStruct
simpleTypeDef = int
containerTypeDef = Map__i16_string
complexContainerTypeDef = List__Map__i16_string
unionTypeDef = Set__SimpleUnion
structTypeDef = List__MyStruct
complexStructTypeDef = List__Map__Empty_MyStruct
mostComplexTypeDef = List__List__Map__Empty_MyStruct
IndirectionA = int
IndirectionC = int
IndirectionB = float
IndirectionD = str
HashedTypedef = Map__MyEnumA_string
CppFakeI32 = int
FollySmallVectorI64 = folly_small_vector_int64_t_8__List__i64
SortedVectorSetString = folly_sorted_vector_set_std_string__Set__string
FakeMap = FakeMap__Map__i64_double
UnorderedMapStruct = std_unordered_map_std_string_containerStruct__Map__string_containerStruct
std_list = std_list__List__i32
std_deque = std_deque__List__string
folly_set = folly_sorted_vector_set__Set__string
folly_map = folly_sorted_vector_map__Map__i64_string
IOBuf = __iobuf.IOBuf
IOBufPtr = __iobuf.IOBuf
