#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport cTApplicationException
from thrift.py3.server cimport ServiceInterface, RequestContext, Cpp2RequestContext
from thrift.py3.server import RequestContext
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)

cimport folly.futures
from folly.executor cimport get_executor

cimport module.types
import module.types
import includes.types
cimport includes.types

import asyncio
import functools
import sys
import traceback

from module.services_wrapper cimport cEmptyServiceInterface
from module.services_wrapper cimport cReturnServiceInterface
from module.services_wrapper cimport cParamServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[cFollyUnit] move(
        cFollyPromise[cFollyUnit])
    cdef cFollyPromise[cbool] move(
        cFollyPromise[cbool])
    cdef cFollyPromise[int16_t] move(
        cFollyPromise[int16_t])
    cdef cFollyPromise[int32_t] move(
        cFollyPromise[int32_t])
    cdef cFollyPromise[int64_t] move(
        cFollyPromise[int64_t])
    cdef cFollyPromise[float] move(
        cFollyPromise[float])
    cdef cFollyPromise[double] move(
        cFollyPromise[double])
    cdef cFollyPromise[unique_ptr[cmap[string,int64_t]]] move(
        cFollyPromise[unique_ptr[cmap[string,int64_t]]])
    cdef cFollyPromise[unique_ptr[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]] move(
        cFollyPromise[unique_ptr[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]])
    cdef cFollyPromise[unique_ptr[vector[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]]] move(
        cFollyPromise[unique_ptr[vector[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]]])
    cdef cFollyPromise[module.types.cMyEnumA] move(
        cFollyPromise[module.types.cMyEnumA])
    cdef cFollyPromise[unique_ptr[vector[module.types.cMyEnumA]]] move(
        cFollyPromise[unique_ptr[vector[module.types.cMyEnumA]]])
    cdef cFollyPromise[unique_ptr[module.types.cMyStruct]] move(
        cFollyPromise[unique_ptr[module.types.cMyStruct]])
    cdef cFollyPromise[unique_ptr[cset[module.types.cMyStruct]]] move(
        cFollyPromise[unique_ptr[cset[module.types.cMyStruct]]])
    cdef cFollyPromise[unique_ptr[module.types.cComplexUnion]] move(
        cFollyPromise[unique_ptr[module.types.cComplexUnion]])
    cdef cFollyPromise[unique_ptr[vector[module.types.cComplexUnion]]] move(
        cFollyPromise[unique_ptr[vector[module.types.cComplexUnion]]])
    cdef cFollyPromise[unique_ptr[vector[cbool]]] move(
        cFollyPromise[unique_ptr[vector[cbool]]])
    cdef cFollyPromise[unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]]] move(
        cFollyPromise[unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]]])
    cdef cFollyPromise[unique_ptr[vector[int32_t]]] move(
        cFollyPromise[unique_ptr[vector[int32_t]]])

cdef class Promise_void:
    cdef cFollyPromise[cFollyUnit] cPromise

    @staticmethod
    cdef create(cFollyPromise[cFollyUnit] cPromise):
        inst = <Promise_void>Promise_void.__new__(Promise_void)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_bool:
    cdef cFollyPromise[cbool] cPromise

    @staticmethod
    cdef create(cFollyPromise[cbool] cPromise):
        inst = <Promise_bool>Promise_bool.__new__(Promise_bool)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i16:
    cdef cFollyPromise[int16_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int16_t] cPromise):
        inst = <Promise_i16>Promise_i16.__new__(Promise_i16)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i32:
    cdef cFollyPromise[int32_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int32_t] cPromise):
        inst = <Promise_i32>Promise_i32.__new__(Promise_i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i64:
    cdef cFollyPromise[int64_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int64_t] cPromise):
        inst = <Promise_i64>Promise_i64.__new__(Promise_i64)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_float:
    cdef cFollyPromise[float] cPromise

    @staticmethod
    cdef create(cFollyPromise[float] cPromise):
        inst = <Promise_float>Promise_float.__new__(Promise_float)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_double:
    cdef cFollyPromise[double] cPromise

    @staticmethod
    cdef create(cFollyPromise[double] cPromise):
        inst = <Promise_double>Promise_double.__new__(Promise_double)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_string:
    cdef cFollyPromise[unique_ptr[string]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[string]] cPromise):
        inst = <Promise_string>Promise_string.__new__(Promise_string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_binary:
    cdef cFollyPromise[unique_ptr[string]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[string]] cPromise):
        inst = <Promise_binary>Promise_binary.__new__(Promise_binary)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Map__string_i64:
    cdef cFollyPromise[unique_ptr[cmap[string,int64_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cmap[string,int64_t]]] cPromise):
        inst = <Promise_Map__string_i64>Promise_Map__string_i64.__new__(Promise_Map__string_i64)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__Map__Empty_MyStruct:
    cdef cFollyPromise[unique_ptr[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]] cPromise):
        inst = <Promise_List__Map__Empty_MyStruct>Promise_List__Map__Empty_MyStruct.__new__(Promise_List__Map__Empty_MyStruct)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__List__List__Map__Empty_MyStruct:
    cdef cFollyPromise[unique_ptr[vector[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]]] cPromise):
        inst = <Promise_List__List__List__Map__Empty_MyStruct>Promise_List__List__List__Map__Empty_MyStruct.__new__(Promise_List__List__List__Map__Empty_MyStruct)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_MyEnumA:
    cdef cFollyPromise[module.types.cMyEnumA] cPromise

    @staticmethod
    cdef create(cFollyPromise[module.types.cMyEnumA] cPromise):
        inst = <Promise_MyEnumA>Promise_MyEnumA.__new__(Promise_MyEnumA)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__MyEnumA:
    cdef cFollyPromise[unique_ptr[vector[module.types.cMyEnumA]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[module.types.cMyEnumA]]] cPromise):
        inst = <Promise_List__MyEnumA>Promise_List__MyEnumA.__new__(Promise_List__MyEnumA)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_MyStruct:
    cdef cFollyPromise[unique_ptr[module.types.cMyStruct]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[module.types.cMyStruct]] cPromise):
        inst = <Promise_MyStruct>Promise_MyStruct.__new__(Promise_MyStruct)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__MyStruct:
    cdef cFollyPromise[unique_ptr[cset[module.types.cMyStruct]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[module.types.cMyStruct]]] cPromise):
        inst = <Promise_Set__MyStruct>Promise_Set__MyStruct.__new__(Promise_Set__MyStruct)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_ComplexUnion:
    cdef cFollyPromise[unique_ptr[module.types.cComplexUnion]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[module.types.cComplexUnion]] cPromise):
        inst = <Promise_ComplexUnion>Promise_ComplexUnion.__new__(Promise_ComplexUnion)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__ComplexUnion:
    cdef cFollyPromise[unique_ptr[vector[module.types.cComplexUnion]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[module.types.cComplexUnion]]] cPromise):
        inst = <Promise_List__ComplexUnion>Promise_List__ComplexUnion.__new__(Promise_List__ComplexUnion)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__bool:
    cdef cFollyPromise[unique_ptr[vector[cbool]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[cbool]]] cPromise):
        inst = <Promise_List__bool>Promise_List__bool.__new__(Promise_List__bool)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Map__Set__List__i32_Map__List__Set__string_string:
    cdef cFollyPromise[unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]]] cPromise):
        inst = <Promise_Map__Set__List__i32_Map__List__Set__string_string>Promise_Map__Set__List__i32_Map__List__Set__string_string.__new__(Promise_Map__Set__List__i32_Map__List__Set__string_string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__i32:
    cdef cFollyPromise[unique_ptr[vector[int32_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[int32_t]]] cPromise):
        inst = <Promise_List__i32>Promise_List__i32.__new__(Promise_List__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class EmptyServiceInterface(
    ServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cEmptyServiceInterface(
            <PyObject *> self,
            get_executor()
        )

cdef class ReturnServiceInterface(
    ServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cReturnServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    async def noReturn(
            self):
        raise NotImplementedError("async def noReturn is not implemented")


    async def boolReturn(
            self):
        raise NotImplementedError("async def boolReturn is not implemented")


    async def i16Return(
            self):
        raise NotImplementedError("async def i16Return is not implemented")


    async def i32Return(
            self):
        raise NotImplementedError("async def i32Return is not implemented")


    async def i64Return(
            self):
        raise NotImplementedError("async def i64Return is not implemented")


    async def floatReturn(
            self):
        raise NotImplementedError("async def floatReturn is not implemented")


    async def doubleReturn(
            self):
        raise NotImplementedError("async def doubleReturn is not implemented")


    async def stringReturn(
            self):
        raise NotImplementedError("async def stringReturn is not implemented")


    async def binaryReturn(
            self):
        raise NotImplementedError("async def binaryReturn is not implemented")


    async def mapReturn(
            self):
        raise NotImplementedError("async def mapReturn is not implemented")


    async def simpleTypedefReturn(
            self):
        raise NotImplementedError("async def simpleTypedefReturn is not implemented")


    async def complexTypedefReturn(
            self):
        raise NotImplementedError("async def complexTypedefReturn is not implemented")


    async def list_mostComplexTypedefReturn(
            self):
        raise NotImplementedError("async def list_mostComplexTypedefReturn is not implemented")


    async def enumReturn(
            self):
        raise NotImplementedError("async def enumReturn is not implemented")


    async def list_EnumReturn(
            self):
        raise NotImplementedError("async def list_EnumReturn is not implemented")


    async def structReturn(
            self):
        raise NotImplementedError("async def structReturn is not implemented")


    async def set_StructReturn(
            self):
        raise NotImplementedError("async def set_StructReturn is not implemented")


    async def unionReturn(
            self):
        raise NotImplementedError("async def unionReturn is not implemented")


    async def list_UnionReturn(
            self):
        raise NotImplementedError("async def list_UnionReturn is not implemented")


    async def readDataEb(
            self,
            size):
        raise NotImplementedError("async def readDataEb is not implemented")


    async def readData(
            self,
            size):
        raise NotImplementedError("async def readData is not implemented")


cdef class ParamServiceInterface(
    ServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cParamServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    async def void_ret_i16_param(
            self,
            param1):
        raise NotImplementedError("async def void_ret_i16_param is not implemented")


    async def void_ret_byte_i16_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def void_ret_byte_i16_param is not implemented")


    async def void_ret_map_param(
            self,
            param1):
        raise NotImplementedError("async def void_ret_map_param is not implemented")


    async def void_ret_map_setlist_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def void_ret_map_setlist_param is not implemented")


    async def void_ret_map_typedef_param(
            self,
            param1):
        raise NotImplementedError("async def void_ret_map_typedef_param is not implemented")


    async def void_ret_enum_param(
            self,
            param1):
        raise NotImplementedError("async def void_ret_enum_param is not implemented")


    async def void_ret_struct_param(
            self,
            param1):
        raise NotImplementedError("async def void_ret_struct_param is not implemented")


    async def void_ret_listunion_param(
            self,
            param1):
        raise NotImplementedError("async def void_ret_listunion_param is not implemented")


    async def bool_ret_i32_i64_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def bool_ret_i32_i64_param is not implemented")


    async def bool_ret_map_param(
            self,
            param1):
        raise NotImplementedError("async def bool_ret_map_param is not implemented")


    async def bool_ret_union_param(
            self,
            param1):
        raise NotImplementedError("async def bool_ret_union_param is not implemented")


    async def i64_ret_float_double_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def i64_ret_float_double_param is not implemented")


    async def i64_ret_string_typedef_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def i64_ret_string_typedef_param is not implemented")


    async def i64_ret_i32_i32_i32_i32_i32_param(
            self,
            param1,
            param2,
            param3,
            param4,
            param5):
        raise NotImplementedError("async def i64_ret_i32_i32_i32_i32_i32_param is not implemented")


    async def double_ret_setstruct_param(
            self,
            param1):
        raise NotImplementedError("async def double_ret_setstruct_param is not implemented")


    async def string_ret_string_param(
            self,
            param1):
        raise NotImplementedError("async def string_ret_string_param is not implemented")


    async def binary_ret_binary_param(
            self,
            param1):
        raise NotImplementedError("async def binary_ret_binary_param is not implemented")


    async def map_ret_bool_param(
            self,
            param1):
        raise NotImplementedError("async def map_ret_bool_param is not implemented")


    async def list_ret_map_setlist_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def list_ret_map_setlist_param is not implemented")


    async def mapsetlistmapliststring_ret_listlistlist_param(
            self,
            param1):
        raise NotImplementedError("async def mapsetlistmapliststring_ret_listlistlist_param is not implemented")


    async def typedef_ret_i32_param(
            self,
            param1):
        raise NotImplementedError("async def typedef_ret_i32_param is not implemented")


    async def listtypedef_ret_typedef_param(
            self,
            param1):
        raise NotImplementedError("async def listtypedef_ret_typedef_param is not implemented")


    async def enum_ret_double_param(
            self,
            param1):
        raise NotImplementedError("async def enum_ret_double_param is not implemented")


    async def enum_ret_double_enum_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def enum_ret_double_enum_param is not implemented")


    async def listenum_ret_map_param(
            self,
            param1):
        raise NotImplementedError("async def listenum_ret_map_param is not implemented")


    async def struct_ret_i16_param(
            self,
            param1):
        raise NotImplementedError("async def struct_ret_i16_param is not implemented")


    async def setstruct_ret_set_param(
            self,
            param1):
        raise NotImplementedError("async def setstruct_ret_set_param is not implemented")


    async def union_ret_i32_i32_param(
            self,
            param1,
            param2):
        raise NotImplementedError("async def union_ret_i32_i32_param is not implemented")


    async def listunion_string_param(
            self,
            param1):
        raise NotImplementedError("async def listunion_string_param is not implemented")




cdef api void call_cy_ReturnService_noReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    __context = None
    if iface._pass_context_noReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_noReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_noReturn_coro(
    object self,
    object ctx,
    Promise_void promise
):
    try:
        if ctx is not None:
            result = await self.noReturn(ctx,)
        else:
            result = await self.noReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler noReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ReturnService_boolReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cbool] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_bool.create(move(cPromise))
    __context = None
    if iface._pass_context_boolReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_boolReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_boolReturn_coro(
    object self,
    object ctx,
    Promise_bool promise
):
    try:
        if ctx is not None:
            result = await self.boolReturn(ctx,)
        else:
            result = await self.boolReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler boolReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_ReturnService_i16Return(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int16_t] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_i16.create(move(cPromise))
    __context = None
    if iface._pass_context_i16Return:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_i16Return_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_i16Return_coro(
    object self,
    object ctx,
    Promise_i16 promise
):
    try:
        if ctx is not None:
            result = await self.i16Return(ctx,)
        else:
            result = await self.i16Return()
    except Exception as ex:
        print(
            "Unexpected error in service handler i16Return:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_ReturnService_i32Return(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_i32.create(move(cPromise))
    __context = None
    if iface._pass_context_i32Return:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_i32Return_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_i32Return_coro(
    object self,
    object ctx,
    Promise_i32 promise
):
    try:
        if ctx is not None:
            result = await self.i32Return(ctx,)
        else:
            result = await self.i32Return()
    except Exception as ex:
        print(
            "Unexpected error in service handler i32Return:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_ReturnService_i64Return(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int64_t] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_i64.create(move(cPromise))
    __context = None
    if iface._pass_context_i64Return:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_i64Return_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_i64Return_coro(
    object self,
    object ctx,
    Promise_i64 promise
):
    try:
        if ctx is not None:
            result = await self.i64Return(ctx,)
        else:
            result = await self.i64Return()
    except Exception as ex:
        print(
            "Unexpected error in service handler i64Return:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int64_t> result)

cdef api void call_cy_ReturnService_floatReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[float] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_float.create(move(cPromise))
    __context = None
    if iface._pass_context_floatReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_floatReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_floatReturn_coro(
    object self,
    object ctx,
    Promise_float promise
):
    try:
        if ctx is not None:
            result = await self.floatReturn(ctx,)
        else:
            result = await self.floatReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler floatReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<float> result)

cdef api void call_cy_ReturnService_doubleReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[double] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_double.create(move(cPromise))
    __context = None
    if iface._pass_context_doubleReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_doubleReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_doubleReturn_coro(
    object self,
    object ctx,
    Promise_double promise
):
    try:
        if ctx is not None:
            result = await self.doubleReturn(ctx,)
        else:
            result = await self.doubleReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler doubleReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<double> result)

cdef api void call_cy_ReturnService_stringReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_string.create(move(cPromise))
    __context = None
    if iface._pass_context_stringReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_stringReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_stringReturn_coro(
    object self,
    object ctx,
    Promise_string promise
):
    try:
        if ctx is not None:
            result = await self.stringReturn(ctx,)
        else:
            result = await self.stringReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler stringReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_ReturnService_binaryReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_binary.create(move(cPromise))
    __context = None
    if iface._pass_context_binaryReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_binaryReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_binaryReturn_coro(
    object self,
    object ctx,
    Promise_binary promise
):
    try:
        if ctx is not None:
            result = await self.binaryReturn(ctx,)
        else:
            result = await self.binaryReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler binaryReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result))

cdef api void call_cy_ReturnService_mapReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cmap[string,int64_t]]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_Map__string_i64.create(move(cPromise))
    __context = None
    if iface._pass_context_mapReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_mapReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_mapReturn_coro(
    object self,
    object ctx,
    Promise_Map__string_i64 promise
):
    try:
        if ctx is not None:
            result = await self.mapReturn(ctx,)
        else:
            result = await self.mapReturn()
        result = module.types.Map__string_i64(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler mapReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[string,int64_t]](deref((<module.types.Map__string_i64?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_simpleTypedefReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_i32.create(move(cPromise))
    __context = None
    if iface._pass_context_simpleTypedefReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_simpleTypedefReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_simpleTypedefReturn_coro(
    object self,
    object ctx,
    Promise_i32 promise
):
    try:
        if ctx is not None:
            result = await self.simpleTypedefReturn(ctx,)
        else:
            result = await self.simpleTypedefReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler simpleTypedefReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_ReturnService_complexTypedefReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_List__Map__Empty_MyStruct.create(move(cPromise))
    __context = None
    if iface._pass_context_complexTypedefReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_complexTypedefReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_complexTypedefReturn_coro(
    object self,
    object ctx,
    Promise_List__Map__Empty_MyStruct promise
):
    try:
        if ctx is not None:
            result = await self.complexTypedefReturn(ctx,)
        else:
            result = await self.complexTypedefReturn()
        result = module.types.List__Map__Empty_MyStruct(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler complexTypedefReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]](deref((<module.types.List__Map__Empty_MyStruct?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_list_mostComplexTypedefReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_List__List__List__Map__Empty_MyStruct.create(move(cPromise))
    __context = None
    if iface._pass_context_list_mostComplexTypedefReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_list_mostComplexTypedefReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_list_mostComplexTypedefReturn_coro(
    object self,
    object ctx,
    Promise_List__List__List__Map__Empty_MyStruct promise
):
    try:
        if ctx is not None:
            result = await self.list_mostComplexTypedefReturn(ctx,)
        else:
            result = await self.list_mostComplexTypedefReturn()
        result = module.types.List__List__List__Map__Empty_MyStruct(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler list_mostComplexTypedefReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]](deref((<module.types.List__List__List__Map__Empty_MyStruct?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_enumReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[module.types.cMyEnumA] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_MyEnumA.create(move(cPromise))
    __context = None
    if iface._pass_context_enumReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_enumReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_enumReturn_coro(
    object self,
    object ctx,
    Promise_MyEnumA promise
):
    try:
        if ctx is not None:
            result = await self.enumReturn(ctx,)
        else:
            result = await self.enumReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler enumReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(module.types.MyEnumA_to_cpp(result))

cdef api void call_cy_ReturnService_list_EnumReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[module.types.cMyEnumA]]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_List__MyEnumA.create(move(cPromise))
    __context = None
    if iface._pass_context_list_EnumReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_list_EnumReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_list_EnumReturn_coro(
    object self,
    object ctx,
    Promise_List__MyEnumA promise
):
    try:
        if ctx is not None:
            result = await self.list_EnumReturn(ctx,)
        else:
            result = await self.list_EnumReturn()
        result = module.types.List__MyEnumA(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler list_EnumReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[module.types.cMyEnumA]](deref((<module.types.List__MyEnumA?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_structReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[module.types.cMyStruct]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_MyStruct.create(move(cPromise))
    __context = None
    if iface._pass_context_structReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_structReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_structReturn_coro(
    object self,
    object ctx,
    Promise_MyStruct promise
):
    try:
        if ctx is not None:
            result = await self.structReturn(ctx,)
        else:
            result = await self.structReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler structReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[module.types.cMyStruct](deref((<module.types.MyStruct?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_set_StructReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cset[module.types.cMyStruct]]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_Set__MyStruct.create(move(cPromise))
    __context = None
    if iface._pass_context_set_StructReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_set_StructReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_set_StructReturn_coro(
    object self,
    object ctx,
    Promise_Set__MyStruct promise
):
    try:
        if ctx is not None:
            result = await self.set_StructReturn(ctx,)
        else:
            result = await self.set_StructReturn()
        result = module.types.Set__MyStruct(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler set_StructReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[module.types.cMyStruct]](deref((<module.types.Set__MyStruct?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_unionReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[module.types.cComplexUnion]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_ComplexUnion.create(move(cPromise))
    __context = None
    if iface._pass_context_unionReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_unionReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_unionReturn_coro(
    object self,
    object ctx,
    Promise_ComplexUnion promise
):
    try:
        if ctx is not None:
            result = await self.unionReturn(ctx,)
        else:
            result = await self.unionReturn()
    except Exception as ex:
        print(
            "Unexpected error in service handler unionReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[module.types.cComplexUnion](deref((<module.types.ComplexUnion?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_list_UnionReturn(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[module.types.cComplexUnion]]] cPromise
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_List__ComplexUnion.create(move(cPromise))
    __context = None
    if iface._pass_context_list_UnionReturn:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_list_UnionReturn_coro(
            self,
            __context,
            __promise
        )
    )

async def ReturnService_list_UnionReturn_coro(
    object self,
    object ctx,
    Promise_List__ComplexUnion promise
):
    try:
        if ctx is not None:
            result = await self.list_UnionReturn(ctx,)
        else:
            result = await self.list_UnionReturn()
        result = module.types.List__ComplexUnion(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler list_UnionReturn:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[module.types.cComplexUnion]](deref((<module.types.List__ComplexUnion?> result)._cpp_obj)))

cdef api void call_cy_ReturnService_readDataEb(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    int64_t size
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_binary.create(move(cPromise))
    arg_size = size
    __context = None
    if iface._pass_context_readDataEb:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_readDataEb_coro(
            self,
            __context,
            __promise,
            arg_size
        )
    )

async def ReturnService_readDataEb_coro(
    object self,
    object ctx,
    Promise_binary promise,
    size
):
    try:
        if ctx is not None:
            result = await self.readDataEb(ctx,
                      size)
        else:
            result = await self.readDataEb(
                      size)
    except Exception as ex:
        print(
            "Unexpected error in service handler readDataEb:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result))

cdef api void call_cy_ReturnService_readData(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    int64_t size
):
    cdef ReturnServiceInterface iface
    iface = self
    __promise = Promise_binary.create(move(cPromise))
    arg_size = size
    __context = None
    if iface._pass_context_readData:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ReturnService_readData_coro(
            self,
            __context,
            __promise,
            arg_size
        )
    )

async def ReturnService_readData_coro(
    object self,
    object ctx,
    Promise_binary promise,
    size
):
    try:
        if ctx is not None:
            result = await self.readData(ctx,
                      size)
        else:
            result = await self.readData(
                      size)
    except Exception as ex:
        print(
            "Unexpected error in service handler readData:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result))

cdef api void call_cy_ParamService_void_ret_i16_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    int16_t param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = param1
    __context = None
    if iface._pass_context_void_ret_i16_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_i16_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_void_ret_i16_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.void_ret_i16_param(ctx,
                      param1)
        else:
            result = await self.void_ret_i16_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_i16_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_byte_i16_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    int8_t param1,
    int16_t param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = param1
    arg_param2 = param2
    __context = None
    if iface._pass_context_void_ret_byte_i16_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_byte_i16_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_void_ret_byte_i16_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.void_ret_byte_i16_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.void_ret_byte_i16_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_byte_i16_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_map_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[cmap[string,int64_t]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = module.types.Map__string_i64.create(module.types.move(param1))
    __context = None
    if iface._pass_context_void_ret_map_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_map_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_void_ret_map_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.void_ret_map_param(ctx,
                      param1)
        else:
            result = await self.void_ret_map_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_map_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_map_setlist_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[cmap[string,int64_t]] param1,
    unique_ptr[cset[vector[string]]] param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = module.types.Map__string_i64.create(module.types.move(param1))
    arg_param2 = module.types.Set__List__string.create(module.types.move(param2))
    __context = None
    if iface._pass_context_void_ret_map_setlist_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_map_setlist_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_void_ret_map_setlist_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.void_ret_map_setlist_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.void_ret_map_setlist_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_map_setlist_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_map_typedef_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    int32_t param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = param1
    __context = None
    if iface._pass_context_void_ret_map_typedef_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_map_typedef_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_void_ret_map_typedef_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.void_ret_map_typedef_param(ctx,
                      param1)
        else:
            result = await self.void_ret_map_typedef_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_map_typedef_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_enum_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    module.types.cMyEnumA param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = module.types.MyEnumA(<int> param1)
    __context = None
    if iface._pass_context_void_ret_enum_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_enum_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_void_ret_enum_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.void_ret_enum_param(ctx,
                      param1)
        else:
            result = await self.void_ret_enum_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_enum_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_struct_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[module.types.cMyStruct] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = module.types.MyStruct.create(shared_ptr[module.types.cMyStruct](param1.release()))
    __context = None
    if iface._pass_context_void_ret_struct_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_struct_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_void_ret_struct_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.void_ret_struct_param(ctx,
                      param1)
        else:
            result = await self.void_ret_struct_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_struct_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_void_ret_listunion_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[vector[module.types.cComplexUnion]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_void.create(move(cPromise))
    arg_param1 = module.types.List__ComplexUnion.create(module.types.move(param1))
    __context = None
    if iface._pass_context_void_ret_listunion_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_void_ret_listunion_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_void_ret_listunion_param_coro(
    object self,
    object ctx,
    Promise_void promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.void_ret_listunion_param(ctx,
                      param1)
        else:
            result = await self.void_ret_listunion_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler void_ret_listunion_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_ParamService_bool_ret_i32_i64_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cbool] cPromise,
    int32_t param1,
    int64_t param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_bool.create(move(cPromise))
    arg_param1 = param1
    arg_param2 = param2
    __context = None
    if iface._pass_context_bool_ret_i32_i64_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_bool_ret_i32_i64_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_bool_ret_i32_i64_param_coro(
    object self,
    object ctx,
    Promise_bool promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.bool_ret_i32_i64_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.bool_ret_i32_i64_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler bool_ret_i32_i64_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_ParamService_bool_ret_map_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cbool] cPromise,
    unique_ptr[cmap[string,int64_t]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_bool.create(move(cPromise))
    arg_param1 = module.types.Map__string_i64.create(module.types.move(param1))
    __context = None
    if iface._pass_context_bool_ret_map_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_bool_ret_map_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_bool_ret_map_param_coro(
    object self,
    object ctx,
    Promise_bool promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.bool_ret_map_param(ctx,
                      param1)
        else:
            result = await self.bool_ret_map_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler bool_ret_map_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_ParamService_bool_ret_union_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cbool] cPromise,
    unique_ptr[module.types.cComplexUnion] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_bool.create(move(cPromise))
    arg_param1 = module.types.ComplexUnion.create(shared_ptr[module.types.cComplexUnion](param1.release()))
    __context = None
    if iface._pass_context_bool_ret_union_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_bool_ret_union_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_bool_ret_union_param_coro(
    object self,
    object ctx,
    Promise_bool promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.bool_ret_union_param(ctx,
                      param1)
        else:
            result = await self.bool_ret_union_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler bool_ret_union_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_ParamService_i64_ret_float_double_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int64_t] cPromise,
    float param1,
    double param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_i64.create(move(cPromise))
    arg_param1 = param1
    arg_param2 = param2
    __context = None
    if iface._pass_context_i64_ret_float_double_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_i64_ret_float_double_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_i64_ret_float_double_param_coro(
    object self,
    object ctx,
    Promise_i64 promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.i64_ret_float_double_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.i64_ret_float_double_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler i64_ret_float_double_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int64_t> result)

cdef api void call_cy_ParamService_i64_ret_string_typedef_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int64_t] cPromise,
    unique_ptr[string] param1,
    unique_ptr[cset[vector[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]]]] param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_i64.create(move(cPromise))
    arg_param1 = (deref(param1.get())).decode('UTF-8')
    arg_param2 = module.types.Set__List__List__Map__Empty_MyStruct.create(module.types.move(param2))
    __context = None
    if iface._pass_context_i64_ret_string_typedef_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_i64_ret_string_typedef_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_i64_ret_string_typedef_param_coro(
    object self,
    object ctx,
    Promise_i64 promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.i64_ret_string_typedef_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.i64_ret_string_typedef_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler i64_ret_string_typedef_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int64_t> result)

cdef api void call_cy_ParamService_i64_ret_i32_i32_i32_i32_i32_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int64_t] cPromise,
    int32_t param1,
    int32_t param2,
    int32_t param3,
    int32_t param4,
    int32_t param5
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_i64.create(move(cPromise))
    arg_param1 = param1
    arg_param2 = param2
    arg_param3 = param3
    arg_param4 = param4
    arg_param5 = param5
    __context = None
    if iface._pass_context_i64_ret_i32_i32_i32_i32_i32_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_i64_ret_i32_i32_i32_i32_i32_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2,
            arg_param3,
            arg_param4,
            arg_param5
        )
    )

async def ParamService_i64_ret_i32_i32_i32_i32_i32_param_coro(
    object self,
    object ctx,
    Promise_i64 promise,
    param1,
    param2,
    param3,
    param4,
    param5
):
    try:
        if ctx is not None:
            result = await self.i64_ret_i32_i32_i32_i32_i32_param(ctx,
                      param1,
                      param2,
                      param3,
                      param4,
                      param5)
        else:
            result = await self.i64_ret_i32_i32_i32_i32_i32_param(
                      param1,
                      param2,
                      param3,
                      param4,
                      param5)
    except Exception as ex:
        print(
            "Unexpected error in service handler i64_ret_i32_i32_i32_i32_i32_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int64_t> result)

cdef api void call_cy_ParamService_double_ret_setstruct_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[double] cPromise,
    unique_ptr[cset[module.types.cMyStruct]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_double.create(move(cPromise))
    arg_param1 = module.types.Set__MyStruct.create(module.types.move(param1))
    __context = None
    if iface._pass_context_double_ret_setstruct_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_double_ret_setstruct_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_double_ret_setstruct_param_coro(
    object self,
    object ctx,
    Promise_double promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.double_ret_setstruct_param(ctx,
                      param1)
        else:
            result = await self.double_ret_setstruct_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler double_ret_setstruct_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<double> result)

cdef api void call_cy_ParamService_string_ret_string_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[string] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_string.create(move(cPromise))
    arg_param1 = (deref(param1.get())).decode('UTF-8')
    __context = None
    if iface._pass_context_string_ret_string_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_string_ret_string_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_string_ret_string_param_coro(
    object self,
    object ctx,
    Promise_string promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.string_ret_string_param(ctx,
                      param1)
        else:
            result = await self.string_ret_string_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler string_ret_string_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_ParamService_binary_ret_binary_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[string] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_binary.create(move(cPromise))
    arg_param1 = (deref(param1.get()))
    __context = None
    if iface._pass_context_binary_ret_binary_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_binary_ret_binary_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_binary_ret_binary_param_coro(
    object self,
    object ctx,
    Promise_binary promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.binary_ret_binary_param(ctx,
                      param1)
        else:
            result = await self.binary_ret_binary_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler binary_ret_binary_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result))

cdef api void call_cy_ParamService_map_ret_bool_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cmap[string,int64_t]]] cPromise,
    cbool param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_Map__string_i64.create(move(cPromise))
    arg_param1 = param1
    __context = None
    if iface._pass_context_map_ret_bool_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_map_ret_bool_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_map_ret_bool_param_coro(
    object self,
    object ctx,
    Promise_Map__string_i64 promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.map_ret_bool_param(ctx,
                      param1)
        else:
            result = await self.map_ret_bool_param(
                      param1)
        result = module.types.Map__string_i64(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler map_ret_bool_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[string,int64_t]](deref((<module.types.Map__string_i64?> result)._cpp_obj)))

cdef api void call_cy_ParamService_list_ret_map_setlist_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[cbool]]] cPromise,
    unique_ptr[cmap[int32_t,vector[string]]] param1,
    unique_ptr[vector[string]] param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_List__bool.create(move(cPromise))
    arg_param1 = module.types.Map__i32_List__string.create(module.types.move(param1))
    arg_param2 = module.types.List__string.create(module.types.move(param2))
    __context = None
    if iface._pass_context_list_ret_map_setlist_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_list_ret_map_setlist_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_list_ret_map_setlist_param_coro(
    object self,
    object ctx,
    Promise_List__bool promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.list_ret_map_setlist_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.list_ret_map_setlist_param(
                      param1,
                      param2)
        result = module.types.List__bool(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler list_ret_map_setlist_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[cbool]](deref((<module.types.List__bool?> result)._cpp_obj)))

cdef api void call_cy_ParamService_mapsetlistmapliststring_ret_listlistlist_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]]] cPromise,
    unique_ptr[vector[vector[vector[vector[int32_t]]]]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_Map__Set__List__i32_Map__List__Set__string_string.create(move(cPromise))
    arg_param1 = module.types.List__List__List__List__i32.create(module.types.move(param1))
    __context = None
    if iface._pass_context_mapsetlistmapliststring_ret_listlistlist_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_mapsetlistmapliststring_ret_listlistlist_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_mapsetlistmapliststring_ret_listlistlist_param_coro(
    object self,
    object ctx,
    Promise_Map__Set__List__i32_Map__List__Set__string_string promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.mapsetlistmapliststring_ret_listlistlist_param(ctx,
                      param1)
        else:
            result = await self.mapsetlistmapliststring_ret_listlistlist_param(
                      param1)
        result = module.types.Map__Set__List__i32_Map__List__Set__string_string(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler mapsetlistmapliststring_ret_listlistlist_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]](deref((<module.types.Map__Set__List__i32_Map__List__Set__string_string?> result)._cpp_obj)))

cdef api void call_cy_ParamService_typedef_ret_i32_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    int32_t param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_param1 = param1
    __context = None
    if iface._pass_context_typedef_ret_i32_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_typedef_ret_i32_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_typedef_ret_i32_param_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.typedef_ret_i32_param(ctx,
                      param1)
        else:
            result = await self.typedef_ret_i32_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler typedef_ret_i32_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_ParamService_listtypedef_ret_typedef_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[int32_t]]] cPromise,
    unique_ptr[vector[cmap[module.types.cEmpty,module.types.cMyStruct]]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_List__i32.create(move(cPromise))
    arg_param1 = module.types.List__Map__Empty_MyStruct.create(module.types.move(param1))
    __context = None
    if iface._pass_context_listtypedef_ret_typedef_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_listtypedef_ret_typedef_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_listtypedef_ret_typedef_param_coro(
    object self,
    object ctx,
    Promise_List__i32 promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.listtypedef_ret_typedef_param(ctx,
                      param1)
        else:
            result = await self.listtypedef_ret_typedef_param(
                      param1)
        result = module.types.List__i32(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler listtypedef_ret_typedef_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[int32_t]](deref((<module.types.List__i32?> result)._cpp_obj)))

cdef api void call_cy_ParamService_enum_ret_double_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[module.types.cMyEnumA] cPromise,
    double param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_MyEnumA.create(move(cPromise))
    arg_param1 = param1
    __context = None
    if iface._pass_context_enum_ret_double_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_enum_ret_double_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_enum_ret_double_param_coro(
    object self,
    object ctx,
    Promise_MyEnumA promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.enum_ret_double_param(ctx,
                      param1)
        else:
            result = await self.enum_ret_double_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler enum_ret_double_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(module.types.MyEnumA_to_cpp(result))

cdef api void call_cy_ParamService_enum_ret_double_enum_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[module.types.cMyEnumA] cPromise,
    double param1,
    module.types.cMyEnumA param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_MyEnumA.create(move(cPromise))
    arg_param1 = param1
    arg_param2 = module.types.MyEnumA(<int> param2)
    __context = None
    if iface._pass_context_enum_ret_double_enum_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_enum_ret_double_enum_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_enum_ret_double_enum_param_coro(
    object self,
    object ctx,
    Promise_MyEnumA promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.enum_ret_double_enum_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.enum_ret_double_enum_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler enum_ret_double_enum_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(module.types.MyEnumA_to_cpp(result))

cdef api void call_cy_ParamService_listenum_ret_map_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[module.types.cMyEnumA]]] cPromise,
    unique_ptr[cmap[string,int64_t]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_List__MyEnumA.create(move(cPromise))
    arg_param1 = module.types.Map__string_i64.create(module.types.move(param1))
    __context = None
    if iface._pass_context_listenum_ret_map_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_listenum_ret_map_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_listenum_ret_map_param_coro(
    object self,
    object ctx,
    Promise_List__MyEnumA promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.listenum_ret_map_param(ctx,
                      param1)
        else:
            result = await self.listenum_ret_map_param(
                      param1)
        result = module.types.List__MyEnumA(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler listenum_ret_map_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[module.types.cMyEnumA]](deref((<module.types.List__MyEnumA?> result)._cpp_obj)))

cdef api void call_cy_ParamService_struct_ret_i16_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[module.types.cMyStruct]] cPromise,
    int16_t param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_MyStruct.create(move(cPromise))
    arg_param1 = param1
    __context = None
    if iface._pass_context_struct_ret_i16_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_struct_ret_i16_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_struct_ret_i16_param_coro(
    object self,
    object ctx,
    Promise_MyStruct promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.struct_ret_i16_param(ctx,
                      param1)
        else:
            result = await self.struct_ret_i16_param(
                      param1)
    except Exception as ex:
        print(
            "Unexpected error in service handler struct_ret_i16_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[module.types.cMyStruct](deref((<module.types.MyStruct?> result)._cpp_obj)))

cdef api void call_cy_ParamService_setstruct_ret_set_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cset[module.types.cMyStruct]]] cPromise,
    unique_ptr[cset[string]] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_Set__MyStruct.create(move(cPromise))
    arg_param1 = module.types.Set__string.create(module.types.move(param1))
    __context = None
    if iface._pass_context_setstruct_ret_set_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_setstruct_ret_set_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_setstruct_ret_set_param_coro(
    object self,
    object ctx,
    Promise_Set__MyStruct promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.setstruct_ret_set_param(ctx,
                      param1)
        else:
            result = await self.setstruct_ret_set_param(
                      param1)
        result = module.types.Set__MyStruct(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler setstruct_ret_set_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[module.types.cMyStruct]](deref((<module.types.Set__MyStruct?> result)._cpp_obj)))

cdef api void call_cy_ParamService_union_ret_i32_i32_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[module.types.cComplexUnion]] cPromise,
    int32_t param1,
    int32_t param2
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_ComplexUnion.create(move(cPromise))
    arg_param1 = param1
    arg_param2 = param2
    __context = None
    if iface._pass_context_union_ret_i32_i32_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_union_ret_i32_i32_param_coro(
            self,
            __context,
            __promise,
            arg_param1,
            arg_param2
        )
    )

async def ParamService_union_ret_i32_i32_param_coro(
    object self,
    object ctx,
    Promise_ComplexUnion promise,
    param1,
    param2
):
    try:
        if ctx is not None:
            result = await self.union_ret_i32_i32_param(ctx,
                      param1,
                      param2)
        else:
            result = await self.union_ret_i32_i32_param(
                      param1,
                      param2)
    except Exception as ex:
        print(
            "Unexpected error in service handler union_ret_i32_i32_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[module.types.cComplexUnion](deref((<module.types.ComplexUnion?> result)._cpp_obj)))

cdef api void call_cy_ParamService_listunion_string_param(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[module.types.cComplexUnion]]] cPromise,
    unique_ptr[string] param1
):
    cdef ParamServiceInterface iface
    iface = self
    __promise = Promise_List__ComplexUnion.create(move(cPromise))
    arg_param1 = (deref(param1.get())).decode('UTF-8')
    __context = None
    if iface._pass_context_listunion_string_param:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        ParamService_listunion_string_param_coro(
            self,
            __context,
            __promise,
            arg_param1
        )
    )

async def ParamService_listunion_string_param_coro(
    object self,
    object ctx,
    Promise_List__ComplexUnion promise,
    param1
):
    try:
        if ctx is not None:
            result = await self.listunion_string_param(ctx,
                      param1)
        else:
            result = await self.listunion_string_param(
                      param1)
        result = module.types.List__ComplexUnion(result)
    except Exception as ex:
        print(
            "Unexpected error in service handler listunion_string_param:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[module.types.cComplexUnion]](deref((<module.types.List__ComplexUnion?> result)._cpp_obj)))

