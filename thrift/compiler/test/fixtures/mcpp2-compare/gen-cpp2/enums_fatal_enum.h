/**
 * Autogenerated by Thrift for src/enums.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/enums_types.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/enums_fatal.h"

#include <fatal/type/enum.h>

#include <type_traits>

namespace facebook { namespace ns { namespace qwerty {

namespace __fbthrift_refl {
namespace __fbthrift_refl_impl = ::apache::thrift::detail::reflection_impl;

class AnEnumA_enum_traits {
 public:
  using type = ::facebook::ns::qwerty::AnEnumA;

 private:
  struct __fbthrift_value_FIELDA {
    using name = __fbthrift_strings_enums::FIELDA;
    using value = std::integral_constant<type, type::FIELDA>;
    using annotations = __fbthrift_refl_impl::no_annotations;
  };

  struct __fbthrift_member {
    using FIELDA = __fbthrift_value_FIELDA;
  };

 public:
  using name = __fbthrift_strings_enums::AnEnumA;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::FIELDA
  >;

  using annotations = __fbthrift_refl_impl::no_annotations;

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::FIELDA: return "FIELDA";
      default: return fallback;
    }
  }
};

class AnEnumB_enum_traits {
 public:
  using type = ::facebook::ns::qwerty::AnEnumB;

 private:
  struct __fbthrift_value_FIELDA {
    using name = __fbthrift_strings_enums::FIELDA;
    using value = std::integral_constant<type, type::FIELDA>;
    using annotations = __fbthrift_refl_impl::no_annotations;
  };

  struct __fbthrift_value_FIELDB {
    using name = __fbthrift_strings_enums::FIELDB;
    using value = std::integral_constant<type, type::FIELDB>;
    using annotations = __fbthrift_refl_impl::no_annotations;
  };

  struct __fbthrift_member {
    using FIELDA = __fbthrift_value_FIELDA;
    using FIELDB = __fbthrift_value_FIELDB;
  };

 public:
  using name = __fbthrift_strings_enums::AnEnumB;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::FIELDA,
      member::FIELDB
  >;

  using annotations = __fbthrift_refl_impl::no_annotations;

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::FIELDA: return "FIELDA";
      case type::FIELDB: return "FIELDB";
      default: return fallback;
    }
  }
};

class AnEnumC_enum_traits {
 public:
  using type = ::facebook::ns::qwerty::AnEnumC;

 private:
  struct __fbthrift_value_FIELDC {
    using name = __fbthrift_strings_enums::FIELDC;
    using value = std::integral_constant<type, type::FIELDC>;
    using annotations = __fbthrift_refl_impl::no_annotations;
  };

  struct __fbthrift_member {
    using FIELDC = __fbthrift_value_FIELDC;
  };

 public:
  using name = __fbthrift_strings_enums::AnEnumC;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::FIELDC
  >;

  using annotations = __fbthrift_refl_impl::no_annotations;

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::FIELDC: return "FIELDC";
      default: return fallback;
    }
  }
};

class AnEnumD_enum_traits {
 public:
  using type = ::facebook::ns::qwerty::AnEnumD;

 private:
  struct __fbthrift_value_FIELDD {
    using name = __fbthrift_strings_enums::FIELDD;
    using value = std::integral_constant<type, type::FIELDD>;
    using annotations = __fbthrift_refl_impl::no_annotations;
  };

  struct __fbthrift_member {
    using FIELDD = __fbthrift_value_FIELDD;
  };

 public:
  using name = __fbthrift_strings_enums::AnEnumD;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::FIELDD
  >;

  using annotations = __fbthrift_refl_impl::no_annotations;

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::FIELDD: return "FIELDD";
      default: return fallback;
    }
  }
};

class AnEnumE_enum_traits {
 public:
  using type = ::facebook::ns::qwerty::AnEnumE;

 private:
  struct __fbthrift_value_FIELDA {
    using name = __fbthrift_strings_enums::FIELDA;
    using value = std::integral_constant<type, type::FIELDA>;
    using annotations = __fbthrift_refl_impl::no_annotations;
  };

  struct __fbthrift_member {
    using FIELDA = __fbthrift_value_FIELDA;
  };

 public:
  using name = __fbthrift_strings_enums::AnEnumE;
  using member = __fbthrift_member;
  using fields = ::fatal::list<
      member::FIELDA
  >;

  using annotations = __fbthrift_refl_impl::no_annotations;

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::FIELDA: return "FIELDA";
      default: return fallback;
    }
  }
};

} // __fbthrift_refl

FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::AnEnumA_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
      enums_tags::module,
      ::apache::thrift::reflected_annotations<__fbthrift_refl::AnEnumA_enum_traits::annotations>,
      static_cast<::apache::thrift::legacy_type_id_t>(428815433984633608ull)
  >
);
FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::AnEnumB_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
      enums_tags::module,
      ::apache::thrift::reflected_annotations<__fbthrift_refl::AnEnumB_enum_traits::annotations>,
      static_cast<::apache::thrift::legacy_type_id_t>(15617140791710839720ull)
  >
);
FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::AnEnumC_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
      enums_tags::module,
      ::apache::thrift::reflected_annotations<__fbthrift_refl::AnEnumC_enum_traits::annotations>,
      static_cast<::apache::thrift::legacy_type_id_t>(2370933752103673064ull)
  >
);
FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::AnEnumD_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
      enums_tags::module,
      ::apache::thrift::reflected_annotations<__fbthrift_refl::AnEnumD_enum_traits::annotations>,
      static_cast<::apache::thrift::legacy_type_id_t>(2735336584205230696ull)
  >
);
FATAL_REGISTER_ENUM_TRAITS(
  __fbthrift_refl::AnEnumE_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
      enums_tags::module,
      ::apache::thrift::reflected_annotations<__fbthrift_refl::AnEnumE_enum_traits::annotations>,
      static_cast<::apache::thrift::legacy_type_id_t>(9931005972636376296ull)
  >
);
}}} // facebook::ns::qwerty
