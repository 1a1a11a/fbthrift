/**
 * Autogenerated by Thrift for src/extra_services.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/reflection/reflection.h>

#include <fatal/type/list.h>
#include <fatal/type/pair.h>
#include <fatal/type/sequence.h>

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_types.h"
namespace extra { namespace svc {

namespace __fbthrift_refl {

struct __fbthrift_strings_extra_services {
  using ExtraService = ::fatal::sequence<char, 'E', 'x', 't', 'r', 'a', 'S', 'e', 'r', 'v', 'i', 'c', 'e'>;
  using containerStruct2 = ::fatal::sequence<char, 'c', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 'S', 't', 'r', 'u', 'c', 't', '2'>;
  using cpp2 = ::fatal::sequence<char, 'c', 'p', 'p', '2'>;
  using extra__svc = ::fatal::sequence<char, 'e', 'x', 't', 'r', 'a', ':', ':', 's', 'v', 'c'>;
  using extra_services = ::fatal::sequence<char, 'e', 'x', 't', 'r', 'a', '_', 's', 'e', 'r', 'v', 'i', 'c', 'e', 's'>;
  using fieldA = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'A'>;
  using fieldB = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'B'>;
  using fieldC = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'C'>;
  using fieldD = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'D'>;
  using fieldE = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'E'>;
  using oneway_void_ret = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't'>;
  using oneway_void_ret_i32_i32_i32_i32_i32_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'p', 'a', 'r', 'a', 'm'>;
  using oneway_void_ret_listunion_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 'l', 'i', 's', 't', 'u', 'n', 'i', 'o', 'n', '_', 'p', 'a', 'r', 'a', 'm'>;
  using oneway_void_ret_map_setlist_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 'm', 'a', 'p', '_', 's', 'e', 't', 'l', 'i', 's', 't', '_', 'p', 'a', 'r', 'a', 'm'>;
  using oneway_void_ret_struct_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 's', 't', 'r', 'u', 'c', 't', '_', 'p', 'a', 'r', 'a', 'm'>;
  using opt_fieldA = ::fatal::sequence<char, 'o', 'p', 't', '_', 'f', 'i', 'e', 'l', 'd', 'A'>;
  using opt_fieldB = ::fatal::sequence<char, 'o', 'p', 't', '_', 'f', 'i', 'e', 'l', 'd', 'B'>;
  using opt_fieldC = ::fatal::sequence<char, 'o', 'p', 't', '_', 'f', 'i', 'e', 'l', 'd', 'C'>;
  using opt_fieldE = ::fatal::sequence<char, 'o', 'p', 't', '_', 'f', 'i', 'e', 'l', 'd', 'E'>;
  using param1 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '1'>;
  using param2 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '2'>;
  using param3 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '3'>;
  using param4 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '4'>;
  using param5 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '5'>;
  using req_fieldA = ::fatal::sequence<char, 'r', 'e', 'q', '_', 'f', 'i', 'e', 'l', 'd', 'A'>;
  using req_fieldB = ::fatal::sequence<char, 'r', 'e', 'q', '_', 'f', 'i', 'e', 'l', 'd', 'B'>;
  using req_fieldC = ::fatal::sequence<char, 'r', 'e', 'q', '_', 'f', 'i', 'e', 'l', 'd', 'C'>;
  using req_fieldE = ::fatal::sequence<char, 'r', 'e', 'q', '_', 'f', 'i', 'e', 'l', 'd', 'E'>;
  using simple_function = ::fatal::sequence<char, 's', 'i', 'm', 'p', 'l', 'e', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n'>;
  using throws_function = ::fatal::sequence<char, 't', 'h', 'r', 'o', 'w', 's', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n'>;
  using throws_function2 = ::fatal::sequence<char, 't', 'h', 'r', 'o', 'w', 's', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '2'>;
  using throws_function3 = ::fatal::sequence<char, 't', 'h', 'r', 'o', 'w', 's', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '3'>;
};

} // __fbthrift_refl

class extra_services_tags {
  using __fbthrift_strings = __fbthrift_refl::__fbthrift_strings_extra_services;
  struct __fbthrift_languages {
    using cpp2 = __fbthrift_strings::cpp2;
  };
  struct __fbthrift_enums {
  };
  struct __fbthrift_unions {
  };
  struct __fbthrift_structs {
    using containerStruct2 = __fbthrift_strings::containerStruct2;
  };
  struct __fbthrift_constants {
  };
  struct __fbthrift_services {
    using ExtraService = __fbthrift_strings::ExtraService;
  };
 public:
  struct module {};

  using strings = __fbthrift_strings;
  using languages = __fbthrift_languages;
  using enums = __fbthrift_enums;
  using unions = __fbthrift_unions;
  using structs = __fbthrift_structs;
  using constants = __fbthrift_constants;
  using services = __fbthrift_services;
};

THRIFT_REGISTER_REFLECTION_METADATA(
  extra_services_tags::module,
  __fbthrift_refl::__fbthrift_strings_extra_services::extra_services,
  // languages
  ::fatal::list<
    ::fatal::pair<__fbthrift_refl::__fbthrift_strings_extra_services::cpp2, __fbthrift_refl::__fbthrift_strings_extra_services::extra__svc>
  >,
  // enums
  ::fatal::list<
  >,
  // unions
  ::fatal::list<
  >,
  // structs
  ::fatal::list<
    ::fatal::pair<containerStruct2, __fbthrift_refl::__fbthrift_strings_extra_services::containerStruct2>
  >,
  // constants
  ::fatal::list<
  >,
  // services
  ::fatal::list<
    __fbthrift_refl::__fbthrift_strings_extra_services::ExtraService
  >
);

}} // extra::svc
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_fatal_types.h"
