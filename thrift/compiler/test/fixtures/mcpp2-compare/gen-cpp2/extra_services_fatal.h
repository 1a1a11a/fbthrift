/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/fatal/reflection.h>

#include <fatal/type/list.h>
#include <fatal/type/pair.h>
#include <fatal/type/sequence.h>

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_types.h"
namespace extra { namespace svc {

namespace thrift_fatal_impl_detail {

struct extra_svc_extra_services__unique_strings_list {
  using ExtraService = ::fatal::sequence<char, 'E', 'x', 't', 'r', 'a', 'S', 'e', 'r', 'v', 'i', 'c', 'e'>;
  using cpp2 = ::fatal::sequence<char, 'c', 'p', 'p', '2'>;
  using oneway_void_ret_listunion_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 'l', 'i', 's', 't', 'u', 'n', 'i', 'o', 'n', '_', 'p', 'a', 'r', 'a', 'm'>;
  using simple_function = ::fatal::sequence<char, 's', 'i', 'm', 'p', 'l', 'e', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n'>;
  using oneway_void_ret_map_setlist_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 'm', 'a', 'p', '_', 's', 'e', 't', 'l', 'i', 's', 't', '_', 'p', 'a', 'r', 'a', 'm'>;
  using throws_function2 = ::fatal::sequence<char, 't', 'h', 'r', 'o', 'w', 's', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '2'>;
  using throws_function3 = ::fatal::sequence<char, 't', 'h', 'r', 'o', 'w', 's', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '3'>;
  using oneway_void_ret_i32_i32_i32_i32_i32_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'i', '3', '2', '_', 'p', 'a', 'r', 'a', 'm'>;
  using oneway_void_ret = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't'>;
  using param5 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '5'>;
  using extra_services = ::fatal::sequence<char, 'e', 'x', 't', 'r', 'a', '_', 's', 'e', 'r', 'v', 'i', 'c', 'e', 's'>;
  using param3 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '3'>;
  using throws_function = ::fatal::sequence<char, 't', 'h', 'r', 'o', 'w', 's', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n'>;
  using param1 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '1'>;
  using param4 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '4'>;
  using oneway_void_ret_struct_param = ::fatal::sequence<char, 'o', 'n', 'e', 'w', 'a', 'y', '_', 'v', 'o', 'i', 'd', '_', 'r', 'e', 't', '_', 's', 't', 'r', 'u', 'c', 't', '_', 'p', 'a', 'r', 'a', 'm'>;
  using extra__svc = ::fatal::sequence<char, 'e', 'x', 't', 'r', 'a', ':', ':', 's', 'v', 'c'>;
  using param2 = ::fatal::sequence<char, 'p', 'a', 'r', 'a', 'm', '2'>;
};

} // thrift_fatal_impl_detail
class extra_services_tags {
  struct extra_svc_extra_services__unique_languages_list {
    using cpp2 = thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list::cpp2;
  };

  struct extra_svc_extra_services__unique_enums_list {
  };

  struct extra_svc_extra_services__unique_unions_list {
  };

  struct extra_svc_extra_services__unique_structs_list {
  };

  struct extra_svc_extra_services__unique_constants_list {
  };

  struct extra_svc_extra_services__unique_services_list {
    using ExtraService = thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list::ExtraService;
  };

public:
  struct module {};

  using languages = extra_svc_extra_services__unique_languages_list;
  using enums = extra_svc_extra_services__unique_enums_list;
  using unions = extra_svc_extra_services__unique_unions_list;
  using structs = extra_svc_extra_services__unique_structs_list;
  using constants = extra_svc_extra_services__unique_constants_list;
  using services = extra_svc_extra_services__unique_services_list;

  using strings = thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list;
};

THRIFT_REGISTER_REFLECTION_METADATA(
  extra_services_tags::module,
  thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list::extra_services,
  // languages
  ::fatal::list<
    ::fatal::pair<thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list::cpp2, thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list::extra__svc>
  >,
  // enums
  ::fatal::list<
  >,
  // unions
  ::fatal::list<
  >,
  // structs
  ::fatal::list<
  >,
  // constants
  ::fatal::list<
  >,
  // services
  ::fatal::list<
    thrift_fatal_impl_detail::extra_svc_extra_services__unique_strings_list::ExtraService
  >
);

}} // extra::svc
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_fatal_types.h"
