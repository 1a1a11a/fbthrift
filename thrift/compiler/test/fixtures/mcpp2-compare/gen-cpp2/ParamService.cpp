/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/ParamService.h"

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/ParamService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace some { namespace valid { namespace ns {

std::unique_ptr<apache::thrift::AsyncProcessor> ParamServiceSvIf::getProcessor() {
  return std::make_unique<ParamServiceAsyncProcessor>(this);
}

void ParamServiceSvIf::void_ret_i16_param(int16_t /*param1*/) {
  throw apache::thrift::TApplicationException("Function void_ret_i16_param is unimplemented");
}

folly::Future<folly::Unit> ParamServiceSvIf::future_void_ret_i16_param(int16_t param1) {
  return apache::thrift::detail::si::future([&] { return void_ret_i16_param(param1); });
}

void ParamServiceSvIf::async_tm_void_ret_i16_param(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int16_t param1) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_void_ret_i16_param(param1); });
}

void ParamServiceSvIf::void_ret_byte_i16_param(int8_t /*param1*/, int16_t /*param2*/) {
  throw apache::thrift::TApplicationException("Function void_ret_byte_i16_param is unimplemented");
}

folly::Future<folly::Unit> ParamServiceSvIf::future_void_ret_byte_i16_param(int8_t param1, int16_t param2) {
  return apache::thrift::detail::si::future([&] { return void_ret_byte_i16_param(param1, param2); });
}

void ParamServiceSvIf::async_tm_void_ret_byte_i16_param(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int8_t param1, int16_t param2) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_void_ret_byte_i16_param(param1, param2); });
}

bool ParamServiceSvIf::bool_ret_i32_i64_param(int32_t /*param1*/, int64_t /*param2*/) {
  throw apache::thrift::TApplicationException("Function bool_ret_i32_i64_param is unimplemented");
}

folly::Future<bool> ParamServiceSvIf::future_bool_ret_i32_i64_param(int32_t param1, int64_t param2) {
  return apache::thrift::detail::si::future([&] { return bool_ret_i32_i64_param(param1, param2); });
}

void ParamServiceSvIf::async_tm_bool_ret_i32_i64_param(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, int32_t param1, int64_t param2) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_bool_ret_i32_i64_param(param1, param2); });
}

int64_t ParamServiceSvIf::i64_ret_float_double_param(float /*param1*/, double /*param2*/) {
  throw apache::thrift::TApplicationException("Function i64_ret_float_double_param is unimplemented");
}

folly::Future<int64_t> ParamServiceSvIf::future_i64_ret_float_double_param(float param1, double param2) {
  return apache::thrift::detail::si::future([&] { return i64_ret_float_double_param(param1, param2); });
}

void ParamServiceSvIf::async_tm_i64_ret_float_double_param(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, float param1, double param2) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_i64_ret_float_double_param(param1, param2); });
}

void ParamServiceSvIf::string_ret_string_param(std::string& /*_return*/, std::unique_ptr<std::string> /*param1*/) {
  throw apache::thrift::TApplicationException("Function string_ret_string_param is unimplemented");
}

folly::Future<std::unique_ptr<std::string>> ParamServiceSvIf::future_string_ret_string_param(std::unique_ptr<std::string> param1) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::string& _return) { string_ret_string_param(_return, std::move(param1)); });
}

void ParamServiceSvIf::async_tm_string_ret_string_param(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, std::unique_ptr<std::string> param1) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_string_ret_string_param(std::move(param1)); });
}

void ParamServiceSvIf::map_ret_bool_param(std::map<std::string, int64_t>& /*_return*/, bool /*param1*/) {
  throw apache::thrift::TApplicationException("Function map_ret_bool_param is unimplemented");
}

folly::Future<std::unique_ptr<std::map<std::string, int64_t>>> ParamServiceSvIf::future_map_ret_bool_param(bool param1) {
  return apache::thrift::detail::si::future_returning_uptr([&](std::map<std::string, int64_t>& _return) { map_ret_bool_param(_return, param1); });
}

void ParamServiceSvIf::async_tm_map_ret_bool_param(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::map<std::string, int64_t>>>> callback, bool param1) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_map_ret_bool_param(param1); });
}

bool ParamServiceSvIf::bool_ret_map_param(std::unique_ptr<std::map<std::string, int64_t>> /*param1*/) {
  throw apache::thrift::TApplicationException("Function bool_ret_map_param is unimplemented");
}

folly::Future<bool> ParamServiceSvIf::future_bool_ret_map_param(std::unique_ptr<std::map<std::string, int64_t>> param1) {
  return apache::thrift::detail::si::future([&] { return bool_ret_map_param(std::move(param1)); });
}

void ParamServiceSvIf::async_tm_bool_ret_map_param(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, std::unique_ptr<std::map<std::string, int64_t>> param1) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_bool_ret_map_param(std::move(param1)); });
}

void ParamServiceSvIf::void_ret_map_param(std::unique_ptr<std::map<std::string, int64_t>> /*param1*/) {
  throw apache::thrift::TApplicationException("Function void_ret_map_param is unimplemented");
}

folly::Future<folly::Unit> ParamServiceSvIf::future_void_ret_map_param(std::unique_ptr<std::map<std::string, int64_t>> param1) {
  return apache::thrift::detail::si::future([&] { return void_ret_map_param(std::move(param1)); });
}

void ParamServiceSvIf::async_tm_void_ret_map_param(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<std::map<std::string, int64_t>> param1) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_void_ret_map_param(std::move(param1)); });
}

void ParamServiceSvNull::void_ret_i16_param(int16_t /*param1*/) {}

void ParamServiceSvNull::void_ret_byte_i16_param(int8_t /*param1*/, int16_t /*param2*/) {}

bool ParamServiceSvNull::bool_ret_i32_i64_param(int32_t /*param1*/, int64_t /*param2*/) {
  return 0;
}

int64_t ParamServiceSvNull::i64_ret_float_double_param(float /*param1*/, double /*param2*/) {
  return 0;
}

void ParamServiceSvNull::string_ret_string_param(std::string& /*_return*/, std::unique_ptr<std::string> /*param1*/) {}

void ParamServiceSvNull::map_ret_bool_param(std::map<std::string, int64_t>& /*_return*/, bool /*param1*/) {}

bool ParamServiceSvNull::bool_ret_map_param(std::unique_ptr<std::map<std::string, int64_t>> /*param1*/) {
  return 0;
}

void ParamServiceSvNull::void_ret_map_param(std::unique_ptr<std::map<std::string, int64_t>> /*param1*/) {}

const char* ParamServiceAsyncProcessor::getServiceName() {
  return "ParamService";
}

folly::Optional<std::string> ParamServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void ParamServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool ParamServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> ParamServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> ParamServiceAsyncProcessor::cacheKeyMap_ {};
const ParamServiceAsyncProcessor::BinaryProtocolProcessMap& ParamServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const ParamServiceAsyncProcessor::BinaryProtocolProcessMap ParamServiceAsyncProcessor::binaryProcessMap_ {
  {"void_ret_i16_param", &ParamServiceAsyncProcessor::_processInThread_void_ret_i16_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"void_ret_byte_i16_param", &ParamServiceAsyncProcessor::_processInThread_void_ret_byte_i16_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"bool_ret_i32_i64_param", &ParamServiceAsyncProcessor::_processInThread_bool_ret_i32_i64_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"i64_ret_float_double_param", &ParamServiceAsyncProcessor::_processInThread_i64_ret_float_double_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"string_ret_string_param", &ParamServiceAsyncProcessor::_processInThread_string_ret_string_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"map_ret_bool_param", &ParamServiceAsyncProcessor::_processInThread_map_ret_bool_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"bool_ret_map_param", &ParamServiceAsyncProcessor::_processInThread_bool_ret_map_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"void_ret_map_param", &ParamServiceAsyncProcessor::_processInThread_void_ret_map_param<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const ParamServiceAsyncProcessor::CompactProtocolProcessMap& ParamServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const ParamServiceAsyncProcessor::CompactProtocolProcessMap ParamServiceAsyncProcessor::compactProcessMap_ {
  {"void_ret_i16_param", &ParamServiceAsyncProcessor::_processInThread_void_ret_i16_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"void_ret_byte_i16_param", &ParamServiceAsyncProcessor::_processInThread_void_ret_byte_i16_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"bool_ret_i32_i64_param", &ParamServiceAsyncProcessor::_processInThread_bool_ret_i32_i64_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"i64_ret_float_double_param", &ParamServiceAsyncProcessor::_processInThread_i64_ret_float_double_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"string_ret_string_param", &ParamServiceAsyncProcessor::_processInThread_string_ret_string_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"map_ret_bool_param", &ParamServiceAsyncProcessor::_processInThread_map_ret_bool_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"bool_ret_map_param", &ParamServiceAsyncProcessor::_processInThread_bool_ret_map_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"void_ret_map_param", &ParamServiceAsyncProcessor::_processInThread_void_ret_map_param<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
