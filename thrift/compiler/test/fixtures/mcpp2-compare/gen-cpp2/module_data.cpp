/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_data_cpp.h>

namespace apache {
namespace thrift {


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::MyEnumA>::size;
constexpr const std::array<::some::valid::ns::MyEnumA, 3> TEnumDataStorage<::some::valid::ns::MyEnumA>::values;
constexpr const std::array<folly::StringPiece, 3> TEnumDataStorage<::some::valid::ns::MyEnumA>::names;


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::size;
constexpr const std::array<::some::valid::ns::AnnotatedEnum, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::values;
constexpr const std::array<folly::StringPiece, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::names;


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::size;
constexpr const std::array<::some::valid::ns::AnnotatedEnum2, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::values;
constexpr const std::array<folly::StringPiece, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::names;


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::MyEnumB>::size;
constexpr const std::array<::some::valid::ns::MyEnumB, 1> TEnumDataStorage<::some::valid::ns::MyEnumB>::values;
constexpr const std::array<folly::StringPiece, 1> TEnumDataStorage<::some::valid::ns::MyEnumB>::names;


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::size;
constexpr const std::array<::some::valid::ns::SimpleUnion::Type, 2> TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::values;
constexpr const std::array<folly::StringPiece, 2> TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::names;


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::size;
constexpr const std::array<::some::valid::ns::ComplexUnion::Type, 27> TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::values;
constexpr const std::array<folly::StringPiece, 27> TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::names;


constexpr const std::size_t TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::size;
constexpr const std::array<::some::valid::ns::FloatUnion::Type, 2> TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::values;
constexpr const std::array<folly::StringPiece, 2> TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::names;


constexpr const std::size_t TStructDataStorage<::some::valid::ns::Empty>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::Empty>::fields_size> TStructDataStorage<::some::valid::ns::Empty>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::Empty>::fields_size> TStructDataStorage<::some::valid::ns::Empty>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::Empty>::fields_size> TStructDataStorage<::some::valid::ns::Empty>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_size> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_size> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_size> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_size> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_size> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_size> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::MyStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::MyStruct>::fields_size> TStructDataStorage<::some::valid::ns::MyStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::MyStruct>::fields_size> TStructDataStorage<::some::valid::ns::MyStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::MyStruct>::fields_size> TStructDataStorage<::some::valid::ns::MyStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_size> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_size> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_size> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_size> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_size> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_size> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::AnException>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::AnException>::fields_size> TStructDataStorage<::some::valid::ns::AnException>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::AnException>::fields_size> TStructDataStorage<::some::valid::ns::AnException>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::AnException>::fields_size> TStructDataStorage<::some::valid::ns::AnException>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::AnotherException>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::AnotherException>::fields_size> TStructDataStorage<::some::valid::ns::AnotherException>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::AnotherException>::fields_size> TStructDataStorage<::some::valid::ns::AnotherException>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::AnotherException>::fields_size> TStructDataStorage<::some::valid::ns::AnotherException>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::containerStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::containerStruct>::fields_size> TStructDataStorage<::some::valid::ns::containerStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::containerStruct>::fields_size> TStructDataStorage<::some::valid::ns::containerStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::containerStruct>::fields_size> TStructDataStorage<::some::valid::ns::containerStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_size> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_size> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_size> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_size> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_size> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_size> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_size> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_size> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_size> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::FloatStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::FloatStruct>::fields_size> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::FloatStruct>::fields_size> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::FloatStruct>::fields_size> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::FloatUnion>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::FloatUnion>::fields_size> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::FloatUnion>::fields_size> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::FloatUnion>::fields_size> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_types;
constexpr const std::size_t TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_size;
constexpr const std::array<folly::StringPiece, TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_size> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_names;
constexpr const std::array<int16_t, TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_size> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_ids;
constexpr const std::array<apache::thrift::protocol::TType, TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_size> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_types;

} // namespace thrift
} // namespace apache
