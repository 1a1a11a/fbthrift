/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_types.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/extra_services_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::extra::svc::containerStruct2>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "fieldA") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "req_fieldA") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "opt_fieldA") {
    fid = 201;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "fieldB") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "req_fieldB") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "opt_fieldB") {
    fid = 202;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "fieldC") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "req_fieldC") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "opt_fieldC") {
    fid = 203;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "fieldD") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "fieldE") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "req_fieldE") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "opt_fieldE") {
    fid = 205;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace extra { namespace svc {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
containerStruct2::containerStruct2() :
      fieldA(0),
      req_fieldA(0),
      opt_fieldA(0),
      fieldC(std::initializer_list<int32_t>{1,
  2,
  3,
  4}),
      req_fieldC(std::initializer_list<int32_t>{1,
  2,
  3,
  4}),
      opt_fieldC(std::initializer_list<int32_t>{1,
  2,
  3,
  4}),
      fieldE(apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring")),
      req_fieldE(apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring")),
      opt_fieldE(apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring")) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END


containerStruct2::~containerStruct2() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
containerStruct2::containerStruct2(apache::thrift::FragileConstructor, bool fieldA__arg, bool req_fieldA__arg, bool opt_fieldA__arg, ::std::map<::std::string, bool> fieldB__arg, ::std::map<::std::string, bool> req_fieldB__arg, ::std::map<::std::string, bool> opt_fieldB__arg, ::std::set<int32_t> fieldC__arg, ::std::set<int32_t> req_fieldC__arg, ::std::set<int32_t> opt_fieldC__arg, ::std::string fieldD__arg, ::std::string fieldE__arg, ::std::string req_fieldE__arg, ::std::string opt_fieldE__arg) :
    fieldA(std::move(fieldA__arg)),
    req_fieldA(std::move(req_fieldA__arg)),
    opt_fieldA(std::move(opt_fieldA__arg)),
    fieldB(std::move(fieldB__arg)),
    req_fieldB(std::move(req_fieldB__arg)),
    opt_fieldB(std::move(opt_fieldB__arg)),
    fieldC(std::move(fieldC__arg)),
    req_fieldC(std::move(req_fieldC__arg)),
    opt_fieldC(std::move(opt_fieldC__arg)),
    fieldD(std::move(fieldD__arg)),
    fieldE(std::move(fieldE__arg)),
    req_fieldE(std::move(req_fieldE__arg)),
    opt_fieldE(std::move(opt_fieldE__arg)) {
  __isset.fieldA = true;
  __isset.opt_fieldA = true;
  __isset.fieldB = true;
  __isset.opt_fieldB = true;
  __isset.fieldC = true;
  __isset.opt_fieldC = true;
  __isset.fieldD = true;
  __isset.fieldE = true;
  __isset.opt_fieldE = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void containerStruct2::__clear() {
  // clear all fields
  fieldA = 0;
  req_fieldA = 0;
  opt_fieldA = 0;
  fieldB.clear();
  req_fieldB.clear();
  opt_fieldB.clear();
  fieldC.clear();
  req_fieldC.clear();
  opt_fieldC.clear();
  fieldD = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
  req_fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
  opt_fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool containerStruct2::operator==(const containerStruct2& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.fieldA == rhs.fieldA)) {
    return false;
  }
  if (!(lhs.req_fieldA == rhs.req_fieldA)) {
    return false;
  }
  if (lhs.opt_fieldA_ref().has_value() != rhs.opt_fieldA_ref().has_value()) {
    return false;
  }
  if (lhs.opt_fieldA_ref().has_value()) {
    if (!(lhs.opt_fieldA == rhs.opt_fieldA)) {
      return false;
    }
  }
  if (!(lhs.fieldB == rhs.fieldB)) {
    return false;
  }
  if (!(lhs.req_fieldB == rhs.req_fieldB)) {
    return false;
  }
  if (lhs.opt_fieldB_ref().has_value() != rhs.opt_fieldB_ref().has_value()) {
    return false;
  }
  if (lhs.opt_fieldB_ref().has_value()) {
    if (!(lhs.opt_fieldB == rhs.opt_fieldB)) {
      return false;
    }
  }
  if (!(lhs.fieldC == rhs.fieldC)) {
    return false;
  }
  if (!(lhs.req_fieldC == rhs.req_fieldC)) {
    return false;
  }
  if (lhs.opt_fieldC_ref().has_value() != rhs.opt_fieldC_ref().has_value()) {
    return false;
  }
  if (lhs.opt_fieldC_ref().has_value()) {
    if (!(lhs.opt_fieldC == rhs.opt_fieldC)) {
      return false;
    }
  }
  if (!(lhs.fieldD == rhs.fieldD)) {
    return false;
  }
  if (!(lhs.fieldE == rhs.fieldE)) {
    return false;
  }
  if (!(lhs.req_fieldE == rhs.req_fieldE)) {
    return false;
  }
  if (lhs.opt_fieldE_ref().has_value() != rhs.opt_fieldE_ref().has_value()) {
    return false;
  }
  if (lhs.opt_fieldE_ref().has_value()) {
    if (!(lhs.opt_fieldE == rhs.opt_fieldE)) {
      return false;
    }
  }
  return true;
}

bool containerStruct2::operator<(const containerStruct2& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.fieldA == rhs.fieldA)) {
    return lhs.fieldA < rhs.fieldA;
  }
  if (!(lhs.req_fieldA == rhs.req_fieldA)) {
    return lhs.req_fieldA < rhs.req_fieldA;
  }
  if (lhs.opt_fieldA_ref().has_value() != rhs.opt_fieldA_ref().has_value()) {
    return lhs.opt_fieldA_ref().has_value() < rhs.opt_fieldA_ref().has_value();
  }
  if (lhs.opt_fieldA_ref().has_value()) {
    if (!(lhs.opt_fieldA == rhs.opt_fieldA)) {
      return lhs.opt_fieldA < rhs.opt_fieldA;
    }
  }
  if (!(lhs.fieldB == rhs.fieldB)) {
    return lhs.fieldB < rhs.fieldB;
  }
  if (!(lhs.req_fieldB == rhs.req_fieldB)) {
    return lhs.req_fieldB < rhs.req_fieldB;
  }
  if (lhs.opt_fieldB_ref().has_value() != rhs.opt_fieldB_ref().has_value()) {
    return lhs.opt_fieldB_ref().has_value() < rhs.opt_fieldB_ref().has_value();
  }
  if (lhs.opt_fieldB_ref().has_value()) {
    if (!(lhs.opt_fieldB == rhs.opt_fieldB)) {
      return lhs.opt_fieldB < rhs.opt_fieldB;
    }
  }
  if (!(lhs.fieldC == rhs.fieldC)) {
    return lhs.fieldC < rhs.fieldC;
  }
  if (!(lhs.req_fieldC == rhs.req_fieldC)) {
    return lhs.req_fieldC < rhs.req_fieldC;
  }
  if (lhs.opt_fieldC_ref().has_value() != rhs.opt_fieldC_ref().has_value()) {
    return lhs.opt_fieldC_ref().has_value() < rhs.opt_fieldC_ref().has_value();
  }
  if (lhs.opt_fieldC_ref().has_value()) {
    if (!(lhs.opt_fieldC == rhs.opt_fieldC)) {
      return lhs.opt_fieldC < rhs.opt_fieldC;
    }
  }
  if (!(lhs.fieldD == rhs.fieldD)) {
    return lhs.fieldD < rhs.fieldD;
  }
  if (!(lhs.fieldE == rhs.fieldE)) {
    return lhs.fieldE < rhs.fieldE;
  }
  if (!(lhs.req_fieldE == rhs.req_fieldE)) {
    return lhs.req_fieldE < rhs.req_fieldE;
  }
  if (lhs.opt_fieldE_ref().has_value() != rhs.opt_fieldE_ref().has_value()) {
    return lhs.opt_fieldE_ref().has_value() < rhs.opt_fieldE_ref().has_value();
  }
  if (lhs.opt_fieldE_ref().has_value()) {
    if (!(lhs.opt_fieldE == rhs.opt_fieldE)) {
      return lhs.opt_fieldE < rhs.opt_fieldE;
    }
  }
  return false;
}

const ::std::map<::std::string, bool>& containerStruct2::get_fieldB() const& {
  return fieldB;
}

::std::map<::std::string, bool> containerStruct2::get_fieldB() && {
  return std::move(fieldB);
}

const ::std::map<::std::string, bool>& containerStruct2::get_req_fieldB() const& {
  return req_fieldB;
}

::std::map<::std::string, bool> containerStruct2::get_req_fieldB() && {
  return std::move(req_fieldB);
}

const ::std::map<::std::string, bool>* containerStruct2::get_opt_fieldB() const& {
  return opt_fieldB_ref().has_value() ? std::addressof(opt_fieldB) : nullptr;
}

::std::map<::std::string, bool>* containerStruct2::get_opt_fieldB() & {
  return opt_fieldB_ref().has_value() ? std::addressof(opt_fieldB) : nullptr;
}

const ::std::set<int32_t>& containerStruct2::get_fieldC() const& {
  return fieldC;
}

::std::set<int32_t> containerStruct2::get_fieldC() && {
  return std::move(fieldC);
}

const ::std::set<int32_t>& containerStruct2::get_req_fieldC() const& {
  return req_fieldC;
}

::std::set<int32_t> containerStruct2::get_req_fieldC() && {
  return std::move(req_fieldC);
}

const ::std::set<int32_t>* containerStruct2::get_opt_fieldC() const& {
  return opt_fieldC_ref().has_value() ? std::addressof(opt_fieldC) : nullptr;
}

::std::set<int32_t>* containerStruct2::get_opt_fieldC() & {
  return opt_fieldC_ref().has_value() ? std::addressof(opt_fieldC) : nullptr;
}


void swap(containerStruct2& a, containerStruct2& b) {
  using ::std::swap;
  swap(a.fieldA, b.fieldA);
  swap(a.req_fieldA, b.req_fieldA);
  swap(a.opt_fieldA_ref().value_unchecked(), b.opt_fieldA_ref().value_unchecked());
  swap(a.fieldB, b.fieldB);
  swap(a.req_fieldB, b.req_fieldB);
  swap(a.opt_fieldB_ref().value_unchecked(), b.opt_fieldB_ref().value_unchecked());
  swap(a.fieldC, b.fieldC);
  swap(a.req_fieldC, b.req_fieldC);
  swap(a.opt_fieldC_ref().value_unchecked(), b.opt_fieldC_ref().value_unchecked());
  swap(a.fieldD, b.fieldD);
  swap(a.fieldE, b.fieldE);
  swap(a.req_fieldE, b.req_fieldE);
  swap(a.opt_fieldE_ref().value_unchecked(), b.opt_fieldE_ref().value_unchecked());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void containerStruct2::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t containerStruct2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t containerStruct2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t containerStruct2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void containerStruct2::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t containerStruct2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t containerStruct2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t containerStruct2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void containerStruct2::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t containerStruct2::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t containerStruct2::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t containerStruct2::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

}} // extra::svc

namespace extra { namespace svc {
//  enforce that if this thrift file is generated with extern template instances
//  for simple-json protocol then all its dependencies are too

//  if this struct is generated with extern template instances for nimble
//  protocol, enforce that all its dependencies are too

}} // extra::svc
