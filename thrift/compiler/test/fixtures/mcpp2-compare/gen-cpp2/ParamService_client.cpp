/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/ParamService.h"

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/ParamService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace some { namespace valid { namespace ns {

const char* ParamServiceAsyncClient::getServiceName() {
  return "ParamService";
}

void ParamServiceAsyncClient::void_i16_param(std::unique_ptr<apache::thrift::RequestCallback> callback, int16_t param1) {
  ::apache::thrift::RpcOptions rpcOptions;
  void_i16_paramImpl(false, rpcOptions, std::move(callback), param1);
}

void ParamServiceAsyncClient::void_i16_param(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int16_t param1) {
  void_i16_paramImpl(false, rpcOptions, std::move(callback), param1);
}

void ParamServiceAsyncClient::void_i16_paramImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int16_t param1) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      void_i16_paramT(&writer, useSync, rpcOptions, std::move(callback), param1);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      void_i16_paramT(&writer, useSync, rpcOptions, std::move(callback), param1);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void ParamServiceAsyncClient::sync_void_i16_param(int16_t param1) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_void_i16_param(rpcOptions, param1);
}

void ParamServiceAsyncClient::sync_void_i16_param(apache::thrift::RpcOptions& rpcOptions, int16_t param1) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  void_i16_paramImpl(true, rpcOptions, std::move(callback), param1);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_void_i16_param(_returnState);
}

folly::Future<folly::Unit> ParamServiceAsyncClient::future_void_i16_param(int16_t param1) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_void_i16_param(rpcOptions, param1);
}

folly::Future<folly::Unit> ParamServiceAsyncClient::future_void_i16_param(apache::thrift::RpcOptions& rpcOptions, int16_t param1) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_void_i16_param, channel_);
  void_i16_param(rpcOptions, std::move(callback), param1);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> ParamServiceAsyncClient::header_future_void_i16_param(apache::thrift::RpcOptions& rpcOptions, int16_t param1) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_void_i16_param, channel_);
  void_i16_param(rpcOptions, std::move(callback), param1);
  return _future;
}

void ParamServiceAsyncClient::void_i16_param(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int16_t param1) {
  void_i16_param(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), param1);
}

folly::exception_wrapper ParamServiceAsyncClient::recv_wrapped_void_i16_param(::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_void_i16_paramT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_void_i16_paramT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void ParamServiceAsyncClient::recv_void_i16_param(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_void_i16_param(state);
  if (ew) {
    ew.throw_exception();
  }
}

void ParamServiceAsyncClient::recv_instance_void_i16_param(::apache::thrift::ClientReceiveState& state) {
  recv_void_i16_param(state);
}

folly::exception_wrapper ParamServiceAsyncClient::recv_instance_wrapped_void_i16_param(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_void_i16_param(state);
}

void ParamServiceAsyncClient::void_i32_i64_param(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t param1, int64_t param2) {
  ::apache::thrift::RpcOptions rpcOptions;
  void_i32_i64_paramImpl(false, rpcOptions, std::move(callback), param1, param2);
}

void ParamServiceAsyncClient::void_i32_i64_param(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t param1, int64_t param2) {
  void_i32_i64_paramImpl(false, rpcOptions, std::move(callback), param1, param2);
}

void ParamServiceAsyncClient::void_i32_i64_paramImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t param1, int64_t param2) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      void_i32_i64_paramT(&writer, useSync, rpcOptions, std::move(callback), param1, param2);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      void_i32_i64_paramT(&writer, useSync, rpcOptions, std::move(callback), param1, param2);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void ParamServiceAsyncClient::sync_void_i32_i64_param(int32_t param1, int64_t param2) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_void_i32_i64_param(rpcOptions, param1, param2);
}

void ParamServiceAsyncClient::sync_void_i32_i64_param(apache::thrift::RpcOptions& rpcOptions, int32_t param1, int64_t param2) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  void_i32_i64_paramImpl(true, rpcOptions, std::move(callback), param1, param2);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_void_i32_i64_param(_returnState);
}

folly::Future<folly::Unit> ParamServiceAsyncClient::future_void_i32_i64_param(int32_t param1, int64_t param2) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_void_i32_i64_param(rpcOptions, param1, param2);
}

folly::Future<folly::Unit> ParamServiceAsyncClient::future_void_i32_i64_param(apache::thrift::RpcOptions& rpcOptions, int32_t param1, int64_t param2) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_void_i32_i64_param, channel_);
  void_i32_i64_param(rpcOptions, std::move(callback), param1, param2);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> ParamServiceAsyncClient::header_future_void_i32_i64_param(apache::thrift::RpcOptions& rpcOptions, int32_t param1, int64_t param2) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_void_i32_i64_param, channel_);
  void_i32_i64_param(rpcOptions, std::move(callback), param1, param2);
  return _future;
}

void ParamServiceAsyncClient::void_i32_i64_param(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t param1, int64_t param2) {
  void_i32_i64_param(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), param1, param2);
}

folly::exception_wrapper ParamServiceAsyncClient::recv_wrapped_void_i32_i64_param(::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_void_i32_i64_paramT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_void_i32_i64_paramT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void ParamServiceAsyncClient::recv_void_i32_i64_param(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_void_i32_i64_param(state);
  if (ew) {
    ew.throw_exception();
  }
}

void ParamServiceAsyncClient::recv_instance_void_i32_i64_param(::apache::thrift::ClientReceiveState& state) {
  recv_void_i32_i64_param(state);
}

folly::exception_wrapper ParamServiceAsyncClient::recv_instance_wrapped_void_i32_i64_param(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_void_i32_i64_param(state);
}

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
