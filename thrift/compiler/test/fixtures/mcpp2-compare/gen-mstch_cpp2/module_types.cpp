/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_types.h"

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_types.tcc"

#include <algorithm>

#include <folly/Indestructible.h>

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_data.h"



namespace some { namespace valid { namespace ns {

const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES = _MyEnumA_EnumMapFactory::makeValuesToNamesMap();
const _MyEnumA_EnumMapFactory::NamesToValuesMapType _MyEnumA_NAMES_TO_VALUES = _MyEnumA_EnumMapFactory::makeNamesToValuesMap();

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::some::valid::ns::MyEnumA>::size = 3;
template <> const folly::Range<const  ::some::valid::ns::MyEnumA*> TEnumTraits< ::some::valid::ns::MyEnumA>::values = folly::range( ::some::valid::ns::_MyEnumAEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::some::valid::ns::MyEnumA>::names = folly::range( ::some::valid::ns::_MyEnumAEnumDataStorage::names);
template <> const char* TEnumTraits< ::some::valid::ns::MyEnumA>::findName( ::some::valid::ns::MyEnumA value) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_MyEnumA_EnumMapFactory::ValuesToNamesMapType>{ ::some::valid::ns::_MyEnumA_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::some::valid::ns::MyEnumA>::findValue(const char* name,  ::some::valid::ns::MyEnumA* outValue) {
  static auto const map = folly::Indestructible< ::some::valid::ns::_MyEnumA_EnumMapFactory::NamesToValuesMapType>{ ::some::valid::ns::_MyEnumA_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void Empty::__clear() {
  // clear all fields
}

bool Empty::operator==(const Empty& /* rhs */) const {
  return true;
}

void swap(Empty& a, Empty& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template uint32_t Empty::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Empty::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void MyStruct::__clear() {
  // clear all fields
  MyBoolField = 0;
  MyIntField = 12LL;
  MyStringField = apache::thrift::StringTraits< std::string>::fromStringLiteral("test");
  MyStringField2 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset.__clear();
}

bool MyStruct::operator==(const MyStruct& rhs) const {
  if (!((MyBoolField == rhs.MyBoolField))) {
    return false;
  }
  if (!((MyIntField == rhs.MyIntField))) {
    return false;
  }
  if (!((MyStringField == rhs.MyStringField))) {
    return false;
  }
  if (!((MyStringField2 == rhs.MyStringField2))) {
    return false;
  }
  return true;
}

void swap(MyStruct& a, MyStruct& b) {
  using ::std::swap;
  swap(a.MyBoolField, b.MyBoolField);
  swap(a.MyIntField, b.MyIntField);
  swap(a.MyStringField, b.MyStringField);
  swap(a.MyStringField2, b.MyStringField2);
  swap(a.__isset, b.__isset);
}

template uint32_t MyStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void SimpleUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::intValue:
    {
      destruct(value_.intValue);
      break;
    }
    case Type::stringValue:
    {
      destruct(value_.stringValue);
      break;
    }
    default:
    {
      assert(false);
      break;
    }
  }
  type_ = Type::__EMPTY__;
}

bool SimpleUnion::operator==(const SimpleUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::intValue:
    {
      return value_.intValue == rhs.value_.intValue;
    }
    case Type::stringValue:
    {
      return value_.stringValue == rhs.value_.stringValue;
    }
    default:
    {
      return true;
    }
  }
}

void swap(SimpleUnion& a, SimpleUnion& b) {
  SimpleUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template uint32_t SimpleUnion::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleUnion::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void ComplexUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::intValue:
    {
      destruct(value_.intValue);
      break;
    }
    case Type::stringValue:
    {
      destruct(value_.stringValue);
      break;
    }
    case Type::intValue2:
    {
      destruct(value_.intValue2);
      break;
    }
    case Type::intValue3:
    {
      destruct(value_.intValue3);
      break;
    }
    case Type::doubelValue:
    {
      destruct(value_.doubelValue);
      break;
    }
    case Type::boolValue:
    {
      destruct(value_.boolValue);
      break;
    }
    case Type::union_list:
    {
      destruct(value_.union_list);
      break;
    }
    case Type::union_set:
    {
      destruct(value_.union_set);
      break;
    }
    case Type::union_map:
    {
      destruct(value_.union_map);
      break;
    }
    case Type::enum_field:
    {
      destruct(value_.enum_field);
      break;
    }
    case Type::enum_container:
    {
      destruct(value_.enum_container);
      break;
    }
    case Type::a_struct:
    {
      destruct(value_.a_struct);
      break;
    }
    case Type::a_set_struct:
    {
      destruct(value_.a_set_struct);
      break;
    }
    case Type::a_union:
    {
      destruct(value_.a_union);
      break;
    }
    case Type::a_union_list:
    {
      destruct(value_.a_union_list);
      break;
    }
    case Type::a_union_typedef:
    {
      destruct(value_.a_union_typedef);
      break;
    }
    case Type::a_union_typedef_list:
    {
      destruct(value_.a_union_typedef_list);
      break;
    }
    default:
    {
      assert(false);
      break;
    }
  }
  type_ = Type::__EMPTY__;
}

bool ComplexUnion::operator==(const ComplexUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::intValue:
    {
      return value_.intValue == rhs.value_.intValue;
    }
    case Type::stringValue:
    {
      return value_.stringValue == rhs.value_.stringValue;
    }
    case Type::intValue2:
    {
      return value_.intValue2 == rhs.value_.intValue2;
    }
    case Type::intValue3:
    {
      return value_.intValue3 == rhs.value_.intValue3;
    }
    case Type::doubelValue:
    {
      return value_.doubelValue == rhs.value_.doubelValue;
    }
    case Type::boolValue:
    {
      return value_.boolValue == rhs.value_.boolValue;
    }
    case Type::union_list:
    {
      return value_.union_list == rhs.value_.union_list;
    }
    case Type::union_set:
    {
      return value_.union_set == rhs.value_.union_set;
    }
    case Type::union_map:
    {
      return value_.union_map == rhs.value_.union_map;
    }
    case Type::enum_field:
    {
      return value_.enum_field == rhs.value_.enum_field;
    }
    case Type::enum_container:
    {
      return value_.enum_container == rhs.value_.enum_container;
    }
    case Type::a_struct:
    {
      return value_.a_struct == rhs.value_.a_struct;
    }
    case Type::a_set_struct:
    {
      return value_.a_set_struct == rhs.value_.a_set_struct;
    }
    case Type::a_union:
    {
      return value_.a_union == rhs.value_.a_union;
    }
    case Type::a_union_list:
    {
      return value_.a_union_list == rhs.value_.a_union_list;
    }
    case Type::a_union_typedef:
    {
      return value_.a_union_typedef == rhs.value_.a_union_typedef;
    }
    case Type::a_union_typedef_list:
    {
      return value_.a_union_typedef_list == rhs.value_.a_union_typedef_list;
    }
    default:
    {
      return true;
    }
  }
}

void swap(ComplexUnion& a, ComplexUnion& b) {
  ComplexUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template uint32_t ComplexUnion::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexUnion::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void AnException::__clear() {
  // clear all fields
  code = 0;
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  exception_list.clear();
  exception_set.clear();
  exception_map.clear();
  enum_field = static_cast< ::some::valid::ns::MyEnumA>(0);
  enum_container.clear();
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::clear(&a_struct);
  a_set_struct.clear();
  a_union_list.clear();
  union_typedef.clear();
  a_union_typedef_list.clear();
  __isset.__clear();
}

bool AnException::operator==(const AnException& rhs) const {
  if (!((code == rhs.code))) {
    return false;
  }
  if (!((message == rhs.message))) {
    return false;
  }
  if (!((exception_list == rhs.exception_list))) {
    return false;
  }
  if (!((exception_set == rhs.exception_set))) {
    return false;
  }
  if (!((exception_map == rhs.exception_map))) {
    return false;
  }
  if (!((enum_field == rhs.enum_field))) {
    return false;
  }
  if (!((enum_container == rhs.enum_container))) {
    return false;
  }
  if (!((a_struct == rhs.a_struct))) {
    return false;
  }
  if (!((a_set_struct == rhs.a_set_struct))) {
    return false;
  }
  if (!((a_union_list == rhs.a_union_list))) {
    return false;
  }
  if (!((union_typedef == rhs.union_typedef))) {
    return false;
  }
  if (!((a_union_typedef_list == rhs.a_union_typedef_list))) {
    return false;
  }
  return true;
}

const std::vector<int32_t>& AnException::get_exception_list() const& {
  return exception_list;
}

std::vector<int32_t> AnException::get_exception_list() && {
  return std::move(exception_list);
}

const std::set<int64_t>& AnException::get_exception_set() const& {
  return exception_set;
}

std::set<int64_t> AnException::get_exception_set() && {
  return std::move(exception_set);
}

const std::map<std::string, int32_t>& AnException::get_exception_map() const& {
  return exception_map;
}

std::map<std::string, int32_t> AnException::get_exception_map() && {
  return std::move(exception_map);
}

const std::vector< ::some::valid::ns::MyEnumA>& AnException::get_enum_container() const& {
  return enum_container;
}

std::vector< ::some::valid::ns::MyEnumA> AnException::get_enum_container() && {
  return std::move(enum_container);
}

const  ::some::valid::ns::MyStruct& AnException::get_a_struct() const& {
  return a_struct;
}

 ::some::valid::ns::MyStruct AnException::get_a_struct() && {
  return std::move(a_struct);
}

const std::set< ::some::valid::ns::MyStruct>& AnException::get_a_set_struct() const& {
  return a_set_struct;
}

std::set< ::some::valid::ns::MyStruct> AnException::get_a_set_struct() && {
  return std::move(a_set_struct);
}

const std::vector< ::some::valid::ns::SimpleUnion>& AnException::get_a_union_list() const& {
  return a_union_list;
}

std::vector< ::some::valid::ns::SimpleUnion> AnException::get_a_union_list() && {
  return std::move(a_union_list);
}

const  ::some::valid::ns::unionTypeDef& AnException::get_union_typedef() const& {
  return union_typedef;
}

 ::some::valid::ns::unionTypeDef AnException::get_union_typedef() && {
  return std::move(union_typedef);
}

const std::vector< ::some::valid::ns::unionTypeDef>& AnException::get_a_union_typedef_list() const& {
  return a_union_typedef_list;
}

std::vector< ::some::valid::ns::unionTypeDef> AnException::get_a_union_typedef_list() && {
  return std::move(a_union_typedef_list);
}

void swap(AnException& a, AnException& b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.exception_list, b.exception_list);
  swap(a.exception_set, b.exception_set);
  swap(a.exception_map, b.exception_map);
  swap(a.enum_field, b.enum_field);
  swap(a.enum_container, b.enum_container);
  swap(a.a_struct, b.a_struct);
  swap(a.a_set_struct, b.a_set_struct);
  swap(a.a_union_list, b.a_union_list);
  swap(a.union_typedef, b.union_typedef);
  swap(a.a_union_typedef_list, b.a_union_typedef_list);
  swap(a.__isset, b.__isset);
}

template uint32_t AnException::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnException::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void containerStruct::__clear() {
  // clear all fields
  fieldA = 0;
  fieldB.clear();
  fieldC.clear();
  fieldD = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  fieldE = apache::thrift::StringTraits< std::string>::fromStringLiteral("somestring");
  fieldF.clear();
  fieldG.clear();
  fieldH.clear();
  fieldI = true;
  fieldJ.clear();
  fieldK.clear();
  fieldL.clear();
  fieldM.clear();
  fieldN = 0;
  fieldO.clear();
  fieldP.clear();
  fieldQ = static_cast< ::some::valid::ns::MyEnumA>(0);
  fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  fieldS =  ::some::valid::ns::MyEnumA::fieldB;
  fieldT.clear();
  fieldU.clear();
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::clear(&fieldV);
  fieldW.clear();
  ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::clear(&fieldX);
  fieldY.clear();
  fieldZ.clear();
  fieldAA.clear();
  __isset.__clear();
}

bool containerStruct::operator==(const containerStruct& rhs) const {
  if (!((fieldA == rhs.fieldA))) {
    return false;
  }
  if (!((fieldB == rhs.fieldB))) {
    return false;
  }
  if (!((fieldC == rhs.fieldC))) {
    return false;
  }
  if (!((fieldD == rhs.fieldD))) {
    return false;
  }
  if (!((fieldE == rhs.fieldE))) {
    return false;
  }
  if (!((fieldF == rhs.fieldF))) {
    return false;
  }
  if (!((fieldG == rhs.fieldG))) {
    return false;
  }
  if (!((fieldH == rhs.fieldH))) {
    return false;
  }
  if (!((fieldI == rhs.fieldI))) {
    return false;
  }
  if (!((fieldJ == rhs.fieldJ))) {
    return false;
  }
  if (!((fieldK == rhs.fieldK))) {
    return false;
  }
  if (!((fieldL == rhs.fieldL))) {
    return false;
  }
  if (!((fieldM == rhs.fieldM))) {
    return false;
  }
  if (!((fieldN == rhs.fieldN))) {
    return false;
  }
  if (!((fieldO == rhs.fieldO))) {
    return false;
  }
  if (!((fieldP == rhs.fieldP))) {
    return false;
  }
  if (!((fieldQ == rhs.fieldQ))) {
    return false;
  }
  if (!((fieldR == rhs.fieldR))) {
    return false;
  }
  if (!((fieldS == rhs.fieldS))) {
    return false;
  }
  if (!((fieldT == rhs.fieldT))) {
    return false;
  }
  if (!((fieldU == rhs.fieldU))) {
    return false;
  }
  if (!((fieldV == rhs.fieldV))) {
    return false;
  }
  if (!((fieldW == rhs.fieldW))) {
    return false;
  }
  if (!((fieldX == rhs.fieldX))) {
    return false;
  }
  if (!((fieldY == rhs.fieldY))) {
    return false;
  }
  if (!((fieldZ == rhs.fieldZ))) {
    return false;
  }
  if (!((fieldAA == rhs.fieldAA))) {
    return false;
  }
  return true;
}

const std::map<std::string, bool>& containerStruct::get_fieldB() const& {
  return fieldB;
}

std::map<std::string, bool> containerStruct::get_fieldB() && {
  return std::move(fieldB);
}

const std::set<int32_t>& containerStruct::get_fieldC() const& {
  return fieldC;
}

std::set<int32_t> containerStruct::get_fieldC() && {
  return std::move(fieldC);
}

const std::vector<std::vector<int32_t>>& containerStruct::get_fieldF() const& {
  return fieldF;
}

std::vector<std::vector<int32_t>> containerStruct::get_fieldF() && {
  return std::move(fieldF);
}

const std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>& containerStruct::get_fieldG() const& {
  return fieldG;
}

std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>> containerStruct::get_fieldG() && {
  return std::move(fieldG);
}

const std::vector<std::set<int32_t>>& containerStruct::get_fieldH() const& {
  return fieldH;
}

std::vector<std::set<int32_t>> containerStruct::get_fieldH() && {
  return std::move(fieldH);
}

const std::map<std::string, std::vector<int32_t>>& containerStruct::get_fieldJ() const& {
  return fieldJ;
}

std::map<std::string, std::vector<int32_t>> containerStruct::get_fieldJ() && {
  return std::move(fieldJ);
}

const std::vector<std::vector<std::vector<std::vector<int32_t>>>>& containerStruct::get_fieldK() const& {
  return fieldK;
}

std::vector<std::vector<std::vector<std::vector<int32_t>>>> containerStruct::get_fieldK() && {
  return std::move(fieldK);
}

const std::set<std::set<std::set<bool>>>& containerStruct::get_fieldL() const& {
  return fieldL;
}

std::set<std::set<std::set<bool>>> containerStruct::get_fieldL() && {
  return std::move(fieldL);
}

const std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>& containerStruct::get_fieldM() const& {
  return fieldM;
}

std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>> containerStruct::get_fieldM() && {
  return std::move(fieldM);
}

const  ::some::valid::ns::complexStructTypeDef& containerStruct::get_fieldO() const& {
  return fieldO;
}

 ::some::valid::ns::complexStructTypeDef containerStruct::get_fieldO() && {
  return std::move(fieldO);
}

const std::vector< ::some::valid::ns::mostComplexTypeDef>& containerStruct::get_fieldP() const& {
  return fieldP;
}

std::vector< ::some::valid::ns::mostComplexTypeDef> containerStruct::get_fieldP() && {
  return std::move(fieldP);
}

const std::vector< ::some::valid::ns::MyEnumA>& containerStruct::get_fieldT() const& {
  return fieldT;
}

std::vector< ::some::valid::ns::MyEnumA> containerStruct::get_fieldT() && {
  return std::move(fieldT);
}

const std::vector< ::some::valid::ns::MyEnumA>& containerStruct::get_fieldU() const& {
  return fieldU;
}

std::vector< ::some::valid::ns::MyEnumA> containerStruct::get_fieldU() && {
  return std::move(fieldU);
}

const  ::some::valid::ns::MyStruct& containerStruct::get_fieldV() const& {
  return fieldV;
}

 ::some::valid::ns::MyStruct containerStruct::get_fieldV() && {
  return std::move(fieldV);
}

const std::set< ::some::valid::ns::MyStruct>& containerStruct::get_fieldW() const& {
  return fieldW;
}

std::set< ::some::valid::ns::MyStruct> containerStruct::get_fieldW() && {
  return std::move(fieldW);
}

const  ::some::valid::ns::ComplexUnion& containerStruct::get_fieldX() const& {
  return fieldX;
}

 ::some::valid::ns::ComplexUnion containerStruct::get_fieldX() && {
  return std::move(fieldX);
}

const std::vector< ::some::valid::ns::ComplexUnion>& containerStruct::get_fieldY() const& {
  return fieldY;
}

std::vector< ::some::valid::ns::ComplexUnion> containerStruct::get_fieldY() && {
  return std::move(fieldY);
}

const  ::some::valid::ns::unionTypeDef& containerStruct::get_fieldZ() const& {
  return fieldZ;
}

 ::some::valid::ns::unionTypeDef containerStruct::get_fieldZ() && {
  return std::move(fieldZ);
}

const std::vector< ::some::valid::ns::unionTypeDef>& containerStruct::get_fieldAA() const& {
  return fieldAA;
}

std::vector< ::some::valid::ns::unionTypeDef> containerStruct::get_fieldAA() && {
  return std::move(fieldAA);
}

void swap(containerStruct& a, containerStruct& b) {
  using ::std::swap;
  swap(a.fieldA, b.fieldA);
  swap(a.fieldB, b.fieldB);
  swap(a.fieldC, b.fieldC);
  swap(a.fieldD, b.fieldD);
  swap(a.fieldE, b.fieldE);
  swap(a.fieldF, b.fieldF);
  swap(a.fieldG, b.fieldG);
  swap(a.fieldH, b.fieldH);
  swap(a.fieldI, b.fieldI);
  swap(a.fieldJ, b.fieldJ);
  swap(a.fieldK, b.fieldK);
  swap(a.fieldL, b.fieldL);
  swap(a.fieldM, b.fieldM);
  swap(a.fieldN, b.fieldN);
  swap(a.fieldO, b.fieldO);
  swap(a.fieldP, b.fieldP);
  swap(a.fieldQ, b.fieldQ);
  swap(a.fieldR, b.fieldR);
  swap(a.fieldS, b.fieldS);
  swap(a.fieldT, b.fieldT);
  swap(a.fieldU, b.fieldU);
  swap(a.fieldV, b.fieldV);
  swap(a.fieldW, b.fieldW);
  swap(a.fieldX, b.fieldX);
  swap(a.fieldY, b.fieldY);
  swap(a.fieldZ, b.fieldZ);
  swap(a.fieldAA, b.fieldAA);
  swap(a.__isset, b.__isset);
}

template uint32_t containerStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t containerStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

void MyIncludedStruct::__clear() {
  // clear all fields
  MyIncludedInt = 42LL;
  __isset.__clear();
}

bool MyIncludedStruct::operator==(const MyIncludedStruct& rhs) const {
  if (!((MyIncludedInt == rhs.MyIncludedInt))) {
    return false;
  }
  return true;
}

void swap(MyIncludedStruct& a, MyIncludedStruct& b) {
  using ::std::swap;
  swap(a.MyIncludedInt, b.MyIncludedInt);
  swap(a.__isset, b.__isset);
}

template uint32_t MyIncludedStruct::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyIncludedStruct::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // some::valid::ns
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

}}} // some::valid::ns
