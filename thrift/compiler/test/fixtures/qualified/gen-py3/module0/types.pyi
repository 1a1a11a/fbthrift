#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
from enum import Enum


class Enum(Enum):
    ONE: ...
    TWO: ...
    THREE: ...
    value: int


# Forward Definitions for Structs
class Struct(thrift.py3.types.Struct): ...
# Forward Definitions for Containers
class List__Enum(_typing.Sequence[Enum]): ...


class Struct(thrift.py3.types.Struct):
    def __init__(
        self, *,
        first: int=None,
        second: str=None
    ) -> None: ...

    def __call__(
        self, *,
        first: _typing.Union[int, NOTSET, None]=NOTSET,
        second: _typing.Union[str, NOTSET, None]=NOTSET
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[Struct], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Struct) -> bool: ...
    def __lt__(self, other: Struct) -> bool: ...

    @property
    def first(self) -> int: ...
    @property
    def second(self) -> str: ...


_List__EnumT = _typing.TypeVar('_List__EnumT', bound=_typing.Sequence[Enum])


class List__Enum(_typing.Sequence[Enum]):
    def __init__(self, items: _typing.Sequence[Enum]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: Enum) -> int: ...
    def count(self, item: Enum) -> int: ...
    def __add__(self, other: _typing.Sequence[Enum]) -> List__Enum: ...
    def __radd__(self, other: _List__EnumT) -> _List__EnumT: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__Enum: ...
    def __getitem__(self, index: int) -> Enum: ...
    def __reversed__(self) -> _typing.Iterator[Enum]: ...
    def __iter__(self) -> _typing.Iterator[Enum]: ...
    def __contains__(self, item: Enum) -> bool: ...
    def __eq__(self, other: _typing.Sequence[Enum]) -> bool: ...


