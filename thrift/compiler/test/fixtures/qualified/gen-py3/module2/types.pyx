#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t, uint32_t
from cython.operator cimport dereference as deref, preincrement as inc
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import NOTSET
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer cimport IOBuf
from thrift.py3.serializer import Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum
cimport module0.types
import module0.types
cimport module1.types
import module1.types




cdef class Struct(thrift.py3.types.Struct):

    def __init__(
        Struct self,
        first=None,
        second=None
    ):
        self._cpp_obj = make_shared[cStruct]()

        inst = self
        cdef shared_ptr[module0.types.cStruct] __first
        if first is not None:
            __first = (
            <module0.types.Struct?> first)._cpp_obj
            deref(inst._cpp_obj).first = deref(__first.get())
            deref(inst._cpp_obj).__isset.first = True

        cdef shared_ptr[module1.types.cStruct] __second
        if second is not None:
            __second = (
            <module1.types.Struct?> second)._cpp_obj
            deref(inst._cpp_obj).second = deref(__second.get())
            deref(inst._cpp_obj).__isset.second = True


    cdef bytes _serialize(Struct self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cStruct](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cStruct](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cStruct](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(Struct self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cStruct](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cStruct](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cStruct](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (Struct, serialize(self)))

    def __call__(
        Struct self,
        first=NOTSET,
        second=NOTSET
    ):
        changes = any((
            first is not NOTSET,

            second is not NOTSET,
        ))

        if not changes:
            return self

        inst = <Struct>Struct.__new__(Struct)
        inst._cpp_obj = make_shared[cStruct](deref(self._cpp_obj))
        cdef Struct defaults = Struct_defaults

        # Convert None's to default value.
        if first is None:
            deref(inst._cpp_obj).first = deref(defaults._cpp_obj).first
            deref(inst._cpp_obj).__isset.first = False
        if first is NOTSET:
            first = None
        if second is None:
            deref(inst._cpp_obj).second = deref(defaults._cpp_obj).second
            deref(inst._cpp_obj).__isset.second = False
        if second is NOTSET:
            second = None

        cdef shared_ptr[module0.types.cStruct] __first
        if first is not None:
            __first = (
            <module0.types.Struct?> first)._cpp_obj
            deref(inst._cpp_obj).first = deref(__first.get())
            deref(inst._cpp_obj).__isset.first = True

        cdef shared_ptr[module1.types.cStruct] __second
        if second is not None:
            __second = (
            <module1.types.Struct?> second)._cpp_obj
            deref(inst._cpp_obj).second = deref(__second.get())
            deref(inst._cpp_obj).__isset.second = True

        return inst

    def __iter__(self):
        yield 'first', self.first
        yield 'second', self.second

    def __bool__(self):
        return deref(self._cpp_obj).__isset.first or deref(self._cpp_obj).__isset.second

    @staticmethod
    cdef create(shared_ptr[cStruct] cpp_obj):
        inst = <Struct>Struct.__new__(Struct)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def first(self):
        if not deref(self._cpp_obj).__isset.first:
            return None

        cdef shared_ptr[module0.types.cStruct] item
        if self.__first is None:
            item = make_shared[module0.types.cStruct](
                deref(self._cpp_obj).first)
            self.__first = module0.types.Struct.create(item)
        return self.__first
        

    @property
    def second(self):
        if not deref(self._cpp_obj).__isset.second:
            return None

        cdef shared_ptr[module1.types.cStruct] item
        if self.__second is None:
            item = make_shared[module1.types.cStruct](
                deref(self._cpp_obj).second)
            self.__second = module1.types.Struct.create(item)
        return self.__second
        


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Struct) and
                isinstance(other, Struct)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cStruct cself = deref((<Struct>self)._cpp_obj)
        cdef cStruct cother = deref((<Struct>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Struct self):
        if not self.__hash:
            self.__hash = hash((
            self.first,
            self.second,
            ))
        return self.__hash

    def __repr__(Struct self):
        return f'Struct(first={repr(self.first)}, second={repr(self.second)})'


Struct_defaults = Struct()


cdef class BigStruct(thrift.py3.types.Struct):

    def __init__(
        BigStruct self,
        s=None,
        id=None
    ):
        self._cpp_obj = make_shared[cBigStruct]()

        inst = self
        cdef shared_ptr[cStruct] __s
        if s is not None:
            __s = (
            <Struct?> s)._cpp_obj
            deref(inst._cpp_obj).s = deref(__s.get())
            deref(inst._cpp_obj).__isset.s = True

        if id is not None:
            deref(inst._cpp_obj).id = id
            deref(inst._cpp_obj).__isset.id = True


    cdef bytes _serialize(BigStruct self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cBigStruct](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cBigStruct](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cBigStruct](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(BigStruct self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cBigStruct](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cBigStruct](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cBigStruct](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (BigStruct, serialize(self)))

    def __call__(
        BigStruct self,
        s=NOTSET,
        id=NOTSET
    ):
        changes = any((
            s is not NOTSET,

            id is not NOTSET,
        ))

        if not changes:
            return self

        inst = <BigStruct>BigStruct.__new__(BigStruct)
        inst._cpp_obj = make_shared[cBigStruct](deref(self._cpp_obj))
        cdef BigStruct defaults = BigStruct_defaults

        # Convert None's to default value.
        if s is None:
            deref(inst._cpp_obj).s = deref(defaults._cpp_obj).s
            deref(inst._cpp_obj).__isset.s = False
        if s is NOTSET:
            s = None
        if id is None:
            deref(inst._cpp_obj).id = deref(defaults._cpp_obj).id
            deref(inst._cpp_obj).__isset.id = False
        if id is NOTSET:
            id = None

        cdef shared_ptr[cStruct] __s
        if s is not None:
            __s = (
            <Struct?> s)._cpp_obj
            deref(inst._cpp_obj).s = deref(__s.get())
            deref(inst._cpp_obj).__isset.s = True

        if id is not None:
            deref(inst._cpp_obj).id = id
            deref(inst._cpp_obj).__isset.id = True

        return inst

    def __iter__(self):
        yield 's', self.s
        yield 'id', self.id

    def __bool__(self):
        return deref(self._cpp_obj).__isset.s or deref(self._cpp_obj).__isset.id

    @staticmethod
    cdef create(shared_ptr[cBigStruct] cpp_obj):
        inst = <BigStruct>BigStruct.__new__(BigStruct)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def s(self):
        if not deref(self._cpp_obj).__isset.s:
            return None

        cdef shared_ptr[cStruct] item
        if self.__s is None:
            item = make_shared[cStruct](
                deref(self._cpp_obj).s)
            self.__s = Struct.create(item)
        return self.__s
        

    @property
    def id(self):
        if not deref(self._cpp_obj).__isset.id:
            return None

        return self._cpp_obj.get().id


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, BigStruct) and
                isinstance(other, BigStruct)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cBigStruct cself = deref((<BigStruct>self)._cpp_obj)
        cdef cBigStruct cother = deref((<BigStruct>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(BigStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.s,
            self.id,
            ))
        return self.__hash

    def __repr__(BigStruct self):
        return f'BigStruct(s={repr(self.s)}, id={repr(self.id)})'


BigStruct_defaults = BigStruct()


c2 = Struct.create(
    make_shared[cStruct](cc2()))
