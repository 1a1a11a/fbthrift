{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------

module Module2_Types where
import Prelude ( Bool(..), Enum, Float, IO, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 concat, error, fromIntegral, fromEnum, length, map,
                 maybe, not, null, otherwise, return, show, toEnum,
                 enumFromTo, Bounded, minBound, maxBound, seq,
                 (.), (&&), (||), (==), (++), ($), (-), (>>=), (>>))

import Control.Applicative (ZipList(..), (<*>))
import Control.DeepSeq
import Control.Exception
import Control.Monad ( liftM, ap, when )
import Data.ByteString.Lazy (ByteString)
import Data.Functor ( (<$>) )
import Data.Hashable
import Data.Int
import Data.Maybe (catMaybes)
import Data.Text.Lazy.Encoding ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import Test.QuickCheck.Arbitrary ( Arbitrary(..) )
import Test.QuickCheck ( elements )

import Thrift hiding (ProtocolExnType(..))
import qualified Thrift (ProtocolExnType(..))
import Thrift.Types
import Thrift.Arbitraries

import qualified Module0_Types as Module0_Types
import qualified Module1_Types as Module1_Types


data Struct = Struct
  { struct_first :: Module0_Types.Struct
  , struct_second :: Module1_Types.Struct
  } deriving (Show,Eq,Typeable)
instance Hashable Struct where
  hashWithSalt salt record = salt   `hashWithSalt` struct_first record   `hashWithSalt` struct_second record  
instance NFData Struct where
  rnf _record0 =
    rnf (struct_first _record0) `seq`
    rnf (struct_second _record0) `seq`
    ()
instance Arbitrary Struct where 
  arbitrary = liftM Struct (arbitrary)
          `ap`(arbitrary)
  shrink obj | obj == default_Struct = []
             | otherwise = catMaybes
    [ if obj == default_Struct{struct_first = struct_first obj} then Nothing else Just $ default_Struct{struct_first = struct_first obj}
    , if obj == default_Struct{struct_second = struct_second obj} then Nothing else Just $ default_Struct{struct_second = struct_second obj}
    ]
from_Struct :: Struct -> ThriftVal
from_Struct record = TStruct $ Map.fromList $ catMaybes
  [ (\_v3 -> Just (1, ("first",Module0_Types.from_Struct _v3))) $ struct_first record
  , (\_v3 -> Just (2, ("second",Module1_Types.from_Struct _v3))) $ struct_second record
  ]
write_Struct :: (Protocol p, Transport t) => p t -> Struct -> IO ()
write_Struct oprot record = writeVal oprot $ from_Struct record
encode_Struct :: (Protocol p, Transport t) => p t -> Struct -> ByteString
encode_Struct oprot record = serializeVal oprot $ from_Struct record
to_Struct :: ThriftVal -> Struct
to_Struct (TStruct fields) = Struct{
  struct_first = maybe (struct_first default_Struct) (\(_,_val5) -> (case _val5 of {TStruct _val6 -> (Module0_Types.to_Struct (TStruct _val6)); _ -> error "wrong type"})) (Map.lookup (1) fields),
  struct_second = maybe (struct_second default_Struct) (\(_,_val5) -> (case _val5 of {TStruct _val7 -> (Module1_Types.to_Struct (TStruct _val7)); _ -> error "wrong type"})) (Map.lookup (2) fields)
  }
to_Struct _ = error "not a struct"
read_Struct :: (Transport t, Protocol p) => p t -> IO Struct
read_Struct iprot = to_Struct <$> readVal iprot (T_STRUCT typemap_Struct)
decode_Struct :: (Protocol p, Transport t) => p t -> ByteString -> Struct
decode_Struct iprot bs = to_Struct $ deserializeVal iprot (T_STRUCT typemap_Struct) bs
typemap_Struct :: TypeMap
typemap_Struct = Map.fromList [("first",(1,(T_STRUCT Module0_Types.typemap_Struct))),("second",(2,(T_STRUCT Module1_Types.typemap_Struct)))]
default_Struct :: Struct
default_Struct = Struct{
  struct_first = Module0_Types.default_Struct,
  struct_second = Module1_Types.default_Struct}
data BigStruct = BigStruct
  { bigStruct_s :: Module2_Types.Struct
  , bigStruct_id :: Int32
  } deriving (Show,Eq,Typeable)
instance Hashable BigStruct where
  hashWithSalt salt record = salt   `hashWithSalt` bigStruct_s record   `hashWithSalt` bigStruct_id record  
instance NFData BigStruct where
  rnf _record8 =
    rnf (bigStruct_s _record8) `seq`
    rnf (bigStruct_id _record8) `seq`
    ()
instance Arbitrary BigStruct where 
  arbitrary = liftM BigStruct (arbitrary)
          `ap`(arbitrary)
  shrink obj | obj == default_BigStruct = []
             | otherwise = catMaybes
    [ if obj == default_BigStruct{bigStruct_s = bigStruct_s obj} then Nothing else Just $ default_BigStruct{bigStruct_s = bigStruct_s obj}
    , if obj == default_BigStruct{bigStruct_id = bigStruct_id obj} then Nothing else Just $ default_BigStruct{bigStruct_id = bigStruct_id obj}
    ]
from_BigStruct :: BigStruct -> ThriftVal
from_BigStruct record = TStruct $ Map.fromList $ catMaybes
  [ (\_v11 -> Just (1, ("s",Module2_Types.from_Struct _v11))) $ bigStruct_s record
  , (\_v11 -> Just (2, ("id",TI32 _v11))) $ bigStruct_id record
  ]
write_BigStruct :: (Protocol p, Transport t) => p t -> BigStruct -> IO ()
write_BigStruct oprot record = writeVal oprot $ from_BigStruct record
encode_BigStruct :: (Protocol p, Transport t) => p t -> BigStruct -> ByteString
encode_BigStruct oprot record = serializeVal oprot $ from_BigStruct record
to_BigStruct :: ThriftVal -> BigStruct
to_BigStruct (TStruct fields) = BigStruct{
  bigStruct_s = maybe (bigStruct_s default_BigStruct) (\(_,_val13) -> (case _val13 of {TStruct _val14 -> (Module2_Types.to_Struct (TStruct _val14)); _ -> error "wrong type"})) (Map.lookup (1) fields),
  bigStruct_id = maybe (bigStruct_id default_BigStruct) (\(_,_val13) -> (case _val13 of {TI32 _val15 -> _val15; _ -> error "wrong type"})) (Map.lookup (2) fields)
  }
to_BigStruct _ = error "not a struct"
read_BigStruct :: (Transport t, Protocol p) => p t -> IO BigStruct
read_BigStruct iprot = to_BigStruct <$> readVal iprot (T_STRUCT typemap_BigStruct)
decode_BigStruct :: (Protocol p, Transport t) => p t -> ByteString -> BigStruct
decode_BigStruct iprot bs = to_BigStruct $ deserializeVal iprot (T_STRUCT typemap_BigStruct) bs
typemap_BigStruct :: TypeMap
typemap_BigStruct = Map.fromList [("s",(1,(T_STRUCT Module2_Types.typemap_Struct))),("id",(2,T_I32))]
default_BigStruct :: BigStruct
default_BigStruct = BigStruct{
  bigStruct_s = Module2_Types.default_Struct,
  bigStruct_id = 0}
