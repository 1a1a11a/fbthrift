/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.module2;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="BigStruct", builder=BigStruct.Builder.class)
public final class BigStruct {
    @ThriftConstructor
    public BigStruct(
        @ThriftField(value=1, name="s", requiredness=Requiredness.NONE) final test.fixtures.module2.Struct s,
        @ThriftField(value=2, name="id", requiredness=Requiredness.NONE) final int id
    ) {
        this.s = s;
        this.id = id;
    }
    
    @ThriftConstructor
    protected BigStruct() {
      this.s = null;
      this.id = 0;
    }
    
    public static class Builder {
        private test.fixtures.module2.Struct s;
        @ThriftField(value=1, name="s", requiredness=Requiredness.NONE)
        public Builder setS(test.fixtures.module2.Struct s) {
            this.s = s;
            return this;
        }
        private int id;
        @ThriftField(value=2, name="id", requiredness=Requiredness.NONE)
        public Builder setId(int id) {
            this.id = id;
            return this;
        }
    
        public Builder() { }
        public Builder(BigStruct other) {
            this.s = other.s;
            this.id = other.id;
        }
    
        @ThriftConstructor
        public BigStruct build() {
            return new BigStruct (
                this.s,
                this.id
            );
        }
    }
    
    private final test.fixtures.module2.Struct s;
    private final int id;

    
    @ThriftField(value=1, name="s", requiredness=Requiredness.NONE)
    public test.fixtures.module2.Struct getS() { return s; }
        
    @ThriftField(value=2, name="id", requiredness=Requiredness.NONE)
    public int getId() { return id; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("s", s)
            .add("id", id)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        BigStruct other = (BigStruct)o;
    
        return
            Objects.equals(s, other.s) &&
            Objects.equals(id, other.id) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            s,
            id
        });
    }
    
}
