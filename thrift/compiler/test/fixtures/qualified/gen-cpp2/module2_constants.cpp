/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "src/gen-cpp2/module2_constants.h"

#include <folly/Indestructible.h>

namespace module2 {

 ::module2::Struct const& module2_constants::c2() {
  static folly::Indestructible< ::module2::Struct> const instance( ::module2::Struct(::apache::thrift::detail::wrap_argument<1>( ::module0::Struct(::apache::thrift::detail::wrap_argument<1>(101), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("module0_str")))), ::apache::thrift::detail::wrap_argument<2>( ::module1::Struct(::apache::thrift::detail::wrap_argument<1>(201), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("module1_str"))))));
  return *instance;
}

 ::module2::Struct const& module2_constants::c3() {
  static folly::Indestructible< ::module2::Struct> const instance( ::module2::Struct(::apache::thrift::detail::wrap_argument<1>( ::module0::Struct(::apache::thrift::detail::wrap_argument<1>(101), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("module0_str")))), ::apache::thrift::detail::wrap_argument<2>( ::module1::Struct(::apache::thrift::detail::wrap_argument<1>(201), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("module1_str"))))));
  return *instance;
}

 ::module2::Struct const& module2_constants::c4() {
  static folly::Indestructible< ::module2::Struct> const instance( ::module2::Struct(::apache::thrift::detail::wrap_argument<1>( ::module0::Struct(::apache::thrift::detail::wrap_argument<1>(101), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("module0_str")))), ::apache::thrift::detail::wrap_argument<2>( ::module1::Struct(::apache::thrift::detail::wrap_argument<1>(201), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("module1_str"))))));
  return *instance;
}

} // module2
