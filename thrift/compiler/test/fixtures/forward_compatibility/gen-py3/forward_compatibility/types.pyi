#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
from enum import Enum


# Forward Definitions for Structs
class OldStructure(thrift.py3.types.Struct): ...
class NewStructure(thrift.py3.types.Struct): ...
class NewStructure2(thrift.py3.types.Struct): ...
class NewStructureNested(thrift.py3.types.Struct): ...
class NewStructureNestedField(thrift.py3.types.Struct): ...
# Forward Definitions for Containers
class Map__i16_double(_typing.Mapping[int, float]): ...
class Map__i16_float(_typing.Mapping[int, float]): ...
class List__Map__i16_float(_typing.Sequence[_typing.Mapping[int, float]]): ...
class Map__i16_Map__i16_float(_typing.Mapping[int, _typing.Mapping[int, float]]): ...
class Set__Map__i16_float(_typing.AbstractSet[_typing.Mapping[int, float]]): ...
class Map__i64_double(_typing.Mapping[int, float]): ...
class Map__i16_Map__i64_double(_typing.Mapping[int, _typing.Mapping[int, float]]): ...
class Map__i32_Map__i64_double(_typing.Mapping[int, _typing.Mapping[int, float]]): ...
class List__float(_typing.Sequence[float]): ...
class Map__i16_List__float(_typing.Mapping[int, _typing.Sequence[float]]): ...
class Map__i32_List__float(_typing.Mapping[int, _typing.Sequence[float]]): ...


class OldStructure(thrift.py3.types.Struct):
    def __init__(
        self, *,
        features: _typing.Mapping[int, float]=None
    ) -> None: ...

    def __call__(
        self, *,
        features: _typing.Union[_typing.Mapping[int, float], NOTSET, None]=NOTSET
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[OldStructure], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: OldStructure) -> bool: ...
    def __lt__(self, other: OldStructure) -> bool: ...

    @property
    def features(self) -> Map__i16_double: ...


class NewStructure(thrift.py3.types.Struct):
    def __init__(
        self, *,
        features: _typing.Mapping[int, float]=None
    ) -> None: ...

    def __call__(
        self, *,
        features: _typing.Union[_typing.Mapping[int, float], NOTSET, None]=NOTSET
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[NewStructure], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: NewStructure) -> bool: ...
    def __lt__(self, other: NewStructure) -> bool: ...

    @property
    def features(self) -> Map__i16_double: ...


class NewStructure2(thrift.py3.types.Struct):
    def __init__(
        self, *,
        features: _typing.Mapping[int, float]=None
    ) -> None: ...

    def __call__(
        self, *,
        features: _typing.Union[_typing.Mapping[int, float], NOTSET, None]=NOTSET
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[NewStructure2], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: NewStructure2) -> bool: ...
    def __lt__(self, other: NewStructure2) -> bool: ...

    @property
    def features(self) -> Map__i16_float: ...


class NewStructureNested(thrift.py3.types.Struct):
    def __init__(
        self, *,
        lst: _typing.Sequence[_typing.Mapping[int, float]]=None,
        mp: _typing.Mapping[int, _typing.Mapping[int, float]]=None,
        s: _typing.AbstractSet[_typing.Mapping[int, float]]=None
    ) -> None: ...

    def __call__(
        self, *,
        lst: _typing.Union[_typing.Sequence[_typing.Mapping[int, float]], NOTSET, None]=NOTSET,
        mp: _typing.Union[_typing.Mapping[int, _typing.Mapping[int, float]], NOTSET, None]=NOTSET,
        s: _typing.Union[_typing.AbstractSet[_typing.Mapping[int, float]], NOTSET, None]=NOTSET
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[NewStructureNested], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: NewStructureNested) -> bool: ...
    def __lt__(self, other: NewStructureNested) -> bool: ...

    @property
    def lst(self) -> List__Map__i16_float: ...
    @property
    def mp(self) -> Map__i16_Map__i16_float: ...
    @property
    def s(self) -> Set__Map__i16_float: ...


class NewStructureNestedField(thrift.py3.types.Struct):
    def __init__(
        self, *,
        f: NewStructureNested=None
    ) -> None: ...

    def __call__(
        self, *,
        f: _typing.Union[NewStructureNested, NOTSET, None]=NOTSET
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[NewStructureNestedField], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: NewStructureNestedField) -> bool: ...
    def __lt__(self, other: NewStructureNestedField) -> bool: ...

    @property
    def f(self) -> NewStructureNested: ...


class Map__i16_double(_typing.Mapping[int, float]):
    def __init__(self, items: _typing.Mapping[int, float]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, float]) -> bool: ...
    def __getitem__(self, key: int) -> float: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: float=None) -> float: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[float]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, float]]: ...


class Map__i16_float(_typing.Mapping[int, float]):
    def __init__(self, items: _typing.Mapping[int, float]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, float]) -> bool: ...
    def __getitem__(self, key: int) -> float: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: float=None) -> float: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[float]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, float]]: ...


_List__Map__i16_floatT = _typing.TypeVar('_List__Map__i16_floatT', bound=_typing.Sequence[_typing.Mapping[int, float]])


class List__Map__i16_float(_typing.Sequence[_typing.Mapping[int, float]]):
    def __init__(self, items: _typing.Sequence[_typing.Mapping[int, float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: _typing.Mapping[int, float]) -> int: ...
    def count(self, item: _typing.Mapping[int, float]) -> int: ...
    def __add__(self, other: _typing.Sequence[_typing.Mapping[int, float]]) -> List__Map__i16_float: ...
    def __radd__(self, other: _List__Map__i16_floatT) -> _List__Map__i16_floatT: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__Map__i16_float: ...
    def __getitem__(self, index: int) -> _typing.Mapping[int, float]: ...
    def __reversed__(self) -> _typing.Iterator[_typing.Mapping[int, float]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Mapping[int, float]]: ...
    def __contains__(self, item: _typing.Mapping[int, float]) -> bool: ...
    def __eq__(self, other: _typing.Sequence[_typing.Mapping[int, float]]) -> bool: ...


class Map__i16_Map__i16_float(_typing.Mapping[int, _typing.Mapping[int, float]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Mapping[int, float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Mapping[int, float]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Mapping[int, float]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Mapping[int, float]=None) -> _typing.Mapping[int, float]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Mapping[int, float]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Mapping[int, float]]]: ...


class Set__Map__i16_float(_typing.AbstractSet[_typing.Mapping[int, float]]):
    def __init__(self, items: _typing.AbstractSet[_typing.Mapping[int, float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> bool: ...
    def __eq__(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> bool: ...
    def __contains__(self, item: _typing.Mapping[int, float]) -> bool: ...
    def __iter__(self) -> _typing.Mapping[int, float]): ...
    def __add__(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def __or__(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def __xor__(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def isdisjoint(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> bool: ...
    def union(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def intersection(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def difference(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def symmetric_difference(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> Set__Map__i16_float: ...
    def issubset(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> bool: ...
    def issuperset(self, other: _typing.AbstractSet[_typing.Mapping[int, float]]) -> bool: ...


class Map__i64_double(_typing.Mapping[int, float]):
    def __init__(self, items: _typing.Mapping[int, float]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, float]) -> bool: ...
    def __getitem__(self, key: int) -> float: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: float=None) -> float: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[float]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, float]]: ...


class Map__i16_Map__i64_double(_typing.Mapping[int, _typing.Mapping[int, float]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Mapping[int, float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Mapping[int, float]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Mapping[int, float]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Mapping[int, float]=None) -> _typing.Mapping[int, float]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Mapping[int, float]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Mapping[int, float]]]: ...


class Map__i32_Map__i64_double(_typing.Mapping[int, _typing.Mapping[int, float]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Mapping[int, float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Mapping[int, float]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Mapping[int, float]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Mapping[int, float]=None) -> _typing.Mapping[int, float]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Mapping[int, float]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Mapping[int, float]]]: ...


_List__floatT = _typing.TypeVar('_List__floatT', bound=_typing.Sequence[float])


class List__float(_typing.Sequence[float]):
    def __init__(self, items: _typing.Sequence[float]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: float) -> int: ...
    def count(self, item: float) -> int: ...
    def __add__(self, other: _typing.Sequence[float]) -> List__float: ...
    def __radd__(self, other: _List__floatT) -> _List__floatT: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__float: ...
    def __getitem__(self, index: int) -> float: ...
    def __reversed__(self) -> _typing.Iterator[float]: ...
    def __iter__(self) -> _typing.Iterator[float]: ...
    def __contains__(self, item: float) -> bool: ...
    def __eq__(self, other: _typing.Sequence[float]) -> bool: ...


class Map__i16_List__float(_typing.Mapping[int, _typing.Sequence[float]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Sequence[float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Sequence[float]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Sequence[float]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Sequence[float]=None) -> _typing.Sequence[float]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Sequence[float]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Sequence[float]]]: ...


class Map__i32_List__float(_typing.Mapping[int, _typing.Sequence[float]]):
    def __init__(self, items: _typing.Mapping[int, _typing.Sequence[float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, _typing.Sequence[float]]) -> bool: ...
    def __getitem__(self, key: int) -> _typing.Sequence[float]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: _typing.Sequence[float]=None) -> _typing.Sequence[float]: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[_typing.Sequence[float]]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, _typing.Sequence[float]]]: ...


