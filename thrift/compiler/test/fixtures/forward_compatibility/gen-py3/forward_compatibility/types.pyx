#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t, uint32_t
from cython.operator cimport dereference as deref, preincrement as inc
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.types cimport translate_cpp_enum_to_python
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer cimport IOBuf
from thrift.py3.serializer import Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum




cdef cOldStructure _OldStructure_defaults = cOldStructure()

cdef class OldStructure(thrift.py3.types.Struct):

    def __init__(
        OldStructure self,
        features=None
    ):
        self._cpp_obj = move(OldStructure._make_instance(
          NULL,
          features,
        ))

    def __call__(
        OldStructure self,
        features=NOTSET
    ):
        changes = any((
            features is not NOTSET,
        ))

        if not changes:
            return self

        inst = <OldStructure>OldStructure.__new__(OldStructure)
        inst._cpp_obj = move(OldStructure._make_instance(
          self._cpp_obj.get(),
          features,
        ))
        return inst

    @staticmethod
    cdef unique_ptr[cOldStructure] _make_instance(
        cOldStructure* base_instance,
        object features
    ) except *:
        cdef unique_ptr[cOldStructure] c_inst
        if base_instance:
            c_inst = make_unique[cOldStructure](deref(base_instance))
        else:
            c_inst = make_unique[cOldStructure]()

        if base_instance:
            # Convert None's to default value.
            if features is None:
                deref(c_inst).features = _OldStructure_defaults.features
                deref(c_inst).__isset.features = False
            elif features is NOTSET:
                features = None

        if features is not None:
            deref(c_inst).features = <cmap[int16_t,double]>deref(Map__i16_double(features)._cpp_obj)
            deref(c_inst).__isset.features = True

        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        yield 'features', self.features

    def __bool__(self):
        return deref(self._cpp_obj).__isset.features

    @staticmethod
    cdef create(shared_ptr[cOldStructure] cpp_obj):
        inst = <OldStructure>OldStructure.__new__(OldStructure)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def features(self):
        if not deref(self._cpp_obj).__isset.features:
            return None

        if self.__features is None:
            self.__features = Map__i16_double.create(make_shared[cmap[int16_t,double]](deref(self._cpp_obj).features))
        return self.__features


    def __hash__(OldStructure self):
        if not self.__hash:
            self.__hash = hash((
            self.features,
            ))
        return self.__hash

    def __repr__(OldStructure self):
        return f'OldStructure(features={repr(self.features)})'
    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, OldStructure) and
                isinstance(other, OldStructure)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cOldStructure cself = deref((<OldStructure>self)._cpp_obj)
        cdef cOldStructure cother = deref((<OldStructure>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    cdef bytes _serialize(OldStructure self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cOldStructure](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cOldStructure](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cOldStructure](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(OldStructure self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cOldStructure](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cOldStructure](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cOldStructure](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (OldStructure, serialize(self)))


cdef cNewStructure _NewStructure_defaults = cNewStructure()

cdef class NewStructure(thrift.py3.types.Struct):

    def __init__(
        NewStructure self,
        features=None
    ):
        self._cpp_obj = move(NewStructure._make_instance(
          NULL,
          features,
        ))

    def __call__(
        NewStructure self,
        features=NOTSET
    ):
        changes = any((
            features is not NOTSET,
        ))

        if not changes:
            return self

        inst = <NewStructure>NewStructure.__new__(NewStructure)
        inst._cpp_obj = move(NewStructure._make_instance(
          self._cpp_obj.get(),
          features,
        ))
        return inst

    @staticmethod
    cdef unique_ptr[cNewStructure] _make_instance(
        cNewStructure* base_instance,
        object features
    ) except *:
        cdef unique_ptr[cNewStructure] c_inst
        if base_instance:
            c_inst = make_unique[cNewStructure](deref(base_instance))
        else:
            c_inst = make_unique[cNewStructure]()

        if base_instance:
            # Convert None's to default value.
            if features is None:
                deref(c_inst).features = _NewStructure_defaults.features
                deref(c_inst).__isset.features = False
            elif features is NOTSET:
                features = None

        if features is not None:
            deref(c_inst).features = <cmap[int16_t,double]>deref(Map__i16_double(features)._cpp_obj)
            deref(c_inst).__isset.features = True

        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        yield 'features', self.features

    def __bool__(self):
        return deref(self._cpp_obj).__isset.features

    @staticmethod
    cdef create(shared_ptr[cNewStructure] cpp_obj):
        inst = <NewStructure>NewStructure.__new__(NewStructure)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def features(self):
        if not deref(self._cpp_obj).__isset.features:
            return None

        if self.__features is None:
            self.__features = Map__i16_double.create(make_shared[cmap[int16_t,double]](deref(self._cpp_obj).features))
        return self.__features


    def __hash__(NewStructure self):
        if not self.__hash:
            self.__hash = hash((
            self.features,
            ))
        return self.__hash

    def __repr__(NewStructure self):
        return f'NewStructure(features={repr(self.features)})'
    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, NewStructure) and
                isinstance(other, NewStructure)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cNewStructure cself = deref((<NewStructure>self)._cpp_obj)
        cdef cNewStructure cother = deref((<NewStructure>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    cdef bytes _serialize(NewStructure self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cNewStructure](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cNewStructure](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cNewStructure](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(NewStructure self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cNewStructure](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cNewStructure](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cNewStructure](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (NewStructure, serialize(self)))


cdef cNewStructure2 _NewStructure2_defaults = cNewStructure2()

cdef class NewStructure2(thrift.py3.types.Struct):

    def __init__(
        NewStructure2 self,
        features=None
    ):
        self._cpp_obj = move(NewStructure2._make_instance(
          NULL,
          features,
        ))

    def __call__(
        NewStructure2 self,
        features=NOTSET
    ):
        changes = any((
            features is not NOTSET,
        ))

        if not changes:
            return self

        inst = <NewStructure2>NewStructure2.__new__(NewStructure2)
        inst._cpp_obj = move(NewStructure2._make_instance(
          self._cpp_obj.get(),
          features,
        ))
        return inst

    @staticmethod
    cdef unique_ptr[cNewStructure2] _make_instance(
        cNewStructure2* base_instance,
        object features
    ) except *:
        cdef unique_ptr[cNewStructure2] c_inst
        if base_instance:
            c_inst = make_unique[cNewStructure2](deref(base_instance))
        else:
            c_inst = make_unique[cNewStructure2]()

        if base_instance:
            # Convert None's to default value.
            if features is None:
                deref(c_inst).features = _NewStructure2_defaults.features
                deref(c_inst).__isset.features = False
            elif features is NOTSET:
                features = None

        if features is not None:
            deref(c_inst).features = <cmap[int16_t,float]>deref(Map__i16_float(features)._cpp_obj)
            deref(c_inst).__isset.features = True

        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        yield 'features', self.features

    def __bool__(self):
        return deref(self._cpp_obj).__isset.features

    @staticmethod
    cdef create(shared_ptr[cNewStructure2] cpp_obj):
        inst = <NewStructure2>NewStructure2.__new__(NewStructure2)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def features(self):
        if not deref(self._cpp_obj).__isset.features:
            return None

        if self.__features is None:
            self.__features = Map__i16_float.create(make_shared[cmap[int16_t,float]](deref(self._cpp_obj).features))
        return self.__features


    def __hash__(NewStructure2 self):
        if not self.__hash:
            self.__hash = hash((
            self.features,
            ))
        return self.__hash

    def __repr__(NewStructure2 self):
        return f'NewStructure2(features={repr(self.features)})'
    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, NewStructure2) and
                isinstance(other, NewStructure2)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cNewStructure2 cself = deref((<NewStructure2>self)._cpp_obj)
        cdef cNewStructure2 cother = deref((<NewStructure2>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    cdef bytes _serialize(NewStructure2 self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cNewStructure2](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cNewStructure2](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cNewStructure2](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(NewStructure2 self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cNewStructure2](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cNewStructure2](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cNewStructure2](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (NewStructure2, serialize(self)))


cdef class Map__i16_double:
    def __init__(self, items=None):
        if isinstance(items, Map__i16_double):
            self._cpp_obj = (<Map__i16_double> items)._cpp_obj
        else:
            self._cpp_obj = move(Map__i16_double._make_instance(items))

    @staticmethod
    cdef create(shared_ptr[cmap[int16_t,double]] c_items):
        inst = <Map__i16_double>Map__i16_double.__new__(Map__i16_double)
        inst._cpp_obj = c_items
        return inst

    @staticmethod
    cdef unique_ptr[cmap[int16_t,double]] _make_instance(object items) except *:
        cdef unique_ptr[cmap[int16_t,double]] c_inst = make_unique[cmap[int16_t,double]]()
        if items:
            for key, item in items.items():
                deref(c_inst).insert(cpair[int16_t,double](key,item))
        return move_unique(c_inst)

    def __getitem__(self, key):
        if not self:
            raise KeyError(f'{key}')
        cdef int16_t ckey = key
        cdef cmap[int16_t,double].iterator iter = deref(
            self._cpp_obj).find(ckey)
        if iter == deref(self._cpp_obj).end():
            raise KeyError(f'{key}')
        cdef double citem = deref(iter).second
        return citem

    def __len__(self):
        return deref(self._cpp_obj).size()

    def __iter__(self):
        if not self:
            raise StopIteration
        cdef int16_t citem
        for pair in deref(self._cpp_obj):
            citem = pair.first
            yield citem

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        if not self.__hash:
            self.__hash = hash(tuple(self.items()))
        return self.__hash

    def __repr__(self):
        if not self:
            return 'i{}'
        return f'i{{{", ".join(map(lambda i: f"{repr(i[0])}: {repr(i[1])}", self.items()))}}}'



    def __contains__(self, key):
        cdef int16_t ckey = key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self:
            return default
        cdef int16_t ckey = key
        cdef cmap[int16_t,double].iterator iter = \
            deref(self._cpp_obj).find(ckey)
        if iter == deref(self._cpp_obj).end():
            return default
        cdef double citem = deref(iter).second
        return citem

    def keys(self):
        return self.__iter__()

    def values(self):
        if not self:
            raise StopIteration
        cdef double citem
        for pair in deref(self._cpp_obj):
            citem = pair.second
            yield citem

    def items(self):
        if not self:
            raise StopIteration
        cdef int16_t ckey
        cdef double citem
        for pair in deref(self._cpp_obj):
            ckey = pair.first
            citem = pair.second

            yield (ckey, citem)



Mapping.register(Map__i16_double)

cdef class Map__i16_float:
    def __init__(self, items=None):
        if isinstance(items, Map__i16_float):
            self._cpp_obj = (<Map__i16_float> items)._cpp_obj
        else:
            self._cpp_obj = move(Map__i16_float._make_instance(items))

    @staticmethod
    cdef create(shared_ptr[cmap[int16_t,float]] c_items):
        inst = <Map__i16_float>Map__i16_float.__new__(Map__i16_float)
        inst._cpp_obj = c_items
        return inst

    @staticmethod
    cdef unique_ptr[cmap[int16_t,float]] _make_instance(object items) except *:
        cdef unique_ptr[cmap[int16_t,float]] c_inst = make_unique[cmap[int16_t,float]]()
        if items:
            for key, item in items.items():
                deref(c_inst).insert(cpair[int16_t,float](key,item))
        return move_unique(c_inst)

    def __getitem__(self, key):
        if not self:
            raise KeyError(f'{key}')
        cdef int16_t ckey = key
        cdef cmap[int16_t,float].iterator iter = deref(
            self._cpp_obj).find(ckey)
        if iter == deref(self._cpp_obj).end():
            raise KeyError(f'{key}')
        cdef float citem = deref(iter).second
        return citem

    def __len__(self):
        return deref(self._cpp_obj).size()

    def __iter__(self):
        if not self:
            raise StopIteration
        cdef int16_t citem
        for pair in deref(self._cpp_obj):
            citem = pair.first
            yield citem

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        if not self.__hash:
            self.__hash = hash(tuple(self.items()))
        return self.__hash

    def __repr__(self):
        if not self:
            return 'i{}'
        return f'i{{{", ".join(map(lambda i: f"{repr(i[0])}: {repr(i[1])}", self.items()))}}}'



    def __contains__(self, key):
        cdef int16_t ckey = key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self:
            return default
        cdef int16_t ckey = key
        cdef cmap[int16_t,float].iterator iter = \
            deref(self._cpp_obj).find(ckey)
        if iter == deref(self._cpp_obj).end():
            return default
        cdef float citem = deref(iter).second
        return citem

    def keys(self):
        return self.__iter__()

    def values(self):
        if not self:
            raise StopIteration
        cdef float citem
        for pair in deref(self._cpp_obj):
            citem = pair.second
            yield citem

    def items(self):
        if not self:
            raise StopIteration
        cdef int16_t ckey
        cdef float citem
        for pair in deref(self._cpp_obj):
            ckey = pair.first
            citem = pair.second

            yield (ckey, citem)



Mapping.register(Map__i16_float)

FloatFeatures = Map__i16_float
