<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
require_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class OldStructure implements IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'features',
      'type' => TType::MAP,
      'ktype' => TType::I16,
      'vtype' => TType::DOUBLE,
      'key' => array(
        'type' => TType::I16,
      ),
      'val' => array(
        'type' => TType::DOUBLE,
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'features' => 1,
  );
  const STRUCTURAL_ID = 4339262946178813539;
  public $features = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['features'])) {
        $this->features = $vals['features'];
      }
    } else if ($vals) {
      throw new TProtocolException(
        'OldStructure constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'OldStructure';
  }

  public static function __set_state($vals) {
    return new OldStructure($vals);
  }

  public function read(TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->features = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_size0 === null || $_i4 < $_size0; ++$_i4)
            {
              if ($_size0 === null && !$input->readMapHasNext()) {
                break;
              }
              $key5 = 0;
              $val6 = 0.0;
              $xfer += $input->readI16($key5);
              $xfer += $input->readDouble($val6);
              $this->features[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OldStructure');
    if ($this->features !== null) {
      if (!is_array($this->features) && !(($this->features instanceof Iterator || $this->features instanceof IteratorAggregate) && $this->features instanceof Countable)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('features', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I16, TType::DOUBLE, count($this->features));
        {
          foreach ($this->features as $kiter0 => $viter1)
          {
            $xfer += $output->writeI16($kiter0);
            $xfer += $output->writeDouble($viter1);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewStructure implements IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'features',
      'type' => TType::MAP,
      'ktype' => TType::I16,
      'vtype' => TType::DOUBLE,
      'key' => array(
        'type' => TType::I16,
      ),
      'val' => array(
        'type' => TType::DOUBLE,
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'features' => 1,
  );
  const STRUCTURAL_ID = 4339262946178813539;
  public $features = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['features'])) {
        $this->features = $vals['features'];
      }
    } else if ($vals) {
      throw new TProtocolException(
        'NewStructure constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'NewStructure';
  }

  public static function __set_state($vals) {
    return new NewStructure($vals);
  }

  public function read(TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->features = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_size0 === null || $_i4 < $_size0; ++$_i4)
            {
              if ($_size0 === null && !$input->readMapHasNext()) {
                break;
              }
              $key5 = 0;
              $val6 = 0.0;
              $xfer += $input->readI16($key5);
              $xfer += $input->readDouble($val6);
              $this->features[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewStructure');
    if ($this->features !== null) {
      if (!is_array($this->features) && !(($this->features instanceof Iterator || $this->features instanceof IteratorAggregate) && $this->features instanceof Countable)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('features', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I16, TType::DOUBLE, count($this->features));
        {
          foreach ($this->features as $kiter0 => $viter1)
          {
            $xfer += $output->writeI16($kiter0);
            $xfer += $output->writeDouble($viter1);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewStructure2 implements IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'features',
      'type' => TType::MAP,
      'ktype' => TType::I16,
      'vtype' => TType::FLOAT,
      'key' => array(
        'type' => TType::I16,
      ),
      'val' => array(
        'type' => TType::FLOAT,
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'features' => 1,
  );
  const STRUCTURAL_ID = 2902783873822916022;
  public $features = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['features'])) {
        $this->features = $vals['features'];
      }
    } else if ($vals) {
      throw new TProtocolException(
        'NewStructure2 constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'NewStructure2';
  }

  public static function __set_state($vals) {
    return new NewStructure2($vals);
  }

  public function read(TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->features = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_size0 === null || $_i4 < $_size0; ++$_i4)
            {
              if ($_size0 === null && !$input->readMapHasNext()) {
                break;
              }
              $key5 = 0;
              $val6 = 0.0;
              $xfer += $input->readI16($key5);
              $xfer += $input->readFloat($val6);
              $this->features[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewStructure2');
    if ($this->features !== null) {
      if (!is_array($this->features) && !(($this->features instanceof Iterator || $this->features instanceof IteratorAggregate) && $this->features instanceof Countable)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('features', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I16, TType::FLOAT, count($this->features));
        {
          foreach ($this->features as $kiter0 => $viter1)
          {
            $xfer += $output->writeI16($kiter0);
            $xfer += $output->writeFloat($viter1);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
