/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial", "unchecked" })
public class MyUnion extends TUnion<MyUnion> implements Comparable<MyUnion> {
  private static final TStruct STRUCT_DESC = new TStruct("MyUnion");
  private static final TField AN_INTEGER_FIELD_DESC = new TField("anInteger", TType.I32, (short)1);
  private static final TField A_STRING_FIELD_DESC = new TField("aString", TType.STRING, (short)2);

  public static final int ANINTEGER = 1;
  public static final int ASTRING = 2;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ANINTEGER, new FieldMetaData("anInteger", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ASTRING, new FieldMetaData("aString", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  public MyUnion() {
    super();
  }

  public MyUnion(int setField, Object __value) {
    super(setField, __value);
  }

  public MyUnion(MyUnion other) {
    super(other);
  }
  public MyUnion deepCopy() {
    return new MyUnion(this);
  }

  public static MyUnion anInteger(int __value) {
    MyUnion x = new MyUnion();
    x.setAnInteger(__value);
    return x;
  }

  public static MyUnion aString(String __value) {
    MyUnion x = new MyUnion();
    x.setAString(__value);
    return x;
  }


  @Override
  protected void checkType(short setField, Object __value) throws ClassCastException {
    switch (setField) {
      case ANINTEGER:
        if (__value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'anInteger', but got " + __value.getClass().getSimpleName());
      case ASTRING:
        if (__value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'aString', but got " + __value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object readValue(TProtocol iprot, TField __field) throws TException {
    switch (__field.id) {
      case ANINTEGER:
        if (__field.type == AN_INTEGER_FIELD_DESC.type) {
          Integer anInteger;
          anInteger = iprot.readI32();
          return anInteger;
        } else {
          TProtocolUtil.skip(iprot, __field.type);
          return null;
        }
      case ASTRING:
        if (__field.type == A_STRING_FIELD_DESC.type) {
          String aString;
          aString = iprot.readString();
          return aString;
        } else {
          TProtocolUtil.skip(iprot, __field.type);
          return null;
        }
      default:
        TProtocolUtil.skip(iprot, __field.type);
        return null;
    }
  }

  @Override
  protected void writeValue(TProtocol oprot, short setField, Object __value) throws TException {
    switch (setField) {
      case ANINTEGER:
        Integer anInteger = (Integer)getFieldValue();
        oprot.writeI32(anInteger);
        return;
      case ASTRING:
        String aString = (String)getFieldValue();
        oprot.writeString(aString);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField);
    }
  }

  @Override
  protected TField getFieldDesc(int setField) {
    switch (setField) {
      case ANINTEGER:
        return AN_INTEGER_FIELD_DESC;
      case ASTRING:
        return A_STRING_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  public int getAnInteger() {
    if (getSetField() == ANINTEGER) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'anInteger' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAnInteger(int __value) {
    setField_ = ANINTEGER;
    value_ = __value;
  }

  public String getAString() {
    if (getSetField() == ASTRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'aString' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAString(String __value) {
    if (__value == null) throw new NullPointerException();
    setField_ = ASTRING;
    value_ = __value;
  }

  public boolean equals(Object other) {
    if (other instanceof MyUnion) {
      return equals((MyUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(MyUnion other) {
    return equalsNobinaryImpl(other);
  }

  @Override
  public int compareTo(MyUnion other) {
    return compareToImpl(other);
  }


  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {getSetField(), getFieldValue()});
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyUnion");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    // Only print this field if it is the set field
    if (getSetField() == ANINTEGER)
    {
      sb.append(indentStr);
      sb.append("anInteger");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getAnInteger(), indent + 1, prettyPrint));
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == ASTRING)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("aString");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getAString() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getAString(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }


}
