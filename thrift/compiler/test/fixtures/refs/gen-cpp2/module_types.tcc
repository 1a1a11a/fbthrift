/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/refs/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

} // cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyUnion::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "anInteger") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "aString") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_anInteger();
          xfer += iprot->readI32(this->mutable_anInteger());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          this->set_aString();
          xfer += iprot->readString(this->mutable_aString());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->serializedFieldSize("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_anInteger());
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->serializedFieldSize("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_aString());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->serializedFieldSize("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_anInteger());
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->serializedFieldSize("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_aString());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->writeFieldBegin("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_anInteger());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->writeFieldBegin("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->writeString(this->get_aString());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyField::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_value = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_value") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "req_value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->opt_value);
          this->__isset.opt_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->req_value);
          isset_req_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_value) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_value' was not found in serialized data! Struct: MyField");
  }
  return xfer;
}

template <class Protocol_>
uint32_t MyField::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->serializedFieldSize("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->opt_value);
  }
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->value);
  xfer += prot_->serializedFieldSize("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->req_value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyField::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->serializedFieldSize("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->opt_value);
  }
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->value);
  xfer += prot_->serializedFieldSize("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->req_value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyField::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->writeFieldBegin("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->writeI64(this->opt_value);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->req_value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_ref = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_ref") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "ref") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_ref") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype0(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype0.get());
          this->opt_ref = std::move(_ptype0);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype1(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype1.get());
          this->ref = std::move(_ptype1);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype2(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype2.get());
          this->req_ref = std::move(_ptype2);
          isset_req_ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_ref) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_ref' was not found in serialized data! Struct: MyStruct");
  }
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->serializedFieldSize("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->serializedFieldSize("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->writeFieldBegin("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->writeStructBegin("MyField");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_StructWithUnion_f_struct_setter>
 ::cpp2::MyField& StructWithUnion::set_f(T_StructWithUnion_f_struct_setter&& f_) {
  f = std::forward<T_StructWithUnion_f_struct_setter>(f_);
  __isset.f = true;
  return f;
}

template <class Protocol_>
uint32_t StructWithUnion::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "u") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "aDouble") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "f") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->u)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype3(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::read(iprot, _ptype3.get());
          this->u = std::move(_ptype3);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aDouble);
          this->__isset.aDouble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, &this->f);
          this->__isset.f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithUnion");
  xfer += prot_->serializedFieldSize("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSize(prot_, this->u.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyUnion");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->aDouble);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, &this->f);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithUnion");
  xfer += prot_->serializedFieldSize("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSizeZC(prot_, this->u.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyUnion");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->aDouble);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, &this->f);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithUnion");
  xfer += prot_->writeFieldBegin("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::write(prot_, this->u.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyUnion");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->aDouble);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, &this->f);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_RecursiveStruct_mes_struct_setter>
std::vector< ::cpp2::RecursiveStruct>& RecursiveStruct::set_mes(T_RecursiveStruct_mes_struct_setter&& mes_) {
  mes = std::forward<T_RecursiveStruct_mes_struct_setter>(mes_);
  __isset.mes = true;
  return mes;
}

template <class Protocol_>
uint32_t RecursiveStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "mes") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->mes = std::vector< ::cpp2::RecursiveStruct>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              this->mes.resize(_i_r + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::read(iprot, &this->mes[_i_r]);
            }
          }
          else {
            this->mes.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::read(iprot, &this->mes[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.mes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->serializedFieldSize("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->mes.size());
    for (auto _iter_r = this->mes.begin(); _iter_r != this->mes.end(); ++_iter_r) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::serializedSize(prot_, &(*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->serializedFieldSize("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->mes.size());
    for (auto _iter_r = this->mes.begin(); _iter_r != this->mes.end(); ++_iter_r) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::serializedSizeZC(prot_, &(*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->writeFieldBegin("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->mes.size());
    for (auto _iter_r = this->mes.begin(); _iter_r != this->mes.end(); ++_iter_r) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::write(prot_, &(*_iter_r));
    }
    xfer += prot_->writeListEnd();
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithContainers::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "list_ref") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_ref") {
        fid = 2;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "map_ref") {
        fid = 3;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "list_ref_unique") {
        fid = 4;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_ref_shared") {
        fid = 5;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "map_ref_custom") {
        fid = 6;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "list_ref_shared_const") {
        fid = 7;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_custom_ref") {
        fid = 8;
        ftype = apache::thrift::protocol::T_SET;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype4(new element_type());
          auto& _rtype5 = *_ptype4;
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              _rtype5.resize(_i_r + 1);
              xfer += iprot->readI32(_rtype5[_i_r]);
            }
          }
          else {
            _rtype5.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(_rtype5[_i_r]);
            }
          }
          this->list_ref = std::move(_ptype4);
          xfer += iprot->readListEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype6(new element_type());
          auto& _rtype7 = *_ptype6;
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              _rtype7.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              _rtype7.insert(std::move(_elem_r));
            }
          }
          this->set_ref = std::move(_ptype6);
          xfer += iprot->readSetEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->map_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype8(new element_type());
          auto& _rtype9 = *_ptype8;
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
              int32_t& _val = _rtype9[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(_rtype9, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          this->map_ref = std::move(_ptype8);
          xfer += iprot->readMapEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref_unique)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype10(new element_type());
          auto& _rtype11 = *_ptype10;
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              _rtype11.resize(_i_r + 1);
              xfer += iprot->readI32(_rtype11[_i_r]);
            }
          }
          else {
            _rtype11.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(_rtype11[_i_r]);
            }
          }
          this->list_ref_unique = std::move(_ptype10);
          xfer += iprot->readListEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_ref_shared)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype12(new element_type());
          auto& _rtype13 = *_ptype12;
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              _rtype13.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              _rtype13.insert(std::move(_elem_r));
            }
          }
          this->set_ref_shared = std::move(_ptype12);
          xfer += iprot->readSetEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->map_ref_custom)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype14(new element_type());
          auto& _rtype15 = *_ptype14;
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
              int32_t& _val = _rtype15[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(_rtype15, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          this->map_ref_custom = std::move(_ptype14);
          xfer += iprot->readMapEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype16(new element_type());
          auto& _rtype17 = *_ptype16;
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              _rtype17.resize(_i_r + 1);
              xfer += iprot->readI32(_rtype17[_i_r]);
            }
          }
          else {
            _rtype17.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(_rtype17[_i_r]);
            }
          }
          this->list_ref_shared_const = std::move(_ptype16);
          xfer += iprot->readListEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_custom_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype18(new element_type());
          auto& _rtype19 = *_ptype18;
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              _rtype19.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              _rtype19.insert(std::move(_elem_r));
            }
          }
          this->set_custom_ref = std::move(_ptype18);
          xfer += iprot->readSetEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithContainers");
  xfer += prot_->serializedFieldSize("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype20 = *this->list_ref;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype20.size());
    for (auto _iter_r = _rtype20.begin(); _iter_r != _rtype20.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype21 = *this->set_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype21.size());
    for (auto _iter_r = _rtype21.begin(); _iter_r != _rtype21.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype22 = *this->map_ref;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype22.size());
    for (auto _iter_rk_rv = _rtype22.begin(); _iter_rk_rv != _rtype22.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
      xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype23 = *this->list_ref_unique;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype23.size());
    for (auto _iter_r = _rtype23.begin(); _iter_r != _rtype23.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype24 = *this->set_ref_shared;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype24.size());
    for (auto _iter_r = _rtype24.begin(); _iter_r != _rtype24.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref_custom", apache::thrift::protocol::T_MAP, 6);
  if (this->map_ref_custom) {
    const auto& _rtype25 = *this->map_ref_custom;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype25.size());
    for (auto _iter_rk_rv = _rtype25.begin(); _iter_rk_rv != _rtype25.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
      xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_shared_const", apache::thrift::protocol::T_LIST, 7);
  if (this->list_ref_shared_const) {
    const auto& _rtype26 = *this->list_ref_shared_const;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype26.size());
    for (auto _iter_r = _rtype26.begin(); _iter_r != _rtype26.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_custom_ref", apache::thrift::protocol::T_SET, 8);
  if (this->set_custom_ref) {
    const auto& _rtype27 = *this->set_custom_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype27.size());
    for (auto _iter_r = _rtype27.begin(); _iter_r != _rtype27.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithContainers");
  xfer += prot_->serializedFieldSize("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype28 = *this->list_ref;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype28.size());
    for (auto _iter_r = _rtype28.begin(); _iter_r != _rtype28.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype29 = *this->set_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype29.size());
    for (auto _iter_r = _rtype29.begin(); _iter_r != _rtype29.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype30 = *this->map_ref;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype30.size());
    for (auto _iter_rk_rv = _rtype30.begin(); _iter_rk_rv != _rtype30.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
      xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype31 = *this->list_ref_unique;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype31.size());
    for (auto _iter_r = _rtype31.begin(); _iter_r != _rtype31.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype32 = *this->set_ref_shared;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype32.size());
    for (auto _iter_r = _rtype32.begin(); _iter_r != _rtype32.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref_custom", apache::thrift::protocol::T_MAP, 6);
  if (this->map_ref_custom) {
    const auto& _rtype33 = *this->map_ref_custom;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype33.size());
    for (auto _iter_rk_rv = _rtype33.begin(); _iter_rk_rv != _rtype33.end(); ++_iter_rk_rv) {
      xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
      xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_shared_const", apache::thrift::protocol::T_LIST, 7);
  if (this->list_ref_shared_const) {
    const auto& _rtype34 = *this->list_ref_shared_const;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype34.size());
    for (auto _iter_r = _rtype34.begin(); _iter_r != _rtype34.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_custom_ref", apache::thrift::protocol::T_SET, 8);
  if (this->set_custom_ref) {
    const auto& _rtype35 = *this->set_custom_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype35.size());
    for (auto _iter_r = _rtype35.begin(); _iter_r != _rtype35.end(); ++_iter_r) {
      xfer += prot_->serializedSizeI32((*_iter_r));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithContainers");
  xfer += prot_->writeFieldBegin("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype36 = *this->list_ref;
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _rtype36.size());
    for (auto _iter_r = _rtype36.begin(); _iter_r != _rtype36.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype37 = *this->set_ref;
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, _rtype37.size());
    for (auto _iter_r = _rtype37.begin(); _iter_r != _rtype37.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype38 = *this->map_ref;
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype38.size());
    for (auto _iter_rk_rv = _rtype38.begin(); _iter_rk_rv != _rtype38.end(); ++_iter_rk_rv) {
      xfer += prot_->writeI32(_iter_rk_rv->first);
      xfer += prot_->writeI32(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  else {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype39 = *this->list_ref_unique;
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _rtype39.size());
    for (auto _iter_r = _rtype39.begin(); _iter_r != _rtype39.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype40 = *this->set_ref_shared;
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, _rtype40.size());
    for (auto _iter_r = _rtype40.begin(); _iter_r != _rtype40.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("map_ref_custom", apache::thrift::protocol::T_MAP, 6);
  if (this->map_ref_custom) {
    const auto& _rtype41 = *this->map_ref_custom;
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype41.size());
    for (auto _iter_rk_rv = _rtype41.begin(); _iter_rk_rv != _rtype41.end(); ++_iter_rk_rv) {
      xfer += prot_->writeI32(_iter_rk_rv->first);
      xfer += prot_->writeI32(_iter_rk_rv->second);
    }
    xfer += prot_->writeMapEnd();
  }
  else {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("list_ref_shared_const", apache::thrift::protocol::T_LIST, 7);
  if (this->list_ref_shared_const) {
    const auto& _rtype42 = *this->list_ref_shared_const;
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _rtype42.size());
    for (auto _iter_r = _rtype42.begin(); _iter_r != _rtype42.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeListEnd();
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_custom_ref", apache::thrift::protocol::T_SET, 8);
  if (this->set_custom_ref) {
    const auto& _rtype43 = *this->set_custom_ref;
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, _rtype43.size());
    for (auto _iter_r = _rtype43.begin(); _iter_r != _rtype43.end(); ++_iter_r) {
      xfer += prot_->writeI32((*_iter_r));
    }
    xfer += prot_->writeSetEnd();
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithSharedConst::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_shared_const = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_shared_const") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "shared_const") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_shared_const") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype44(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype44.get());
          this->opt_shared_const = std::move(_ptype44);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype45(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype45.get());
          this->shared_const = std::move(_ptype45);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype46(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype46.get());
          this->req_shared_const = std::move(_ptype46);
          isset_req_shared_const = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_shared_const) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_shared_const' was not found in serialized data! Struct: StructWithSharedConst");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->serializedFieldSize("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->serializedFieldSize("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->writeFieldBegin("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->writeStructBegin("MyField");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Empty::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Empty::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Empty");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Empty::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Empty");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Empty::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Empty");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRef::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype47(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype47.get());
          this->def_field = std::move(_ptype47);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype48(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype48.get());
          this->opt_field = std::move(_ptype48);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype49(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype49.get());
          this->req_field = std::move(_ptype49);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRef");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRef::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRef");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRef::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRef");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRef::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRef");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeUnique::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype50(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype50.get());
          this->def_field = std::move(_ptype50);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype51(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype51.get());
          this->opt_field = std::move(_ptype51);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype52(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype52.get());
          this->req_field = std::move(_ptype52);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeUnique");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeUnique::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeUnique");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeUnique::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeUnique");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeUnique::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeUnique");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeShared::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype53(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype53.get());
          this->def_field = std::move(_ptype53);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype54(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype54.get());
          this->opt_field = std::move(_ptype54);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype55(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype55.get());
          this->req_field = std::move(_ptype55);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeShared");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeShared::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeShared");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeShared::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeShared");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeShared::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeShared");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype56(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype56.get());
          this->def_field = std::move(_ptype56);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype57(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype57.get());
          this->opt_field = std::move(_ptype57);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype58(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype58.get());
          this->req_field = std::move(_ptype58);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeSharedConst");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeSharedConst");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeSharedConst");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeSharedConst");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeCustom::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype59(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype59.get());
          this->def_field = std::move(_ptype59);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype60(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype60.get());
          this->opt_field = std::move(_ptype60);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype61(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype61.get());
          this->req_field = std::move(_ptype61);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeCustom");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeCustom::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeCustom");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeCustom::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeCustom");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeCustom::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeCustom");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
