/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/refs/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

} // cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyUnion::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "anInteger") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "aString") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_anInteger();
          xfer += iprot->readI32(this->mutable_anInteger());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          this->set_aString();
          xfer += iprot->readString(this->mutable_aString());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->serializedFieldSize("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_anInteger());
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->serializedFieldSize("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_aString());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->serializedFieldSize("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_anInteger());
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->serializedFieldSize("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_aString());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->writeFieldBegin("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_anInteger());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->writeFieldBegin("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->writeString(this->get_aString());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyField::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_value = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_value") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "req_value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->opt_value);
          this->__isset.opt_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->req_value);
          isset_req_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_value) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_value' was not found in serialized data! Struct: MyField");
  }
  return xfer;
}

template <class Protocol_>
uint32_t MyField::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->serializedFieldSize("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->opt_value);
  }
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->value);
  xfer += prot_->serializedFieldSize("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->req_value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyField::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->serializedFieldSize("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->opt_value);
  }
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->value);
  xfer += prot_->serializedFieldSize("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->req_value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyField::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->writeFieldBegin("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->writeI64(this->opt_value);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->req_value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_ref = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_ref") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "ref") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_ref") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype0(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype0.get());
          this->opt_ref = std::move(_ptype0);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype1(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype1.get());
          this->ref = std::move(_ptype1);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype2(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype2.get());
          this->req_ref = std::move(_ptype2);
          isset_req_ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_ref) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_ref' was not found in serialized data! Struct: MyStruct");
  }
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->serializedFieldSize("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->serializedFieldSize("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->writeFieldBegin("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->writeStructBegin("MyField");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_StructWithUnion_f_struct_setter>
 ::cpp2::MyField& StructWithUnion::set_f(T_StructWithUnion_f_struct_setter&& f_) {
  f = std::forward<T_StructWithUnion_f_struct_setter>(f_);
  __isset.f = true;
  return f;
}

template <class Protocol_>
uint32_t StructWithUnion::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "u") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "aDouble") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "f") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->u)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype3(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::read(iprot, _ptype3.get());
          this->u = std::move(_ptype3);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aDouble);
          this->__isset.aDouble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, &this->f);
          this->__isset.f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithUnion");
  xfer += prot_->serializedFieldSize("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSize(prot_, this->u.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyUnion");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->aDouble);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, &this->f);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithUnion");
  xfer += prot_->serializedFieldSize("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSizeZC(prot_, this->u.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyUnion");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->aDouble);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, &this->f);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithUnion");
  xfer += prot_->writeFieldBegin("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::write(prot_, this->u.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyUnion");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->aDouble);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, &this->f);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_RecursiveStruct_mes_struct_setter>
std::vector< ::cpp2::RecursiveStruct>& RecursiveStruct::set_mes(T_RecursiveStruct_mes_struct_setter&& mes_) {
  mes = std::forward<T_RecursiveStruct_mes_struct_setter>(mes_);
  __isset.mes = true;
  return mes;
}

template <class Protocol_>
uint32_t RecursiveStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "mes") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->mes = std::vector< ::cpp2::RecursiveStruct>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::RecursiveStruct>>::read(*iprot, this->mes);
          this->__isset.mes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->serializedFieldSize("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::RecursiveStruct>>::serializedSize<false>(*prot_, this->mes);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->serializedFieldSize("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::RecursiveStruct>>::serializedSize<false>(*prot_, this->mes);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->writeFieldBegin("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::RecursiveStruct>>::write(*prot_, this->mes);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithContainers::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "list_ref") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_ref") {
        fid = 2;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "map_ref") {
        fid = 3;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "list_ref_unique") {
        fid = 4;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_ref_shared") {
        fid = 5;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "list_ref_shared_const") {
        fid = 6;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_custom_ref") {
        fid = 7;
        ftype = apache::thrift::protocol::T_SET;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype4(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, *_ptype4);
          this->list_ref = std::move(_ptype4);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype5(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, *_ptype5);
          this->set_ref = std::move(_ptype5);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->map_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype6(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::read(*iprot, *_ptype6);
          this->map_ref = std::move(_ptype6);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref_unique)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype7(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, *_ptype7);
          this->list_ref_unique = std::move(_ptype7);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_ref_shared)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype8(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, *_ptype8);
          this->set_ref_shared = std::move(_ptype8);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype9(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, *_ptype9);
          this->list_ref_shared_const = std::move(_ptype9);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_custom_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype10(new element_type());
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, *_ptype10);
          this->set_custom_ref = std::move(_ptype10);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithContainers");
  xfer += prot_->serializedFieldSize("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype11 = *this->list_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, _rtype11);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype12 = *this->set_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, _rtype12);
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype13 = *this->map_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, _rtype13);
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype14 = *this->list_ref_unique;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, _rtype14);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype15 = *this->set_ref_shared;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, _rtype15);
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_shared_const", apache::thrift::protocol::T_LIST, 6);
  if (this->list_ref_shared_const) {
    const auto& _rtype16 = *this->list_ref_shared_const;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, _rtype16);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_custom_ref", apache::thrift::protocol::T_SET, 7);
  if (this->set_custom_ref) {
    const auto& _rtype17 = *this->set_custom_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, _rtype17);
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithContainers");
  xfer += prot_->serializedFieldSize("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype18 = *this->list_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, _rtype18);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype19 = *this->set_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, _rtype19);
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype20 = *this->map_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, _rtype20);
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype21 = *this->list_ref_unique;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, _rtype21);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype22 = *this->set_ref_shared;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, _rtype22);
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_shared_const", apache::thrift::protocol::T_LIST, 6);
  if (this->list_ref_shared_const) {
    const auto& _rtype23 = *this->list_ref_shared_const;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, _rtype23);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_custom_ref", apache::thrift::protocol::T_SET, 7);
  if (this->set_custom_ref) {
    const auto& _rtype24 = *this->set_custom_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, _rtype24);
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithContainers");
  xfer += prot_->writeFieldBegin("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype25 = *this->list_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, _rtype25);
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype26 = *this->set_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, _rtype26);
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype27 = *this->map_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::write(*prot_, _rtype27);
  }
  else {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype28 = *this->list_ref_unique;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, _rtype28);
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype29 = *this->set_ref_shared;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, _rtype29);
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("list_ref_shared_const", apache::thrift::protocol::T_LIST, 6);
  if (this->list_ref_shared_const) {
    const auto& _rtype30 = *this->list_ref_shared_const;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, _rtype30);
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_custom_ref", apache::thrift::protocol::T_SET, 7);
  if (this->set_custom_ref) {
    const auto& _rtype31 = *this->set_custom_ref;
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, _rtype31);
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithSharedConst::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_shared_const = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_shared_const") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "shared_const") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_shared_const") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype32(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype32.get());
          this->opt_shared_const = std::move(_ptype32);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype33(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype33.get());
          this->shared_const = std::move(_ptype33);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype34(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype34.get());
          this->req_shared_const = std::move(_ptype34);
          isset_req_shared_const = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_shared_const) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_shared_const' was not found in serialized data! Struct: StructWithSharedConst");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->serializedFieldSize("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->serializedFieldSize("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->writeFieldBegin("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->writeStructBegin("MyField");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Empty::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Empty::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Empty");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Empty::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Empty");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Empty::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Empty");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRef::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype35(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype35.get());
          this->def_field = std::move(_ptype35);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype36(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype36.get());
          this->opt_field = std::move(_ptype36);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype37(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype37.get());
          this->req_field = std::move(_ptype37);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRef");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRef::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRef");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRef::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRef");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRef::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRef");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeUnique::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype38(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype38.get());
          this->def_field = std::move(_ptype38);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype39(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype39.get());
          this->opt_field = std::move(_ptype39);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype40(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype40.get());
          this->req_field = std::move(_ptype40);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeUnique");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeUnique::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeUnique");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeUnique::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeUnique");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeUnique::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeUnique");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeShared::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype41(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype41.get());
          this->def_field = std::move(_ptype41);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype42(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype42.get());
          this->opt_field = std::move(_ptype42);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype43(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype43.get());
          this->req_field = std::move(_ptype43);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeShared");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeShared::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeShared");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeShared::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeShared");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeShared::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeShared");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype44(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype44.get());
          this->def_field = std::move(_ptype44);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype45(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype45.get());
          this->opt_field = std::move(_ptype45);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype46(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype46.get());
          this->req_field = std::move(_ptype46);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeSharedConst");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeSharedConst");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeSharedConst");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeSharedConst");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithRefTypeCustom::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_field = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "def_field") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "opt_field") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_field") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->def_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype47(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype47.get());
          this->def_field = std::move(_ptype47);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype48(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype48.get());
          this->opt_field = std::move(_ptype48);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_field)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype49(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::read(iprot, _ptype49.get());
          this->req_field = std::move(_ptype49);
          isset_req_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_field) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_field' was not found in serialized data! Struct: StructWithRefTypeCustom");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeCustom::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeCustom");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSize(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeCustom::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithRefTypeCustom");
  xfer += prot_->serializedFieldSize("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  if (this->opt_field) {
    xfer += prot_->serializedFieldSize("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->serializedStructSize("Empty");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::serializedSizeZC(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->serializedStructSize("Empty");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithRefTypeCustom::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithRefTypeCustom");
  xfer += prot_->writeFieldBegin("def_field", apache::thrift::protocol::T_STRUCT, 1);
  if (this->def_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->def_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_field) {
    xfer += prot_->writeFieldBegin("opt_field", apache::thrift::protocol::T_STRUCT, 2);
    if (this->opt_field) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->opt_field.get());
    }
    else {
      xfer += prot_->writeStructBegin("Empty");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_field", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_field) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Empty>::write(prot_, this->req_field.get());
  }
  else {
    xfer += prot_->writeStructBegin("Empty");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
