/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct anInteger;
struct aString;
struct opt_value;
struct value;
struct req_value;
struct opt_ref;
struct ref;
struct req_ref;
struct u;
struct aDouble;
struct f;
struct mes;
struct list_ref;
struct set_ref;
struct map_ref;
struct list_ref_unique;
struct set_ref_shared;
struct list_ref_shared_const;
struct opt_shared_const;
struct shared_const;
struct req_shared_const;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_anInteger
#define APACHE_THRIFT_ACCESSOR_anInteger
APACHE_THRIFT_DEFINE_ACCESSOR(anInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aString
#define APACHE_THRIFT_ACCESSOR_aString
APACHE_THRIFT_DEFINE_ACCESSOR(aString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_value
#define APACHE_THRIFT_ACCESSOR_opt_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_value
#define APACHE_THRIFT_ACCESSOR_req_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_ref
#define APACHE_THRIFT_ACCESSOR_opt_ref
APACHE_THRIFT_DEFINE_ACCESSOR(opt_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ref
#define APACHE_THRIFT_ACCESSOR_ref
APACHE_THRIFT_DEFINE_ACCESSOR(ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_ref
#define APACHE_THRIFT_ACCESSOR_req_ref
APACHE_THRIFT_DEFINE_ACCESSOR(req_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_u
#define APACHE_THRIFT_ACCESSOR_u
APACHE_THRIFT_DEFINE_ACCESSOR(u);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aDouble
#define APACHE_THRIFT_ACCESSOR_aDouble
APACHE_THRIFT_DEFINE_ACCESSOR(aDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_f
#define APACHE_THRIFT_ACCESSOR_f
APACHE_THRIFT_DEFINE_ACCESSOR(f);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mes
#define APACHE_THRIFT_ACCESSOR_mes
APACHE_THRIFT_DEFINE_ACCESSOR(mes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref
#define APACHE_THRIFT_ACCESSOR_list_ref
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_ref
#define APACHE_THRIFT_ACCESSOR_set_ref
APACHE_THRIFT_DEFINE_ACCESSOR(set_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_ref
#define APACHE_THRIFT_ACCESSOR_map_ref
APACHE_THRIFT_DEFINE_ACCESSOR(map_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref_unique
#define APACHE_THRIFT_ACCESSOR_list_ref_unique
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref_unique);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_ref_shared
#define APACHE_THRIFT_ACCESSOR_set_ref_shared
APACHE_THRIFT_DEFINE_ACCESSOR(set_ref_shared);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref_shared_const
#define APACHE_THRIFT_ACCESSOR_list_ref_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_const
#define APACHE_THRIFT_ACCESSOR_opt_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_const
#define APACHE_THRIFT_ACCESSOR_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_shared_const
#define APACHE_THRIFT_ACCESSOR_req_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(req_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class TypedEnum : short {
  VAL1 = 0,
  VAL2 = 1
};




} // cpp2
namespace std {


template<> struct hash<typename ::cpp2::TypedEnum> : public apache::thrift::detail::enum_hash<typename ::cpp2::TypedEnum> {};
template<> struct equal_to<typename ::cpp2::TypedEnum> : public apache::thrift::detail::enum_equal_to<typename ::cpp2::TypedEnum> {};


} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::TypedEnum>;

template <> struct TEnumTraits<::cpp2::TypedEnum> {
  using type = ::cpp2::TypedEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::VAL1; }
  static constexpr type max() { return type::VAL2; }
};


}} // apache::thrift

namespace cpp2 {

using _TypedEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<TypedEnum>;
extern const _TypedEnum_EnumMapFactory::ValuesToNamesMapType _TypedEnum_VALUES_TO_NAMES;
extern const _TypedEnum_EnumMapFactory::NamesToValuesMapType _TypedEnum_NAMES_TO_VALUES;

} // cpp2

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace cpp2 {
class MyUnion;
class MyField;
class MyStruct;
class StructWithUnion;
class RecursiveStruct;
class StructWithContainers;
class StructWithSharedConst;
class Empty;
class StructWithRef;
class StructWithRefTypeUnique;
class StructWithRefTypeShared;
class StructWithRefTypeSharedConst;
class StructWithRefAndAnnotCppNoexceptMoveCtor;
} // cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
class MyUnion final : private apache::thrift::detail::st::ComparisonOperators<MyUnion> {
 public:
  enum Type {
    __EMPTY__ = 0,
    anInteger = 1,
    aString = 2,
  } ;

  MyUnion()
      : type_(Type::__EMPTY__) {}

  MyUnion(MyUnion&& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::anInteger:
      {
        set_anInteger(std::move(rhs.value_.anInteger));
        break;
      }
      case Type::aString:
      {
        set_aString(std::move(rhs.value_.aString));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  MyUnion(const MyUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::anInteger:
      {
        set_anInteger(rhs.value_.anInteger);
        break;
      }
      case Type::aString:
      {
        set_aString(rhs.value_.aString);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::anInteger:
      {
        set_anInteger(std::move(rhs.value_.anInteger));
        break;
      }
      case Type::aString:
      {
        set_aString(std::move(rhs.value_.aString));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::anInteger:
      {
        set_anInteger(rhs.value_.anInteger);
        break;
      }
      case Type::aString:
      {
        set_aString(rhs.value_.aString);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~MyUnion() {
    __clear();
  }
  union storage_type {
    int32_t anInteger;
    ::std::string aString;

    storage_type() {}
    ~storage_type() {}
  } ;
  bool operator==(const MyUnion& rhs) const;
  bool operator<(const MyUnion& rhs) const;

  int32_t& set_anInteger(int32_t t = int32_t()) {
    __clear();
    type_ = Type::anInteger;
    ::new (std::addressof(value_.anInteger)) int32_t(t);
    return value_.anInteger;
  }

  ::std::string& set_aString(::std::string const &t) {
    __clear();
    type_ = Type::aString;
    ::new (std::addressof(value_.aString)) ::std::string(t);
    return value_.aString;
  }

  ::std::string& set_aString(::std::string&& t) {
    __clear();
    type_ = Type::aString;
    ::new (std::addressof(value_.aString)) ::std::string(std::move(t));
    return value_.aString;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_aString(T&&... t) {
    __clear();
    type_ = Type::aString;
    ::new (std::addressof(value_.aString)) ::std::string(std::forward<T>(t)...);
    return value_.aString;
  }

  int32_t const & get_anInteger() const {
    assert(type_ == Type::anInteger);
    return value_.anInteger;
  }

  ::std::string const & get_aString() const {
    assert(type_ == Type::aString);
    return value_.aString;
  }

  int32_t & mutable_anInteger() {
    assert(type_ == Type::anInteger);
    return value_.anInteger;
  }

  ::std::string & mutable_aString() {
    assert(type_ == Type::aString);
    return value_.aString;
  }

  int32_t move_anInteger() {
    assert(type_ == Type::anInteger);
    return std::move(value_.anInteger);
  }

  ::std::string move_aString() {
    assert(type_ == Type::aString);
    return std::move(value_.aString);
  }

  Type getType() const { return type_; }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  Type type_;
  storage_type value_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< MyUnion >;
};

void swap(MyUnion& a, MyUnion& b);

template <class Protocol_>
uint32_t MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyField final : private apache::thrift::detail::st::ComparisonOperators<MyField> {
 public:

  MyField() :
      opt_value(0),
      value(0),
      req_value(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyField(apache::thrift::FragileConstructor, int64_t opt_value__arg, int64_t value__arg, int64_t req_value__arg);

  MyField(MyField&&) = default;

  MyField(const MyField&) = default;

  MyField& operator=(MyField&&) = default;

  MyField& operator=(const MyField&) = default;
  void __clear();
 private:
  int64_t opt_value;
 public:
  int64_t value;
 public:
  int64_t req_value;

 public:
  struct __isset {
    bool opt_value;
    bool value;
  } __isset = {};
  bool operator==(const MyField& rhs) const;
  bool operator<(const MyField& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int64_t&> opt_value_ref() const& {
    return {opt_value, __isset.opt_value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int64_t&&> opt_value_ref() const&& {
    return {std::move(opt_value), __isset.opt_value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int64_t&> opt_value_ref() & {
    return {opt_value, __isset.opt_value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int64_t&&> opt_value_ref() && {
    return {std::move(opt_value), __isset.opt_value};
  }

  const int64_t* get_opt_value() const& {
    return __isset.opt_value ? std::addressof(opt_value) : nullptr;
  }

  int64_t* get_opt_value() & {
    return __isset.opt_value ? std::addressof(opt_value) : nullptr;
  }
  int64_t* get_opt_value() && = delete;

  int64_t& set_opt_value(int64_t opt_value_) {
    opt_value = opt_value_;
    __isset.opt_value = true;
    return opt_value;
  }

  int64_t get_value() const {
    return value;
  }

  int64_t& set_value(int64_t value_) {
    value = value_;
    __isset.value = true;
    return value;
  }

  int64_t get_req_value() const {
    return req_value;
  }

  int64_t& set_req_value(int64_t req_value_) {
    req_value = req_value_;
    return req_value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< MyField >;
};

void swap(MyField& a, MyField& b);

template <class Protocol_>
uint32_t MyField::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStruct final : private apache::thrift::detail::st::ComparisonOperators<MyStruct> {
 public:

  MyStruct() :
      ref(std::make_unique< ::cpp2::MyField>()),
      req_ref(std::make_unique< ::cpp2::MyField>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, std::unique_ptr< ::cpp2::MyField> opt_ref__arg, std::unique_ptr< ::cpp2::MyField> ref__arg, std::unique_ptr< ::cpp2::MyField> req_ref__arg);

  MyStruct(MyStruct&&) = default;
  MyStruct(const MyStruct& src);

  MyStruct& operator=(MyStruct&&) = default;
  MyStruct& operator=(const MyStruct& src);
  void __clear();
 public:
  std::unique_ptr< ::cpp2::MyField> opt_ref;
 public:
  std::unique_ptr< ::cpp2::MyField> ref;
 public:
  std::unique_ptr< ::cpp2::MyField> req_ref;

 public:
  bool operator==(const MyStruct& rhs) const;
  bool operator<(const MyStruct& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< MyStruct >;
};

void swap(MyStruct& a, MyStruct& b);

template <class Protocol_>
uint32_t MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithUnion final : private apache::thrift::detail::st::ComparisonOperators<StructWithUnion> {
 public:

  StructWithUnion() :
      u(std::make_unique< ::cpp2::MyUnion>()),
      aDouble(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithUnion(apache::thrift::FragileConstructor, std::unique_ptr< ::cpp2::MyUnion> u__arg, double aDouble__arg,  ::cpp2::MyField f__arg);

  StructWithUnion(StructWithUnion&&) = default;
  StructWithUnion(const StructWithUnion& src);

  StructWithUnion& operator=(StructWithUnion&&) = default;
  StructWithUnion& operator=(const StructWithUnion& src);
  void __clear();
 public:
  std::unique_ptr< ::cpp2::MyUnion> u;
 public:
  double aDouble;
 public:
   ::cpp2::MyField f;

 public:
  struct __isset {
    bool aDouble;
    bool f;
  } __isset = {};
  bool operator==(const StructWithUnion& rhs) const;
  bool operator<(const StructWithUnion& rhs) const;

  double get_aDouble() const {
    return aDouble;
  }

  double& set_aDouble(double aDouble_) {
    aDouble = aDouble_;
    __isset.aDouble = true;
    return aDouble;
  }
  const  ::cpp2::MyField& get_f() const&;
   ::cpp2::MyField get_f() &&;

  template <typename T_StructWithUnion_f_struct_setter =  ::cpp2::MyField>
   ::cpp2::MyField& set_f(T_StructWithUnion_f_struct_setter&& f_) {
    f = std::forward<T_StructWithUnion_f_struct_setter>(f_);
    __isset.f = true;
    return f;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithUnion >;
};

void swap(StructWithUnion& a, StructWithUnion& b);

template <class Protocol_>
uint32_t StructWithUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class RecursiveStruct final : private apache::thrift::detail::st::ComparisonOperators<RecursiveStruct> {
 public:

  RecursiveStruct() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursiveStruct(apache::thrift::FragileConstructor, ::std::vector< ::cpp2::RecursiveStruct> mes__arg);

  RecursiveStruct(RecursiveStruct&&) = default;

  RecursiveStruct(const RecursiveStruct&) = default;

  RecursiveStruct& operator=(RecursiveStruct&&) = default;

  RecursiveStruct& operator=(const RecursiveStruct&) = default;
  void __clear();
 private:
  ::std::vector< ::cpp2::RecursiveStruct> mes;

 public:
  struct __isset {
    bool mes;
  } __isset = {};
  bool operator==(const RecursiveStruct& rhs) const;
  bool operator<(const RecursiveStruct& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::vector< ::cpp2::RecursiveStruct>&> mes_ref() const& {
    return {mes, __isset.mes};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::vector< ::cpp2::RecursiveStruct>&&> mes_ref() const&& {
    return {std::move(mes), __isset.mes};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::vector< ::cpp2::RecursiveStruct>&> mes_ref() & {
    return {mes, __isset.mes};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::vector< ::cpp2::RecursiveStruct>&&> mes_ref() && {
    return {std::move(mes), __isset.mes};
  }
  const ::std::vector< ::cpp2::RecursiveStruct>* get_mes() const&;
  ::std::vector< ::cpp2::RecursiveStruct>* get_mes() &;
  ::std::vector< ::cpp2::RecursiveStruct>* get_mes() && = delete;

  template <typename T_RecursiveStruct_mes_struct_setter = ::std::vector< ::cpp2::RecursiveStruct>>
  ::std::vector< ::cpp2::RecursiveStruct>& set_mes(T_RecursiveStruct_mes_struct_setter&& mes_) {
    mes = std::forward<T_RecursiveStruct_mes_struct_setter>(mes_);
    __isset.mes = true;
    return mes;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< RecursiveStruct >;
};

void swap(RecursiveStruct& a, RecursiveStruct& b);

template <class Protocol_>
uint32_t RecursiveStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithContainers final : private apache::thrift::detail::st::ComparisonOperators<StructWithContainers> {
 public:

  StructWithContainers();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithContainers(apache::thrift::FragileConstructor, std::unique_ptr<::std::vector<int32_t>> list_ref__arg, std::unique_ptr<::std::set<int32_t>> set_ref__arg, std::unique_ptr<::std::map<int32_t, int32_t>> map_ref__arg, std::unique_ptr<::std::vector<int32_t>> list_ref_unique__arg, std::shared_ptr<::std::set<int32_t>> set_ref_shared__arg, std::shared_ptr<const ::std::vector<int32_t>> list_ref_shared_const__arg);

  StructWithContainers(StructWithContainers&&) = default;
  StructWithContainers(const StructWithContainers& src);

  StructWithContainers& operator=(StructWithContainers&&) = default;
  StructWithContainers& operator=(const StructWithContainers& src);
  void __clear();

  ~StructWithContainers();

 public:
  std::unique_ptr<::std::vector<int32_t>> list_ref;
 public:
  std::unique_ptr<::std::set<int32_t>> set_ref;
 public:
  std::unique_ptr<::std::map<int32_t, int32_t>> map_ref;
 public:
  std::unique_ptr<::std::vector<int32_t>> list_ref_unique;
 public:
  std::shared_ptr<::std::set<int32_t>> set_ref_shared;
 public:
  std::shared_ptr<const ::std::vector<int32_t>> list_ref_shared_const;

 public:
  bool operator==(const StructWithContainers& rhs) const;
  bool operator<(const StructWithContainers& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithContainers >;
};

void swap(StructWithContainers& a, StructWithContainers& b);

template <class Protocol_>
uint32_t StructWithContainers::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithSharedConst final : private apache::thrift::detail::st::ComparisonOperators<StructWithSharedConst> {
 public:

  StructWithSharedConst() :
      shared_const(std::make_shared< ::cpp2::MyField>()),
      req_shared_const(std::make_shared< ::cpp2::MyField>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithSharedConst(apache::thrift::FragileConstructor, std::shared_ptr<const  ::cpp2::MyField> opt_shared_const__arg, std::shared_ptr<const  ::cpp2::MyField> shared_const__arg, std::shared_ptr<const  ::cpp2::MyField> req_shared_const__arg);

  StructWithSharedConst(StructWithSharedConst&&) = default;

  StructWithSharedConst(const StructWithSharedConst&) = default;

  StructWithSharedConst& operator=(StructWithSharedConst&&) = default;

  StructWithSharedConst& operator=(const StructWithSharedConst&) = default;
  void __clear();
 public:
  std::shared_ptr<const  ::cpp2::MyField> opt_shared_const;
 public:
  std::shared_ptr<const  ::cpp2::MyField> shared_const;
 public:
  std::shared_ptr<const  ::cpp2::MyField> req_shared_const;

 public:
  bool operator==(const StructWithSharedConst& rhs) const;
  bool operator<(const StructWithSharedConst& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithSharedConst >;
};

void swap(StructWithSharedConst& a, StructWithSharedConst& b);

template <class Protocol_>
uint32_t StructWithSharedConst::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class Empty final : private apache::thrift::detail::st::ComparisonOperators<Empty> {
 public:

  Empty() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Empty(apache::thrift::FragileConstructor);

  Empty(Empty&&) = default;

  Empty(const Empty&) = default;

  Empty& operator=(Empty&&) = default;

  Empty& operator=(const Empty&) = default;
  void __clear();
  bool operator==(const Empty& rhs) const;
  bool operator<(const Empty& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< Empty >;
};

void swap(Empty& a, Empty& b);

template <class Protocol_>
uint32_t Empty::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithRef final : private apache::thrift::detail::st::ComparisonOperators<StructWithRef> {
 public:

  StructWithRef() :
      def_field(std::make_unique< ::cpp2::Empty>()),
      req_field(std::make_unique< ::cpp2::Empty>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRef(apache::thrift::FragileConstructor, std::unique_ptr< ::cpp2::Empty> def_field__arg, std::unique_ptr< ::cpp2::Empty> opt_field__arg, std::unique_ptr< ::cpp2::Empty> req_field__arg);

  StructWithRef(StructWithRef&&) = default;
  StructWithRef(const StructWithRef& src);

  StructWithRef& operator=(StructWithRef&&) = default;
  StructWithRef& operator=(const StructWithRef& src);
  void __clear();
 public:
  std::unique_ptr< ::cpp2::Empty> def_field;
 public:
  std::unique_ptr< ::cpp2::Empty> opt_field;
 public:
  std::unique_ptr< ::cpp2::Empty> req_field;

 public:
  bool operator==(const StructWithRef& rhs) const;
  bool operator<(const StructWithRef& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithRef >;
};

void swap(StructWithRef& a, StructWithRef& b);

template <class Protocol_>
uint32_t StructWithRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithRefTypeUnique final : private apache::thrift::detail::st::ComparisonOperators<StructWithRefTypeUnique> {
 public:

  StructWithRefTypeUnique() :
      def_field(std::make_unique< ::cpp2::Empty>()),
      req_field(std::make_unique< ::cpp2::Empty>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeUnique(apache::thrift::FragileConstructor, std::unique_ptr< ::cpp2::Empty> def_field__arg, std::unique_ptr< ::cpp2::Empty> opt_field__arg, std::unique_ptr< ::cpp2::Empty> req_field__arg);

  StructWithRefTypeUnique(StructWithRefTypeUnique&&) = default;
  StructWithRefTypeUnique(const StructWithRefTypeUnique& src);

  StructWithRefTypeUnique& operator=(StructWithRefTypeUnique&&) = default;
  StructWithRefTypeUnique& operator=(const StructWithRefTypeUnique& src);
  void __clear();
 public:
  std::unique_ptr< ::cpp2::Empty> def_field;
 public:
  std::unique_ptr< ::cpp2::Empty> opt_field;
 public:
  std::unique_ptr< ::cpp2::Empty> req_field;

 public:
  bool operator==(const StructWithRefTypeUnique& rhs) const;
  bool operator<(const StructWithRefTypeUnique& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithRefTypeUnique >;
};

void swap(StructWithRefTypeUnique& a, StructWithRefTypeUnique& b);

template <class Protocol_>
uint32_t StructWithRefTypeUnique::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithRefTypeShared final : private apache::thrift::detail::st::ComparisonOperators<StructWithRefTypeShared> {
 public:

  StructWithRefTypeShared() :
      def_field(std::make_shared< ::cpp2::Empty>()),
      req_field(std::make_shared< ::cpp2::Empty>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeShared(apache::thrift::FragileConstructor, std::shared_ptr< ::cpp2::Empty> def_field__arg, std::shared_ptr< ::cpp2::Empty> opt_field__arg, std::shared_ptr< ::cpp2::Empty> req_field__arg);

  StructWithRefTypeShared(StructWithRefTypeShared&&) = default;

  StructWithRefTypeShared(const StructWithRefTypeShared&) = default;

  StructWithRefTypeShared& operator=(StructWithRefTypeShared&&) = default;

  StructWithRefTypeShared& operator=(const StructWithRefTypeShared&) = default;
  void __clear();
 public:
  std::shared_ptr< ::cpp2::Empty> def_field;
 public:
  std::shared_ptr< ::cpp2::Empty> opt_field;
 public:
  std::shared_ptr< ::cpp2::Empty> req_field;

 public:
  bool operator==(const StructWithRefTypeShared& rhs) const;
  bool operator<(const StructWithRefTypeShared& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithRefTypeShared >;
};

void swap(StructWithRefTypeShared& a, StructWithRefTypeShared& b);

template <class Protocol_>
uint32_t StructWithRefTypeShared::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithRefTypeSharedConst final : private apache::thrift::detail::st::ComparisonOperators<StructWithRefTypeSharedConst> {
 public:

  StructWithRefTypeSharedConst() :
      def_field(std::make_shared< ::cpp2::Empty>()),
      req_field(std::make_shared< ::cpp2::Empty>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeSharedConst(apache::thrift::FragileConstructor, std::shared_ptr<const  ::cpp2::Empty> def_field__arg, std::shared_ptr<const  ::cpp2::Empty> opt_field__arg, std::shared_ptr<const  ::cpp2::Empty> req_field__arg);

  StructWithRefTypeSharedConst(StructWithRefTypeSharedConst&&) = default;

  StructWithRefTypeSharedConst(const StructWithRefTypeSharedConst&) = default;

  StructWithRefTypeSharedConst& operator=(StructWithRefTypeSharedConst&&) = default;

  StructWithRefTypeSharedConst& operator=(const StructWithRefTypeSharedConst&) = default;
  void __clear();
 public:
  std::shared_ptr<const  ::cpp2::Empty> def_field;
 public:
  std::shared_ptr<const  ::cpp2::Empty> opt_field;
 public:
  std::shared_ptr<const  ::cpp2::Empty> req_field;

 public:
  bool operator==(const StructWithRefTypeSharedConst& rhs) const;
  bool operator<(const StructWithRefTypeSharedConst& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithRefTypeSharedConst >;
};

void swap(StructWithRefTypeSharedConst& a, StructWithRefTypeSharedConst& b);

template <class Protocol_>
uint32_t StructWithRefTypeSharedConst::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithRefAndAnnotCppNoexceptMoveCtor final : private apache::thrift::detail::st::ComparisonOperators<StructWithRefAndAnnotCppNoexceptMoveCtor> {
 public:

  StructWithRefAndAnnotCppNoexceptMoveCtor() :
      def_field(std::make_unique< ::cpp2::Empty>()) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefAndAnnotCppNoexceptMoveCtor(apache::thrift::FragileConstructor, std::unique_ptr< ::cpp2::Empty> def_field__arg);
  StructWithRefAndAnnotCppNoexceptMoveCtor(StructWithRefAndAnnotCppNoexceptMoveCtor&& other) noexcept :
      def_field(std::move(other.def_field)) {}
  StructWithRefAndAnnotCppNoexceptMoveCtor(const StructWithRefAndAnnotCppNoexceptMoveCtor& src);

  StructWithRefAndAnnotCppNoexceptMoveCtor& operator=(StructWithRefAndAnnotCppNoexceptMoveCtor&&) = default;
  StructWithRefAndAnnotCppNoexceptMoveCtor& operator=(const StructWithRefAndAnnotCppNoexceptMoveCtor& src);
  void __clear();
 public:
  std::unique_ptr< ::cpp2::Empty> def_field;

 public:
  bool operator==(const StructWithRefAndAnnotCppNoexceptMoveCtor& rhs) const;
  bool operator<(const StructWithRefAndAnnotCppNoexceptMoveCtor& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StructWithRefAndAnnotCppNoexceptMoveCtor >;
};

void swap(StructWithRefAndAnnotCppNoexceptMoveCtor& a, StructWithRefAndAnnotCppNoexceptMoveCtor& b);

template <class Protocol_>
uint32_t StructWithRefAndAnnotCppNoexceptMoveCtor::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
