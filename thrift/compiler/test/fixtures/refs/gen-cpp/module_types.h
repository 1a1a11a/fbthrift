/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _module_TYPES_H
#define  _module_TYPES_H

#include <thrift/lib/cpp/Thrift.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/protocol/TProtocol.h>
#include <thrift/lib/cpp/transport/TTransport.h>

namespace apache { namespace thrift { namespace reflection {
class Schema;
}}}




class MyField;

class MyStruct;

void swap(MyField &a, MyField &b);

class MyField : public apache::thrift::TStructType<MyField> {
 public:

  static const uint64_t _reflection_id = 16778989117799402412U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyField() : opt_value(0), value(0), req_value(0) {
  }

  MyField(const MyField&) = default;
  MyField& operator=(const MyField& src)= default;
  MyField(MyField&&) = default;
  MyField& operator=(MyField&&) = default;

  void __clear();

  virtual ~MyField() throw() {}

  int64_t opt_value;
  int64_t value;
  int64_t req_value;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      opt_value = false;
      value = false;
    }
    bool opt_value;
    bool value;
  } __isset;

  bool operator == (const MyField &) const;
  bool operator != (const MyField& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyField & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class MyField;
void merge(const MyField& from, MyField& to);
void merge(MyField&& from, MyField& to);
void swap(MyStruct &a, MyStruct &b);

class MyStruct : public apache::thrift::TStructType<MyStruct> {
 public:

  static const uint64_t _reflection_id = 7958971832214294220U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyStruct() {
  }

  MyStruct(const MyStruct&);
  MyStruct& operator=(const MyStruct& src) {
    MyStruct tmp(src);
    swap(*this, tmp);
    return *this;
  }
  MyStruct(MyStruct&&) = default;
  MyStruct& operator=(MyStruct&&) = default;

  void __clear();

  virtual ~MyStruct() throw() {}

  std::unique_ptr<MyField> opt_ref;
  std::unique_ptr<MyField> ref;
  std::unique_ptr<MyField> req_ref;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
    }
  } __isset;

  bool operator == (const MyStruct &) const;
  bool operator != (const MyStruct& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyStruct & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class MyStruct;
void merge(const MyStruct& from, MyStruct& to);
void merge(MyStruct&& from, MyStruct& to);


#endif
