/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.refs;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="RecursiveStruct", builder=RecursiveStruct.Builder.class)
public final class RecursiveStruct {
    @ThriftConstructor
    public RecursiveStruct(
        @ThriftField(value=1, name="mes", requiredness=Requiredness.OPTIONAL, isRecursive=Recursiveness.TRUE) final List<test.fixtures.refs.RecursiveStruct> mes
    ) {
        this.mes = mes;
    }
    
    @ThriftConstructor
    protected RecursiveStruct() {
      this.mes = null;
    }
    
    public static class Builder {
        private List<test.fixtures.refs.RecursiveStruct> mes;
        @ThriftField(value=1, name="mes", requiredness=Requiredness.OPTIONAL, isRecursive=Recursiveness.TRUE)
        public Builder setMes(List<test.fixtures.refs.RecursiveStruct> mes) {
            this.mes = mes;
            return this;
        }
    
        public Builder() { }
        public Builder(RecursiveStruct other) {
            this.mes = other.mes;
        }
    
        @ThriftConstructor
        public RecursiveStruct build() {
            return new RecursiveStruct (
                this.mes
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("RecursiveStruct");
    private final List<test.fixtures.refs.RecursiveStruct> mes;
    public static final int _MES = 1;
    private static final TField MES_FIELD_DESC = new TField("mes", TType.LIST, (short)1);

    
    @ThriftField(value=1, name="mes", requiredness=Requiredness.OPTIONAL, isRecursive=Recursiveness.TRUE)
    public List<test.fixtures.refs.RecursiveStruct> getMes() { return mes; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("mes", mes)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        RecursiveStruct other = (RecursiveStruct)o;
    
        return
            Objects.equals(mes, other.mes) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            mes
        });
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mes != null) {
        oprot.writeFieldBegin(MES_FIELD_DESC);
        List<test.fixtures.refs.RecursiveStruct> _iter0 = this.mes;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
        for (test.fixtures.refs.RecursiveStruct _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
