/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.refs;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="StructWithRefTypeUnique", builder=StructWithRefTypeUnique.Builder.class)
public final class StructWithRefTypeUnique {
    @ThriftConstructor
    public StructWithRefTypeUnique(
        @ThriftField(value=1, name="def_field", requiredness=Requiredness.NONE) final test.fixtures.refs.Empty defField,
        @ThriftField(value=2, name="opt_field", requiredness=Requiredness.OPTIONAL) final test.fixtures.refs.Empty optField,
        @ThriftField(value=3, name="req_field", requiredness=Requiredness.REQUIRED) final test.fixtures.refs.Empty reqField
    ) {
        this.defField = defField;
        this.optField = optField;
        this.reqField = reqField;
    }
    
    @ThriftConstructor
    protected StructWithRefTypeUnique() {
      this.defField = null;
      this.optField = null;
      this.reqField = null;
    }
    
    public static class Builder {
        private test.fixtures.refs.Empty defField;
        @ThriftField(value=1, name="def_field", requiredness=Requiredness.NONE)
        public Builder setDefField(test.fixtures.refs.Empty defField) {
            this.defField = defField;
            return this;
        }
        private test.fixtures.refs.Empty optField;
        @ThriftField(value=2, name="opt_field", requiredness=Requiredness.OPTIONAL)
        public Builder setOptField(test.fixtures.refs.Empty optField) {
            this.optField = optField;
            return this;
        }
        private test.fixtures.refs.Empty reqField;
        @ThriftField(value=3, name="req_field", requiredness=Requiredness.REQUIRED)
        public Builder setReqField(test.fixtures.refs.Empty reqField) {
            this.reqField = reqField;
            return this;
        }
    
        public Builder() { }
        public Builder(StructWithRefTypeUnique other) {
            this.defField = other.defField;
            this.optField = other.optField;
            this.reqField = other.reqField;
        }
    
        @ThriftConstructor
        public StructWithRefTypeUnique build() {
            return new StructWithRefTypeUnique (
                this.defField,
                this.optField,
                this.reqField
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("StructWithRefTypeUnique");
    private final test.fixtures.refs.Empty defField;
    public static final int _DEF_FIELD = 1;
    private static final TField DEF_FIELD_FIELD_DESC = new TField("defField", TType.STRUCT, (short)1);
    private final test.fixtures.refs.Empty optField;
    public static final int _OPT_FIELD = 2;
    private static final TField OPT_FIELD_FIELD_DESC = new TField("optField", TType.STRUCT, (short)2);
    private final test.fixtures.refs.Empty reqField;
    public static final int _REQ_FIELD = 3;
    private static final TField REQ_FIELD_FIELD_DESC = new TField("reqField", TType.STRUCT, (short)3);

    
    @ThriftField(value=1, name="def_field", requiredness=Requiredness.NONE)
    public test.fixtures.refs.Empty getDefField() { return defField; }
        
    @ThriftField(value=2, name="opt_field", requiredness=Requiredness.OPTIONAL)
    public test.fixtures.refs.Empty getOptField() { return optField; }
        
    @ThriftField(value=3, name="req_field", requiredness=Requiredness.REQUIRED)
    public test.fixtures.refs.Empty getReqField() { return reqField; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("defField", defField)
            .add("optField", optField)
            .add("reqField", reqField)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        StructWithRefTypeUnique other = (StructWithRefTypeUnique)o;
    
        return
            Objects.equals(defField, other.defField) &&
            Objects.equals(optField, other.optField) &&
            Objects.equals(reqField, other.reqField) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            defField,
            optField,
            reqField
        });
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.defField != null) {
        oprot.writeFieldBegin(DEF_FIELD_FIELD_DESC);
        this.defField.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (this.optField != null) {
        oprot.writeFieldBegin(OPT_FIELD_FIELD_DESC);
        this.optField.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (this.reqField != null) {
        oprot.writeFieldBegin(REQ_FIELD_FIELD_DESC);
        this.reqField.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
