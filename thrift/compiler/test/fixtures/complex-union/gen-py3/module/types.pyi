#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
from enum import Enum


# Forward Definitions for Structs
class ComplexUnion(thrift.py3.types.Union): ...
class VirtualComplexUnion(thrift.py3.types.Union): ...
# Forward Definitions for Containers
class List__i64(_typing.Sequence[int]): ...
class List__string(_typing.Sequence[str]): ...
class Map__i16_string(_typing.Mapping[int, str]): ...


class ComplexUnionType(Enum):
    EMPTY: ...
    intValue: ...
    stringValue: ...
    intListValue: ...
    stringListValue: ...
    typedefValue: ...
    stringRef: ...
    value: int


class ComplexUnion(thrift.py3.types.Union):
    def __init__(
        self, *,
        intValue: int=None,
        stringValue: str=None,
        intListValue: _typing.Sequence[int]=None,
        stringListValue: _typing.Sequence[str]=None,
        typedefValue: _typing.Mapping[int, str]=None,
        stringRef: str=None
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: ComplexUnion) -> bool: ...
    def __lt__(self, other: ComplexUnion) -> bool: ...

    @property
    def intValue(self) -> int: ...
    @property
    def stringValue(self) -> str: ...
    @property
    def intListValue(self) -> List__i64: ...
    @property
    def stringListValue(self) -> List__string: ...
    @property
    def typedefValue(self) -> Map__i16_string: ...
    @property
    def stringRef(self) -> str: ...
    @property
    def value(self) -> _typing.Union[int, str, _typing.Sequence[int], _typing.Sequence[str], _typing.Mapping[int, str], str]: ...
    @property
    def type(self) -> ComplexUnionType: ...
    def get_type(self) -> ComplexUnionType: ...


class VirtualComplexUnionType(Enum):
    EMPTY: ...
    thingOne: ...
    thingTwo: ...
    value: int


class VirtualComplexUnion(thrift.py3.types.Union):
    def __init__(
        self, *,
        thingOne: str=None,
        thingTwo: str=None
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: VirtualComplexUnion) -> bool: ...
    def __lt__(self, other: VirtualComplexUnion) -> bool: ...

    @property
    def thingOne(self) -> str: ...
    @property
    def thingTwo(self) -> str: ...
    @property
    def value(self) -> _typing.Union[str, str]: ...
    @property
    def type(self) -> VirtualComplexUnionType: ...
    def get_type(self) -> VirtualComplexUnionType: ...


_List__i64T = _typing.TypeVar('_List__i64T', bound=_typing.Sequence[int])


class List__i64(_typing.Sequence[int]):
    def __init__(self, items: _typing.Sequence[int]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: int) -> int: ...
    def count(self, item: int) -> int: ...
    def __add__(self, other: _typing.Sequence[int]) -> List__i64: ...
    def __radd__(self, other: _List__i64T) -> _List__i64T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__i64: ...
    def __getitem__(self, index: int) -> int: ...
    def __reversed__(self) -> _typing.Iterator[int]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, item: int) -> bool: ...
    def __eq__(self, other: _typing.Sequence[int]) -> bool: ...


_List__stringT = _typing.TypeVar('_List__stringT', bound=_typing.Sequence[str])


class List__string(_typing.Sequence[str]):
    def __init__(self, items: _typing.Sequence[str]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def index(self, item: str) -> int: ...
    def count(self, item: str) -> int: ...
    def __add__(self, other: _typing.Sequence[str]) -> List__string: ...
    def __radd__(self, other: _List__stringT) -> _List__stringT: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> List__string: ...
    def __getitem__(self, index: int) -> str: ...
    def __reversed__(self) -> _typing.Iterator[str]: ...
    def __iter__(self) -> _typing.Iterator[str]: ...
    def __contains__(self, item: str) -> bool: ...
    def __eq__(self, other: _typing.Sequence[str]) -> bool: ...


class Map__i16_string(_typing.Mapping[int, str]):
    def __init__(self, items: _typing.Mapping[int, str]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: _typing.Mapping[int, str]) -> bool: ...
    def __getitem__(self, key: int) -> str: ...
    def __iter__(self) -> _typing.Iterator[int]: ...
    def __contains__(self, key: int) -> bool: ...
    def get(self, key: int, default: str=None) -> str: ...
    def keys(self) -> _typing.Iterator[int]: ...
    def values(self) -> _typing.Iterator[str]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[int, str]]: ...


