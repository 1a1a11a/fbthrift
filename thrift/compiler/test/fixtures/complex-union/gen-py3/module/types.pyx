#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t, uint32_t
from cython.operator cimport dereference as deref, preincrement as inc
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.types cimport translate_cpp_enum_to_python
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer cimport IOBuf
from thrift.py3.serializer import Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum




cdef cComplexUnion _ComplexUnion_defaults = cComplexUnion()

cdef class ComplexUnion(thrift.py3.types.Struct):

    def __init__(
        ComplexUnion self,
        intValue=None,
        stringValue=None,
        intListValue=None,
        stringListValue=None,
        typedefValue=None,
        stringRef=None
    ):
        self._cpp_obj = move(ComplexUnion._make_instance(
          NULL,
          intValue,
          stringValue,
          intListValue,
          stringListValue,
          typedefValue,
          stringRef,
        ))

    cdef bytes _serialize(ComplexUnion self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cComplexUnion](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cComplexUnion](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cComplexUnion](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(ComplexUnion self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cComplexUnion](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cComplexUnion](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cComplexUnion](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (ComplexUnion, serialize(self)))

    def __call__(
        ComplexUnion self,
        intValue=NOTSET,
        stringValue=NOTSET,
        intListValue=NOTSET,
        stringListValue=NOTSET,
        typedefValue=NOTSET,
        stringRef=NOTSET
    ):
        changes = any((
            intValue is not NOTSET,

            stringValue is not NOTSET,

            intListValue is not NOTSET,

            stringListValue is not NOTSET,

            typedefValue is not NOTSET,

            stringRef is not NOTSET,
        ))

        if not changes:
            return self

        inst = <ComplexUnion>ComplexUnion.__new__(ComplexUnion)
        inst._cpp_obj = move(ComplexUnion._make_instance(
          self._cpp_obj.get(),
          intValue,
          stringValue,
          intListValue,
          stringListValue,
          typedefValue,
          stringRef,
        ))
        return inst

    @staticmethod
    cdef unique_ptr[cComplexUnion] _make_instance(
        cComplexUnion* base_instance,
        object intValue,
        object stringValue,
        object intListValue,
        object stringListValue,
        object typedefValue,
        object stringRef
    ) except *:
        cdef unique_ptr[cComplexUnion] c_inst
        if base_instance:
            c_inst = make_unique[cComplexUnion](deref(base_instance))
        else:
            c_inst = make_unique[cComplexUnion]()

        if base_instance:
            # Convert None's to default value.
            if intValue is None:
                deref(c_inst).intValue = _ComplexUnion_defaults.intValue
                deref(c_inst).__isset.intValue = False
            elif intValue is NOTSET:
                intValue = None

            if stringValue is None:
                deref(c_inst).stringValue = _ComplexUnion_defaults.stringValue
                deref(c_inst).__isset.stringValue = False
            elif stringValue is NOTSET:
                stringValue = None

            if intListValue is None:
                deref(c_inst).intListValue = _ComplexUnion_defaults.intListValue
                deref(c_inst).__isset.intListValue = False
            elif intListValue is NOTSET:
                intListValue = None

            if stringListValue is None:
                deref(c_inst).stringListValue = _ComplexUnion_defaults.stringListValue
                deref(c_inst).__isset.stringListValue = False
            elif stringListValue is NOTSET:
                stringListValue = None

            if typedefValue is None:
                deref(c_inst).typedefValue = _ComplexUnion_defaults.typedefValue
                deref(c_inst).__isset.typedefValue = False
            elif typedefValue is NOTSET:
                typedefValue = None

            if stringRef is None:
                raise ValueError("Reference-annotated fields may not be initialized to defaults")
            elif stringRef is NOTSET:
                stringRef = None

        if intValue is not None:
            deref(c_inst).intValue = intValue
            deref(c_inst).__isset.intValue = True

        if stringValue is not None:
            deref(c_inst).stringValue = stringValue.encode('UTF-8')
            deref(c_inst).__isset.stringValue = True

        if intListValue is not None:
            deref(c_inst).intListValue = <vector[int64_t]>deref(List__i64(intListValue)._cpp_obj)
            deref(c_inst).__isset.intListValue = True

        if stringListValue is not None:
            deref(c_inst).stringListValue = <vector[string]>deref(List__string(stringListValue)._cpp_obj)
            deref(c_inst).__isset.stringListValue = True

        if typedefValue is not None:
            deref(c_inst).typedefValue = <cmap[int16_t,string]>deref(Map__i16_string(typedefValue)._cpp_obj)
            deref(c_inst).__isset.typedefValue = True

        if stringRef is not None:
            deref(c_inst).stringRef = make_unique[string](deref((<str?>stringRef)._cpp_obj))
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        yield 'intValue', self.intValue
        yield 'stringValue', self.stringValue
        yield 'intListValue', self.intListValue
        yield 'stringListValue', self.stringListValue
        yield 'typedefValue', self.typedefValue
        yield 'stringRef', self.stringRef

    def __bool__(self):
        return deref(self._cpp_obj).__isset.intValue or deref(self._cpp_obj).__isset.stringValue or deref(self._cpp_obj).__isset.intListValue or deref(self._cpp_obj).__isset.stringListValue or deref(self._cpp_obj).__isset.typedefValue or <bint>(deref(self._cpp_obj).stringRef)

    @staticmethod
    cdef create(shared_ptr[cComplexUnion] cpp_obj):
        inst = <ComplexUnion>ComplexUnion.__new__(ComplexUnion)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def intValue(self):
        if not deref(self._cpp_obj).__isset.intValue:
            return None

        return self._cpp_obj.get().intValue

    @property
    def stringValue(self):
        if not deref(self._cpp_obj).__isset.stringValue:
            return None

        return self._cpp_obj.get().stringValue.decode('UTF-8')

    @property
    def intListValue(self):
        if not deref(self._cpp_obj).__isset.intListValue:
            return None

        if self.__intListValue is None:
            self.__intListValue = List__i64.create(make_shared[vector[int64_t]](deref(self._cpp_obj).intListValue))
        return self.__intListValue

    @property
    def stringListValue(self):
        if not deref(self._cpp_obj).__isset.stringListValue:
            return None

        if self.__stringListValue is None:
            self.__stringListValue = List__string.create(make_shared[vector[string]](deref(self._cpp_obj).stringListValue))
        return self.__stringListValue

    @property
    def typedefValue(self):
        if not deref(self._cpp_obj).__isset.typedefValue:
            return None

        if self.__typedefValue is None:
            self.__typedefValue = Map__i16_string.create(make_shared[cmap[int16_t,string]](deref(self._cpp_obj).typedefValue))
        return self.__typedefValue

    @property
    def stringRef(self):
        if self.__stringRef is None:
            if not deref(self._cpp_obj).stringRef:
                return None
            self.__stringRef = str.create(aliasing_constructor_stringRef(self._cpp_obj, (deref(self._cpp_obj).stringRef.get())))
        return self.__stringRef


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, ComplexUnion) and
                isinstance(other, ComplexUnion)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cComplexUnion cself = deref((<ComplexUnion>self)._cpp_obj)
        cdef cComplexUnion cother = deref((<ComplexUnion>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(ComplexUnion self):
        if not self.__hash:
            self.__hash = hash((
            self.intValue,
            self.stringValue,
            self.intListValue,
            self.stringListValue,
            self.typedefValue,
            self.stringRef,
            ))
        return self.__hash

    def __repr__(ComplexUnion self):
        return f'ComplexUnion(intValue={repr(self.intValue)}, stringValue={repr(self.stringValue)}, intListValue={repr(self.intListValue)}, stringListValue={repr(self.stringListValue)}, typedefValue={repr(self.typedefValue)}, stringRef={repr(self.stringRef)})'


cdef cFinalComplexUnion _FinalComplexUnion_defaults = cFinalComplexUnion()

cdef class FinalComplexUnion(thrift.py3.types.Struct):

    def __init__(
        FinalComplexUnion self,
        thingOne=None,
        thingTwo=None
    ):
        self._cpp_obj = move(FinalComplexUnion._make_instance(
          NULL,
          thingOne,
          thingTwo,
        ))

    cdef bytes _serialize(FinalComplexUnion self, proto):
        cdef string c_str
        if proto is Protocol.COMPACT:
            serializer.CompactSerialize[cFinalComplexUnion](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.BINARY:
            serializer.BinarySerialize[cFinalComplexUnion](deref(self._cpp_obj.get()), &c_str)
        elif proto is Protocol.JSON:
            serializer.JSONSerialize[cFinalComplexUnion](deref(self._cpp_obj.get()), &c_str)
        return <bytes> c_str

    cdef uint32_t _deserialize(FinalComplexUnion self, const IOBuf* buf, proto):
        cdef uint32_t needed
        if proto is Protocol.COMPACT:
            needed = serializer.CompactDeserialize[cFinalComplexUnion](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.BINARY:
            needed = serializer.BinaryDeserialize[cFinalComplexUnion](buf, deref(self._cpp_obj.get()))
        elif proto is Protocol.JSON:
            needed = serializer.JSONDeserialize[cFinalComplexUnion](buf, deref(self._cpp_obj.get()))
        return needed

    def __reduce__(self):
        return (deserialize, (FinalComplexUnion, serialize(self)))

    def __call__(
        FinalComplexUnion self,
        thingOne=NOTSET,
        thingTwo=NOTSET
    ):
        changes = any((
            thingOne is not NOTSET,

            thingTwo is not NOTSET,
        ))

        if not changes:
            return self

        inst = <FinalComplexUnion>FinalComplexUnion.__new__(FinalComplexUnion)
        inst._cpp_obj = move(FinalComplexUnion._make_instance(
          self._cpp_obj.get(),
          thingOne,
          thingTwo,
        ))
        return inst

    @staticmethod
    cdef unique_ptr[cFinalComplexUnion] _make_instance(
        cFinalComplexUnion* base_instance,
        object thingOne,
        object thingTwo
    ) except *:
        cdef unique_ptr[cFinalComplexUnion] c_inst
        if base_instance:
            c_inst = make_unique[cFinalComplexUnion](deref(base_instance))
        else:
            c_inst = make_unique[cFinalComplexUnion]()

        if base_instance:
            # Convert None's to default value.
            if thingOne is None:
                deref(c_inst).thingOne = _FinalComplexUnion_defaults.thingOne
                deref(c_inst).__isset.thingOne = False
            elif thingOne is NOTSET:
                thingOne = None

            if thingTwo is None:
                deref(c_inst).thingTwo = _FinalComplexUnion_defaults.thingTwo
                deref(c_inst).__isset.thingTwo = False
            elif thingTwo is NOTSET:
                thingTwo = None

        if thingOne is not None:
            deref(c_inst).thingOne = thingOne.encode('UTF-8')
            deref(c_inst).__isset.thingOne = True

        if thingTwo is not None:
            deref(c_inst).thingTwo = thingTwo.encode('UTF-8')
            deref(c_inst).__isset.thingTwo = True

        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        yield 'thingOne', self.thingOne
        yield 'thingTwo', self.thingTwo

    def __bool__(self):
        return deref(self._cpp_obj).__isset.thingOne or deref(self._cpp_obj).__isset.thingTwo

    @staticmethod
    cdef create(shared_ptr[cFinalComplexUnion] cpp_obj):
        inst = <FinalComplexUnion>FinalComplexUnion.__new__(FinalComplexUnion)
        inst._cpp_obj = cpp_obj
        return inst

    @property
    def thingOne(self):
        if not deref(self._cpp_obj).__isset.thingOne:
            return None

        return self._cpp_obj.get().thingOne.decode('UTF-8')

    @property
    def thingTwo(self):
        if not deref(self._cpp_obj).__isset.thingTwo:
            return None

        return self._cpp_obj.get().thingTwo.decode('UTF-8')


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, FinalComplexUnion) and
                isinstance(other, FinalComplexUnion)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cFinalComplexUnion cself = deref((<FinalComplexUnion>self)._cpp_obj)
        cdef cFinalComplexUnion cother = deref((<FinalComplexUnion>other)._cpp_obj)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(FinalComplexUnion self):
        if not self.__hash:
            self.__hash = hash((
            self.thingOne,
            self.thingTwo,
            ))
        return self.__hash

    def __repr__(FinalComplexUnion self):
        return f'FinalComplexUnion(thingOne={repr(self.thingOne)}, thingTwo={repr(self.thingTwo)})'


cdef class List__i64:
    def __init__(self, items=None):
        if isinstance(items, List__i64):
            self._cpp_obj = (<List__i64> items)._cpp_obj
        else:
            self._cpp_obj = move(List__i64._make_instance(items))

    @staticmethod
    cdef create(shared_ptr[vector[int64_t]] c_items):
        inst = <List__i64>List__i64.__new__(List__i64)
        inst._cpp_obj = c_items
        return inst

    @staticmethod
    cdef unique_ptr[vector[int64_t]] _make_instance(object items) except *:
        cdef unique_ptr[vector[int64_t]] c_inst = make_unique[vector[int64_t]]()
        if items:
            for item in items:
                deref(c_inst).push_back(item)
        return move_unique(c_inst)

    def __getitem__(self, object index_obj):
        cdef int index
        cdef shared_ptr[vector[int64_t]] c_inst
        cdef int64_t citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[int64_t]]()
            start_val = index_obj.start
            stop_val = index_obj.stop
            step_val = index_obj.step
            sz = deref(self._cpp_obj).size()

            if step_val == 0 or step_val is None:
                step_val = 1
            if step_val > 0:
                if start_val is None:
                    start_val = 0
                elif start_val > sz:
                    start_val = sz
                if stop_val is None:
                    stop_val = sz
                elif stop_val > sz:
                    stop_val = sz
            else:
                if start_val is None:
                    start_val = sz - 1
                elif start_val > sz - 1:
                    start_val = sz - 1
                if stop_val is None:
                    stop_val = -1
                elif stop_val > sz - 1:
                    stop_val = sz - 1

            index = start_val
            while ((step_val > 0 and index < stop_val) or
                   (step_val < 0 and index > stop_val)):
                citem = deref(self._cpp_obj.get())[index]
                deref(c_inst).push_back(citem)
                index += step_val
            return List__i64.create(c_inst)
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size - index
            if index >= size:
                raise IndexError('list index out of range')
            # Support negative indexes
            if index < 0:
                index = size - index
            citem = deref(self._cpp_obj.get())[index]
            return citem

    def __len__(self):
        return deref(self._cpp_obj).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        if not self.__hash:
            self.__hash = hash(tuple(self))
        return self.__hash

    def __contains__(self, item):
        if not self:
            return False
        cdef int64_t citem = item
        cdef vector[int64_t] vec = deref(
            self._cpp_obj.get())
        return std_libcpp.find(vec.begin(), vec.end(), citem) != vec.end()

    def __iter__(self):
        if not self:
            raise StopIteration
        cdef int64_t citem
        for citem in deref(self._cpp_obj):
            yield citem

    def __repr__(self):
        if not self:
            return 'i[]'
        return f'i[{", ".join(map(repr, self))}]'

    def __reversed__(self):
        if not self:
            raise StopIteration
        cdef int64_t citem
        cdef vector[int64_t] vec = deref(
            self._cpp_obj.get())
        cdef vector[int64_t].reverse_iterator loc = vec.rbegin()
        while loc != vec.rend():
            citem = deref(loc)
            yield citem
            inc(loc)

    def index(self, item):
        if not self:
            raise ValueError(f'{item} is not in list')
        cdef int64_t citem = item
        cdef vector[int64_t] vec = deref(self._cpp_obj.get())
        cdef vector[int64_t].iterator loc = std_libcpp.find(vec.begin(), vec.end(), citem)
        if loc != vec.end():
            return <int64_t> std_libcpp.distance(vec.begin(), loc)
        raise ValueError(f'{item} is not in list')

    def count(self, item):
        if not self:
            return 0
        cdef int64_t citem = item
        cdef vector[int64_t] vec = deref(self._cpp_obj.get())
        return <int64_t> std_libcpp.count(vec.begin(), vec.end(), citem)


Sequence.register(List__i64)

cdef class List__string:
    def __init__(self, items=None):
        if isinstance(items, List__string):
            self._cpp_obj = (<List__string> items)._cpp_obj
        else:
            self._cpp_obj = move(List__string._make_instance(items))

    @staticmethod
    cdef create(shared_ptr[vector[string]] c_items):
        inst = <List__string>List__string.__new__(List__string)
        inst._cpp_obj = c_items
        return inst

    @staticmethod
    cdef unique_ptr[vector[string]] _make_instance(object items) except *:
        cdef unique_ptr[vector[string]] c_inst = make_unique[vector[string]]()
        if items:
            for item in items:
                deref(c_inst).push_back(item.encode('UTF-8'))
        return move_unique(c_inst)

    def __getitem__(self, object index_obj):
        cdef int index
        cdef shared_ptr[vector[string]] c_inst
        cdef string citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[string]]()
            start_val = index_obj.start
            stop_val = index_obj.stop
            step_val = index_obj.step
            sz = deref(self._cpp_obj).size()

            if step_val == 0 or step_val is None:
                step_val = 1
            if step_val > 0:
                if start_val is None:
                    start_val = 0
                elif start_val > sz:
                    start_val = sz
                if stop_val is None:
                    stop_val = sz
                elif stop_val > sz:
                    stop_val = sz
            else:
                if start_val is None:
                    start_val = sz - 1
                elif start_val > sz - 1:
                    start_val = sz - 1
                if stop_val is None:
                    stop_val = -1
                elif stop_val > sz - 1:
                    stop_val = sz - 1

            index = start_val
            while ((step_val > 0 and index < stop_val) or
                   (step_val < 0 and index > stop_val)):
                citem = deref(self._cpp_obj.get())[index]
                deref(c_inst).push_back(citem)
                index += step_val
            return List__string.create(c_inst)
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size - index
            if index >= size:
                raise IndexError('list index out of range')
            # Support negative indexes
            if index < 0:
                index = size - index
            citem = deref(self._cpp_obj.get())[index]
            return bytes(citem).decode('UTF-8')

    def __len__(self):
        return deref(self._cpp_obj).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        if not self.__hash:
            self.__hash = hash(tuple(self))
        return self.__hash

    def __contains__(self, item):
        if not self:
            return False
        cdef string citem = item.encode('UTF-8')
        cdef vector[string] vec = deref(
            self._cpp_obj.get())
        return std_libcpp.find(vec.begin(), vec.end(), citem) != vec.end()

    def __iter__(self):
        if not self:
            raise StopIteration
        cdef string citem
        for citem in deref(self._cpp_obj):
            yield bytes(citem).decode('UTF-8')

    def __repr__(self):
        if not self:
            return 'i[]'
        return f'i[{", ".join(map(repr, self))}]'

    def __reversed__(self):
        if not self:
            raise StopIteration
        cdef string citem
        cdef vector[string] vec = deref(
            self._cpp_obj.get())
        cdef vector[string].reverse_iterator loc = vec.rbegin()
        while loc != vec.rend():
            citem = deref(loc)
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def index(self, item):
        if not self:
            raise ValueError(f'{item} is not in list')
        cdef string citem = item.encode('UTF-8')
        cdef vector[string] vec = deref(self._cpp_obj.get())
        cdef vector[string].iterator loc = std_libcpp.find(vec.begin(), vec.end(), citem)
        if loc != vec.end():
            return <int64_t> std_libcpp.distance(vec.begin(), loc)
        raise ValueError(f'{item} is not in list')

    def count(self, item):
        if not self:
            return 0
        cdef string citem = item.encode('UTF-8')
        cdef vector[string] vec = deref(self._cpp_obj.get())
        return <int64_t> std_libcpp.count(vec.begin(), vec.end(), citem)


Sequence.register(List__string)

cdef class Map__i16_string:
    def __init__(self, items=None):
        if isinstance(items, Map__i16_string):
            self._cpp_obj = (<Map__i16_string> items)._cpp_obj
        else:
            self._cpp_obj = move(Map__i16_string._make_instance(items))

    @staticmethod
    cdef create(shared_ptr[cmap[int16_t,string]] c_items):
        inst = <Map__i16_string>Map__i16_string.__new__(Map__i16_string)
        inst._cpp_obj = c_items
        return inst

    @staticmethod
    cdef unique_ptr[cmap[int16_t,string]] _make_instance(object items) except *:
        cdef unique_ptr[cmap[int16_t,string]] c_inst = make_unique[cmap[int16_t,string]]()
        if items:
            for key, item in items.items():
                deref(c_inst).insert(cpair[int16_t,string](key,item.encode('UTF-8')))
        return move_unique(c_inst)

    def __getitem__(self, key):
        if not self:
            raise KeyError(f'{key}')
        cdef int16_t ckey = key
        cdef cmap[int16_t,string].iterator iter = deref(
            self._cpp_obj).find(ckey)
        if iter == deref(self._cpp_obj).end():
            raise KeyError(f'{key}')
        cdef string citem = deref(iter).second
        return bytes(citem).decode('UTF-8')

    def __len__(self):
        return deref(self._cpp_obj).size()

    def __iter__(self):
        if not self:
            raise StopIteration
        cdef int16_t citem
        for pair in deref(self._cpp_obj):
            citem = pair.first
            yield citem

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        if not self.__hash:
            self.__hash = hash(tuple(self.items()))
        return self.__hash

    def __repr__(self):
        if not self:
            return 'i{}'
        return f'i{{{", ".join(map(lambda i: f"{repr(i[0])}: {repr(i[1])}", self.items()))}}}'



    def __contains__(self, key):
        cdef int16_t ckey = key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self:
            return default
        cdef int16_t ckey = key
        cdef cmap[int16_t,string].iterator iter = \
            deref(self._cpp_obj).find(ckey)
        if iter == deref(self._cpp_obj).end():
            return default
        cdef string citem = deref(iter).second
        return bytes(citem).decode('UTF-8')

    def keys(self):
        return self.__iter__()

    def values(self):
        if not self:
            raise StopIteration
        cdef string citem
        for pair in deref(self._cpp_obj):
            citem = pair.second
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            raise StopIteration
        cdef int16_t ckey
        cdef string citem
        for pair in deref(self._cpp_obj):
            ckey = pair.first
            citem = pair.second

            yield (ckey, bytes(citem).decode('UTF-8'))



Mapping.register(Map__i16_string)

containerTypedef = Map__i16_string
