/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial", "unchecked" })
public class ValUnion extends TUnion<ValUnion> implements Comparable<ValUnion> {
  public static boolean DEFAULT_PRETTY_PRINT = true;
  private static final TStruct STRUCT_DESC = new TStruct("ValUnion");
  private static final TField V1_FIELD_DESC = new TField("v1", TType.STRUCT, (short)1);
  private static final TField V2_FIELD_DESC = new TField("v2", TType.STRUCT, (short)2);

  public static final int V1 = 1;
  public static final int V2 = 2;

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(V1, new FieldMetaData("v1", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Val.class)));
    tmpMetaDataMap.put(V2, new FieldMetaData("v2", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Val.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  public ValUnion() {
    super();
  }

  public ValUnion(int setField, Object value) {
    super(setField, value);
  }

  public ValUnion(ValUnion other) {
    super(other);
  }
  public ValUnion deepCopy() {
    return new ValUnion(this);
  }

  public static ValUnion v1(Val value) {
    ValUnion x = new ValUnion();
    x.setV1(value);
    return x;
  }

  public static ValUnion v2(Val value) {
    ValUnion x = new ValUnion();
    x.setV2(value);
    return x;
  }


  @Override
  protected void checkType(short setField, Object value) throws ClassCastException {
    switch (setField) {
      case V1:
        if (value instanceof Val) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Val for field 'v1', but got " + value.getClass().getSimpleName());
      case V2:
        if (value instanceof Val) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Val for field 'v2', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  public void read(TProtocol iprot) throws TException {
    setField_ = 0;
    value_ = null;
    iprot.readStructBegin(metaDataMap);
    TField field = iprot.readFieldBegin();
    if (field.type != TType.STOP)
    {
      value_ = readValue(iprot, field);
      if (value_ != null)
      {
        switch (field.id) {
          case V1:
            if (field.type == V1_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
          case V2:
            if (field.type == V2_FIELD_DESC.type) {
              setField_ = field.id;
            }
            break;
        }
      }
      iprot.readFieldEnd();
      iprot.readFieldBegin();
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  @Override
  protected Object readValue(TProtocol iprot, TField field) throws TException {
    switch (field.id) {
      case V1:
        if (field.type == V1_FIELD_DESC.type) {
          Val v1;
          v1 = new Val();
          v1.read(iprot);
          return v1;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      case V2:
        if (field.type == V2_FIELD_DESC.type) {
          Val v2;
          v2 = new Val();
          v2.read(iprot);
          return v2;
        } else {
          TProtocolUtil.skip(iprot, field.type);
          return null;
        }
      default:
        TProtocolUtil.skip(iprot, field.type);
        return null;
    }
  }

  @Override
  protected void writeValue(TProtocol oprot, short setField, Object value) throws TException {
    switch (setField) {
      case V1:
        Val v1 = (Val)getFieldValue();
        v1.write(oprot);
        return;
      case V2:
        Val v2 = (Val)getFieldValue();
        v2.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField);
    }
  }

  @Override
  protected TField getFieldDesc(int setField) {
    switch (setField) {
      case V1:
        return V1_FIELD_DESC;
      case V2:
        return V2_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  public Val getV1() {
    if (getSetField() == V1) {
      return (Val)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v1' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV1(Val value) {
    if (value == null) throw new NullPointerException();
    setField_ = V1;
    value_ = value;
  }

  public Val getV2() {
    if (getSetField() == V2) {
      return (Val)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v2' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV2(Val value) {
    if (value == null) throw new NullPointerException();
    setField_ = V2;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof ValUnion) {
      return equals((ValUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(ValUnion other) {
    return equalsNobinaryImpl(other);
  }

  @Override
  public int compareTo(ValUnion other) {
    return compareToImpl(other);
  }


  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ValUnion");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    // Only print this field if it is the set field
    if (getSetField() == V1)
    {
      sb.append(indentStr);
      sb.append("v1");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getV1() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getV1(), indent + 1, prettyPrint));
      }
      first = false;
    }
    // Only print this field if it is the set field
    if (getSetField() == V2)
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("v2");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getV2() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getV2(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }


}
