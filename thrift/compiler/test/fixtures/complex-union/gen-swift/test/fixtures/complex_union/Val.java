/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_union;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct("Val")
public final class Val {
    @ThriftConstructor
    public Val(
        @ThriftField(value=1, name="strVal", requiredness=Requiredness.NONE) final String strVal,
        @ThriftField(value=2, name="intVal", requiredness=Requiredness.NONE) final int intVal,
        @ThriftField(value=9, name="typedefValue", requiredness=Requiredness.NONE) final Map<Short, String> typedefValue
    ) {
        this.strVal = strVal;
        this.intVal = intVal;
        this.typedefValue = typedefValue;
    }
    
    protected Val() {
      this.strVal = null;
      this.intVal = 0;
      this.typedefValue = null;
    }
    
    public static class Builder {
        private String strVal;
    
        public Builder setStrVal(String strVal) {
            this.strVal = strVal;
            return this;
        }
        private int intVal;
    
        public Builder setIntVal(int intVal) {
            this.intVal = intVal;
            return this;
        }
        private Map<Short, String> typedefValue;
    
        public Builder setTypedefValue(Map<Short, String> typedefValue) {
            this.typedefValue = typedefValue;
            return this;
        }
    
        public Builder() { }
        public Builder(Val other) {
            this.strVal = other.strVal;
            this.intVal = other.intVal;
            this.typedefValue = other.typedefValue;
        }
    
        public Val build() {
            return new Val (
                this.strVal,
                this.intVal,
                this.typedefValue
            );
        }
    }
    
    private final String strVal;
    private final int intVal;
    private final Map<Short, String> typedefValue;

    
    @ThriftField(value=1, name="strVal", requiredness=Requiredness.NONE)
    public String getStrVal() { return strVal; }
        
    @ThriftField(value=2, name="intVal", requiredness=Requiredness.NONE)
    public int getIntVal() { return intVal; }
        
    @ThriftField(value=9, name="typedefValue", requiredness=Requiredness.NONE)
    public Map<Short, String> getTypedefValue() { return typedefValue; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("strVal", strVal)
            .add("intVal", intVal)
            .add("typedefValue", typedefValue)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        Val other = (Val)o;
    
        return
            Objects.equals(strVal, other.strVal) &&
            Objects.equals(intVal, other.intVal) &&
            Objects.equals(typedefValue, other.typedefValue) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            strVal,
            intVal,
            typedefValue
        });
    }
    
}
