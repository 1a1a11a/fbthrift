/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_union;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("DataUnion")
public final class DataUnion {
    private static final Map<Short, String> ID_TO_THRIFT_NAME = new HashMap();
    static {
      ID_TO_THRIFT_NAME.put((short) 1, "binaryData");
      ID_TO_THRIFT_NAME.put((short) 2, "stringData");
    }
    private Object value;
    private short id;
    
    @ThriftConstructor
    public DataUnion() {
    }
    
    @ThriftConstructor
    @Deprecated
    public DataUnion(final byte[] binaryData) {
        this.value = binaryData;
        this.id = 1;
    }
    
    @ThriftConstructor
    @Deprecated
    public DataUnion(final String stringData) {
        this.value = stringData;
        this.id = 2;
    }
    
    public static DataUnion fromBinaryData(final byte[] binaryData) {
        DataUnion res = new DataUnion();
        res.value = binaryData;
        res.id = 1;
        return res;
    }
    
    public static DataUnion fromStringData(final String stringData) {
        DataUnion res = new DataUnion();
        res.value = stringData;
        res.id = 2;
        return res;
    }
    

    @ThriftField(value=1, name="binaryData", requiredness=Requiredness.NONE)
    public byte[] getBinaryData() {
        if (this.id != 1) {
            throw new IllegalStateException("Not a binaryData element!");
        }
        return (byte[]) value;
    }

    public boolean isSetBinaryData() {
        return this.id == 1;
    }

    @ThriftField(value=2, name="stringData", requiredness=Requiredness.NONE)
    public String getStringData() {
        if (this.id != 2) {
            throw new IllegalStateException("Not a stringData element!");
        }
        return (String) value;
    }

    public boolean isSetStringData() {
        return this.id == 2;
    }

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return ID_TO_THRIFT_NAME.get(this.id);
    }

    public void accept(Visitor visitor) {
        if (isSetBinaryData()) {
            visitor.visitBinaryData(getBinaryData());
            return;
        }
        if (isSetStringData()) {
            visitor.visitStringData(getStringData());
            return;
        }
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", getThriftName())
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        DataUnion other = (DataUnion)o;

        return Objects.equals(this.id, other.id)
                && Objects.deepEquals(this.value, other.value);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
        });
    }

    public interface Visitor {
        void visitBinaryData(byte[] binaryData);
        void visitStringData(String stringData);
    }
}
