/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_union;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("ComplexUnion")
public final class ComplexUnion {
    private Object value;
    private short id;
    private String name;
    
    @ThriftConstructor
    public ComplexUnion() {
    }
    
    public static ComplexUnion fromIntValue(final long intValue) {
        ComplexUnion res = new ComplexUnion();
        res.value = intValue;
        res.id = 1;
        res.name = "intValue";
        return res;
    }
    
    public static ComplexUnion fromStringValue(final String stringValue) {
        ComplexUnion res = new ComplexUnion();
        res.value = stringValue;
        res.id = 5;
        res.name = "stringValue";
        return res;
    }
    
    public static ComplexUnion fromIntListValue(final List<Long> intListValue) {
        ComplexUnion res = new ComplexUnion();
        res.value = intListValue;
        res.id = 2;
        res.name = "intListValue";
        return res;
    }
    
    public static ComplexUnion fromStringListValue(final List<String> stringListValue) {
        ComplexUnion res = new ComplexUnion();
        res.value = stringListValue;
        res.id = 3;
        res.name = "stringListValue";
        return res;
    }
    
    public static ComplexUnion fromTypedefValue(final Map<Short, String> typedefValue) {
        ComplexUnion res = new ComplexUnion();
        res.value = typedefValue;
        res.id = 9;
        res.name = "typedefValue";
        return res;
    }
    
    public static ComplexUnion fromStringRef(final String stringRef) {
        ComplexUnion res = new ComplexUnion();
        res.value = stringRef;
        res.id = 14;
        res.name = "stringRef";
        return res;
    }
    
    @ThriftField
    @Deprecated
    public void setIntValue(final long intValue) {
        this.value = intValue;
        this.id = 1;
        this.name = "intValue";
    }
    @ThriftField
    @Deprecated
    public void setStringValue(final String stringValue) {
        this.value = stringValue;
        this.id = 5;
        this.name = "stringValue";
    }
    @ThriftField
    @Deprecated
    public void setIntListValue(final List<Long> intListValue) {
        this.value = intListValue;
        this.id = 2;
        this.name = "intListValue";
    }
    @ThriftField
    @Deprecated
    public void setStringListValue(final List<String> stringListValue) {
        this.value = stringListValue;
        this.id = 3;
        this.name = "stringListValue";
    }
    @ThriftField
    @Deprecated
    public void setTypedefValue(final Map<Short, String> typedefValue) {
        this.value = typedefValue;
        this.id = 9;
        this.name = "typedefValue";
    }
    @ThriftField
    @Deprecated
    public void setStringRef(final String stringRef) {
        this.value = stringRef;
        this.id = 14;
        this.name = "stringRef";
    }

    @ThriftField(value=1, name="intValue", requiredness=Requiredness.NONE)
    public long getIntValue() {
        if (this.id != 1) {
            throw new IllegalStateException("Not a intValue element!");
        }
        return (long) value;
    }

    public boolean isSetIntValue() {
        return this.id == 1;
    }

    @ThriftField(value=5, name="stringValue", requiredness=Requiredness.NONE)
    public String getStringValue() {
        if (this.id != 5) {
            throw new IllegalStateException("Not a stringValue element!");
        }
        return (String) value;
    }

    public boolean isSetStringValue() {
        return this.id == 5;
    }

    @ThriftField(value=2, name="intListValue", requiredness=Requiredness.NONE)
    public List<Long> getIntListValue() {
        if (this.id != 2) {
            throw new IllegalStateException("Not a intListValue element!");
        }
        return (List<Long>) value;
    }

    public boolean isSetIntListValue() {
        return this.id == 2;
    }

    @ThriftField(value=3, name="stringListValue", requiredness=Requiredness.NONE)
    public List<String> getStringListValue() {
        if (this.id != 3) {
            throw new IllegalStateException("Not a stringListValue element!");
        }
        return (List<String>) value;
    }

    public boolean isSetStringListValue() {
        return this.id == 3;
    }

    @ThriftField(value=9, name="typedefValue", requiredness=Requiredness.NONE)
    public Map<Short, String> getTypedefValue() {
        if (this.id != 9) {
            throw new IllegalStateException("Not a typedefValue element!");
        }
        return (Map<Short, String>) value;
    }

    public boolean isSetTypedefValue() {
        return this.id == 9;
    }

    @ThriftField(value=14, name="stringRef", requiredness=Requiredness.NONE)
    public String getStringRef() {
        if (this.id != 14) {
            throw new IllegalStateException("Not a stringRef element!");
        }
        return (String) value;
    }

    public boolean isSetStringRef() {
        return this.id == 14;
    }

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return this.name;
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", name)
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ComplexUnion other = (ComplexUnion)o;

        return Objects.equals(this.id, other.id)
                && Objects.deepEquals(this.value, other.value)
                && Objects.equals(this.name, other.name);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
            name
        });
    }
}
