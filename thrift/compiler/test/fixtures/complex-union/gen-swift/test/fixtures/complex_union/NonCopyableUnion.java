/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_union;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("NonCopyableUnion")
public final class NonCopyableUnion {
    private Object value;
    private short id;
    private String name;
    
    @ThriftConstructor
    public NonCopyableUnion() {
    }
    
    @ThriftConstructor
    @Deprecated
    public NonCopyableUnion(final test.fixtures.complex_union.NonCopyableStruct s) {
        this.value = s;
        this.id = 1;
        this.name = "s";
    }
    
    public static NonCopyableUnion fromS(final test.fixtures.complex_union.NonCopyableStruct s) {
        NonCopyableUnion res = new NonCopyableUnion();
        res.value = s;
        res.id = 1;
        res.name = "s";
        return res;
    }
    

    @ThriftField(value=1, name="s", requiredness=Requiredness.NONE)
    public test.fixtures.complex_union.NonCopyableStruct getS() {
        if (this.id != 1) {
            throw new IllegalStateException("Not a s element!");
        }
        return (test.fixtures.complex_union.NonCopyableStruct) value;
    }

    public boolean isSetS() {
        return this.id == 1;
    }

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return this.name;
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", name)
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        NonCopyableUnion other = (NonCopyableUnion)o;

        return Objects.equals(this.id, other.id)
                && Objects.deepEquals(this.value, other.value)
                && Objects.equals(this.name, other.name);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
            name
        });
    }
}
