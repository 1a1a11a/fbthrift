/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/services_wrapper.h>
#include <src/gen-py3/module/services_api.h>
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

namespace cpp2 {

PubSubStreamingServiceWrapper::PubSubStreamingServiceWrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    import_module__services();
    Py_XINCREF(this->if_object);
  }

PubSubStreamingServiceWrapper::~PubSubStreamingServiceWrapper() {
    Py_XDECREF(this->if_object);
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceWrapper::future_returnstream(
  int32_t i32_from,
  int32_t i32_to
) {
  folly::Promise<apache::thrift::Stream<int32_t>> promise;
  auto future = promise.getFuture();
  auto ctx = getConnectionContext();
  folly::via(
    this->executor,
    [this, ctx,
     promise = std::move(promise),
i32_from,
i32_to    ]() mutable {
        call_cy_PubSubStreamingService_returnstream(
            this->if_object,
            ctx,
            std::move(promise),
            i32_from,
            i32_to        );
    });

  return future;
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceWrapper::future_streamthrows(
  int32_t foo
) {
  folly::Promise<apache::thrift::Stream<int32_t>> promise;
  auto future = promise.getFuture();
  auto ctx = getConnectionContext();
  folly::via(
    this->executor,
    [this, ctx,
     promise = std::move(promise),
foo    ]() mutable {
        call_cy_PubSubStreamingService_streamthrows(
            this->if_object,
            ctx,
            std::move(promise),
            foo        );
    });

  return future;
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceWrapper::future_boththrows(
  int32_t foo
) {
  folly::Promise<apache::thrift::Stream<int32_t>> promise;
  auto future = promise.getFuture();
  auto ctx = getConnectionContext();
  folly::via(
    this->executor,
    [this, ctx,
     promise = std::move(promise),
foo    ]() mutable {
        call_cy_PubSubStreamingService_boththrows(
            this->if_object,
            ctx,
            std::move(promise),
            foo        );
    });

  return future;
}

folly::Future<apache::thrift::ResponseAndStream<int32_t,int32_t>> PubSubStreamingServiceWrapper::future_responseandstreamthrows(
  int32_t foo
) {
  folly::Promise<apache::thrift::ResponseAndStream<int32_t,int32_t>> promise;
  auto future = promise.getFuture();
  auto ctx = getConnectionContext();
  folly::via(
    this->executor,
    [this, ctx,
     promise = std::move(promise),
foo    ]() mutable {
        call_cy_PubSubStreamingService_responseandstreamthrows(
            this->if_object,
            ctx,
            std::move(promise),
            foo        );
    });

  return future;
}

std::shared_ptr<apache::thrift::ServerInterface> PubSubStreamingServiceInterface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<PubSubStreamingServiceWrapper>(if_object, exc);
}
} // namespace cpp2
