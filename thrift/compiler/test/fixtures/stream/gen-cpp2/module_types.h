/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>





namespace cpp2 {

class FooEx;

class FooEx : private apache::thrift::detail::st::ComparisonOperators<FooEx>, public apache::thrift::TException {
 public:

  FooEx() {}
  // FragileConstructor for use in initialization lists only

  FooEx(apache::thrift::FragileConstructor) {}

  FooEx(FooEx&&) = default;

  FooEx(const FooEx&) = default;

  FooEx& operator=(FooEx&&) = default;

  FooEx& operator=(const FooEx&) = default;
  void __clear();

  virtual ~FooEx() {}

  bool operator==(const FooEx& /* rhs */) const;

  bool operator < (const FooEx& rhs) const {
    (void)rhs;
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  virtual const char* what() const noexcept {
    return " ::cpp2::FooEx";
  }

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);
};

void swap(FooEx& a, FooEx& b);
extern template uint32_t FooEx::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t FooEx::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t FooEx::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t FooEx::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t FooEx::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t FooEx::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t FooEx::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t FooEx::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::FooEx>::clear( ::cpp2::FooEx* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::FooEx>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::FooEx>::write(Protocol* proto,  ::cpp2::FooEx const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::FooEx>::read(Protocol* proto,  ::cpp2::FooEx* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::FooEx>::serializedSize(Protocol const* proto,  ::cpp2::FooEx const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::cpp2::FooEx>::serializedSizeZC(Protocol const* proto,  ::cpp2::FooEx const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

} // cpp2
