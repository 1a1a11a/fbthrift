/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/stream/gen-cpp2/PubSubStreamingService.h"
#include "thrift/compiler/test/fixtures/stream/gen-cpp2/PubSubStreamingService.tcc"

#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> PubSubStreamingServiceSvIf::getProcessor() {
  return std::make_unique<PubSubStreamingServiceAsyncProcessor>(this);
}

apache::thrift::Stream<int32_t> PubSubStreamingServiceSvIf::returnstream(int32_t /*i32_from*/, int32_t /*i32_to*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("returnstream");
}

folly::SemiFuture<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::semifuture_returnstream(int32_t i32_from, int32_t i32_to) {
  return apache::thrift::detail::si::semifuture([&] { return returnstream(i32_from, i32_to); });
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::future_returnstream(int32_t i32_from, int32_t i32_to) {
  return apache::thrift::detail::si::future(semifuture_returnstream(i32_from, i32_to), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_returnstream(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::Stream<int32_t>>> callback, int32_t i32_from, int32_t i32_to) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_returnstream(i32_from, i32_to); });
}

apache::thrift::Stream<int32_t> PubSubStreamingServiceSvIf::streamthrows(int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("streamthrows");
}

folly::SemiFuture<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::semifuture_streamthrows(int32_t foo) {
  return apache::thrift::detail::si::semifuture([&] { return streamthrows(foo); });
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::future_streamthrows(int32_t foo) {
  return apache::thrift::detail::si::future(semifuture_streamthrows(foo), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_streamthrows(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::Stream<int32_t>>> callback, int32_t foo) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_streamthrows(foo); });
}

apache::thrift::Stream<int32_t> PubSubStreamingServiceSvIf::boththrows(int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("boththrows");
}

folly::SemiFuture<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::semifuture_boththrows(int32_t foo) {
  return apache::thrift::detail::si::semifuture([&] { return boththrows(foo); });
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::future_boththrows(int32_t foo) {
  return apache::thrift::detail::si::future(semifuture_boththrows(foo), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_boththrows(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::Stream<int32_t>>> callback, int32_t foo) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_boththrows(foo); });
}

apache::thrift::ResponseAndStream<int32_t,int32_t> PubSubStreamingServiceSvIf::responseandstreamthrows(int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("responseandstreamthrows");
}

folly::SemiFuture<apache::thrift::ResponseAndStream<int32_t,int32_t>> PubSubStreamingServiceSvIf::semifuture_responseandstreamthrows(int32_t foo) {
  return apache::thrift::detail::si::semifuture([&] { return responseandstreamthrows(foo); });
}

folly::Future<apache::thrift::ResponseAndStream<int32_t,int32_t>> PubSubStreamingServiceSvIf::future_responseandstreamthrows(int32_t foo) {
  return apache::thrift::detail::si::future(semifuture_responseandstreamthrows(foo), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_responseandstreamthrows(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::ResponseAndStream<int32_t,int32_t>>> callback, int32_t foo) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_responseandstreamthrows(foo); });
}

apache::thrift::Stream<int32_t> PubSubStreamingServiceSvIf::streamleftthrows(int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("streamleftthrows");
}

folly::SemiFuture<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::semifuture_streamleftthrows(int32_t foo) {
  return apache::thrift::detail::si::semifuture([&] { return streamleftthrows(foo); });
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::future_streamleftthrows(int32_t foo) {
  return apache::thrift::detail::si::future(semifuture_streamleftthrows(foo), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_streamleftthrows(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::Stream<int32_t>>> callback, int32_t foo) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_streamleftthrows(foo); });
}

apache::thrift::Stream<int32_t> PubSubStreamingServiceSvIf::bothleftthrows(int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("bothleftthrows");
}

folly::SemiFuture<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::semifuture_bothleftthrows(int32_t foo) {
  return apache::thrift::detail::si::semifuture([&] { return bothleftthrows(foo); });
}

folly::Future<apache::thrift::Stream<int32_t>> PubSubStreamingServiceSvIf::future_bothleftthrows(int32_t foo) {
  return apache::thrift::detail::si::future(semifuture_bothleftthrows(foo), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_bothleftthrows(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::Stream<int32_t>>> callback, int32_t foo) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_bothleftthrows(foo); });
}

apache::thrift::ResponseAndStream<int32_t,int32_t> PubSubStreamingServiceSvIf::responseandstreamleftthrows(int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("responseandstreamleftthrows");
}

folly::SemiFuture<apache::thrift::ResponseAndStream<int32_t,int32_t>> PubSubStreamingServiceSvIf::semifuture_responseandstreamleftthrows(int32_t foo) {
  return apache::thrift::detail::si::semifuture([&] { return responseandstreamleftthrows(foo); });
}

folly::Future<apache::thrift::ResponseAndStream<int32_t,int32_t>> PubSubStreamingServiceSvIf::future_responseandstreamleftthrows(int32_t foo) {
  return apache::thrift::detail::si::future(semifuture_responseandstreamleftthrows(foo), getThreadManager());
}


void PubSubStreamingServiceSvIf::async_tm_responseandstreamleftthrows(std::unique_ptr<apache::thrift::HandlerCallback<apache::thrift::ResponseAndStream<int32_t,int32_t>>> callback, int32_t foo) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_responseandstreamleftthrows(foo); });
}

const char* PubSubStreamingServiceAsyncProcessor::getServiceName() {
  return "PubSubStreamingService";
}

void PubSubStreamingServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool PubSubStreamingServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::shared_ptr<folly::RequestContext> PubSubStreamingServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

std::unordered_set<std::string> PubSubStreamingServiceAsyncProcessor::onewayMethods_ {};
const PubSubStreamingServiceAsyncProcessor::ProcessMap& PubSubStreamingServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const PubSubStreamingServiceAsyncProcessor::ProcessMap PubSubStreamingServiceAsyncProcessor::binaryProcessMap_ {
  {"returnstream", &PubSubStreamingServiceAsyncProcessor::_processInThread_returnstream<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"streamthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_streamthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"boththrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_boththrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"responseandstreamthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_responseandstreamthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"streamleftthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_streamleftthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"bothleftthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_bothleftthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"responseandstreamleftthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_responseandstreamleftthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const PubSubStreamingServiceAsyncProcessor::ProcessMap& PubSubStreamingServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const PubSubStreamingServiceAsyncProcessor::ProcessMap PubSubStreamingServiceAsyncProcessor::compactProcessMap_ {
  {"returnstream", &PubSubStreamingServiceAsyncProcessor::_processInThread_returnstream<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"streamthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_streamthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"boththrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_boththrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"responseandstreamthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_responseandstreamthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"streamleftthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_streamleftthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"bothleftthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_bothleftthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"responseandstreamleftthrows", &PubSubStreamingServiceAsyncProcessor::_processInThread_responseandstreamleftthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

} // cpp2
