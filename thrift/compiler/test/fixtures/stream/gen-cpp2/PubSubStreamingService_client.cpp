/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "src/gen-cpp2/PubSubStreamingServiceAsyncClient.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/protocol/Serializer.h>
#include <thrift/lib/cpp2/transport/core/ThriftChannelIf.h>

namespace cpp2 {
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_client_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_client_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_server_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>> PubSubStreamingService_server_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_both_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>> PubSubStreamingService_both_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_returnstream_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_returnstream_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_takesstream_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_takesstream_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_clientthrows_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_clientthrows_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I64, int64_t*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_different_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRING, std::string*>>
    > PubSubStreamingService_different_presult;

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::clientT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.client", &headerAndConnContext->connContext);
  PubSubStreamingService_client_pargs::FieldsType args;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "client", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::serverT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.server", &headerAndConnContext->connContext);
  PubSubStreamingService_server_pargs::FieldsType args;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "server", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::bothT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.both", &headerAndConnContext->connContext);
  PubSubStreamingService_both_pargs::FieldsType args;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "both", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::returnstreamT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.returnstream", &headerAndConnContext->connContext);
  PubSubStreamingService_returnstream_pargs args;
  args.get<0>().value = &i32_from;
  args.get<1>().value = &i32_to;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "returnstream", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::takesstreamT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.takesstream", &headerAndConnContext->connContext);
  PubSubStreamingService_takesstream_pargs::FieldsType args;
  args.get<0>().value = &other_param;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "takesstream", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::clientthrowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foostream) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.clientthrows", &headerAndConnContext->connContext);
  PubSubStreamingService_clientthrows_pargs::FieldsType args;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "clientthrows", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::differentT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.different", &headerAndConnContext->connContext);
  PubSubStreamingService_different_pargs::FieldsType args;
  args.get<0>().value = &firstparam;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "different", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}



void PubSubStreamingServiceAsyncClient::client(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  clientImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::client(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  clientImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::clientImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      clientT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      clientT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_client(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_client(rpcOptions, std::move(foo));
}

void PubSubStreamingServiceAsyncClient::sync_client(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  clientImpl(true, rpcOptions, std::move(callback), std::move(foo));
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_client(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_client(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_client(rpcOptions, std::move(foo));
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_client(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_client(rpcOptions, std::move(foo));
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_client(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_client, channel_);
  client(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_client(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  return future_client(rpcOptions, std::move(foo)).semi();
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_client(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_client, channel_);
  client(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_client(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  return PubSubStreamingServiceAsyncClient::header_future_client(rpcOptions, std::move(foo)).semi();
}

void PubSubStreamingServiceAsyncClient::client(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foo) {
  client(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foo));
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_client(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_client_presult;
  constexpr auto const fname = "client";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_client(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_client(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_client(::apache::thrift::ClientReceiveState& state) {
  recv_client(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_client(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_client(state);
}

void PubSubStreamingServiceAsyncClient::server(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  serverImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::server(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  serverImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::serverImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      serverT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      serverT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_server(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_server(rpcOptions, std::move(foo));
}

void PubSubStreamingServiceAsyncClient::sync_server(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  serverImpl(true, rpcOptions, std::move(callback), std::move(foo));
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_server(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_server(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_server(rpcOptions, std::move(foo));
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_server(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_server(rpcOptions, std::move(foo));
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_server(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_server, channel_);
  server(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_server(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  return future_server(rpcOptions, std::move(foo)).semi();
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_server(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_server, channel_);
  server(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_server(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  return PubSubStreamingServiceAsyncClient::header_future_server(rpcOptions, std::move(foo)).semi();
}

void PubSubStreamingServiceAsyncClient::server(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foo) {
  server(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foo));
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_server(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_server_presult;
  constexpr auto const fname = "server";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_server(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_server(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_server(::apache::thrift::ClientReceiveState& state) {
  recv_server(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_server(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_server(state);
}

void PubSubStreamingServiceAsyncClient::both(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  bothImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::both(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  bothImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::bothImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      bothT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      bothT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_both(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_both(rpcOptions, std::move(foo));
}

void PubSubStreamingServiceAsyncClient::sync_both(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  bothImpl(true, rpcOptions, std::move(callback), std::move(foo));
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_both(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_both(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_both(rpcOptions, std::move(foo));
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_both(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_both(rpcOptions, std::move(foo));
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_both(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_both, channel_);
  both(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_both(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  return future_both(rpcOptions, std::move(foo)).semi();
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_both(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_both, channel_);
  both(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_both(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  return PubSubStreamingServiceAsyncClient::header_future_both(rpcOptions, std::move(foo)).semi();
}

void PubSubStreamingServiceAsyncClient::both(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foo) {
  both(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foo));
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_both(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_both_presult;
  constexpr auto const fname = "both";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_both(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_both(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_both(::apache::thrift::ClientReceiveState& state) {
  recv_both(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_both(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_both(state);
}

void PubSubStreamingServiceAsyncClient::returnstream(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  returnstreamImpl(false, rpcOptions, std::move(callback), i32_from, i32_to);
}

void PubSubStreamingServiceAsyncClient::returnstream(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  returnstreamImpl(false, rpcOptions, std::move(callback), i32_from, i32_to);
}

void PubSubStreamingServiceAsyncClient::returnstreamImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      returnstreamT(&writer, useSync, rpcOptions, std::move(callback), i32_from, i32_to);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      returnstreamT(&writer, useSync, rpcOptions, std::move(callback), i32_from, i32_to);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_returnstream(rpcOptions, i32_from, i32_to);
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE);
  returnstreamImpl(true, rpcOptions, std::move(callback), i32_from, i32_to);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_returnstream(_returnState);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_returnstream(rpcOptions, i32_from, i32_to);
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_returnstream(rpcOptions, i32_from, i32_to);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  folly::Promise<apache::thrift::SemiStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_returnstream, channel_);
  returnstream(rpcOptions, std::move(callback), i32_from, i32_to);
  return _future;
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  return future_returnstream(rpcOptions, i32_from, i32_to).semi();
}

folly::Future<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  folly::Promise<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_returnstream, channel_);
  returnstream(rpcOptions, std::move(callback), i32_from, i32_to);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  return PubSubStreamingServiceAsyncClient::header_future_returnstream(rpcOptions, i32_from, i32_to).semi();
}

void PubSubStreamingServiceAsyncClient::returnstream(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t i32_from, int32_t i32_to) {
  returnstream(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), i32_from, i32_to);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_returnstream(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_returnstream_presult;
  constexpr auto const fname = "returnstream";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_returnstream(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::SemiStream<int32_t> _return;
  auto ew = recv_wrapped_returnstream(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_instance_returnstream(::apache::thrift::ClientReceiveState& state) {
  return recv_returnstream(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_returnstream(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_returnstream(_return, state);
}

void PubSubStreamingServiceAsyncClient::takesstream(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  takesstreamImpl(false, rpcOptions, std::move(callback), std::move(instream), other_param);
}

void PubSubStreamingServiceAsyncClient::takesstream(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  takesstreamImpl(false, rpcOptions, std::move(callback), std::move(instream), other_param);
}

void PubSubStreamingServiceAsyncClient::takesstreamImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      takesstreamT(&writer, useSync, rpcOptions, std::move(callback), std::move(instream), other_param);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      takesstreamT(&writer, useSync, rpcOptions, std::move(callback), std::move(instream), other_param);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_takesstream(apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_takesstream(rpcOptions, std::move(instream), other_param);
}

void PubSubStreamingServiceAsyncClient::sync_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  takesstreamImpl(true, rpcOptions, std::move(callback), std::move(instream), other_param);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_takesstream(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_takesstream(apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_takesstream(rpcOptions, std::move(instream), other_param);
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_takesstream(apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_takesstream(rpcOptions, std::move(instream), other_param);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_takesstream, channel_);
  takesstream(rpcOptions, std::move(callback), std::move(instream), other_param);
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  return future_takesstream(rpcOptions, std::move(instream), other_param).semi();
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_takesstream, channel_);
  takesstream(rpcOptions, std::move(callback), std::move(instream), other_param);
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  return PubSubStreamingServiceAsyncClient::header_future_takesstream(rpcOptions, std::move(instream), other_param).semi();
}

void PubSubStreamingServiceAsyncClient::takesstream(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  takesstream(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(instream), other_param);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_takesstream(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_takesstream_presult;
  constexpr auto const fname = "takesstream";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_takesstream(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_takesstream(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_takesstream(::apache::thrift::ClientReceiveState& state) {
  recv_takesstream(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_takesstream(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_takesstream(state);
}

void PubSubStreamingServiceAsyncClient::clientthrows(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  clientthrowsImpl(false, rpcOptions, std::move(callback), std::move(foostream));
}

void PubSubStreamingServiceAsyncClient::clientthrows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foostream) {
  clientthrowsImpl(false, rpcOptions, std::move(callback), std::move(foostream));
}

void PubSubStreamingServiceAsyncClient::clientthrowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foostream) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      clientthrowsT(&writer, useSync, rpcOptions, std::move(callback), std::move(foostream));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      clientthrowsT(&writer, useSync, rpcOptions, std::move(callback), std::move(foostream));
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_clientthrows(apache::thrift::Stream<int32_t> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_clientthrows(rpcOptions, std::move(foostream));
}

void PubSubStreamingServiceAsyncClient::sync_clientthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foostream) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  clientthrowsImpl(true, rpcOptions, std::move(callback), std::move(foostream));
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_clientthrows(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_clientthrows(apache::thrift::Stream<int32_t> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_clientthrows(rpcOptions, std::move(foostream));
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_clientthrows(apache::thrift::Stream<int32_t> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_clientthrows(rpcOptions, std::move(foostream));
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_clientthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foostream) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_clientthrows, channel_);
  clientthrows(rpcOptions, std::move(callback), std::move(foostream));
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_clientthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foostream) {
  return future_clientthrows(rpcOptions, std::move(foostream)).semi();
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_clientthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foostream) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_clientthrows, channel_);
  clientthrows(rpcOptions, std::move(callback), std::move(foostream));
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_clientthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foostream) {
  return PubSubStreamingServiceAsyncClient::header_future_clientthrows(rpcOptions, std::move(foostream)).semi();
}

void PubSubStreamingServiceAsyncClient::clientthrows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foostream) {
  clientthrows(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foostream));
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_clientthrows(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_clientthrows_presult;
  constexpr auto const fname = "clientthrows";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_clientthrows(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_clientthrows(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_clientthrows(::apache::thrift::ClientReceiveState& state) {
  recv_clientthrows(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_clientthrows(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_clientthrows(state);
}

void PubSubStreamingServiceAsyncClient::different(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  differentImpl(false, rpcOptions, std::move(callback), std::move(foo), firstparam);
}

void PubSubStreamingServiceAsyncClient::different(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  differentImpl(false, rpcOptions, std::move(callback), std::move(foo), firstparam);
}

void PubSubStreamingServiceAsyncClient::differentImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      differentT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo), firstparam);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      differentT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo), firstparam);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::sync_different(apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_different(rpcOptions, std::move(foo), firstparam);
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::sync_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_STREAMING_RESPONSE);
  differentImpl(true, rpcOptions, std::move(callback), std::move(foo), firstparam);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_different(_returnState);
}

folly::Future<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::future_different(apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_different(rpcOptions, std::move(foo), firstparam);
}

folly::SemiFuture<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::semifuture_different(apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_different(rpcOptions, std::move(foo), firstparam);
}

folly::Future<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::future_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  folly::Promise<apache::thrift::SemiStream<std::string>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::SemiStream<std::string>>>(std::move(_promise), recv_wrapped_different, channel_);
  different(rpcOptions, std::move(callback), std::move(foo), firstparam);
  return _future;
}

folly::SemiFuture<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::semifuture_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  return future_different(rpcOptions, std::move(foo), firstparam).semi();
}

folly::Future<std::pair<apache::thrift::SemiStream<std::string>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  folly::Promise<std::pair<apache::thrift::SemiStream<std::string>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::SemiStream<std::string>>>(std::move(_promise), recv_wrapped_different, channel_);
  different(rpcOptions, std::move(callback), std::move(foo), firstparam);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::SemiStream<std::string>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  return PubSubStreamingServiceAsyncClient::header_future_different(rpcOptions, std::move(foo), firstparam).semi();
}

void PubSubStreamingServiceAsyncClient::different(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  different(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foo), firstparam);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_different(apache::thrift::SemiStream<std::string>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_different_presult;
  constexpr auto const fname = "different";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::recv_different(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::SemiStream<std::string> _return;
  auto ew = recv_wrapped_different(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::recv_instance_different(::apache::thrift::ClientReceiveState& state) {
  return recv_different(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_different(apache::thrift::SemiStream<std::string>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_different(_return, state);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
