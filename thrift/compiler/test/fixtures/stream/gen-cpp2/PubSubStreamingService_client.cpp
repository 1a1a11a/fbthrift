/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "src/gen-cpp2/PubSubStreamingServiceAsyncClient.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> PubSubStreamingService_client_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_client_presult;
typedef apache::thrift::ThriftPresult<false> PubSubStreamingService_server_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>> PubSubStreamingService_server_presult;
typedef apache::thrift::ThriftPresult<false> PubSubStreamingService_both_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>> PubSubStreamingService_both_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_returnstream_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_returnstream_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_takesstream_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_takesstream_presult;
typedef apache::thrift::ThriftPresult<false> PubSubStreamingService_clientthrows_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_clientthrows_presult;

const char* PubSubStreamingServiceAsyncClient::getServiceName() {
  return "PubSubStreamingService";
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::clientT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.client", connectionContext_.get());
  PubSubStreamingService_client_pargs args;
  // channel generates a stream going to the server
  assert(false && "not implemented yet");
  yarpl::Reference<yarpl::flowable::Flowable<folly::IOBufQueue>> untyped_flowable 
    = foo->map([](int32_t /* elem */) {
      folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
      return queue;
    });
  /*
    // TODO: custom map operator wanted, so we don't re-create prot every iteration on every call to the mapping lambda
		foo->map([](int32_t elem) {
      Protocol_ map_prot;
			using Result = int32_t;
			folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
			size_t bufSize = apache::thrift::Cpp2Ops<Result>::serializedSizeZC(&map_prot, &elem);
			map_prot.setOutput(&queue, bufSize);
			apache::thrift::Cpp2Ops<Result>::write(&map_prot, &elem);
			return queue;
		});
  */
  // TODO: hook up the outgoing stream of IOBufQueue
  // this->getChannel()->getStreamContext()->createOutgoingStream(untyped_flowable, this->getProtoSeqId());
  (void) untyped_flowable;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "client", writer, sizer, false, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_clientT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    interior_ew = apache::thrift::detail::ac::helper<Protocol_>::recv_exn(
        "client", _fname, prot, mtype);
    if (interior_ew) {
      prot->readMessageEnd();
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    PubSubStreamingService_client_presult result;
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::recv_clientT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_clientT(prot, state);
  if (ew) {
    ew.throw_exception();
  }
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::serverT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.server", connectionContext_.get());
  PubSubStreamingService_server_pargs args;
  // channel generates a stream going to the server
  assert(false && "not implemented yet");
  yarpl::Reference<yarpl::flowable::Flowable<folly::IOBufQueue>> untyped_flowable 
    = foo->map([](int32_t /* elem */) {
      folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
      return queue;
    });
  /*
    // TODO: custom map operator wanted, so we don't re-create prot every iteration on every call to the mapping lambda
		foo->map([](int32_t elem) {
      Protocol_ map_prot;
			using Result = int32_t;
			folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
			size_t bufSize = apache::thrift::Cpp2Ops<Result>::serializedSizeZC(&map_prot, &elem);
			map_prot.setOutput(&queue, bufSize);
			apache::thrift::Cpp2Ops<Result>::write(&map_prot, &elem);
			return queue;
		});
  */
  // TODO: hook up the outgoing stream of IOBufQueue
  // this->getChannel()->getStreamContext()->createOutgoingStream(untyped_flowable, this->getProtoSeqId());
  (void) untyped_flowable;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "server", writer, sizer, false, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_serverT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    interior_ew = apache::thrift::detail::ac::helper<Protocol_>::recv_exn(
        "server", _fname, prot, mtype);
    if (interior_ew) {
      prot->readMessageEnd();
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    PubSubStreamingService_server_presult result;
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
    if (result.getIsSet(0)) {
      interior_ew = folly::make_exception_wrapper< ::cpp2::FooEx>(result.get<0>().ref());
      return; // from try_and_catch
    }
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::recv_serverT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_serverT(prot, state);
  if (ew) {
    ew.throw_exception();
  }
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::bothT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.both", connectionContext_.get());
  PubSubStreamingService_both_pargs args;
  // channel generates a stream going to the server
  assert(false && "not implemented yet");
  yarpl::Reference<yarpl::flowable::Flowable<folly::IOBufQueue>> untyped_flowable 
    = foo->map([](int32_t /* elem */) {
      folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
      return queue;
    });
  /*
    // TODO: custom map operator wanted, so we don't re-create prot every iteration on every call to the mapping lambda
		foo->map([](int32_t elem) {
      Protocol_ map_prot;
			using Result = int32_t;
			folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
			size_t bufSize = apache::thrift::Cpp2Ops<Result>::serializedSizeZC(&map_prot, &elem);
			map_prot.setOutput(&queue, bufSize);
			apache::thrift::Cpp2Ops<Result>::write(&map_prot, &elem);
			return queue;
		});
  */
  // TODO: hook up the outgoing stream of IOBufQueue
  // this->getChannel()->getStreamContext()->createOutgoingStream(untyped_flowable, this->getProtoSeqId());
  (void) untyped_flowable;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "both", writer, sizer, false, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_bothT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    interior_ew = apache::thrift::detail::ac::helper<Protocol_>::recv_exn(
        "both", _fname, prot, mtype);
    if (interior_ew) {
      prot->readMessageEnd();
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    PubSubStreamingService_both_presult result;
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
    if (result.getIsSet(0)) {
      interior_ew = folly::make_exception_wrapper< ::cpp2::FooEx>(result.get<0>().ref());
      return; // from try_and_catch
    }
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::recv_bothT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_bothT(prot, state);
  if (ew) {
    ew.throw_exception();
  }
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::returnstreamT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.returnstream", connectionContext_.get());
  PubSubStreamingService_returnstream_pargs args;
  args.get<0>().value = &i32_from;
  args.get<1>().value = &i32_to;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "returnstream", writer, sizer, false, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
// returning a stream should probably be closer to returning a void or a future; for now this'll just be a stub
// folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_returnstreamT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_returnstreamT(Protocol_* prot, yarpl::Reference<yarpl::flowable::Flowable<int32_t>>& /*_return*/, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    interior_ew = apache::thrift::detail::ac::helper<Protocol_>::recv_exn(
        "returnstream", _fname, prot, mtype);
    if (interior_ew) {
      prot->readMessageEnd();
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    PubSubStreamingService_returnstream_presult result;
    assert(false); // we're a stream
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
    if (result.getIsSet(0)) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
yarpl::Reference<yarpl::flowable::Flowable<int32_t>> PubSubStreamingServiceAsyncClient::recv_returnstreamT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  yarpl::Reference<yarpl::flowable::Flowable<int32_t>> _return;
  auto ew = recv_wrapped_returnstreamT(prot, _return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::takesstreamT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.takesstream", connectionContext_.get());
  PubSubStreamingService_takesstream_pargs args;
  // channel generates a stream going to the server
  assert(false && "not implemented yet");
  yarpl::Reference<yarpl::flowable::Flowable<folly::IOBufQueue>> untyped_flowable 
    = instream->map([](int32_t /* elem */) {
      folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
      return queue;
    });
  /*
    // TODO: custom map operator wanted, so we don't re-create prot every iteration on every call to the mapping lambda
		instream->map([](int32_t elem) {
      Protocol_ map_prot;
			using Result = int32_t;
			folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
			size_t bufSize = apache::thrift::Cpp2Ops<Result>::serializedSizeZC(&map_prot, &elem);
			map_prot.setOutput(&queue, bufSize);
			apache::thrift::Cpp2Ops<Result>::write(&map_prot, &elem);
			return queue;
		});
  */
  // TODO: hook up the outgoing stream of IOBufQueue
  // this->getChannel()->getStreamContext()->createOutgoingStream(untyped_flowable, this->getProtoSeqId());
  (void) untyped_flowable;
  args.get<0>().value = &other_param;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "takesstream", writer, sizer, false, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_takesstreamT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    interior_ew = apache::thrift::detail::ac::helper<Protocol_>::recv_exn(
        "takesstream", _fname, prot, mtype);
    if (interior_ew) {
      prot->readMessageEnd();
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    PubSubStreamingService_takesstream_presult result;
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::recv_takesstreamT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_takesstreamT(prot, state);
  if (ew) {
    ew.throw_exception();
  }
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::clientthrowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.clientthrows", connectionContext_.get());
  PubSubStreamingService_clientthrows_pargs args;
  // channel generates a stream going to the server
  assert(false && "not implemented yet");
  yarpl::Reference<yarpl::flowable::Flowable<folly::IOBufQueue>> untyped_flowable 
    = foostream->map([](int32_t /* elem */) {
      folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
      return queue;
    });
  /*
    // TODO: custom map operator wanted, so we don't re-create prot every iteration on every call to the mapping lambda
		foostream->map([](int32_t elem) {
      Protocol_ map_prot;
			using Result = int32_t;
			folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
			size_t bufSize = apache::thrift::Cpp2Ops<Result>::serializedSizeZC(&map_prot, &elem);
			map_prot.setOutput(&queue, bufSize);
			apache::thrift::Cpp2Ops<Result>::write(&map_prot, &elem);
			return queue;
		});
  */
  // TODO: hook up the outgoing stream of IOBufQueue
  // this->getChannel()->getStreamContext()->createOutgoingStream(untyped_flowable, this->getProtoSeqId());
  (void) untyped_flowable;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "clientthrows", writer, sizer, false, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_clientthrowsT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string _fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<std::exception, apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(_fname, mtype, protoSeqId);
    interior_ew = apache::thrift::detail::ac::helper<Protocol_>::recv_exn(
        "clientthrows", _fname, prot, mtype);
    if (interior_ew) {
      prot->readMessageEnd();
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    PubSubStreamingService_clientthrows_presult result;
    ::apache::thrift::detail::deserializeRequestBody(prot, &result);
    prot->readMessageEnd();
    ctx->postRead(state.header(), state.buf()->length());
  }
  );
  auto ew = interior_ew ? std::move(interior_ew) : std::move(caught_ew);
  if (ew) {
    ctx->handlerErrorWrapped(ew);
  }
  return ew;
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::recv_clientthrowsT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_clientthrowsT(prot, state);
  if (ew) {
    ew.throw_exception();
  }
}



void PubSubStreamingServiceAsyncClient::client(std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  clientImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::client(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  clientImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::clientImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      clientT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      clientT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_client(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_client(rpcOptions, foo);
}

void PubSubStreamingServiceAsyncClient::sync_client(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  clientImpl(true, rpcOptions, std::move(callback), foo);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_client(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_client(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_client(rpcOptions, foo);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_client(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_client, channel_);
  client(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_client(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_client, channel_);
  client(rpcOptions, std::move(callback), foo);
  return _future;
}

void PubSubStreamingServiceAsyncClient::client(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  client(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foo);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_client(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_clientT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_clientT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_client(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_client(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_client(::apache::thrift::ClientReceiveState& state) {
  recv_client(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_client(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_client(state);
}

void PubSubStreamingServiceAsyncClient::server(std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  serverImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::server(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  serverImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::serverImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      serverT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      serverT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_server(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_server(rpcOptions, foo);
}

void PubSubStreamingServiceAsyncClient::sync_server(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  serverImpl(true, rpcOptions, std::move(callback), foo);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_server(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_server(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_server(rpcOptions, foo);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_server(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_server, channel_);
  server(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_server(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_server, channel_);
  server(rpcOptions, std::move(callback), foo);
  return _future;
}

void PubSubStreamingServiceAsyncClient::server(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  server(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foo);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_server(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_serverT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_serverT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_server(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_server(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_server(::apache::thrift::ClientReceiveState& state) {
  recv_server(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_server(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_server(state);
}

void PubSubStreamingServiceAsyncClient::both(std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  bothImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::both(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  bothImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::bothImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      bothT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      bothT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_both(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_both(rpcOptions, foo);
}

void PubSubStreamingServiceAsyncClient::sync_both(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  bothImpl(true, rpcOptions, std::move(callback), foo);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_both(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_both(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_both(rpcOptions, foo);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_both(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_both, channel_);
  both(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_both(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_both, channel_);
  both(rpcOptions, std::move(callback), foo);
  return _future;
}

void PubSubStreamingServiceAsyncClient::both(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foo) {
  both(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foo);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_both(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_bothT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_bothT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_both(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_both(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_both(::apache::thrift::ClientReceiveState& state) {
  recv_both(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_both(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_both(state);
}

void PubSubStreamingServiceAsyncClient::returnstream(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  returnstreamImpl(false, rpcOptions, std::move(callback), i32_from, i32_to);
}

void PubSubStreamingServiceAsyncClient::returnstream(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  returnstreamImpl(false, rpcOptions, std::move(callback), i32_from, i32_to);
}

void PubSubStreamingServiceAsyncClient::returnstreamImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      returnstreamT(&writer, useSync, rpcOptions, std::move(callback), i32_from, i32_to);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      returnstreamT(&writer, useSync, rpcOptions, std::move(callback), i32_from, i32_to);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

yarpl::Reference<yarpl::flowable::Flowable<int32_t>> PubSubStreamingServiceAsyncClient::returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return returnstream(rpcOptions, i32_from, i32_to);
}

yarpl::Reference<yarpl::flowable::Flowable<int32_t>> PubSubStreamingServiceAsyncClient::returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  apache::thrift::ClientReceiveState _returnState;
  // _returnState.setChannel(getChannel());
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  returnstreamImpl(true, rpcOptions, std::move(callback), i32_from, i32_to);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }

  return recv_returnstream(_returnState);
}


/* function returnstream didn't have future_functions rendered */


folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_returnstream(yarpl::Reference<yarpl::flowable::Flowable<int32_t>>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_returnstreamT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_returnstreamT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

yarpl::Reference<yarpl::flowable::Flowable<int32_t>> PubSubStreamingServiceAsyncClient::recv_returnstream(::apache::thrift::ClientReceiveState& state) {
  yarpl::Reference<yarpl::flowable::Flowable<int32_t>> _return;
  auto ew = recv_wrapped_returnstream(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

yarpl::Reference<yarpl::flowable::Flowable<int32_t>> PubSubStreamingServiceAsyncClient::recv_instance_returnstream(::apache::thrift::ClientReceiveState& state) {
  return recv_returnstream(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_returnstream(yarpl::Reference<yarpl::flowable::Flowable<int32_t>>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_returnstream(_return, state);
}

void PubSubStreamingServiceAsyncClient::takesstream(std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  takesstreamImpl(false, rpcOptions, std::move(callback), instream, other_param);
}

void PubSubStreamingServiceAsyncClient::takesstream(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  takesstreamImpl(false, rpcOptions, std::move(callback), instream, other_param);
}

void PubSubStreamingServiceAsyncClient::takesstreamImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      takesstreamT(&writer, useSync, rpcOptions, std::move(callback), instream, other_param);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      takesstreamT(&writer, useSync, rpcOptions, std::move(callback), instream, other_param);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_takesstream(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_takesstream(rpcOptions, instream, other_param);
}

void PubSubStreamingServiceAsyncClient::sync_takesstream(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  takesstreamImpl(true, rpcOptions, std::move(callback), instream, other_param);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_takesstream(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_takesstream(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_takesstream(rpcOptions, instream, other_param);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_takesstream(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_takesstream, channel_);
  takesstream(rpcOptions, std::move(callback), instream, other_param);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_takesstream(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_takesstream, channel_);
  takesstream(rpcOptions, std::move(callback), instream, other_param);
  return _future;
}

void PubSubStreamingServiceAsyncClient::takesstream(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> instream, int32_t other_param) {
  takesstream(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), instream, other_param);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_takesstream(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_takesstreamT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_takesstreamT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_takesstream(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_takesstream(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_takesstream(::apache::thrift::ClientReceiveState& state) {
  recv_takesstream(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_takesstream(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_takesstream(state);
}

void PubSubStreamingServiceAsyncClient::clientthrows(std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  clientthrowsImpl(false, rpcOptions, std::move(callback), foostream);
}

void PubSubStreamingServiceAsyncClient::clientthrows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  clientthrowsImpl(false, rpcOptions, std::move(callback), foostream);
}

void PubSubStreamingServiceAsyncClient::clientthrowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      clientthrowsT(&writer, useSync, rpcOptions, std::move(callback), foostream);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      clientthrowsT(&writer, useSync, rpcOptions, std::move(callback), foostream);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_clientthrows(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_clientthrows(rpcOptions, foostream);
}

void PubSubStreamingServiceAsyncClient::sync_clientthrows(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  clientthrowsImpl(true, rpcOptions, std::move(callback), foostream);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_clientthrows(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_clientthrows(yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_clientthrows(rpcOptions, foostream);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_clientthrows(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_clientthrows, channel_);
  clientthrows(rpcOptions, std::move(callback), foostream);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_clientthrows(apache::thrift::RpcOptions& rpcOptions, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_clientthrows, channel_);
  clientthrows(rpcOptions, std::move(callback), foostream);
  return _future;
}

void PubSubStreamingServiceAsyncClient::clientthrows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, yarpl::Reference<yarpl::flowable::Flowable<int32_t>> foostream) {
  clientthrows(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foostream);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_clientthrows(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_clientthrowsT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_clientthrowsT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_clientthrows(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_clientthrows(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_clientthrows(::apache::thrift::ClientReceiveState& state) {
  recv_clientthrows(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_clientthrows(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_clientthrows(state);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
