/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/sink/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::cpp2::InitialResponse> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::InitialResponse>;

    f(get_metadata(0), static_cast<T&&>(t).content_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FinalResponse> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::FinalResponse>;

    f(get_metadata(0), static_cast<T&&>(t).content_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::SinkPayload> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::SinkPayload>;

    f(get_metadata(0), static_cast<T&&>(t).content_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::CompatibleWithKeywordSink> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::CompatibleWithKeywordSink>;

    f(get_metadata(0), static_cast<T&&>(t).sink_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::InitialException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::InitialException>;

    f(get_metadata(0), static_cast<T&&>(t).reason_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::SinkException1> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::SinkException1>;

    f(get_metadata(0), static_cast<T&&>(t).reason_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::SinkException2> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::cpp2::SinkException2>;

    f(get_metadata(0), static_cast<T&&>(t).reason_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
