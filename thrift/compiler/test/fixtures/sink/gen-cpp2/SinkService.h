/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/sink/gen-cpp2/SinkServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/sink/gen-cpp2/module_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {

class SinkServiceSvAsyncIf {
 public:
  virtual ~SinkServiceSvAsyncIf() {}
  virtual void async_tm_method(std::unique_ptr<apache::thrift::HandlerCallback<>> callback) = 0;
  virtual folly::Future<> future_method() = 0;
  virtual folly::SemiFuture<> semifuture_method() = 0;
  virtual void async_tm_methodAndReponse(std::unique_ptr<apache::thrift::HandlerCallback<>> callback) = 0;
  virtual folly::Future<> future_methodAndReponse() = 0;
  virtual folly::SemiFuture<> semifuture_methodAndReponse() = 0;
};

class SinkServiceAsyncProcessor;

class SinkServiceSvIf : public SinkServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef SinkServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  virtual  method();
  folly::Future<> future_method() override;
  folly::SemiFuture<> semifuture_method() override;
  void async_tm_method(std::unique_ptr<apache::thrift::HandlerCallback<>> callback) override;
  virtual  methodAndReponse();
  folly::Future<> future_methodAndReponse() override;
  folly::SemiFuture<> semifuture_methodAndReponse() override;
  void async_tm_methodAndReponse(std::unique_ptr<apache::thrift::HandlerCallback<>> callback) override;
};

class SinkServiceSvNull : public SinkServiceSvIf {
 public:
   method() override;
   methodAndReponse() override;
};

class SinkServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  using BaseAsyncProcessor = void;
 protected:
  SinkServiceSvIf* iface_;
  folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) override;
 public:
  void process(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) override;
  std::shared_ptr<folly::RequestContext> getBaseContextForRequest() override;
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using ProcessFunc = GeneratedAsyncProcessor::ProcessFunc<SinkServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessor::ProcessMap<ProcessFunc>;
  static const SinkServiceAsyncProcessor::ProcessMap& getBinaryProtocolProcessMap();
  static const SinkServiceAsyncProcessor::ProcessMap& getCompactProtocolProcessMap();
 private:
  static const SinkServiceAsyncProcessor::ProcessMap binaryProcessMap_;
   static const SinkServiceAsyncProcessor::ProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_method(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_method(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_method(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_method(std::unique_ptr<apache::thrift::ResponseChannelRequest> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodAndReponse(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodAndReponse(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodAndReponse(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodAndReponse(std::unique_ptr<apache::thrift::ResponseChannelRequest> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  SinkServiceAsyncProcessor(SinkServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~SinkServiceAsyncProcessor() {}
};

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
