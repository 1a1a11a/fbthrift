/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.sink;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="CompatibleWithKeywordSink", builder=CompatibleWithKeywordSink.Builder.class)
public final class CompatibleWithKeywordSink {
    @ThriftConstructor
    public CompatibleWithKeywordSink(
        @ThriftField(value=1, name="sink", requiredness=Requiredness.NONE) final String sink
    ) {
        this.sink = sink;
    }
    
    @ThriftConstructor
    protected CompatibleWithKeywordSink() {
      this.sink = null;
    }
    
    public static class Builder {
        private String sink;
        @ThriftField(value=1, name="sink", requiredness=Requiredness.NONE)
        public Builder setSink(String sink) {
            this.sink = sink;
            return this;
        }
    
        public Builder() { }
        public Builder(CompatibleWithKeywordSink other) {
            this.sink = other.sink;
        }
    
        @ThriftConstructor
        public CompatibleWithKeywordSink build() {
            return new CompatibleWithKeywordSink (
                this.sink
            );
        }
    }
    
    private final String sink;

    
    @ThriftField(value=1, name="sink", requiredness=Requiredness.NONE)
    public String getSink() { return sink; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("sink", sink)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        CompatibleWithKeywordSink other = (CompatibleWithKeywordSink)o;
    
        return
            Objects.equals(sink, other.sink) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            sink
        });
    }
    
}
