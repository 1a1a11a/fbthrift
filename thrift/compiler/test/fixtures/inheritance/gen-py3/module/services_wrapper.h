/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#include <src/gen-cpp2/MyRoot.h>
#include <src/gen-cpp2/MyNode.h>
#include <src/gen-cpp2/MyLeaf.h>
#include <Python.h>

#include <memory>

namespace cpp2 {

class MyRootWrapper : virtual public MyRootSvIf {
  protected:
    PyObject *if_object;
  public:
    explicit MyRootWrapper(PyObject *if_object);
    virtual ~MyRootWrapper();
    folly::Future<folly::Unit> future_do_root() override;
};

std::shared_ptr<apache::thrift::ServerInterface> MyRootInterface(PyObject *if_object);


class MyNodeWrapper : virtual public cpp2::MyRootWrapper, virtual public MyNodeSvIf {
  public:
    explicit MyNodeWrapper(PyObject *if_object);
    folly::Future<folly::Unit> future_do_mid() override;
};

std::shared_ptr<apache::thrift::ServerInterface> MyNodeInterface(PyObject *if_object);


class MyLeafWrapper : virtual public cpp2::MyNodeWrapper, virtual public MyLeafSvIf {
  public:
    explicit MyLeafWrapper(PyObject *if_object);
    folly::Future<folly::Unit> future_do_leaf() override;
};

std::shared_ptr<apache::thrift::ServerInterface> MyLeafInterface(PyObject *if_object);
} // namespace cpp2
