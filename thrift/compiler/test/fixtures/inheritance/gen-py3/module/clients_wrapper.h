/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#include <thrift/lib/cpp2/async/RequestChannel.h>
#include <src/gen-cpp2/MyRoot.h>
#include <src/gen-cpp2/MyNode.h>
#include <src/gen-cpp2/MyLeaf.h>

#include <folly/futures/Future.h>
#include <folly/futures/Promise.h>
#include <folly/Unit.h>

#include <cstdint>
#include <functional>
#include <map>
#include <memory>
#include <set>
#include <vector>

namespace cpp2 {

typedef std::shared_ptr<apache::thrift::RequestChannel> RequestChannel_ptr;

class MyRootClientWrapper {
  protected:
    std::unique_ptr<cpp2::MyRootAsyncClient> async_client;

  public:
    explicit MyRootClientWrapper(
        std::unique_ptr<cpp2::MyRootAsyncClient> client)
        : async_client(std::move(client)) { }
    explicit MyRootClientWrapper(RequestChannel_ptr channel)
        : MyRootClientWrapper(std::make_unique<cpp2::MyRootAsyncClient>(channel))  { }

    virtual ~MyRootClientWrapper();
    folly::Future<folly::Unit> disconnect();
    void setPersistentHeader(const std::string& key, const std::string& value);

    folly::Future<folly::Unit> do_root();
};


class MyNodeClientWrapper : public cpp2::MyRootClientWrapper {
  protected:
    std::unique_ptr<cpp2::MyNodeAsyncClient> async_client;

  public:
    explicit MyNodeClientWrapper(
        std::unique_ptr<cpp2::MyNodeAsyncClient> client)
        : MyRootClientWrapper(std::move(client)) { }
    explicit MyNodeClientWrapper(RequestChannel_ptr channel)
        : MyNodeClientWrapper(std::make_unique<cpp2::MyNodeAsyncClient>(channel))  { }


    folly::Future<folly::Unit> do_mid();
};


class MyLeafClientWrapper : public cpp2::MyNodeClientWrapper {
  protected:
    std::unique_ptr<cpp2::MyLeafAsyncClient> async_client;

  public:
    explicit MyLeafClientWrapper(
        std::unique_ptr<cpp2::MyLeafAsyncClient> client)
        : MyNodeClientWrapper(std::move(client)) { }
    explicit MyLeafClientWrapper(RequestChannel_ptr channel)
        : MyLeafClientWrapper(std::make_unique<cpp2::MyLeafAsyncClient>(channel))  { }


    folly::Future<folly::Unit> do_leaf();
};


} // namespace cpp2
