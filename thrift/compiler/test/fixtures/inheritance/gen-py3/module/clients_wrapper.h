/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#include <src/gen-cpp2/MyRoot.h>
#include <src/gen-cpp2/MyNode.h>
#include <src/gen-cpp2/MyLeaf.h>

#include <folly/Try.h>
#include <folly/Unit.h>
#include <folly/io/async/EventBase.h>

#include <Python.h>

#include <cstdint>
#include <functional>
#include <map>
#include <memory>
#include <set>
#include <vector>

namespace cpp2 {

class MyRootClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyRootAsyncClient> async_client;
    std::shared_ptr<folly::EventBase> event_base;
  public:
    explicit MyRootClientWrapper(
      std::shared_ptr<cpp2::MyRootAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    virtual ~MyRootClientWrapper();
    void do_root(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


class MyNodeClientWrapper : virtual public cpp2::MyRootClientWrapper,  {
  protected:
    std::shared_ptr<cpp2::MyNodeAsyncClient> async_client;
  public:
    explicit MyNodeClientWrapper(
      std::shared_ptr<cpp2::MyNodeAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    void do_mid(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


class MyLeafClientWrapper : virtual public cpp2::MyNodeClientWrapper {
  protected:
    std::shared_ptr<cpp2::MyLeafAsyncClient> async_client;
  public:
    explicit MyLeafClientWrapper(
      std::shared_ptr<cpp2::MyLeafAsyncClient> async_client,
      std::shared_ptr<folly::EventBase> event_base);
    void do_leaf(
      std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
      PyObject* py_future);
};


} // namespace cpp2
