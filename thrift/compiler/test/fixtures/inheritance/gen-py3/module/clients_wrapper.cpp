/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {
MyRootClientWrapper::MyRootClientWrapper(
    std::shared_ptr<cpp2::MyRootAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    async_client(async_client),
    event_base(event_base) {}

MyRootClientWrapper::~MyRootClientWrapper() {}

void MyRootClientWrapper::do_root(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_do_root(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


MyNodeClientWrapper::MyNodeClientWrapper(
    std::shared_ptr<cpp2::MyNodeAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    MyRootClientWrapper(std::dynamic_pointer_cast<cpp2::MyRootAsyncClient>(async_client), event_base),
    async_client(async_client) {}


void MyNodeClientWrapper::do_mid(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_do_mid(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


MyLeafClientWrapper::MyLeafClientWrapper(
    std::shared_ptr<cpp2::MyLeafAsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : 
    MyNodeClientWrapper(std::dynamic_pointer_cast<cpp2::MyNodeAsyncClient>(async_client), event_base),
    async_client(async_client) {}


void MyLeafClientWrapper::do_leaf(
    std::function<void(PyObject*, folly::Try<folly::Unit>)> callback,
    PyObject* py_future) {
  async_client->future_do_leaf(
  ).via(event_base.get()).then(
    [=] (folly::Try<folly::Unit>&& result) {
      callback(py_future, result);
    }
  );
}


} // namespace cpp2
