// @generated by Thrift. This file is probably not the place you want to edit!

#![feature(async_await)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

extern crate self as module;

pub use self::errors::*;

pub mod services {
    pub mod my_root {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum DoRootExn {
            Success(()),
            ApplicationException(fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for DoRootExn {
            fn default() -> Self {
                DoRootExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for DoRootExn {
            fn from(exn: ApplicationException) -> Self {
                DoRootExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for DoRootExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a DoRootExn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("DoRoot");
                match self {
                    DoRootExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRootExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    DoRootExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for DoRootExn {
            fn read(p: &mut P) -> failure::Fallible<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt: Option<_> = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = Some(DoRootExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoRootExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "DoRoot"),
                    )
                    .into(),
                )
            }
        }
    }

    pub mod my_node {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum DoMidExn {
            Success(()),
            ApplicationException(fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for DoMidExn {
            fn default() -> Self {
                DoMidExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for DoMidExn {
            fn from(exn: ApplicationException) -> Self {
                DoMidExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for DoMidExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a DoMidExn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("DoMid");
                match self {
                    DoMidExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoMidExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    DoMidExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for DoMidExn {
            fn read(p: &mut P) -> failure::Fallible<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt: Option<_> = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = Some(DoMidExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoMidExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "DoMid"),
                    )
                    .into(),
                )
            }
        }
    }

    pub mod my_leaf {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum DoLeafExn {
            Success(()),
            ApplicationException(fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for DoLeafExn {
            fn default() -> Self {
                DoLeafExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for DoLeafExn {
            fn from(exn: ApplicationException) -> Self {
                DoLeafExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for DoLeafExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a DoLeafExn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("DoLeaf");
                match self {
                    DoLeafExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoLeafExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    DoLeafExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for DoLeafExn {
            fn read(p: &mut P) -> failure::Fallible<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt: Option<_> = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = Some(DoLeafExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoLeafExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "DoLeaf"),
                    )
                    .into(),
                )
            }
        }
    }
}

pub mod client {
    use fbthrift::{
        framing::Framing,
        protocol::{
            self, Protocol, ProtocolDecoded, ProtocolEncodedFinal, ProtocolReader, ProtocolWriter,
        },
        serialize,
        ttype::TType,
        ApplicationException, ClientFactory, Deserialize, MessageType, Serialize,
    };
    use futures::Future;
    use std::marker::PhantomData;
    use std::sync::Arc;

    pub struct MyRootImpl<P, S> {
        service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> MyRootImpl<P, S>
    where
        P: Protocol,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                service,
                _phantom: PhantomData,
            }
        }

        pub fn do_root(
            &self,
        ) -> impl Future<Item = (), Error = failure::Error> + Send + 'static {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "do_root",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let response = self
                .service
                .call(request)
                .map_err(S::Error::into)
                .from_err();
            let result = response.and_then(move |reply| {
                let de = P::deserializer(reply);
                move |mut p: P::Deserializer| -> failure::Fallible<()> {
                    let p = &mut p;
                    let (_, message_type, _) = p.read_message_begin(|_| ())?;
                    let result = match message_type {
                        MessageType::Reply => {
                            match crate::services::my_root::DoRootExn::read(p)? {
                                crate::services::my_root::DoRootExn::Success(res) => Ok(res),
                                exn => Err(crate::errors::ErrorKind::MyRootDoRootError(exn).into()),
                            }
                        }
                        MessageType::Exception => {
                            let ae = ApplicationException::read(p)?;
                            Err(crate::errors::ErrorKind::MyRootDoRootError(
                                crate::services::my_root::DoRootExn::ApplicationException(ae),
                            ).into())
                        }
                        MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                            failure::bail!("Unexpected message type {:?}", message_type)
                        }
                    };
                    p.read_message_end()?;
                    result
                }(de)
            });
            result
        }
    }

    pub trait MyRoot {
        fn do_root(
            &self,
        ) -> Box<dyn Future<Item = (), Error = failure::Error> + Send + 'static>;
    }

    impl<P, S> MyRoot for MyRootImpl<P, S>
    where
        P: Protocol + 'static,
        S: tokio_service::Service<
            Request = ProtocolEncodedFinal<P>,
            Response = ProtocolDecoded<P>,
        > + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {        fn do_root(
            &self,
        ) -> Box<dyn Future<Item = (), Error = failure::Error> + Send + 'static> {
            Box::new(Self::do_root(self))
        }
    }

    pub struct make_MyRoot;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyRoot {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn MyRoot + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_MyRoot::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyRoot {
        type Api = dyn MyRoot + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new(MyRootImpl::<P, T>::new(transport))
        }
    }

    pub struct MyNodeImpl<P, S> {
        service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> MyNodeImpl<P, S>
    where
        P: Protocol,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                service,
                _phantom: PhantomData,
            }
        }

        pub fn do_mid(
            &self,
        ) -> impl Future<Item = (), Error = failure::Error> + Send + 'static {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "do_mid",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let response = self
                .service
                .call(request)
                .map_err(S::Error::into)
                .from_err();
            let result = response.and_then(move |reply| {
                let de = P::deserializer(reply);
                move |mut p: P::Deserializer| -> failure::Fallible<()> {
                    let p = &mut p;
                    let (_, message_type, _) = p.read_message_begin(|_| ())?;
                    let result = match message_type {
                        MessageType::Reply => {
                            match crate::services::my_node::DoMidExn::read(p)? {
                                crate::services::my_node::DoMidExn::Success(res) => Ok(res),
                                exn => Err(crate::errors::ErrorKind::MyNodeDoMidError(exn).into()),
                            }
                        }
                        MessageType::Exception => {
                            let ae = ApplicationException::read(p)?;
                            Err(crate::errors::ErrorKind::MyNodeDoMidError(
                                crate::services::my_node::DoMidExn::ApplicationException(ae),
                            ).into())
                        }
                        MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                            failure::bail!("Unexpected message type {:?}", message_type)
                        }
                    };
                    p.read_message_end()?;
                    result
                }(de)
            });
            result
        }
    }

    pub trait MyNode {
        fn do_mid(
            &self,
        ) -> Box<dyn Future<Item = (), Error = failure::Error> + Send + 'static>;
    }

    impl<P, S> MyNode for MyNodeImpl<P, S>
    where
        P: Protocol + 'static,
        S: tokio_service::Service<
            Request = ProtocolEncodedFinal<P>,
            Response = ProtocolDecoded<P>,
        > + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {        fn do_mid(
            &self,
        ) -> Box<dyn Future<Item = (), Error = failure::Error> + Send + 'static> {
            Box::new(Self::do_mid(self))
        }
    }

    pub struct make_MyNode;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyNode {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn MyNode + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_MyNode::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyNode {
        type Api = dyn MyNode + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new(MyNodeImpl::<P, T>::new(transport))
        }
    }

    pub struct MyLeafImpl<P, S> {
        service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> MyLeafImpl<P, S>
    where
        P: Protocol,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                service,
                _phantom: PhantomData,
            }
        }

        pub fn do_leaf(
            &self,
        ) -> impl Future<Item = (), Error = failure::Error> + Send + 'static {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "do_leaf",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let response = self
                .service
                .call(request)
                .map_err(S::Error::into)
                .from_err();
            let result = response.and_then(move |reply| {
                let de = P::deserializer(reply);
                move |mut p: P::Deserializer| -> failure::Fallible<()> {
                    let p = &mut p;
                    let (_, message_type, _) = p.read_message_begin(|_| ())?;
                    let result = match message_type {
                        MessageType::Reply => {
                            match crate::services::my_leaf::DoLeafExn::read(p)? {
                                crate::services::my_leaf::DoLeafExn::Success(res) => Ok(res),
                                exn => Err(crate::errors::ErrorKind::MyLeafDoLeafError(exn).into()),
                            }
                        }
                        MessageType::Exception => {
                            let ae = ApplicationException::read(p)?;
                            Err(crate::errors::ErrorKind::MyLeafDoLeafError(
                                crate::services::my_leaf::DoLeafExn::ApplicationException(ae),
                            ).into())
                        }
                        MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                            failure::bail!("Unexpected message type {:?}", message_type)
                        }
                    };
                    p.read_message_end()?;
                    result
                }(de)
            });
            result
        }
    }

    pub trait MyLeaf {
        fn do_leaf(
            &self,
        ) -> Box<dyn Future<Item = (), Error = failure::Error> + Send + 'static>;
    }

    impl<P, S> MyLeaf for MyLeafImpl<P, S>
    where
        P: Protocol + 'static,
        S: tokio_service::Service<
            Request = ProtocolEncodedFinal<P>,
            Response = ProtocolDecoded<P>,
        > + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {        fn do_leaf(
            &self,
        ) -> Box<dyn Future<Item = (), Error = failure::Error> + Send + 'static> {
            Box::new(Self::do_leaf(self))
        }
    }

    pub struct make_MyLeaf;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyLeaf {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn MyLeaf + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_MyLeaf::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyLeaf {
        type Api = dyn MyLeaf + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new(MyLeafImpl::<P, T>::new(transport))
        }
    }
}

pub mod client_async {
    use async_trait::async_trait;
    use fbthrift::{
        framing::Framing,
        protocol::{
            self, Protocol, ProtocolDecoded, ProtocolEncodedFinal, ProtocolReader, ProtocolWriter,
        },
        serialize,
        ttype::TType,
        ApplicationException, ClientFactory, Deserialize, MessageType, Serialize,
    };
    use futures::Future;
    use std::marker::PhantomData;
    use std::sync::Arc;

    pub struct MyRootImpl<P, S> {
        service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> MyRootImpl<P, S>
    where
        P: Protocol + Sync,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                service,
                _phantom: PhantomData,
            }
        }
    }

    #[async_trait]
    pub trait MyRoot: Send + Sync {
        async fn do_root(
            &self,
        ) -> Result<(), failure::Error>;
    }

    #[async_trait]
    impl<P, S> MyRoot for MyRootImpl<P, S>
    where
        P: Protocol + Send + Sync + 'static,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>
            + Send
            + Sync
            + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {        async fn do_root(
            &self,
        ) -> Result<(), failure::Error> {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "do_root",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let fut = self.service.call(request).map_err(S::Error::into);
            let reply = futures_preview::compat::Future01CompatExt::compat(fut).await?;
            let de = P::deserializer(reply);
            move |mut p: P::Deserializer| -> failure::Fallible<()> {
                let p = &mut p;
                let (_, message_type, _) = p.read_message_begin(|_| ())?;
                let result = match message_type {
                    MessageType::Reply => {
                        match crate::services::my_root::DoRootExn::read(p)? {
                            crate::services::my_root::DoRootExn::Success(res) => Ok(res),
                            exn => Err(crate::errors::ErrorKind::MyRootDoRootError(exn).into()),
                        }
                    }
                    MessageType::Exception => {
                        let ae = ApplicationException::read(p)?;
                        Err(crate::errors::ErrorKind::MyRootDoRootError(
                            crate::services::my_root::DoRootExn::ApplicationException(ae),
                        ).into())
                    }
                    MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                        failure::bail!("Unexpected message type {:?}", message_type)
                    }
                };
                p.read_message_end()?;
                result
            }(de)
        }
    }

    pub struct make_MyRoot;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyRoot {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn MyRoot + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_MyRoot::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyRoot {
        type Api = dyn MyRoot + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new(MyRootImpl::<P, T>::new(transport))
        }
    }

    pub struct MyNodeImpl<P, S> {
        service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> MyNodeImpl<P, S>
    where
        P: Protocol + Sync,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                service,
                _phantom: PhantomData,
            }
        }
    }

    #[async_trait]
    pub trait MyNode: Send + Sync {
        async fn do_mid(
            &self,
        ) -> Result<(), failure::Error>;
    }

    #[async_trait]
    impl<P, S> MyNode for MyNodeImpl<P, S>
    where
        P: Protocol + Send + Sync + 'static,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>
            + Send
            + Sync
            + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {        async fn do_mid(
            &self,
        ) -> Result<(), failure::Error> {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "do_mid",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let fut = self.service.call(request).map_err(S::Error::into);
            let reply = futures_preview::compat::Future01CompatExt::compat(fut).await?;
            let de = P::deserializer(reply);
            move |mut p: P::Deserializer| -> failure::Fallible<()> {
                let p = &mut p;
                let (_, message_type, _) = p.read_message_begin(|_| ())?;
                let result = match message_type {
                    MessageType::Reply => {
                        match crate::services::my_node::DoMidExn::read(p)? {
                            crate::services::my_node::DoMidExn::Success(res) => Ok(res),
                            exn => Err(crate::errors::ErrorKind::MyNodeDoMidError(exn).into()),
                        }
                    }
                    MessageType::Exception => {
                        let ae = ApplicationException::read(p)?;
                        Err(crate::errors::ErrorKind::MyNodeDoMidError(
                            crate::services::my_node::DoMidExn::ApplicationException(ae),
                        ).into())
                    }
                    MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                        failure::bail!("Unexpected message type {:?}", message_type)
                    }
                };
                p.read_message_end()?;
                result
            }(de)
        }
    }

    pub struct make_MyNode;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyNode {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn MyNode + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_MyNode::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyNode {
        type Api = dyn MyNode + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new(MyNodeImpl::<P, T>::new(transport))
        }
    }

    pub struct MyLeafImpl<P, S> {
        service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> MyLeafImpl<P, S>
    where
        P: Protocol + Sync,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                service,
                _phantom: PhantomData,
            }
        }
    }

    #[async_trait]
    pub trait MyLeaf: Send + Sync {
        async fn do_leaf(
            &self,
        ) -> Result<(), failure::Error>;
    }

    #[async_trait]
    impl<P, S> MyLeaf for MyLeafImpl<P, S>
    where
        P: Protocol + Send + Sync + 'static,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>
            + Send
            + Sync
            + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {        async fn do_leaf(
            &self,
        ) -> Result<(), failure::Error> {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "do_leaf",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let fut = self.service.call(request).map_err(S::Error::into);
            let reply = futures_preview::compat::Future01CompatExt::compat(fut).await?;
            let de = P::deserializer(reply);
            move |mut p: P::Deserializer| -> failure::Fallible<()> {
                let p = &mut p;
                let (_, message_type, _) = p.read_message_begin(|_| ())?;
                let result = match message_type {
                    MessageType::Reply => {
                        match crate::services::my_leaf::DoLeafExn::read(p)? {
                            crate::services::my_leaf::DoLeafExn::Success(res) => Ok(res),
                            exn => Err(crate::errors::ErrorKind::MyLeafDoLeafError(exn).into()),
                        }
                    }
                    MessageType::Exception => {
                        let ae = ApplicationException::read(p)?;
                        Err(crate::errors::ErrorKind::MyLeafDoLeafError(
                            crate::services::my_leaf::DoLeafExn::ApplicationException(ae),
                        ).into())
                    }
                    MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                        failure::bail!("Unexpected message type {:?}", message_type)
                    }
                };
                p.read_message_end()?;
                result
            }(de)
        }
    }

    pub struct make_MyLeaf;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyLeaf {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn MyLeaf + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_MyLeaf::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyLeaf {
        type Api = dyn MyLeaf + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new(MyLeafImpl::<P, T>::new(transport))
        }
    }
}

pub mod server {
    use async_trait::async_trait;
    use fbthrift::{
        self, serialize, ApplicationException, ApplicationExceptionErrorCode, BinaryProtocol,
        BufExt, CompactProtocol, Deserialize, Framing, MessageType, Protocol, ProtocolDecoded,
        ProtocolEncodedFinal, ProtocolID, ProtocolReader, Serialize, ServiceProcessor as _,
        TType, ThriftService,
    };
    use std::marker::PhantomData;

    #[async_trait]
    pub trait MyRoot: Send + Sync + 'static {
        async fn do_root(
            &self,
        ) -> Result<(), crate::services::my_root::DoRootExn> {
            Err(crate::services::my_root::DoRootExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyRoot",
                    "do_root",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct MyRootProcessor<P, H> {
        service: H,
        supa: fbthrift::NullServiceProcessor<P>,
        _phantom: PhantomData<(P, H)>,
    }

    impl<P, H> MyRootProcessor<P, H>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyRoot,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: fbthrift::NullServiceProcessor::new(),
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_do_root<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.do_root(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_root::DoRootExn::Success(res)
                }
                Err(crate::services::my_root::DoRootExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_root::DoRootExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "do_root",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "do_root",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H> fbthrift::ServiceProcessor<P> for MyRootProcessor<P, H>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyRoot,
    {
        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"do_root" => Ok(0usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            match idx {
                0usize => self.handle_do_root(p).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "MyRootProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H> ThriftService<P::Frame> for MyRootProcessor<P, H>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: MyRoot,
    {
        type Handler = H;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            let mut p = P::deserializer(req);
            let (idx, mty, _) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur).await;
                }
            };
            let res = self.handle_method(idx, &mut p).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "MyRootProcessor",
                                MessageType::Exception,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_MyRoot_server<F, H>(
        proto: ProtocolID,
        handler: H,
    ) -> Result<Box<dyn ThriftService<F, Handler = H> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: MyRoot,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(MyRootProcessor::<BinaryProtocol<F>, H>::new(handler)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(MyRootProcessor::<CompactProtocol<F>, H>::new(handler)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }

    #[async_trait]
    pub trait MyNode: Send + Sync + 'static {
        async fn do_mid(
            &self,
        ) -> Result<(), crate::services::my_node::DoMidExn> {
            Err(crate::services::my_node::DoMidExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyNode",
                    "do_mid",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct MyNodeProcessor<P, H, SS> {
        service: H,
        supa: SS,
        _phantom: PhantomData<(P, H)>,
    }

    impl<P, H, SS> MyNodeProcessor<P, H, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyNode,
        SS: ThriftService<P::Frame>,
        SS::Handler: ::module::server::MyRoot,
        P::Frame: Send + 'static,
    {
        pub fn new(service: H, supa: SS) -> Self {
            Self {
                service,
                supa,
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_do_mid<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.do_mid(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_node::DoMidExn::Success(res)
                }
                Err(crate::services::my_node::DoMidExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_node::DoMidExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "do_mid",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "do_mid",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, SS> fbthrift::ServiceProcessor<P> for MyNodeProcessor<P, H, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyNode,
        SS: ThriftService<P::Frame>,
        SS::Handler: ::module::server::MyRoot,
        P::Frame: Send + 'static,
    {
        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"do_mid" => Ok(0usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            match idx {
                0usize => self.handle_do_mid(p).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "MyNodeProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, SS> ThriftService<P::Frame> for MyNodeProcessor<P, H, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: MyNode,
        SS: ThriftService<P::Frame>,
        SS::Handler: ::module::server::MyRoot,
        P::Frame: Send + 'static,
    {
        type Handler = H;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            let mut p = P::deserializer(req);
            let (idx, mty, _) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur).await;
                }
            };
            let res = self.handle_method(idx, &mut p).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "MyNodeProcessor",
                                MessageType::Exception,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_MyNode_server<F, H, SMAKE, SS>(
        proto: ProtocolID,
        handler: H,
        supa: SMAKE,
    ) -> Result<Box<dyn ThriftService<F, Handler = H> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: MyNode,
        SMAKE: Fn(ProtocolID) -> Result<SS, ApplicationException>,
        SS: ThriftService<F>,
        SS::Handler: ::module::server::MyRoot,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(MyNodeProcessor::<BinaryProtocol<F>, H, SS>::new(handler, supa(proto)?)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(MyNodeProcessor::<CompactProtocol<F>, H, SS>::new(handler, supa(proto)?)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }

    #[async_trait]
    pub trait MyLeaf: Send + Sync + 'static {
        async fn do_leaf(
            &self,
        ) -> Result<(), crate::services::my_leaf::DoLeafExn> {
            Err(crate::services::my_leaf::DoLeafExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyLeaf",
                    "do_leaf",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct MyLeafProcessor<P, H, SS> {
        service: H,
        supa: SS,
        _phantom: PhantomData<(P, H)>,
    }

    impl<P, H, SS> MyLeafProcessor<P, H, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyLeaf,
        SS: ThriftService<P::Frame>,
        SS::Handler: ::module::server::MyNode,
        P::Frame: Send + 'static,
    {
        pub fn new(service: H, supa: SS) -> Self {
            Self {
                service,
                supa,
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_do_leaf<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.do_leaf(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_leaf::DoLeafExn::Success(res)
                }
                Err(crate::services::my_leaf::DoLeafExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_leaf::DoLeafExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "do_leaf",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "do_leaf",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, SS> fbthrift::ServiceProcessor<P> for MyLeafProcessor<P, H, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyLeaf,
        SS: ThriftService<P::Frame>,
        SS::Handler: ::module::server::MyNode,
        P::Frame: Send + 'static,
    {
        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"do_leaf" => Ok(0usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            match idx {
                0usize => self.handle_do_leaf(p).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "MyLeafProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, SS> ThriftService<P::Frame> for MyLeafProcessor<P, H, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: MyLeaf,
        SS: ThriftService<P::Frame>,
        SS::Handler: ::module::server::MyNode,
        P::Frame: Send + 'static,
    {
        type Handler = H;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
        ) -> Result<ProtocolEncodedFinal<P>, failure::Error> {
            let mut p = P::deserializer(req);
            let (idx, mty, _) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur).await;
                }
            };
            let res = self.handle_method(idx, &mut p).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "MyLeafProcessor",
                                MessageType::Exception,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_MyLeaf_server<F, H, SMAKE, SS>(
        proto: ProtocolID,
        handler: H,
        supa: SMAKE,
    ) -> Result<Box<dyn ThriftService<F, Handler = H> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: MyLeaf,
        SMAKE: Fn(ProtocolID) -> Result<SS, ApplicationException>,
        SS: ThriftService<F>,
        SS::Handler: ::module::server::MyNode,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(MyLeafProcessor::<BinaryProtocol<F>, H, SS>::new(handler, supa(proto)?)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(MyLeafProcessor::<CompactProtocol<F>, H, SS>::new(handler, supa(proto)?)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
///     service MyService {
///         FunctionResponse myFunction(
///             1: FunctionRequest request,
///         ) throws {
///             1: StorageException s,
///             2: NotFoundException n,
///         ),
///
///         // other functions
///     }
///
///
/// we would end up with this mock object under crate::mock::MyService:
///
///     impl crate::client::MyService for MyService<'mock> {...}
///
///     pub struct MyService<'mock> {
///         pub myFunction: myFunction<'mock>,
///         // ...
///     }
///
///     impl dyn crate::client::MyService {
///         pub fn mock<'mock>() -> MyService<'mock>;
///     }
///
///     impl myFunction<'mock> {
///         // directly return the given success response
///         pub fn ret(&self, value: FunctionResponse);
///
///         // invoke closure to compute success response
///         pub fn mock(
///             &self,
///             mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///         );
///
///         // return one of the function's declared exceptions
///         pub fn throw<E>(&self, exception: E)
///         where
///             E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
///     }
///
///     impl From<StorageException> for MyFunctionExn {...}
///     impl From<NotFoundException> for MyFunctionExn {...}
///
///
/// The intended usage from a test would be:
///
///     use std::sync::Arc;
///     use thrift_if::client::MyService;
///
///     #[test]
///     fn test_my_client() {
///         let mock = Arc::new(MyService::mock());
///
///         // directly return a success response
///         let resp = FunctionResponse {...};
///         mock.myFunction.ret(resp);
///
///         // or give a closure to compute the success response
///         mock.myFunction.mock(|request| FunctionResponse {...});
///
///         // or throw one of the function's exceptions
///         mock.myFunction.throw(StorageException::ItFailed);
///
///         let out = do_the_thing(mock).wait().unwrap();
///         assert!(out.what_i_expected());
///     }
///
///     fn do_the_thing(
///         client: Arc<dyn MyService + Send + Sync + 'static>,
///     ) -> impl Future<Item = Out> {...}
pub mod mock {
    use std::marker::PhantomData;

    pub struct MyRoot<'mock> {
        pub do_root: my_root::do_root<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::MyRoot {
        pub fn mock<'mock>() -> MyRoot<'mock> {
            MyRoot {
                do_root: my_root::do_root::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    impl<'mock> super::client::MyRoot for MyRoot<'mock> {
        fn do_root(
            &self,
        ) -> Box<dyn futures::Future<Item = (), Error = failure::Error> + Send> {
            let mut closure = self.do_root.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            let result = closure();
            let fallible = result.map_err(|error| failure::Error::from(
                crate::errors::ErrorKind::MyRootDoRootError(error),
            ));
            Box::new(futures::future::result(fallible))
        }
    }

    mod my_root {
        use std::sync::Mutex;

        pub struct do_root<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::my_root::DoRootExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> do_root<'mock> {
            pub fn unimplemented() -> Self {
                do_root {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyRoot",
                        "do_root",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::my_root::DoRootExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }

    pub struct MyNode<'mock> {
        pub do_mid: my_node::do_mid<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::MyNode {
        pub fn mock<'mock>() -> MyNode<'mock> {
            MyNode {
                do_mid: my_node::do_mid::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    impl<'mock> super::client::MyNode for MyNode<'mock> {
        fn do_mid(
            &self,
        ) -> Box<dyn futures::Future<Item = (), Error = failure::Error> + Send> {
            let mut closure = self.do_mid.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            let result = closure();
            let fallible = result.map_err(|error| failure::Error::from(
                crate::errors::ErrorKind::MyNodeDoMidError(error),
            ));
            Box::new(futures::future::result(fallible))
        }
    }

    mod my_node {
        use std::sync::Mutex;

        pub struct do_mid<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::my_node::DoMidExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> do_mid<'mock> {
            pub fn unimplemented() -> Self {
                do_mid {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyNode",
                        "do_mid",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::my_node::DoMidExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }

    pub struct MyLeaf<'mock> {
        pub do_leaf: my_leaf::do_leaf<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::MyLeaf {
        pub fn mock<'mock>() -> MyLeaf<'mock> {
            MyLeaf {
                do_leaf: my_leaf::do_leaf::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    impl<'mock> super::client::MyLeaf for MyLeaf<'mock> {
        fn do_leaf(
            &self,
        ) -> Box<dyn futures::Future<Item = (), Error = failure::Error> + Send> {
            let mut closure = self.do_leaf.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            let result = closure();
            let fallible = result.map_err(|error| failure::Error::from(
                crate::errors::ErrorKind::MyLeafDoLeafError(error),
            ));
            Box::new(futures::future::result(fallible))
        }
    }

    mod my_leaf {
        use std::sync::Mutex;

        pub struct do_leaf<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::my_leaf::DoLeafExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> do_leaf<'mock> {
            pub fn unimplemented() -> Self {
                do_leaf {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyLeaf",
                        "do_leaf",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::my_leaf::DoLeafExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }
}

pub mod errors {
    use failure::Fail;
    use fbthrift::ApplicationException;

    #[derive(Debug, Fail)]
    pub enum ErrorKind {
        #[fail(display = "MyRoot::do_root failed with {:?}", _0)]
        MyRootDoRootError(crate::services::my_root::DoRootExn),
        #[fail(display = "MyNode::do_mid failed with {:?}", _0)]
        MyNodeDoMidError(crate::services::my_node::DoMidExn),
        #[fail(display = "MyLeaf::do_leaf failed with {:?}", _0)]
        MyLeafDoLeafError(crate::services::my_leaf::DoLeafExn),
        #[fail(display = "Application exception: {:?}", _0)]
        ApplicationException(ApplicationException),
    }

    impl From<ApplicationException> for ErrorKind {
        fn from(exn: ApplicationException) -> Self {
            ErrorKind::ApplicationException(exn).into()
        }
    }
}
