<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift enum:-
 * FooEnum
 */
enum FooEnum : int {
  BAR = 0;
  BAZ = 1;
}
type FooEnumType = FooEnum;

/**
 * Original thrift struct:-
 * BarStruct
 */
class BarStruct implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static darray<int, darray<string, mixed>> $_TSPEC = darray[
    1 => darray[
      'var' => 'e',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::I32,
      'key' => darray[
        'type' => \TType::I32,
        'enum' => 'FooEnum',
      ],
      'val' => darray[
        'type' => \TType::I32,
        'enum' => 'FooEnum',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'e' => 1,
  };
  const type TShape = shape(
    'e' => darray<FooEnum, FooEnum>,
    ...
  );
  const int STRUCTURAL_ID = 3918254246234734619;
  /**
   * Original thrift field:-
   * 1: map<enum module.FooEnum, enum module.FooEnum> e
   */
  public Map<FooEnum, FooEnum> $e;

  public function __construct(?Map<FooEnum, FooEnum> $e = null  ) {
    if ($e === null) {
      $this->e = Map {};
    } else {
      $this->e = $e;
    }
  }

  public function getName(): string {
    return 'BarStruct';
  }

  public static function __jsonArrayToShape(
    darray<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!C\contains_key($shape_data, 'e')) {
      $shape_data['e'] = Map {};
    }
    if (!is_array($shape_data['e'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['e'] as $key0 => $value1) {
      if (!($key0 is int)) {
        return null;
      }
      if (!($value1 is int)) {
        return null;
      }
      /* HH_IGNORE_ERROR[4005] */
      /* HH_IGNORE_ERROR[4063] */
      $shape_data['e'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->e = (new Map($shape['e']));
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'e' => $this->e->toDArray(),
    );
  }
}

