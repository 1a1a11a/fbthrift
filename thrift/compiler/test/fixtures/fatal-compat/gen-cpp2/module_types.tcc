/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union1_read(Protocol_* iprot, union1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ui();
          xfer += iprot->readI32(obj->mutable_ui());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_ud();
          xfer += iprot->readDouble(obj->mutable_ud());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_us();
          xfer += iprot->readString(obj->mutable_us());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ue();
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          obj->mutable_ue() = ( ::test_cpp2::cpp_reflection::enum1)ecast0;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union1_serializedSize(Protocol_ const* prot_, const union1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(obj->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1_serializedSizeZC(Protocol_ const* prot_, const union1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(obj->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1_write(Protocol_* prot_, const union1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union1");
  switch(obj->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->writeFieldBegin("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_ui());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->writeFieldBegin("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_ud());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->writeFieldBegin("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_us());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->writeFieldBegin("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_ue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union2_read(Protocol_* iprot, union2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui_2") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud_2") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us_2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue_2") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ui_2();
          xfer += iprot->readI32(obj->mutable_ui_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_ud_2();
          xfer += iprot->readDouble(obj->mutable_ud_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_us_2();
          xfer += iprot->readString(obj->mutable_us_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ue_2();
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          obj->mutable_ue_2() = ( ::test_cpp2::cpp_reflection::enum1)ecast1;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union2_serializedSize(Protocol_ const* prot_, const union2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(obj->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2_serializedSizeZC(Protocol_ const* prot_, const union2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(obj->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2_write(Protocol_* prot_, const union2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union2");
  switch(obj->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->writeFieldBegin("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_ui_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->writeFieldBegin("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_ud_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->writeFieldBegin("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_us_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->writeFieldBegin("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_ue_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union3_read(Protocol_* iprot, union3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui_3") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud_3") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us_3") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue_3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ui_3();
          xfer += iprot->readI32(obj->mutable_ui_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_ud_3();
          xfer += iprot->readDouble(obj->mutable_ud_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_us_3();
          xfer += iprot->readString(obj->mutable_us_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ue_3();
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          obj->mutable_ue_3() = ( ::test_cpp2::cpp_reflection::enum1)ecast2;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union3_serializedSize(Protocol_ const* prot_, const union3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(obj->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3_serializedSizeZC(Protocol_ const* prot_, const union3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(obj->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3_write(Protocol_* prot_, const union3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union3");
  switch(obj->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->writeFieldBegin("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_ui_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->writeFieldBegin("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_ud_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->writeFieldBegin("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_us_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->writeFieldBegin("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_ue_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structA_read(Protocol_* iprot, structA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "b") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->a);
          obj->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->b);
          obj->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structA_serializedSize(Protocol_ const* prot_, const structA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA_serializedSizeZC(Protocol_ const* prot_, const structA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA_write(Protocol_* prot_, const structA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structA");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t unionA_read(Protocol_* iprot, unionA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "i") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "d") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "s") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "e") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "a") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_i();
          xfer += iprot->readI32(obj->mutable_i());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_d();
          xfer += iprot->readDouble(obj->mutable_d());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_s();
          xfer += iprot->readString(obj->mutable_s());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_e();
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          obj->mutable_e() = ( ::test_cpp2::cpp_reflection::enum1)ecast3;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          obj->set_a();
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->mutable_a());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t unionA_serializedSize(Protocol_ const* prot_, const unionA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("unionA");
  switch(obj->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_i());
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_d());
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->serializedFieldSize("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_s());
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_e());
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &obj->get_a());
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t unionA_serializedSizeZC(Protocol_ const* prot_, const unionA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("unionA");
  switch(obj->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_i());
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_d());
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->serializedFieldSize("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_s());
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_e());
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &obj->get_a());
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t unionA_write(Protocol_* prot_, const unionA* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("unionA");
  switch(obj->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->writeFieldBegin("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_i());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_d());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->writeFieldBegin("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_s());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->writeFieldBegin("e", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_e());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &obj->get_a());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structB_read(Protocol_* iprot, structB* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "c") {
        fid = 1;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "d") {
        fid = 2;
        ftype = apache::thrift::protocol::T_BOOL;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(obj->c);
          obj->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(obj->d);
          obj->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structB_serializedSize(Protocol_ const* prot_, const structB* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB_serializedSizeZC(Protocol_ const* prot_, const structB* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB_write(Protocol_* prot_, const structB* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structB");
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(obj->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(obj->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structC_read(Protocol_* iprot, structC* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "b") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "c") {
        fid = 3;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "d") {
        fid = 4;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "e") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "f") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "g") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "h") {
        fid = 8;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "i") {
        fid = 9;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "j") {
        fid = 10;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "j1") {
        fid = 11;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "j2") {
        fid = 12;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "j3") {
        fid = 13;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "k") {
        fid = 14;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "k1") {
        fid = 15;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "k2") {
        fid = 16;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "k3") {
        fid = 17;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "l") {
        fid = 18;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "l1") {
        fid = 19;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "l2") {
        fid = 20;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "l3") {
        fid = 21;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "m1") {
        fid = 22;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "m2") {
        fid = 23;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "m3") {
        fid = 24;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "n1") {
        fid = 25;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "n2") {
        fid = 26;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "n3") {
        fid = 27;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "o1") {
        fid = 28;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "o2") {
        fid = 29;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "o3") {
        fid = 30;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->a);
          obj->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->b);
          obj->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(obj->c);
          obj->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(obj->d);
          obj->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          obj->e = ( ::test_cpp2::cpp_reflection::enum1)ecast4;
          obj->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          obj->f = ( ::test_cpp2::cpp_reflection::enum2)ecast5;
          obj->__isset.f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->g);
          obj->__isset.g = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::read(iprot, &obj->h);
          obj->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::read(iprot, &obj->i);
          obj->__isset.i = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j = std::vector<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->j.resize(_i_r + 1);
              xfer += iprot->readI32(obj->j[_i_r]);
            }
          }
          else {
            obj->j.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(obj->j[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j1 = std::vector<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->j1.resize(_i_r + 1);
              xfer += iprot->readI32(obj->j1[_i_r]);
            }
          }
          else {
            obj->j1.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(obj->j1[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j2 = std::vector< ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->j2.resize(_i_r + 1);
              int32_t ecast6;
              xfer += iprot->readI32(ecast6);
              obj->j2[_i_r] = ( ::test_cpp2::cpp_reflection::enum1)ecast6;
            }
          }
          else {
            obj->j2.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t ecast7;
              xfer += iprot->readI32(ecast7);
              obj->j2[_i_r] = ( ::test_cpp2::cpp_reflection::enum1)ecast7;
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j3 = std::vector< ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->j3.resize(_i_r + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->j3[_i_r]);
            }
          }
          else {
            obj->j3.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->j3[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k = std::set<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              obj->k.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              obj->k.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k1 = std::set<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              obj->k1.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              obj->k1.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k2 = std::set< ::test_cpp2::cpp_reflection::enum2>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::test_cpp2::cpp_reflection::enum2 _elem_r;
              int32_t ecast8;
              xfer += iprot->readI32(ecast8);
              _elem_r = ( ::test_cpp2::cpp_reflection::enum2)ecast8;
              obj->k2.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::test_cpp2::cpp_reflection::enum2 _elem_r;
              int32_t ecast9;
              xfer += iprot->readI32(ecast9);
              _elem_r = ( ::test_cpp2::cpp_reflection::enum2)ecast9;
              obj->k2.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k3 = std::set< ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::test_cpp2::cpp_reflection::structB _elem_r;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem_r);
              obj->k3.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::test_cpp2::cpp_reflection::structB _elem_r;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem_r);
              obj->k3.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l = std::map<int32_t, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
              int32_t& _val = obj->l[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l1 = std::map<int32_t, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
              int32_t& _val = obj->l1[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l2 = std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::enum1& _val = obj->l2[std::move(_key_index_rk_rv)];
              int32_t ecast10;
              xfer += iprot->readI32(ecast10);
              _val = ( ::test_cpp2::cpp_reflection::enum1)ecast10;
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              int32_t ecast11;
              xfer += iprot->readI32(ecast11);
              _val = ( ::test_cpp2::cpp_reflection::enum1)ecast11;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l2, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l3 = std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                int32_t _key;
                xfer += iprot->readI32(_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::structB& _val = obj->l3[std::move(_key_index_rk_rv)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readI32(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l3, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->m1 = std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::test_cpp2::cpp_reflection::enum1 _key;
                int32_t ecast12;
                xfer += iprot->readI32(ecast12);
                _key = ( ::test_cpp2::cpp_reflection::enum1)ecast12;
                return _key;
              }
              ();
              int32_t& _val = obj->m1[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              int32_t ecast13;
              xfer += iprot->readI32(ecast13);
              _key = ( ::test_cpp2::cpp_reflection::enum1)ecast13;
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->m1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.m1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->m2 = std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::test_cpp2::cpp_reflection::enum1 _key;
                int32_t ecast14;
                xfer += iprot->readI32(ecast14);
                _key = ( ::test_cpp2::cpp_reflection::enum1)ecast14;
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::enum2& _val = obj->m2[std::move(_key_index_rk_rv)];
              int32_t ecast15;
              xfer += iprot->readI32(ecast15);
              _val = ( ::test_cpp2::cpp_reflection::enum2)ecast15;
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              int32_t ecast16;
              xfer += iprot->readI32(ecast16);
              _key = ( ::test_cpp2::cpp_reflection::enum1)ecast16;
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              int32_t ecast17;
              xfer += iprot->readI32(ecast17);
              _val = ( ::test_cpp2::cpp_reflection::enum2)ecast17;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->m2, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.m2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->m3 = std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::test_cpp2::cpp_reflection::enum1 _key;
                int32_t ecast18;
                xfer += iprot->readI32(ecast18);
                _key = ( ::test_cpp2::cpp_reflection::enum1)ecast18;
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::structB& _val = obj->m3[std::move(_key_index_rk_rv)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              int32_t ecast19;
              xfer += iprot->readI32(ecast19);
              _key = ( ::test_cpp2::cpp_reflection::enum1)ecast19;
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->m3, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.m3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->n1 = std::map<std::string, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
              int32_t& _val = obj->n1[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->n1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.n1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->n2 = std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::enum1& _val = obj->n2[std::move(_key_index_rk_rv)];
              int32_t ecast20;
              xfer += iprot->readI32(ecast20);
              _val = ( ::test_cpp2::cpp_reflection::enum1)ecast20;
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              int32_t ecast21;
              xfer += iprot->readI32(ecast21);
              _val = ( ::test_cpp2::cpp_reflection::enum1)ecast21;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->n2, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.n2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 27:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->n3 = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::structB& _val = obj->n3[std::move(_key_index_rk_rv)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->n3, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.n3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 28:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->o1 = std::map< ::test_cpp2::cpp_reflection::structA, int32_t>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::test_cpp2::cpp_reflection::structA _key;
                xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key);
                return _key;
              }
              ();
              int32_t& _val = obj->o1[std::move(_key_index_rk_rv)];
              xfer += iprot->readI32(_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += iprot->readI32(_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->o1, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.o1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 29:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->o2 = std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::test_cpp2::cpp_reflection::structA _key;
                xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::enum1& _val = obj->o2[std::move(_key_index_rk_rv)];
              int32_t ecast22;
              xfer += iprot->readI32(ecast22);
              _val = ( ::test_cpp2::cpp_reflection::enum1)ecast22;
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              int32_t ecast23;
              xfer += iprot->readI32(ecast23);
              _val = ( ::test_cpp2::cpp_reflection::enum1)ecast23;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->o2, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.o2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 30:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->o3 = std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                 ::test_cpp2::cpp_reflection::structA _key;
                xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::structB& _val = obj->o3[std::move(_key_index_rk_rv)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->o3, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.o3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structC_serializedSize(Protocol_ const* prot_, const structC* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structC");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32((int32_t)obj->e);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32((int32_t)obj->f);
  xfer += prot_->serializedFieldSize("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->g);
  xfer += prot_->serializedFieldSize("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSize(prot_, &obj->h);
  xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSize(prot_, &obj->i);
  xfer += prot_->serializedFieldSize("j", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j.size());
  for (auto _iter_r = obj->j.begin(); _iter_r != obj->j.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j1.size());
  for (auto _iter_r = obj->j1.begin(); _iter_r != obj->j1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j2.size());
  for (auto _iter_r = obj->j2.begin(); _iter_r != obj->j2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->j3.size());
  for (auto _iter_r = obj->j3.begin(); _iter_r != obj->j3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("k", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k.size());
  for (auto _iter_r = obj->k.begin(); _iter_r != obj->k.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k1", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k1.size());
  for (auto _iter_r = obj->k1.begin(); _iter_r != obj->k1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k2", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k2.size());
  for (auto _iter_r = obj->k2.begin(); _iter_r != obj->k2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k3", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->k3.size());
  for (auto _iter_r = obj->k3.begin(); _iter_r != obj->k3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("l", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l.size());
  for (auto _iter_rk_rv = obj->l.begin(); _iter_rk_rv != obj->l.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l1.size());
  for (auto _iter_rk_rv = obj->l1.begin(); _iter_rk_rv != obj->l1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l2.size());
  for (auto _iter_rk_rv = obj->l2.begin(); _iter_rk_rv != obj->l2.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->l3.size());
  for (auto _iter_rk_rv = obj->l3.begin(); _iter_rk_rv != obj->l3.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m1.size());
  for (auto _iter_rk_rv = obj->m1.begin(); _iter_rk_rv != obj->m1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m2.size());
  for (auto _iter_rk_rv = obj->m2.begin(); _iter_rk_rv != obj->m2.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->m3.size());
  for (auto _iter_rk_rv = obj->m3.begin(); _iter_rk_rv != obj->m3.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n1.size());
  for (auto _iter_rk_rv = obj->n1.begin(); _iter_rk_rv != obj->n1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n2.size());
  for (auto _iter_rk_rv = obj->n2.begin(); _iter_rk_rv != obj->n2.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->n3.size());
  for (auto _iter_rk_rv = obj->n3.begin(); _iter_rk_rv != obj->n3.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o1.size());
  for (auto _iter_rk_rv = obj->o1.begin(); _iter_rk_rv != obj->o1.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o2.size());
  for (auto _iter_rk_rv = obj->o2.begin(); _iter_rk_rv != obj->o2.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_STRUCT, obj->o3.size());
  for (auto _iter_rk_rv = obj->o3.begin(); _iter_rk_rv != obj->o3.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structC_serializedSizeZC(Protocol_ const* prot_, const structC* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structC");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32((int32_t)obj->e);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32((int32_t)obj->f);
  xfer += prot_->serializedFieldSize("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->g);
  xfer += prot_->serializedFieldSize("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(prot_, &obj->h);
  xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(prot_, &obj->i);
  xfer += prot_->serializedFieldSize("j", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j.size());
  for (auto _iter_r = obj->j.begin(); _iter_r != obj->j.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j1.size());
  for (auto _iter_r = obj->j1.begin(); _iter_r != obj->j1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j2.size());
  for (auto _iter_r = obj->j2.begin(); _iter_r != obj->j2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->j3.size());
  for (auto _iter_r = obj->j3.begin(); _iter_r != obj->j3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("k", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k.size());
  for (auto _iter_r = obj->k.begin(); _iter_r != obj->k.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k1", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k1.size());
  for (auto _iter_r = obj->k1.begin(); _iter_r != obj->k1.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k2", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k2.size());
  for (auto _iter_r = obj->k2.begin(); _iter_r != obj->k2.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k3", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->k3.size());
  for (auto _iter_r = obj->k3.begin(); _iter_r != obj->k3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("l", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l.size());
  for (auto _iter_rk_rv = obj->l.begin(); _iter_rk_rv != obj->l.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l1.size());
  for (auto _iter_rk_rv = obj->l1.begin(); _iter_rk_rv != obj->l1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l2.size());
  for (auto _iter_rk_rv = obj->l2.begin(); _iter_rk_rv != obj->l2.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->l3.size());
  for (auto _iter_rk_rv = obj->l3.begin(); _iter_rk_rv != obj->l3.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m1.size());
  for (auto _iter_rk_rv = obj->m1.begin(); _iter_rk_rv != obj->m1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m2.size());
  for (auto _iter_rk_rv = obj->m2.begin(); _iter_rk_rv != obj->m2.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->m3.size());
  for (auto _iter_rk_rv = obj->m3.begin(); _iter_rk_rv != obj->m3.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n1.size());
  for (auto _iter_rk_rv = obj->n1.begin(); _iter_rk_rv != obj->n1.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n2.size());
  for (auto _iter_rk_rv = obj->n2.begin(); _iter_rk_rv != obj->n2.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->n3.size());
  for (auto _iter_rk_rv = obj->n3.begin(); _iter_rk_rv != obj->n3.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o1.size());
  for (auto _iter_rk_rv = obj->o1.begin(); _iter_rk_rv != obj->o1.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32(_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o2.size());
  for (auto _iter_rk_rv = obj->o2.begin(); _iter_rk_rv != obj->o2.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter_rk_rv->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_STRUCT, obj->o3.size());
  for (auto _iter_rk_rv = obj->o3.begin(); _iter_rk_rv != obj->o3.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structC_write(Protocol_* prot_, const structC* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structC");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(obj->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(obj->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("e", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32((int32_t)obj->e);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("f", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32((int32_t)obj->f);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->g);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::write(prot_, &obj->h);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::write(prot_, &obj->i);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->j.size());
  for (auto _iter_r = obj->j.begin(); _iter_r != obj->j.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->j1.size());
  for (auto _iter_r = obj->j1.begin(); _iter_r != obj->j1.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->j2.size());
  for (auto _iter_r = obj->j2.begin(); _iter_r != obj->j2.end(); ++_iter_r) {
    xfer += prot_->writeI32((int32_t)(*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, obj->j3.size());
  for (auto _iter_r = obj->j3.begin(); _iter_r != obj->j3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->k.size());
  for (auto _iter_r = obj->k.begin(); _iter_r != obj->k.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k1", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->k1.size());
  for (auto _iter_r = obj->k1.begin(); _iter_r != obj->k1.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k2", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->k2.size());
  for (auto _iter_r = obj->k2.begin(); _iter_r != obj->k2.end(); ++_iter_r) {
    xfer += prot_->writeI32((int32_t)(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k3", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, obj->k3.size());
  for (auto _iter_r = obj->k3.begin(); _iter_r != obj->k3.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l.size());
  for (auto _iter_rk_rv = obj->l.begin(); _iter_rk_rv != obj->l.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32(_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l1.size());
  for (auto _iter_rk_rv = obj->l1.begin(); _iter_rk_rv != obj->l1.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32(_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l2.size());
  for (auto _iter_rk_rv = obj->l2.begin(); _iter_rk_rv != obj->l2.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32(_iter_rk_rv->first);
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->l3.size());
  for (auto _iter_rk_rv = obj->l3.begin(); _iter_rk_rv != obj->l3.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m1.size());
  for (auto _iter_rk_rv = obj->m1.begin(); _iter_rk_rv != obj->m1.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m2.size());
  for (auto _iter_rk_rv = obj->m2.begin(); _iter_rk_rv != obj->m2.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->first);
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->m3.size());
  for (auto _iter_rk_rv = obj->m3.begin(); _iter_rk_rv != obj->m3.end(); ++_iter_rk_rv) {
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n1.size());
  for (auto _iter_rk_rv = obj->n1.begin(); _iter_rk_rv != obj->n1.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n2.size());
  for (auto _iter_rk_rv = obj->n2.begin(); _iter_rk_rv != obj->n2.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->n3.size());
  for (auto _iter_rk_rv = obj->n3.begin(); _iter_rk_rv != obj->n3.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o1.size());
  for (auto _iter_rk_rv = obj->o1.begin(); _iter_rk_rv != obj->o1.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter_rk_rv->first);
    xfer += prot_->writeI32(_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o2.size());
  for (auto _iter_rk_rv = obj->o2.begin(); _iter_rk_rv != obj->o2.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter_rk_rv->first);
    xfer += prot_->writeI32((int32_t)_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_STRUCT, obj->o3.size());
  for (auto _iter_rk_rv = obj->o3.begin(); _iter_rk_rv != obj->o3.end(); ++_iter_rk_rv) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct1_read(Protocol_* iprot, struct1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;
  bool isset_field3 = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field4") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "field5") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->field0);
          isset_field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->field1);
          obj->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          obj->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast24;
          obj->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          obj->field3 = ( ::test_cpp2::cpp_reflection::enum2)ecast25;
          isset_field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->field4);
          obj->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->field5);
          obj->__isset.field5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_field0) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field0' was not found in serialized data! Struct: struct1");
  }
  if (!isset_field3) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field3' was not found in serialized data! Struct: struct1");
  }
  return xfer;
}

template <class Protocol_>
uint32_t struct1_serializedSize(Protocol_ const* prot_, const struct1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->field3);
  if (obj->__isset.field4) {
    xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->field4);
  }
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1_serializedSizeZC(Protocol_ const* prot_, const struct1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->field3);
  if (obj->__isset.field4) {
    xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->field4);
  }
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1_write(Protocol_* prot_, const struct1* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct1");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->field0);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(obj->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)obj->field3);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field4) {
    xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->field4);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct2_read(Protocol_* iprot, struct2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->fieldA);
          obj->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->fieldB);
          obj->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          obj->fieldC = ( ::test_cpp2::cpp_reflection::enum1)ecast26;
          obj->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          obj->fieldD = ( ::test_cpp2::cpp_reflection::enum2)ecast27;
          obj->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->fieldE);
          obj->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->fieldF);
          obj->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &obj->fieldG);
          obj->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct2_serializedSize(Protocol_ const* prot_, const struct2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &obj->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2_serializedSizeZC(Protocol_ const* prot_, const struct2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &obj->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2_write(Protocol_* prot_, const struct2* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct2");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)obj->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &obj->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct3_read(Protocol_* iprot, struct3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldH") {
        fid = 8;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldI") {
        fid = 9;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldJ") {
        fid = 10;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldK") {
        fid = 11;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldL") {
        fid = 12;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldM") {
        fid = 13;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldN") {
        fid = 14;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldO") {
        fid = 15;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldP") {
        fid = 16;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldQ") {
        fid = 17;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldR") {
        fid = 18;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->fieldA);
          obj->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->fieldB);
          obj->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          obj->fieldC = ( ::test_cpp2::cpp_reflection::enum1)ecast28;
          obj->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast29;
          xfer += iprot->readI32(ecast29);
          obj->fieldD = ( ::test_cpp2::cpp_reflection::enum2)ecast29;
          obj->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->fieldE);
          obj->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->fieldF);
          obj->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &obj->fieldG);
          obj->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->fieldH);
          obj->__isset.fieldH = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldI = std::vector<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->fieldI.resize(_i_r + 1);
              xfer += iprot->readI32(obj->fieldI[_i_r]);
            }
          }
          else {
            obj->fieldI.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readI32(obj->fieldI[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldJ = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->fieldJ.resize(_i_r + 1);
              xfer += iprot->readString(obj->fieldJ[_i_r]);
            }
          }
          else {
            obj->fieldJ.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readString(obj->fieldJ[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldJ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldK = std::vector<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->fieldK.resize(_i_r + 1);
              xfer += iprot->readString(obj->fieldK[_i_r]);
            }
          }
          else {
            obj->fieldK.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += iprot->readString(obj->fieldK[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldL = std::vector< ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readListBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekList(); ++_i_r) {
              obj->fieldL.resize(_i_r + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->fieldL[_i_r]);
            }
          }
          else {
            obj->fieldL.resize(_size_r);
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->fieldL[_i_r]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldM = std::set<int32_t>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              obj->fieldM.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              int32_t _elem_r;
              xfer += iprot->readI32(_elem_r);
              obj->fieldM.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldN = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem_r;
              xfer += iprot->readString(_elem_r);
              obj->fieldN.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem_r;
              xfer += iprot->readString(_elem_r);
              obj->fieldN.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldO = std::set<std::string>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
              std::string _elem_r;
              xfer += iprot->readString(_elem_r);
              obj->fieldO.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
              std::string _elem_r;
              xfer += iprot->readString(_elem_r);
              obj->fieldO.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldO = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldP = std::set< ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_r;
          apache::thrift::protocol::TType _etype_r;
          xfer += iprot->readSetBegin(_etype_r, _size_r);
          uint32_t _i_r;
          if (_size_r == std::numeric_limits<uint32_t>::max()) {
            for (_i_r = 0; iprot->peekSet(); ++_i_r) {
               ::test_cpp2::cpp_reflection::structB _elem_r;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem_r);
              obj->fieldP.insert(std::move(_elem_r));
            }
          }
          else {
            for (_i_r = 0; _i_r < _size_r; ++_i_r) {
               ::test_cpp2::cpp_reflection::structB _elem_r;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem_r);
              obj->fieldP.insert(std::move(_elem_r));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->fieldQ = std::map<std::string,  ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::structA& _val = obj->fieldQ[std::move(_key_index_rk_rv)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->fieldQ, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.fieldQ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->fieldR = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size_rk_rv;
          apache::thrift::protocol::TType _ktype_rk_rv;
          apache::thrift::protocol::TType _vtype_rk_rv;
          xfer += iprot->readMapBegin(_ktype_rk_rv, _vtype_rk_rv, _size_rk_rv);
          uint32_t _i_rk_rv;
          if (_size_rk_rv == std::numeric_limits<uint32_t>::max()) {
            for (_i_rk_rv = 0; iprot->peekMap(); ++_i_rk_rv) {
              auto const _key_index_rk_rv = [&] {
                std::string _key;
                xfer += iprot->readString(_key);
                return _key;
              }
              ();
               ::test_cpp2::cpp_reflection::structB& _val = obj->fieldR[std::move(_key_index_rk_rv)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
          }
          else {
            auto const _kreader_rk_rv = [&xfer, &iprot](auto& _key) {
              xfer += iprot->readString(_key);
            }
            ;
            auto const _vreader_rk_rv = [&xfer, &iprot](auto& _val) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->fieldR, _size_rk_rv, _kreader_rk_rv, _vreader_rk_rv);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.fieldR = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct3_serializedSize(Protocol_ const* prot_, const struct3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &obj->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->fieldI.size());
  for (auto _iter_r = obj->fieldI.begin(); _iter_r != obj->fieldI.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldJ.size());
  for (auto _iter_r = obj->fieldJ.begin(); _iter_r != obj->fieldJ.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldK.size());
  for (auto _iter_r = obj->fieldK.begin(); _iter_r != obj->fieldK.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->fieldL.size());
  for (auto _iter_r = obj->fieldL.begin(); _iter_r != obj->fieldL.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->fieldM.size());
  for (auto _iter_r = obj->fieldM.begin(); _iter_r != obj->fieldM.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldN.size());
  for (auto _iter_r = obj->fieldN.begin(); _iter_r != obj->fieldN.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldO.size());
  for (auto _iter_r = obj->fieldO.begin(); _iter_r != obj->fieldO.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->fieldP.size());
  for (auto _iter_r = obj->fieldP.begin(); _iter_r != obj->fieldP.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldQ.size());
  for (auto _iter_rk_rv = obj->fieldQ.begin(); _iter_rk_rv != obj->fieldQ.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldR.size());
  for (auto _iter_rk_rv = obj->fieldR.begin(); _iter_rk_rv != obj->fieldR.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3_serializedSizeZC(Protocol_ const* prot_, const struct3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &obj->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->fieldI.size());
  for (auto _iter_r = obj->fieldI.begin(); _iter_r != obj->fieldI.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldJ.size());
  for (auto _iter_r = obj->fieldJ.begin(); _iter_r != obj->fieldJ.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldK.size());
  for (auto _iter_r = obj->fieldK.begin(); _iter_r != obj->fieldK.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->fieldL.size());
  for (auto _iter_r = obj->fieldL.begin(); _iter_r != obj->fieldL.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->fieldM.size());
  for (auto _iter_r = obj->fieldM.begin(); _iter_r != obj->fieldM.end(); ++_iter_r) {
    xfer += prot_->serializedSizeI32((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldN.size());
  for (auto _iter_r = obj->fieldN.begin(); _iter_r != obj->fieldN.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldO.size());
  for (auto _iter_r = obj->fieldO.begin(); _iter_r != obj->fieldO.end(); ++_iter_r) {
    xfer += prot_->serializedSizeString((*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->fieldP.size());
  for (auto _iter_r = obj->fieldP.begin(); _iter_r != obj->fieldP.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &(*_iter_r));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldQ.size());
  for (auto _iter_rk_rv = obj->fieldQ.begin(); _iter_rk_rv != obj->fieldQ.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldR.size());
  for (auto _iter_rk_rv = obj->fieldR.begin(); _iter_rk_rv != obj->fieldR.end(); ++_iter_rk_rv) {
    xfer += prot_->serializedSizeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3_write(Protocol_* prot_, const struct3* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct3");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)obj->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &obj->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->fieldH);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->fieldI.size());
  for (auto _iter_r = obj->fieldI.begin(); _iter_r != obj->fieldI.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, obj->fieldJ.size());
  for (auto _iter_r = obj->fieldJ.begin(); _iter_r != obj->fieldJ.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, obj->fieldK.size());
  for (auto _iter_r = obj->fieldK.begin(); _iter_r != obj->fieldK.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, obj->fieldL.size());
  for (auto _iter_r = obj->fieldL.begin(); _iter_r != obj->fieldL.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->fieldM.size());
  for (auto _iter_r = obj->fieldM.begin(); _iter_r != obj->fieldM.end(); ++_iter_r) {
    xfer += prot_->writeI32((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldN.size());
  for (auto _iter_r = obj->fieldN.begin(); _iter_r != obj->fieldN.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldO.size());
  for (auto _iter_r = obj->fieldO.begin(); _iter_r != obj->fieldO.end(); ++_iter_r) {
    xfer += prot_->writeString((*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, obj->fieldP.size());
  for (auto _iter_r = obj->fieldP.begin(); _iter_r != obj->fieldP.end(); ++_iter_r) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &(*_iter_r));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldQ.size());
  for (auto _iter_rk_rv = obj->fieldQ.begin(); _iter_rk_rv != obj->fieldQ.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldR.size());
  for (auto _iter_rk_rv = obj->fieldR.begin(); _iter_rk_rv != obj->fieldR.end(); ++_iter_rk_rv) {
    xfer += prot_->writeString(_iter_rk_rv->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter_rk_rv->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct4_read(Protocol_* iprot, struct4* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->field0);
          isset_field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->field1);
          obj->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast30;
          xfer += iprot->readI32(ecast30);
          obj->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast30;
          obj->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->field3);
          obj->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_field0) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field0' was not found in serialized data! Struct: struct4");
  }
  return xfer;
}

template <class Protocol_>
uint32_t struct4_serializedSize(Protocol_ const* prot_, const struct4* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct4");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &obj->field3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct4_serializedSizeZC(Protocol_ const* prot_, const struct4* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct4");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &obj->field3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct4_write(Protocol_* prot_, const struct4* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct4");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->field0);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(obj->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &obj->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct5_read(Protocol_* iprot, struct5* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "field4") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->field0);
          isset_field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->field1);
          obj->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast31;
          xfer += iprot->readI32(ecast31);
          obj->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast31;
          obj->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->field3);
          obj->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &obj->field4);
          obj->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_field0) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field0' was not found in serialized data! Struct: struct5");
  }
  return xfer;
}

template <class Protocol_>
uint32_t struct5_serializedSize(Protocol_ const* prot_, const struct5* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct5");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &obj->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &obj->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct5_serializedSizeZC(Protocol_ const* prot_, const struct5* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct5");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &obj->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &obj->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct5_write(Protocol_* prot_, const struct5* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct5");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->field0);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(obj->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &obj->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &obj->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_binary_read(Protocol_* iprot, struct_binary* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "bi") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(obj->bi);
          obj->__isset.bi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct_binary_serializedSize(Protocol_ const* prot_, const struct_binary* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_binary");
  xfer += prot_->serializedFieldSize("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(obj->bi);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_binary_serializedSizeZC(Protocol_ const* prot_, const struct_binary* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_binary");
  xfer += prot_->serializedFieldSize("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(obj->bi);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_binary_write(Protocol_* prot_, const struct_binary* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_binary");
  xfer += prot_->writeFieldBegin("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(obj->bi);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t annotated_read(Protocol_* iprot, annotated* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->a);
          obj->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t annotated_serializedSize(Protocol_ const* prot_, const annotated* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("annotated");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t annotated_serializedSizeZC(Protocol_ const* prot_, const annotated* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("annotated");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t annotated_write(Protocol_* prot_, const annotated* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("annotated");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union_with_special_names_read(Protocol_* iprot, union_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "get") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "getter") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "lists") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "maps") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name_to_value") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "names") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "prefix_tree") {
        fid = 8;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "sets") {
        fid = 9;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "setter") {
        fid = 10;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "str") {
        fid = 11;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "strings") {
        fid = 12;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "type") {
        fid = 13;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value") {
        fid = 14;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value_to_name") {
        fid = 15;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "values") {
        fid = 16;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "id") {
        fid = 17;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ids") {
        fid = 18;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptor") {
        fid = 19;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptors") {
        fid = 20;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "key") {
        fid = 21;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "keys") {
        fid = 22;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotation") {
        fid = 23;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotations") {
        fid = 24;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "member") {
        fid = 25;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "members") {
        fid = 26;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_get();
          xfer += iprot->readI32(obj->mutable_get());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_getter();
          xfer += iprot->readI32(obj->mutable_getter());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_lists();
          xfer += iprot->readI32(obj->mutable_lists());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_maps();
          xfer += iprot->readI32(obj->mutable_maps());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_name();
          xfer += iprot->readI32(obj->mutable_name());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_name_to_value();
          xfer += iprot->readI32(obj->mutable_name_to_value());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_names();
          xfer += iprot->readI32(obj->mutable_names());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_prefix_tree();
          xfer += iprot->readI32(obj->mutable_prefix_tree());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_sets();
          xfer += iprot->readI32(obj->mutable_sets());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_setter();
          xfer += iprot->readI32(obj->mutable_setter());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_str();
          xfer += iprot->readI32(obj->mutable_str());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_strings();
          xfer += iprot->readI32(obj->mutable_strings());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_type();
          xfer += iprot->readI32(obj->mutable_type());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_value();
          xfer += iprot->readI32(obj->mutable_value());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_value_to_name();
          xfer += iprot->readI32(obj->mutable_value_to_name());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_values();
          xfer += iprot->readI32(obj->mutable_values());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_id();
          xfer += iprot->readI32(obj->mutable_id());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ids();
          xfer += iprot->readI32(obj->mutable_ids());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_descriptor();
          xfer += iprot->readI32(obj->mutable_descriptor());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_descriptors();
          xfer += iprot->readI32(obj->mutable_descriptors());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_key();
          xfer += iprot->readI32(obj->mutable_key());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_keys();
          xfer += iprot->readI32(obj->mutable_keys());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_annotation();
          xfer += iprot->readI32(obj->mutable_annotation());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_annotations();
          xfer += iprot->readI32(obj->mutable_annotations());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_member();
          xfer += iprot->readI32(obj->mutable_member());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_members();
          xfer += iprot->readI32(obj->mutable_members());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names_serializedSize(Protocol_ const* prot_, const union_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union_with_special_names");
  switch(obj->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_get());
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->serializedSizeI32(obj->get_getter());
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->serializedSizeI32(obj->get_lists());
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32(obj->get_maps());
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->serializedSizeI32(obj->get_name());
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->serializedSizeI32(obj->get_name_to_value());
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->serializedSizeI32(obj->get_names());
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->serializedSizeI32(obj->get_prefix_tree());
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->serializedSizeI32(obj->get_sets());
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->serializedSizeI32(obj->get_setter());
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->serializedSizeI32(obj->get_str());
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->serializedSizeI32(obj->get_strings());
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->serializedSizeI32(obj->get_type());
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->serializedSizeI32(obj->get_value());
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->serializedSizeI32(obj->get_value_to_name());
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->serializedSizeI32(obj->get_values());
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->serializedSizeI32(obj->get_id());
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->serializedSizeI32(obj->get_ids());
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->serializedSizeI32(obj->get_descriptor());
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->serializedSizeI32(obj->get_descriptors());
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->serializedSizeI32(obj->get_key());
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->serializedSizeI32(obj->get_keys());
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->serializedSizeI32(obj->get_annotation());
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->serializedSizeI32(obj->get_annotations());
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->serializedSizeI32(obj->get_member());
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->serializedSizeI32(obj->get_members());
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names_serializedSizeZC(Protocol_ const* prot_, const union_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union_with_special_names");
  switch(obj->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_get());
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->serializedSizeI32(obj->get_getter());
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->serializedSizeI32(obj->get_lists());
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32(obj->get_maps());
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->serializedSizeI32(obj->get_name());
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->serializedSizeI32(obj->get_name_to_value());
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->serializedSizeI32(obj->get_names());
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->serializedSizeI32(obj->get_prefix_tree());
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->serializedSizeI32(obj->get_sets());
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->serializedSizeI32(obj->get_setter());
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->serializedSizeI32(obj->get_str());
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->serializedSizeI32(obj->get_strings());
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->serializedSizeI32(obj->get_type());
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->serializedSizeI32(obj->get_value());
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->serializedSizeI32(obj->get_value_to_name());
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->serializedSizeI32(obj->get_values());
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->serializedSizeI32(obj->get_id());
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->serializedSizeI32(obj->get_ids());
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->serializedSizeI32(obj->get_descriptor());
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->serializedSizeI32(obj->get_descriptors());
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->serializedSizeI32(obj->get_key());
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->serializedSizeI32(obj->get_keys());
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->serializedSizeI32(obj->get_annotation());
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->serializedSizeI32(obj->get_annotations());
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->serializedSizeI32(obj->get_member());
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->serializedSizeI32(obj->get_members());
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names_write(Protocol_* prot_, const union_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union_with_special_names");
  switch(obj->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->writeFieldBegin("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_get());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->writeFieldBegin("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->writeI32(obj->get_getter());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->writeFieldBegin("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->writeI32(obj->get_lists());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->writeFieldBegin("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32(obj->get_maps());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->writeI32(obj->get_name());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->writeFieldBegin("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->writeI32(obj->get_name_to_value());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->writeFieldBegin("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->writeI32(obj->get_names());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->writeFieldBegin("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->writeI32(obj->get_prefix_tree());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->writeFieldBegin("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->writeI32(obj->get_sets());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->writeFieldBegin("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->writeI32(obj->get_setter());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->writeFieldBegin("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->writeI32(obj->get_str());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->writeFieldBegin("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->writeI32(obj->get_strings());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->writeI32(obj->get_type());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->writeI32(obj->get_value());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->writeFieldBegin("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->writeI32(obj->get_value_to_name());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->writeI32(obj->get_values());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->writeI32(obj->get_id());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->writeFieldBegin("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->writeI32(obj->get_ids());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->writeFieldBegin("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->writeI32(obj->get_descriptor());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->writeFieldBegin("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->writeI32(obj->get_descriptors());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->writeI32(obj->get_key());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->writeFieldBegin("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->writeI32(obj->get_keys());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->writeFieldBegin("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->writeI32(obj->get_annotation());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->writeFieldBegin("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->writeI32(obj->get_annotations());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->writeFieldBegin("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->writeI32(obj->get_member());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->writeFieldBegin("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->writeI32(obj->get_members());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_with_special_names_read(Protocol_* iprot, struct_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "get") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "getter") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "lists") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "maps") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name_to_value") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "names") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "prefix_tree") {
        fid = 8;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "sets") {
        fid = 9;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "setter") {
        fid = 10;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "str") {
        fid = 11;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "strings") {
        fid = 12;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "type") {
        fid = 13;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value") {
        fid = 14;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value_to_name") {
        fid = 15;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "values") {
        fid = 16;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "id") {
        fid = 17;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ids") {
        fid = 18;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptor") {
        fid = 19;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptors") {
        fid = 20;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "key") {
        fid = 21;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "keys") {
        fid = 22;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotation") {
        fid = 23;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotations") {
        fid = 24;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "member") {
        fid = 25;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "members") {
        fid = 26;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->get);
          obj->__isset.get = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->getter);
          obj->__isset.getter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->lists);
          obj->__isset.lists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->maps);
          obj->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->name);
          obj->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->name_to_value);
          obj->__isset.name_to_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->names);
          obj->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->prefix_tree);
          obj->__isset.prefix_tree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->sets);
          obj->__isset.sets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->setter);
          obj->__isset.setter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->str);
          obj->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->strings);
          obj->__isset.strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->type);
          obj->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->value);
          obj->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->value_to_name);
          obj->__isset.value_to_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->values);
          obj->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->id);
          obj->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->ids);
          obj->__isset.ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->descriptor);
          obj->__isset.descriptor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->descriptors);
          obj->__isset.descriptors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->key);
          obj->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->keys);
          obj->__isset.keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->annotation);
          obj->__isset.annotation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->annotations);
          obj->__isset.annotations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->member);
          obj->__isset.member = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->members);
          obj->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names_serializedSize(Protocol_ const* prot_, const struct_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_special_names");
  xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->get);
  xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(obj->getter);
  xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(obj->lists);
  xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(obj->maps);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(obj->name);
  xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(obj->name_to_value);
  xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(obj->names);
  xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(obj->prefix_tree);
  xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->serializedSizeI32(obj->sets);
  xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(obj->setter);
  xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(obj->str);
  xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(obj->strings);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(obj->type);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(obj->value);
  xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(obj->value_to_name);
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(obj->values);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(obj->id);
  xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(obj->ids);
  xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(obj->descriptor);
  xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(obj->descriptors);
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(obj->key);
  xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(obj->keys);
  xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(obj->annotation);
  xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(obj->annotations);
  xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(obj->member);
  xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(obj->members);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names_serializedSizeZC(Protocol_ const* prot_, const struct_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_special_names");
  xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->get);
  xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(obj->getter);
  xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(obj->lists);
  xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(obj->maps);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(obj->name);
  xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(obj->name_to_value);
  xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(obj->names);
  xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(obj->prefix_tree);
  xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->serializedSizeI32(obj->sets);
  xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(obj->setter);
  xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(obj->str);
  xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(obj->strings);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(obj->type);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(obj->value);
  xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(obj->value_to_name);
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(obj->values);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(obj->id);
  xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(obj->ids);
  xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(obj->descriptor);
  xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(obj->descriptors);
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(obj->key);
  xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(obj->keys);
  xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(obj->annotation);
  xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(obj->annotations);
  xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(obj->member);
  xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(obj->members);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names_write(Protocol_* prot_, const struct_with_special_names* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_with_special_names");
  xfer += prot_->writeFieldBegin("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->get);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(obj->getter);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(obj->lists);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(obj->maps);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(obj->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(obj->name_to_value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->writeI32(obj->names);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(obj->prefix_tree);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->writeI32(obj->sets);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(obj->setter);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(obj->str);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->writeI32(obj->strings);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->writeI32(obj->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->writeI32(obj->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->writeI32(obj->value_to_name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(obj->values);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(obj->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->writeI32(obj->ids);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->writeI32(obj->descriptor);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->writeI32(obj->descriptors);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->writeI32(obj->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->writeI32(obj->keys);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->writeI32(obj->annotation);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->writeI32(obj->annotations);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->writeI32(obj->member);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->writeI32(obj->members);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_with_indirections_read(Protocol_* iprot, struct_with_indirections* obj) {
  (void)obj;
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "real") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fake") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "number") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "result") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->real);
          obj->__isset.real = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->fake);
          obj->__isset.fake = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->number.number);
          obj->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->result.foo().result());
          obj->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct_with_indirections_serializedSize(Protocol_ const* prot_, const struct_with_indirections* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_indirections");
  xfer += prot_->serializedFieldSize("real", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->real);
  xfer += prot_->serializedFieldSize("fake", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(obj->fake);
  xfer += prot_->serializedFieldSize("number", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(obj->number.number);
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(obj->result.foo().result());
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_indirections_serializedSizeZC(Protocol_ const* prot_, const struct_with_indirections* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_indirections");
  xfer += prot_->serializedFieldSize("real", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->real);
  xfer += prot_->serializedFieldSize("fake", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(obj->fake);
  xfer += prot_->serializedFieldSize("number", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(obj->number.number);
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(obj->result.foo().result());
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_indirections_write(Protocol_* prot_, const struct_with_indirections* obj) {
  (void)obj;
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_with_indirections");
  xfer += prot_->writeFieldBegin("real", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->real);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fake", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(obj->fake);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("number", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(obj->number.number);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(obj->result.foo().result());
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
