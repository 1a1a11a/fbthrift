#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport cTApplicationException
from thrift.py3.server cimport ServiceInterface
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)

cimport folly.futures
from folly.executor cimport get_executor

cimport my.namespacing.extend.test.extend.types
import my.namespacing.extend.test.extend.types
cimport hsmodule.services
import hsmodule.services
import hsmodule.types
cimport hsmodule.types

import asyncio
import functools
import sys
import traceback

from my.namespacing.extend.test.extend.services_wrapper cimport cExtendTestServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[cbool] move(
        cFollyPromise[cbool])

cdef class Promise_bool:
    cdef cFollyPromise[cbool] cPromise

    @staticmethod
    cdef create(cFollyPromise[cbool] cPromise):
        inst = <Promise_bool>Promise_bool.__new__(Promise_bool)
        inst.cPromise = move(cPromise)
        return inst

cdef api void call_cy_ExtendTestService_check(
    object self,
    cFollyPromise[cbool] cPromise,
    unique_ptr[hsmodule.types.cHsFoo] struct1
):  
    promise = Promise_bool.create(move(cPromise))
    arg_struct1 = hsmodule.types.HsFoo.create(hsmodule.types.move(struct1))
    asyncio.get_event_loop().create_task(
        ExtendTestService_check_coro(
            self,
            promise,
            arg_struct1
        )
    )

async def ExtendTestService_check_coro(
    object self,
    Promise_bool promise,
    struct1
):
    try:
      result = await self.check(
          struct1)
    except Exception as ex:
        print(
            "Unexpected error in service handler check:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)


cdef class ExtendTestServiceInterface(
    hsmodule.services.HsTestServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cExtendTestServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    async def check(
            self,
            struct1):
        raise NotImplementedError("async def check is not implemented")


