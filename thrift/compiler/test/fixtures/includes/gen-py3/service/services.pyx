#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport cTApplicationException
from thrift.py3.server cimport ServiceInterface
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)
cimport service.types
import service.types
import module.types
cimport module.types
import includes.types
cimport includes.types

import asyncio
import functools
import sys
import traceback

from service.services_wrapper cimport cMyServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[cFollyUnit] move(
        cFollyPromise[cFollyUnit])

cdef class Promise_void:
    cdef cFollyPromise[cFollyUnit] cPromise

    @staticmethod
    cdef create(cFollyPromise[cFollyUnit] cPromise):
        inst = <Promise_void>Promise_void.__new__(Promise_void)
        inst.cPromise = move(cPromise)
        return inst

cdef api void call_cy_MyService_query(
    object self,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[module.types.cMyStruct] s,
    unique_ptr[includes.types.cIncluded] i
) with gil:
    promise = Promise_void.create(move(cPromise))
    arg_s = module.types.MyStruct.create(module.types.move(s))
    arg_i = includes.types.Included.create(includes.types.move(i))
    asyncio.run_coroutine_threadsafe(
        MyService_query_coro(
            self,
            promise,
            arg_s,
            arg_i),
        loop=self.loop)

async def MyService_query_coro(
    object self,
    Promise_void promise,
    s,
    i
):
    try:
      result = await self.query(
          s,
          i)
    except Exception as ex:
        print(
            "Unexpected error in service handler query:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)


cdef class MyServiceInterface(
    ServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cMyServiceInterface(<PyObject *> self)

    async def query(
            self,
            s,
            i):
        raise NotImplementedError("async def query is not implemented")


