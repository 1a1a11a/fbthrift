#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    cSetOp as __cSetOp,
    richcmp as __richcmp,
    set_op as __set_op,
    setcmp as __setcmp,
    list_index as __list_index,
    list_count as __list_count,
    list_slice as __list_slice,
    list_getitem as __list_getitem,
    set_iter as __set_iter,
    map_iter as __map_iter,
    map_contains as __map_contains,
    map_getitem as __map_getitem,
    reference_shared_ptr as __reference_shared_ptr,
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as __iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport module.types as _module_types
import module.types as _module_types

cimport matching_struct_names.types_reflection as _types_reflection



@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):

    def __init__(
        MyStruct self, *,
        str field=None
    ):
        self._cpp_obj = __to_shared_ptr(cmove(MyStruct._make_instance(
          NULL,
          NULL,
          field,
        )))

    def __call__(
        MyStruct self,
        field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if field is ___NOTSET:
            __isNOTSET[0] = True
            field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if field is not None:
            if not isinstance(field, str):
                raise TypeError(f'field is not a { str !r}.')

        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(MyStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          field,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        bint* __isNOTSET,
        str field 
    ) except *:
        cdef unique_ptr[cMyStruct] c_inst
        if base_instance:
            c_inst = make_unique[cMyStruct](deref(base_instance))
        else:
            c_inst = make_unique[cMyStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and field is None:
                deref(c_inst).field_ref().assign(default_inst[cMyStruct]().field_ref().value())
                deref(c_inst).__isset.field = False
                pass

        if field is not None:
            deref(c_inst).field_ref().assign(cmove(thrift.py3.types.bytes_to_string(field.encode('utf-8'))))
            deref(c_inst).__isset.field = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("MyStruct", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    def __iter__(self):
        yield 'field', self.field

    @staticmethod
    cdef create(shared_ptr[cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def field(self):

        return (<bytes>deref(self._cpp_obj).field_ref().value()).decode('UTF-8')


    def __hash__(MyStruct self):
        return  super().__hash__()

    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cMyStruct](
            self._cpp_obj,
            (<MyStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStruct()

    cdef __iobuf.IOBuf _serialize(MyStruct self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStruct](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(MyStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        with nogil:
            needed = serializer.cdeserialize[cMyStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class Combo(thrift.py3.types.Struct):

    def __init__(
        Combo self, *,
        listOfOurMyStructLists=None,
        theirMyStructList=None,
        ourMyStructList=None,
        listOfTheirMyStructList=None
    ):
        self._cpp_obj = __to_shared_ptr(cmove(Combo._make_instance(
          NULL,
          NULL,
          listOfOurMyStructLists,
          theirMyStructList,
          ourMyStructList,
          listOfTheirMyStructList,
        )))

    def __call__(
        Combo self,
        listOfOurMyStructLists=__NOTSET,
        theirMyStructList=__NOTSET,
        ourMyStructList=__NOTSET,
        listOfTheirMyStructList=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[4] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if listOfOurMyStructLists is ___NOTSET:
            __isNOTSET[0] = True
            listOfOurMyStructLists = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if theirMyStructList is ___NOTSET:
            __isNOTSET[1] = True
            theirMyStructList = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if ourMyStructList is ___NOTSET:
            __isNOTSET[2] = True
            ourMyStructList = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if listOfTheirMyStructList is ___NOTSET:
            __isNOTSET[3] = True
            listOfTheirMyStructList = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        __fbthrift_inst = <Combo>Combo.__new__(Combo)
        __fbthrift_inst._cpp_obj = __to_shared_ptr(cmove(Combo._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          listOfOurMyStructLists,
          theirMyStructList,
          ourMyStructList,
          listOfTheirMyStructList,
        )))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cCombo] _make_instance(
        cCombo* base_instance,
        bint* __isNOTSET,
        object listOfOurMyStructLists ,
        object theirMyStructList ,
        object ourMyStructList ,
        object listOfTheirMyStructList 
    ) except *:
        cdef unique_ptr[cCombo] c_inst
        if base_instance:
            c_inst = make_unique[cCombo](deref(base_instance))
        else:
            c_inst = make_unique[cCombo]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and listOfOurMyStructLists is None:
                deref(c_inst).listOfOurMyStructLists_ref().assign(default_inst[cCombo]().listOfOurMyStructLists_ref().value())
                deref(c_inst).__isset.listOfOurMyStructLists = False
                pass

            if not __isNOTSET[1] and theirMyStructList is None:
                deref(c_inst).theirMyStructList_ref().assign(default_inst[cCombo]().theirMyStructList_ref().value())
                deref(c_inst).__isset.theirMyStructList = False
                pass

            if not __isNOTSET[2] and ourMyStructList is None:
                deref(c_inst).ourMyStructList_ref().assign(default_inst[cCombo]().ourMyStructList_ref().value())
                deref(c_inst).__isset.ourMyStructList = False
                pass

            if not __isNOTSET[3] and listOfTheirMyStructList is None:
                deref(c_inst).listOfTheirMyStructList_ref().assign(default_inst[cCombo]().listOfTheirMyStructList_ref().value())
                deref(c_inst).__isset.listOfTheirMyStructList = False
                pass

        if listOfOurMyStructLists is not None:
            deref(c_inst).listOfOurMyStructLists_ref().assign(deref(List__List__MyStruct(listOfOurMyStructLists)._cpp_obj))
            deref(c_inst).__isset.listOfOurMyStructLists = True
        if theirMyStructList is not None:
            deref(c_inst).theirMyStructList_ref().assign(deref(List__module_MyStruct(theirMyStructList)._cpp_obj))
            deref(c_inst).__isset.theirMyStructList = True
        if ourMyStructList is not None:
            deref(c_inst).ourMyStructList_ref().assign(deref(List__MyStruct(ourMyStructList)._cpp_obj))
            deref(c_inst).__isset.ourMyStructList = True
        if listOfTheirMyStructList is not None:
            deref(c_inst).listOfTheirMyStructList_ref().assign(deref(List__List__module_MyStruct(listOfTheirMyStructList)._cpp_obj))
            deref(c_inst).__isset.listOfTheirMyStructList = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    cdef object __fbthrift_isset(self):
        return thrift.py3.types._IsSet("Combo", {
          "listOfOurMyStructLists": deref(self._cpp_obj).listOfOurMyStructLists_ref().has_value(),
          "theirMyStructList": deref(self._cpp_obj).theirMyStructList_ref().has_value(),
          "ourMyStructList": deref(self._cpp_obj).ourMyStructList_ref().has_value(),
          "listOfTheirMyStructList": deref(self._cpp_obj).listOfTheirMyStructList_ref().has_value(),
        })

    def __iter__(self):
        yield 'listOfOurMyStructLists', self.listOfOurMyStructLists
        yield 'theirMyStructList', self.theirMyStructList
        yield 'ourMyStructList', self.ourMyStructList
        yield 'listOfTheirMyStructList', self.listOfTheirMyStructList

    @staticmethod
    cdef create(shared_ptr[cCombo] cpp_obj):
        __fbthrift_inst = <Combo>Combo.__new__(Combo)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    @property
    def listOfOurMyStructLists(self):

        if self.__field_listOfOurMyStructLists is None:
            self.__field_listOfOurMyStructLists = List__List__MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).listOfOurMyStructLists_ref().ref(), self._cpp_obj))
        return self.__field_listOfOurMyStructLists

    @property
    def theirMyStructList(self):

        if self.__field_theirMyStructList is None:
            self.__field_theirMyStructList = List__module_MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).theirMyStructList_ref().ref(), self._cpp_obj))
        return self.__field_theirMyStructList

    @property
    def ourMyStructList(self):

        if self.__field_ourMyStructList is None:
            self.__field_ourMyStructList = List__MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).ourMyStructList_ref().ref(), self._cpp_obj))
        return self.__field_ourMyStructList

    @property
    def listOfTheirMyStructList(self):

        if self.__field_listOfTheirMyStructList is None:
            self.__field_listOfTheirMyStructList = List__List__module_MyStruct.create(__reference_shared_ptr(deref(self._cpp_obj).listOfTheirMyStructList_ref().ref(), self._cpp_obj))
        return self.__field_listOfTheirMyStructList


    def __hash__(Combo self):
        return  super().__hash__()

    def __copy__(Combo self):
        cdef shared_ptr[cCombo] cpp_obj = make_shared[cCombo](
            deref(self._cpp_obj)
        )
        return Combo.create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self.__cmp_sametype(other, op)
        return __richcmp[cCombo](
            self._cpp_obj,
            (<Combo>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Combo()

    cdef __iobuf.IOBuf _serialize(Combo self, __Protocol proto):
        cdef unique_ptr[__iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cCombo](self._cpp_obj.get(), proto))
        return __iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _deserialize(Combo self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCombo]()
        with nogil:
            needed = serializer.cdeserialize[cCombo](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__MyStruct):
            self._cpp_obj = (<List__MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cMyStruct]] c_items):
        __fbthrift_inst = <List__MyStruct>List__MyStruct.__new__(List__MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__MyStruct self):
        cdef shared_ptr[vector[cMyStruct]] cpp_obj = make_shared[vector[cMyStruct]](
            deref(self._cpp_obj)
        )
        return List__MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cMyStruct]] c_inst = make_shared[vector[cMyStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, MyStruct):
                    raise TypeError(f"{item!r} is not of type 'MyStruct'")
                deref(c_inst).push_back(deref((<MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__MyStruct.create(
            __list_slice[vector[cMyStruct]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cMyStruct] citem
        __list_getitem(self._cpp_obj, index, citem)
        return MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, MyStruct):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cMyStruct citem = deref((<MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cMyStruct]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cMyStruct citem = deref((<MyStruct>item)._cpp_obj)
        return __list_count[vector[cMyStruct]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__MyStruct()


Sequence.register(List__MyStruct)

@__cython.auto_pickle(False)
cdef class List__List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__MyStruct):
            self._cpp_obj = (<List__List__MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__List__MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[cMyStruct]]] c_items):
        __fbthrift_inst = <List__List__MyStruct>List__List__MyStruct.__new__(List__List__MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__MyStruct self):
        cdef shared_ptr[vector[vector[cMyStruct]]] cpp_obj = make_shared[vector[vector[cMyStruct]]](
            deref(self._cpp_obj)
        )
        return List__List__MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[cMyStruct]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[cMyStruct]]] c_inst = make_shared[vector[vector[cMyStruct]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence['MyStruct']")
                if not isinstance(item, List__MyStruct):
                    item = List__MyStruct(item)
                deref(c_inst).push_back(deref((<List__MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__MyStruct.create(
            __list_slice[vector[vector[cMyStruct]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[cMyStruct]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__MyStruct):
            return item
        try:
            return List__MyStruct(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[cMyStruct] citem = deref((<List__MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cMyStruct]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[cMyStruct] citem = deref((<List__MyStruct>item)._cpp_obj)
        return __list_count[vector[vector[cMyStruct]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__MyStruct()


Sequence.register(List__List__MyStruct)

@__cython.auto_pickle(False)
cdef class List__module_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__module_MyStruct):
            self._cpp_obj = (<List__module_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__module_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[_module_types.cMyStruct]] c_items):
        __fbthrift_inst = <List__module_MyStruct>List__module_MyStruct.__new__(List__module_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__module_MyStruct self):
        cdef shared_ptr[vector[_module_types.cMyStruct]] cpp_obj = make_shared[vector[_module_types.cMyStruct]](
            deref(self._cpp_obj)
        )
        return List__module_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[_module_types.cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[vector[_module_types.cMyStruct]] c_inst = make_shared[vector[_module_types.cMyStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, _module_types.MyStruct):
                    raise TypeError(f"{item!r} is not of type _module_types.MyStruct")
                deref(c_inst).push_back(deref((<_module_types.MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__module_MyStruct.create(
            __list_slice[vector[_module_types.cMyStruct]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[_module_types.cMyStruct] citem
        __list_getitem(self._cpp_obj, index, citem)
        return _module_types.MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, _module_types.MyStruct):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef _module_types.cMyStruct citem = deref((<_module_types.MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[_module_types.cMyStruct]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef _module_types.cMyStruct citem = deref((<_module_types.MyStruct>item)._cpp_obj)
        return __list_count[vector[_module_types.cMyStruct]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__module_MyStruct()


Sequence.register(List__module_MyStruct)

@__cython.auto_pickle(False)
cdef class List__List__module_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__module_MyStruct):
            self._cpp_obj = (<List__List__module_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__List__module_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[_module_types.cMyStruct]]] c_items):
        __fbthrift_inst = <List__List__module_MyStruct>List__List__module_MyStruct.__new__(List__List__module_MyStruct)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__List__module_MyStruct self):
        cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] cpp_obj = make_shared[vector[vector[_module_types.cMyStruct]]](
            deref(self._cpp_obj)
        )
        return List__List__module_MyStruct.create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] c_inst = make_shared[vector[vector[_module_types.cMyStruct]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_module_types.MyStruct]")
                if not isinstance(item, List__module_MyStruct):
                    item = List__module_MyStruct(item)
                deref(c_inst).push_back(deref((<List__module_MyStruct>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__List__module_MyStruct.create(
            __list_slice[vector[vector[_module_types.cMyStruct]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[vector[_module_types.cMyStruct]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return List__module_MyStruct.create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, List__module_MyStruct):
            return item
        try:
            return List__module_MyStruct(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef vector[_module_types.cMyStruct] citem = deref((<List__module_MyStruct>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[_module_types.cMyStruct]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef vector[_module_types.cMyStruct] citem = deref((<List__module_MyStruct>item)._cpp_obj)
        return __list_count[vector[vector[_module_types.cMyStruct]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__module_MyStruct()


Sequence.register(List__List__module_MyStruct)

