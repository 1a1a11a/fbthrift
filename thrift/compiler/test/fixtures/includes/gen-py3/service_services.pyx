#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.lib.py3.thrift_server cimport (
  ServiceInterface,
  cTApplicationException
)
from thrift.lib.py3.folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)
cimport py3.service_types
import py3.service_types
cimport py3.module_types
cimport py3.module_services
import py3.module_types
import py3.module_services
cimport py3.includes_types
cimport py3.includes_services
import py3.includes_types
import py3.includes_services

import asyncio
import functools
import sys
import traceback

from py3.service_services_wrapper cimport cMyServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[cFollyUnit] move(
        cFollyPromise[cFollyUnit])

cdef class Promise_void:
    cdef cFollyPromise[cFollyUnit] cPromise

    @staticmethod
    cdef create(cFollyPromise[cFollyUnit] cPromise):
        inst = <Promise_void>Promise_void.__new__(Promise_void)
        inst.cPromise = move(cPromise)
        return inst

cdef api void call_cy_MyService_query(
    object self,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[py3.module_types.cMyStruct] s,
    unique_ptr[py3.includes_types.cIncluded] i
) with gil:
    promise = Promise_void.create(move(cPromise))
    arg_s = py3.module_types.MyStruct.create(py3.module_types.move(s))
    arg_i = py3.includes_types.Included.create(py3.includes_types.move(i))
    asyncio.run_coroutine_threadsafe(
        MyService_query_coro(
            self,
            promise,
            arg_s,
            arg_i),
        loop=self.loop)

async def MyService_query_coro(
    object self,
    Promise_void promise,
    s,
    i
):
    try:
      result = await self.query(
          s,
          i)
    except Exception as ex:
        print(
            "Unexpected error in service handler query:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)


cdef class MyServiceInterface(
    ServiceInterface
):
    def __cinit__(self):
        self.interface_wrapper = cMyServiceInterface(<PyObject *> self)

    async def query(
            self,
            s,
            i):
        raise NotImplementedError("async def query is not implemented")


