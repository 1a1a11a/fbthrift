#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from cython.operator cimport dereference as deref
from thrift.lib.py3.thrift_server cimport TException

from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum
cimport py3.module_types

class EmptyEnum(Enum):

cdef cEmptyEnum EmptyEnum_to_cpp(value):
class City(Enum):
    NYC = <int> (City__NYC)
    MPK = <int> (City__MPK)
    SEA = <int> (City__SEA)
    LON = <int> (City__LON)

cdef cCity City_to_cpp(value):
    if value == City.NYC:
        return City__NYC
    elif value == City.MPK:
        return City__MPK
    elif value == City.SEA:
        return City__SEA
    elif value == City.LON:
        return City__LON
class Company(Enum):
    FACEBOOK = <int> (Company__FACEBOOK)
    WHATSAPP = <int> (Company__WHATSAPP)
    OCULUS = <int> (Company__OCULUS)
    INSTAGRAM = <int> (Company__INSTAGRAM)

cdef cCompany Company_to_cpp(value):
    if value == Company.FACEBOOK:
        return Company__FACEBOOK
    elif value == Company.WHATSAPP:
        return Company__WHATSAPP
    elif value == Company.OCULUS:
        return Company__OCULUS
    elif value == Company.INSTAGRAM:
        return Company__INSTAGRAM


cdef class Internship:
    def __init__(
        self,
        int weeks,
        str title,
        object employer
    ):
        self.c_Internship = make_shared[cInternship]()
        deref(self.c_Internship).weeks = weeks
        if title is not None:
            deref(self.c_Internship).title = title.encode('UTF-8')
        
        
    @staticmethod
    cdef create(shared_ptr[cInternship] c_Internship):
        inst = <Internship>Internship.__new__(Internship)
        inst.c_Internship = c_Internship
        return inst

    @property
    def weeks(self):
        return self.c_Internship.get().weeks

    @property
    def title(self):
        return self.c_Internship.get().title.decode()

    @property
    def employer(self):
        cdef int value = <int> deref(self.c_Internship).employer
        return Company(value)
        


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Internship) and
                isinstance(other, Internship)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cInternship cself = deref((<Internship>self).c_Internship)
        cdef cInternship cother = deref((<Internship>other).c_Internship)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Internship self):
        return hash((
          self.weeks,
          self.title,
          self.employer,
        ))



cdef class UnEnumStruct:
    def __init__(
        self,
        object city
    ):
        self.c_UnEnumStruct = make_shared[cUnEnumStruct]()
        
        
    @staticmethod
    cdef create(shared_ptr[cUnEnumStruct] c_UnEnumStruct):
        inst = <UnEnumStruct>UnEnumStruct.__new__(UnEnumStruct)
        inst.c_UnEnumStruct = c_UnEnumStruct
        return inst

    @property
    def city(self):
        cdef int value = <int> deref(self.c_UnEnumStruct).city
        return City(value)
        


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, UnEnumStruct) and
                isinstance(other, UnEnumStruct)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cUnEnumStruct cself = deref((<UnEnumStruct>self).c_UnEnumStruct)
        cdef cUnEnumStruct cother = deref((<UnEnumStruct>other).c_UnEnumStruct)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(UnEnumStruct self):
        return hash((
          self.city,
        ))



cdef class Range:
    def __init__(
        self,
        int min,
        int max
    ):
        self.c_Range = make_shared[cRange]()
        deref(self.c_Range).min = min
        deref(self.c_Range).max = max
        
    @staticmethod
    cdef create(shared_ptr[cRange] c_Range):
        inst = <Range>Range.__new__(Range)
        inst.c_Range = c_Range
        return inst

    @property
    def min(self):
        return self.c_Range.get().min

    @property
    def max(self):
        return self.c_Range.get().max


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Range) and
                isinstance(other, Range)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cRange cself = deref((<Range>self).c_Range)
        cdef cRange cother = deref((<Range>other).c_Range)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Range self):
        return hash((
          self.min,
          self.max,
        ))





cdef class Map__string_i32:
    def __init__(self, items=None):

        self._map = make_shared[cmap[string,int32_t]]()
        if items:
            for key, item in items.items():
                deref(self._map).insert(cpair[string,int32_t](key.encode('UTF-8'), item))

    @staticmethod
    cdef create(shared_ptr[cmap[string,int32_t]] c_items):
        inst = <Map__string_i32>Map__string_i32.__new__(Map__string_i32)
        inst._map = c_items
        return inst

    def __getitem__(self, str key):
        cdef string ckey = key.encode('UTF-8')

        cdef cmap[string,int32_t].iterator iter = deref(self._map).find(ckey)
        if iter == deref(self._map).end():
            raise KeyError(str(key))
        cdef int32_t citem = deref(iter).second
        return citem

    def __len__(self):
        return deref(self._map).size()

    def __iter__(self):
        cdef string citem
        for pair in deref(self._map):
            citem = pair.first
            yield citem.decode()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple((tuple(self), tuple(self[k] for k in self))))

Mapping.register(Map__string_i32)

cdef class List__Map__string_i32:
    def __init__(self, items=None):
        self._vector = make_shared[vector[cmap[string,int32_t]]]()
        if items:
            for item in items:
                deref(self._vector).push_back(cmap[string,int32_t](deref(Map__string_i32(item)._map)))

    @staticmethod
    cdef create(shared_ptr[vector[cmap[string,int32_t]]] c_items):
        inst = <List__Map__string_i32>List__Map__string_i32.__new__(List__Map__string_i32)
        inst._vector = c_items
        return inst

    def __getitem__(self, int index):
        cdef cmap[string,int32_t] citem = deref(self._vector).at(index)
        return Map__string_i32.create(make_shared[cmap[string,int32_t]](citem))

    def __len__(self):
        return deref(self._vector).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))


Sequence.register(List__Map__string_i32)

cdef class List__Range:
    def __init__(self, items=None):
        self._vector = make_shared[vector[py3.module_types.cRange]]()
        if items:
            for item in items:
                deref(self._vector).push_back(deref((<py3.module_types.Range> item).c_Range))

    @staticmethod
    cdef create(shared_ptr[vector[py3.module_types.cRange]] c_items):
        inst = <List__Range>List__Range.__new__(List__Range)
        inst._vector = c_items
        return inst

    def __getitem__(self, int index):
        cdef py3.module_types.cRange citem = deref(self._vector).at(index)
        return py3.module_types.Range.create(make_shared[py3.module_types.cRange](citem))

    def __len__(self):
        return deref(self._vector).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))


Sequence.register(List__Range)

cdef class List__Internship:
    def __init__(self, items=None):
        self._vector = make_shared[vector[py3.module_types.cInternship]]()
        if items:
            for item in items:
                deref(self._vector).push_back(deref((<py3.module_types.Internship> item).c_Internship))

    @staticmethod
    cdef create(shared_ptr[vector[py3.module_types.cInternship]] c_items):
        inst = <List__Internship>List__Internship.__new__(List__Internship)
        inst._vector = c_items
        return inst

    def __getitem__(self, int index):
        cdef py3.module_types.cInternship citem = deref(self._vector).at(index)
        return py3.module_types.Internship.create(make_shared[py3.module_types.cInternship](citem))

    def __len__(self):
        return deref(self._vector).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))


Sequence.register(List__Internship)

cdef class List__string:
    def __init__(self, items=None):
        self._vector = make_shared[vector[string]]()
        if items:
            for item in items:
                deref(self._vector).push_back(item.encode('UTF-8'))

    @staticmethod
    cdef create(shared_ptr[vector[string]] c_items):
        inst = <List__string>List__string.__new__(List__string)
        inst._vector = c_items
        return inst

    def __getitem__(self, int index):
        cdef string citem = deref(self._vector).at(index)
        return citem.decode()

    def __len__(self):
        return deref(self._vector).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))


Sequence.register(List__string)

cdef class List__i32:
    def __init__(self, items=None):
        self._vector = make_shared[vector[int32_t]]()
        if items:
            for item in items:
                deref(self._vector).push_back(item)

    @staticmethod
    cdef create(shared_ptr[vector[int32_t]] c_items):
        inst = <List__i32>List__i32.__new__(List__i32)
        inst._vector = c_items
        return inst

    def __getitem__(self, int index):
        cdef int32_t citem = deref(self._vector).at(index)
        return citem

    def __len__(self):
        return deref(self._vector).size()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Iterable) and isinstance(other, Iterable)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for one, two in zip(self, other):
            if one != two:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))


Sequence.register(List__i32)

cdef class Set__i32:
    def __init__(self, items=None):
        self._set = make_shared[cset[int32_t]]()
        if items:
            for item in items:
                deref(self._set).insert(item)

    @staticmethod
    cdef create(shared_ptr[cset[int32_t]] c_items):
        inst = <Set__i32>Set__i32.__new__(Set__i32)
        inst._set = c_items
        return inst

    def __contains__(self, int item):
        return pbool(deref(self._set).count(item))

    def __len__(self):
        return deref(self._set).size()

    def __iter__(self):
        for citem in deref(self._set):
            yield citem

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Set) and isinstance(other, Set)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for item in self:
            if item not in other:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))

Set.register(Set__i32)

cdef class Set__string:
    def __init__(self, items=None):
        self._set = make_shared[cset[string]]()
        if items:
            for item in items:
                deref(self._set).insert(item.encode('UTF-8'))

    @staticmethod
    cdef create(shared_ptr[cset[string]] c_items):
        inst = <Set__string>Set__string.__new__(Set__string)
        inst._set = c_items
        return inst

    def __contains__(self, str item):
        return pbool(deref(self._set).count(item.encode('UTF-8')))

    def __len__(self):
        return deref(self._set).size()

    def __iter__(self):
        for citem in deref(self._set):
            yield citem.decode()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Set) and isinstance(other, Set)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for item in self:
            if item not in other:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple(self))

Set.register(Set__string)

cdef class Map__i32_i32:
    def __init__(self, items=None):

        self._map = make_shared[cmap[int32_t,int32_t]]()
        if items:
            for key, item in items.items():
                deref(self._map).insert(cpair[int32_t,int32_t](key, item))

    @staticmethod
    cdef create(shared_ptr[cmap[int32_t,int32_t]] c_items):
        inst = <Map__i32_i32>Map__i32_i32.__new__(Map__i32_i32)
        inst._map = c_items
        return inst

    def __getitem__(self, int key):
        cdef int32_t ckey = key

        cdef cmap[int32_t,int32_t].iterator iter = deref(self._map).find(ckey)
        if iter == deref(self._map).end():
            raise KeyError(str(key))
        cdef int32_t citem = deref(iter).second
        return citem

    def __len__(self):
        return deref(self._map).size()

    def __iter__(self):
        cdef int32_t citem
        for pair in deref(self._map):
            citem = pair.first
            yield citem

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple((tuple(self), tuple(self[k] for k in self))))

Mapping.register(Map__i32_i32)

cdef class Map__i32_string:
    def __init__(self, items=None):

        self._map = make_shared[cmap[int32_t,string]]()
        if items:
            for key, item in items.items():
                deref(self._map).insert(cpair[int32_t,string](key, item.encode('UTF-8')))

    @staticmethod
    cdef create(shared_ptr[cmap[int32_t,string]] c_items):
        inst = <Map__i32_string>Map__i32_string.__new__(Map__i32_string)
        inst._map = c_items
        return inst

    def __getitem__(self, int key):
        cdef int32_t ckey = key

        cdef cmap[int32_t,string].iterator iter = deref(self._map).find(ckey)
        if iter == deref(self._map).end():
            raise KeyError(str(key))
        cdef string citem = deref(iter).second
        return citem.decode()

    def __len__(self):
        return deref(self._map).size()

    def __iter__(self):
        cdef int32_t citem
        for pair in deref(self._map):
            citem = pair.first
            yield citem

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple((tuple(self), tuple(self[k] for k in self))))

Mapping.register(Map__i32_string)

cdef class Map__string_string:
    def __init__(self, items=None):

        self._map = make_shared[cmap[string,string]]()
        if items:
            for key, item in items.items():
                deref(self._map).insert(cpair[string,string](key.encode('UTF-8'), item.encode('UTF-8')))

    @staticmethod
    cdef create(shared_ptr[cmap[string,string]] c_items):
        inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
        inst._map = c_items
        return inst

    def __getitem__(self, str key):
        cdef string ckey = key.encode('UTF-8')

        cdef cmap[string,string].iterator iter = deref(self._map).find(ckey)
        if iter == deref(self._map).end():
            raise KeyError(str(key))
        cdef string citem = deref(iter).second
        return citem.decode()

    def __len__(self):
        return deref(self._map).size()

    def __iter__(self):
        cdef string citem
        for pair in deref(self._map):
            citem = pair.first
            yield citem.decode()

    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(type(self), type(other)))
        if not (isinstance(self, Mapping) and isinstance(other, Mapping)):
            return cop != 2
        if (len(self) != len(other)):
            return cop != 2

        for key in self:
            if key not in other:
                return cop != 2
            if other[key] != self[key]:
                return cop != 2

        return cop == 2

    def __hash__(self):
        return hash(tuple((tuple(self), tuple(self[k] for k in self))))

Mapping.register(Map__string_string)


myInt = 1337
name = cname().decode('UTF-8')
states = List__Map__string_i32.create(make_shared[vector[cmap[string,int32_t]]](cstates()))
x = 1.000000
y = 1000000.0
z = 1000000000.000000
instagram = Internship.create(make_shared[cInternship](cinstagram()))
kRanges = List__Range.create(make_shared[vector[py3.module_types.cRange]](ckRanges()))
internList = List__Internship.create(make_shared[vector[py3.module_types.cInternship]](cinternList()))
apostrophe = capostrophe().decode('UTF-8')
tripleApostrophe = ctripleApostrophe().decode('UTF-8')
quotationMark = cquotationMark().decode('UTF-8')
backslash = cbackslash().decode('UTF-8')
escaped_a = cescaped_a().decode('UTF-8')
char2ascii = Map__string_i32.create(make_shared[cmap[string,int32_t]](cchar2ascii()))
escaped_strings = List__string.create(make_shared[vector[string]](cescaped_strings()))
false_c = Fale
true_c = True
zero_byte = 0
zero16 = 0
zero32 = 0
zero64 = 0
zero_dot_zero = 0.000000
empty_string = cempty_string().decode('UTF-8')
empty_int_list = List__i32.create(make_shared[vector[int32_t]](cempty_int_list()))
empty_string_list = List__string.create(make_shared[vector[string]](cempty_string_list()))
empty_int_set = Set__i32.create(make_shared[cset[int32_t]](cempty_int_set()))
empty_string_set = Set__string.create(make_shared[cset[string]](cempty_string_set()))
empty_int_int_map = Map__i32_i32.create(make_shared[cmap[int32_t,int32_t]](cempty_int_int_map()))
empty_int_string_map = Map__i32_string.create(make_shared[cmap[int32_t,string]](cempty_int_string_map()))
empty_string_int_map = Map__string_i32.create(make_shared[cmap[string,int32_t]](cempty_string_int_map()))
empty_string_string_map = Map__string_string.create(make_shared[cmap[string,string]](cempty_string_string_map()))
