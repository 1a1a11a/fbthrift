/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/constants/gen-cpp2/module_types.h"
#include <thrift/lib/cpp2/protocol/Protocol.h>
namespace cpp2 {

struct module_constants {
  static constexpr int32_t const myInt_ = 1337;

  static constexpr int32_t myInt() {
    return myInt_;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const name_ = "Mark Zuckerberg";

  static constexpr char const * name() {
    return name_;
  }

  static std::vector<std::map<std::string, int32_t>> const& states() {
    static std::vector<std::map<std::string, int32_t>> const instance(std::initializer_list<std::map<std::string, int32_t>>{std::initializer_list<std::pair<const std::string, int32_t>>{{apache::thrift::StringTraits< std::string>::fromStringLiteral("San Diego"), 3211000},
    {apache::thrift::StringTraits< std::string>::fromStringLiteral("Sacramento"), 479600},
    {apache::thrift::StringTraits< std::string>::fromStringLiteral("SF"), 837400}},
    std::initializer_list<std::pair<const std::string, int32_t>>{{apache::thrift::StringTraits< std::string>::fromStringLiteral("New York"), 8406000},
    {apache::thrift::StringTraits< std::string>::fromStringLiteral("Albany"), 98400}}});
    return instance;
  }

  static constexpr double const x_ = 1.0;

  static constexpr double x() {
    return x_;
  }

  static constexpr double const y_ = 1000000;

  static constexpr double y() {
    return y_;
  }

  static constexpr double const z_ = 1000000000.0;

  static constexpr double z() {
    return z_;
  }

  static  ::cpp2::Internship const& instagram() {
    static  ::cpp2::Internship const instance( ::cpp2::Internship(::apache::thrift::detail::wrap_argument<1>(12), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("Software Engineer")), ::apache::thrift::detail::wrap_argument<3>( ::cpp2::Company::INSTAGRAM)));
    return instance;
  }

  static std::vector< ::cpp2::Range> const& kRanges() {
    static std::vector< ::cpp2::Range> const instance(std::initializer_list< ::cpp2::Range>{ ::cpp2::Range(::apache::thrift::detail::wrap_argument<1>(1), ::apache::thrift::detail::wrap_argument<2>(2)),
     ::cpp2::Range(::apache::thrift::detail::wrap_argument<1>(5), ::apache::thrift::detail::wrap_argument<2>(6))});
    return instance;
  }

  static std::vector< ::cpp2::Internship> const& internList() {
    static std::vector< ::cpp2::Internship> const instance(std::initializer_list< ::cpp2::Internship>{ ::cpp2::Internship(::apache::thrift::detail::wrap_argument<1>(12), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("Software Engineer")), ::apache::thrift::detail::wrap_argument<3>( ::cpp2::Company::INSTAGRAM)),
     ::cpp2::Internship(::apache::thrift::detail::wrap_argument<1>(10), ::apache::thrift::detail::wrap_argument<2>(apache::thrift::StringTraits< std::string>::fromStringLiteral("Sales Intern")), ::apache::thrift::detail::wrap_argument<3>( ::cpp2::Company::FACEBOOK))});
    return instance;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const apostrophe_ = "'";

  static constexpr char const * apostrophe() {
    return apostrophe_;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const tripleApostrophe_ = "'''";

  static constexpr char const * tripleApostrophe() {
    return tripleApostrophe_;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const quotationMark_ = "\"";

  static constexpr char const * quotationMark() {
    return quotationMark_;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const backslash_ = "\\";

  static constexpr char const * backslash() {
    return backslash_;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const escaped_a_ = "\x61";

  static constexpr char const * escaped_a() {
    return escaped_a_;
  }

  static std::map<std::string, int32_t> const& char2ascii() {
    static std::map<std::string, int32_t> const instance(std::initializer_list<std::pair<const std::string, int32_t>>{{apache::thrift::StringTraits< std::string>::fromStringLiteral("'"), 39},
    {apache::thrift::StringTraits< std::string>::fromStringLiteral("\""), 34},
    {apache::thrift::StringTraits< std::string>::fromStringLiteral("\\"), 92},
    {apache::thrift::StringTraits< std::string>::fromStringLiteral("\x61"), 97}});
    return instance;
  }

  static std::vector<std::string> const& escaped_strings() {
    static std::vector<std::string> const instance(std::initializer_list<std::string>{apache::thrift::StringTraits< std::string>::fromStringLiteral("\x61"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\xab"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\x6a"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\xa6"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\x61yyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\xabyyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\x6ayyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("\xa6yyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\x61"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\xab"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\x6a"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\xa6"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\x61yyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\xabyyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\x6ayyy"),
    apache::thrift::StringTraits< std::string>::fromStringLiteral("zzz\xa6yyy")});
    return instance;
  }

  static constexpr bool const false_c_ = false;

  static constexpr bool false_c() {
    return false_c_;
  }

  static constexpr bool const true_c_ = true;

  static constexpr bool true_c() {
    return true_c_;
  }

  static constexpr int8_t const zero_byte_ = (int8_t)0;

  static constexpr int8_t zero_byte() {
    return zero_byte_;
  }

  static constexpr int16_t const zero16_ = (int16_t)0;

  static constexpr int16_t zero16() {
    return zero16_;
  }

  static constexpr int32_t const zero32_ = 0;

  static constexpr int32_t zero32() {
    return zero32_;
  }

  static constexpr int64_t const zero64_ = 0LL;

  static constexpr int64_t zero64() {
    return zero64_;
  }

  static constexpr double const zero_dot_zero_ = 0.0;

  static constexpr double zero_dot_zero() {
    return zero_dot_zero_;
  }
  // consider using folly::StringPiece instead of std::string whenever possible
  // to referencing this statically allocated string constant, in order to
  // prevent unnecessary allocations

  static constexpr char const * const empty_string_ = "";

  static constexpr char const * empty_string() {
    return empty_string_;
  }

  static std::vector<int32_t> const& empty_int_list() {
    static std::vector<int32_t> const instance;
    return instance;
  }

  static std::vector<std::string> const& empty_string_list() {
    static std::vector<std::string> const instance;
    return instance;
  }

  static std::set<int32_t> const& empty_int_set() {
    static std::set<int32_t> const instance;
    return instance;
  }

  static std::set<std::string> const& empty_string_set() {
    static std::set<std::string> const instance;
    return instance;
  }

  static std::map<int32_t, int32_t> const& empty_int_int_map() {
    static std::map<int32_t, int32_t> const instance;
    return instance;
  }

  static std::map<int32_t, std::string> const& empty_int_string_map() {
    static std::map<int32_t, std::string> const instance;
    return instance;
  }

  static std::map<std::string, int32_t> const& empty_string_int_map() {
    static std::map<std::string, int32_t> const instance;
    return instance;
  }

  static std::map<std::string, std::string> const& empty_string_string_map() {
    static std::map<std::string, std::string> const instance;
    return instance;
  }
};

} // cpp2
