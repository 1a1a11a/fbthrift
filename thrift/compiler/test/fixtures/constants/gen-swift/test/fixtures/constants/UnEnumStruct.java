/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.constants;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="UnEnumStruct", builder=UnEnumStruct.Builder.class)
public final class UnEnumStruct {
    @ThriftConstructor
    public UnEnumStruct(
        @ThriftField(value=1, name="city", requiredness=Requiredness.NONE) final test.fixtures.constants.City city
    ) {
        this.city = city;
    }
    
    @ThriftConstructor
    protected UnEnumStruct() {
      this.city = null;
    }
    
    public static class Builder {
        private test.fixtures.constants.City city;
        @ThriftField(value=1, name="city", requiredness=Requiredness.NONE)
        public Builder setCity(test.fixtures.constants.City city) {
            this.city = city;
            return this;
        }
    
        public Builder() { }
        public Builder(UnEnumStruct other) {
            this.city = other.city;
        }
    
        @ThriftConstructor
        public UnEnumStruct build() {
            return new UnEnumStruct (
                this.city
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("UnEnumStruct");
    private final test.fixtures.constants.City city;
    public static final int _CITY = 1;
    private static final TField CITY_FIELD_DESC = new TField("city", TType.I32, (short)1);

    
    @ThriftField(value=1, name="city", requiredness=Requiredness.NONE)
    public test.fixtures.constants.City getCity() { return city; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("city", city)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        UnEnumStruct other = (UnEnumStruct)o;
    
        return
            Objects.equals(city, other.city) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            city
        });
    }
    
    
      // Currently, the read0 method cannot read metadatamap for JSON styled serialization.
      // Perhaps, it will be implemented in the future!
    public static UnEnumStruct read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin();
      UnEnumStruct.Builder builder = new UnEnumStruct.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _CITY:
          if (__field.type == TType.I32) {
            test.fixtures.constants.City city = test.fixtures.constants.City.fromInteger(oprot.readI32());
            builder.setCity(city);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CITY_FIELD_DESC);
      oprot.writeI32(this.city == null ? 0 : this.city.getValue());
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
