/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.constants;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("union1")
public final class Union1 {
    private Object value;
    private short id;
    private String name;
    
    @ThriftConstructor
    public Union1() {
    }
    
    @ThriftConstructor
    @Deprecated
    public Union1(final int i) {
        this.value = i;
        this.id = 1;
        this.name = "i";
    }
    
    @ThriftConstructor
    @Deprecated
    public Union1(final double d) {
        this.value = d;
        this.id = 2;
        this.name = "d";
    }
    
    public static Union1 fromI(final int i) {
        Union1 res = new Union1();
        res.value = i;
        res.id = 1;
        res.name = "i";
        return res;
    }
    
    public static Union1 fromD(final double d) {
        Union1 res = new Union1();
        res.value = d;
        res.id = 2;
        res.name = "d";
        return res;
    }
    

    @ThriftField(value=1, name="i", requiredness=Requiredness.NONE)
    public int getI() {
        if (this.id != 1) {
            throw new IllegalStateException("Not a i element!");
        }
        return (int) value;
    }

    public boolean isSetI() {
        return this.id == 1;
    }

    @ThriftField(value=2, name="d", requiredness=Requiredness.NONE)
    public double getD() {
        if (this.id != 2) {
            throw new IllegalStateException("Not a d element!");
        }
        return (double) value;
    }

    public boolean isSetD() {
        return this.id == 2;
    }

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return this.name;
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", name)
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Union1 other = (Union1)o;

        return Objects.equals(this.id, other.id)
                && Objects.deepEquals(this.value, other.value)
                && Objects.equals(this.name, other.name);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
            name
        });
    }
}
