/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.constants;

import com.facebook.swift.codec.*;
import com.google.common.collect.*;
import java.util.*;

@SwiftGenerated
public final class Constants {
    private Constants() {}

    public static final int MyInt = 1337;

    public static final String Name = "Mark Zuckerberg";

    public static final List<Map<String, Integer>> States = ImmutableList.<Map<String, Integer>>builder()
        .add(ImmutableMap.<String, Integer>builder()
        .put("San Diego", 3211000)
        .put("Sacramento", 479600)
        .put("SF", 837400)
        .build())
        .add(ImmutableMap.<String, Integer>builder()
        .put("New York", 8406000)
        .put("Albany", 98400)
        .build())
        .build();

    public static final double X = 1;

    public static final double Y = 1000000.0;

    public static final double Z = 1000000000;

    public static final double ZeroDoubleValue = 0;

    public static final double LongDoubleValue = 2.59961000990301e-05;

    public static final test.fixtures.constants.Internship Instagram = new test.fixtures.constants.Internship.Builder().set(12).set("Software Engineer").set(test.fixtures.constants.Company.fromInteger(3)).build();

    public static final List<test.fixtures.constants.Range> KRanges = ImmutableList.<test.fixtures.constants.Range>builder()
        .add(new test.fixtures.constants.Range.Builder().set(1).set(2).build())
        .add(new test.fixtures.constants.Range.Builder().set(5).set(6).build())
        .build();

    public static final List<test.fixtures.constants.Internship> InternList = ImmutableList.<test.fixtures.constants.Internship>builder()
        .add(test.fixtures.constants.Constants.Instagram)
        .add(new test.fixtures.constants.Internship.Builder().set(10).set("Sales Intern").set(test.fixtures.constants.Company.fromInteger(0)).build())
        .build();

    public static final test.fixtures.constants.Struct1 Pod0 = new test.fixtures.constants.Struct1.Builder().build();

    public static final test.fixtures.constants.Struct1 Pod1 = new test.fixtures.constants.Struct1.Builder().set(10).set("foo").build();

    public static final test.fixtures.constants.Struct2 Pod2 = new test.fixtures.constants.Struct2.Builder().set(98).set("gaz").set(new test.fixtures.constants.Struct1.Builder().set(12).set("bar").build()).set(ImmutableList.<Integer>builder()
        .add(11)
        .add(22)
        .add(33)
        .build()).build();

    public static final test.fixtures.constants.Struct3 Pod3 = new test.fixtures.constants.Struct3.Builder().set("abc").set(456).set(new test.fixtures.constants.Struct2.Builder().set(888).set(new test.fixtures.constants.Struct1.Builder().set("gaz").build()).set(ImmutableList.<Integer>builder()
        .add(1)
        .add(2)
        .add(3)
        .build()).build()).build();

    public static final test.fixtures.constants.Union1 U11 = new test.fixtures.constants.Union1(97);

    public static final test.fixtures.constants.Union1 U12 = new test.fixtures.constants.Union1(5.6);

    public static final test.fixtures.constants.Union1 U13 = new test.fixtures.constants.Union1();

    public static final test.fixtures.constants.Union2 U21 = new test.fixtures.constants.Union2(51);

    public static final test.fixtures.constants.Union2 U22 = new test.fixtures.constants.Union2(6.7);

    public static final test.fixtures.constants.Union2 U23 = new test.fixtures.constants.Union2(new test.fixtures.constants.Struct1.Builder().set(8).set("abacabb").build());

    public static final test.fixtures.constants.Union2 U24 = new test.fixtures.constants.Union2(new test.fixtures.constants.Union1(43));

    public static final test.fixtures.constants.Union2 U25 = new test.fixtures.constants.Union2(new test.fixtures.constants.Union1(9.8));

    public static final test.fixtures.constants.Union2 U26 = new test.fixtures.constants.Union2(new test.fixtures.constants.Union1());

    public static final String Apostrophe = "'";

    public static final String TripleApostrophe = "'''";

    public static final String QuotationMark = "\"";

    public static final String Backslash = "\\";

    public static final String EscapedA = "\u0061";

    public static final Map<String, Integer> Char2ascii = ImmutableMap.<String, Integer>builder()
        .put("'", 39)
        .put("\"", 34)
        .put("\\", 92)
        .put("\u0061", 97)
        .build();

    public static final List<String> EscapedStrings = ImmutableList.<String>builder()
        .add("\u0061")
        .add("\u00ab")
        .add("\u006a")
        .add("\u00a6")
        .add("\u0061yyy")
        .add("\u00abyyy")
        .add("\u006ayyy")
        .add("\u00a6yyy")
        .add("zzz\u0061")
        .add("zzz\u00ab")
        .add("zzz\u006a")
        .add("zzz\u00a6")
        .add("zzz\u0061yyy")
        .add("zzz\u00abyyy")
        .add("zzz\u006ayyy")
        .add("zzz\u00a6yyy")
        .build();

    public static final boolean FalseC = false;

    public static final boolean TrueC = true;

    public static final byte ZeroByte = 0;

    public static final short Zero16 = 0;

    public static final int Zero32 = 0;

    public static final long Zero64 = 0L;

    public static final double ZeroDotZero = 0;

    public static final String EmptyString = "";

    public static final List<Integer> EmptyIntList = ImmutableList.<Integer>builder()
        .build();

    public static final List<String> EmptyStringList = ImmutableList.<String>builder()
        .build();

    public static final Set<Integer> EmptyIntSet = ImmutableSet.<Integer>builder()
        .build();

    public static final Set<String> EmptyStringSet = ImmutableSet.<String>builder()
        .build();

    public static final Map<Integer, Integer> EmptyIntIntMap = ImmutableMap.<Integer, Integer>builder()
        .build();

    public static final Map<Integer, String> EmptyIntStringMap = ImmutableMap.<Integer, String>builder()
        .build();

    public static final Map<String, Integer> EmptyStringIntMap = ImmutableMap.<String, Integer>builder()
        .build();

    public static final Map<String, String> EmptyStringStringMap = ImmutableMap.<String, String>builder()
        .build();
}
