/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/deprecated/gen-cpp2/module_types.h"

#include "thrift/compiler/test/fixtures/deprecated/gen-cpp2/module_types.tcc"


#include <algorithm>

namespace cpp2 {

void House::__clear() {
  id = 0;
  houseName = std::string();
  houseColors.clear();
  __isset.__clear();
}

bool House::operator==(const House& rhs) const {
  if (!((id == rhs.id))) {
    return false;
  }
  if (!((houseName == rhs.houseName))) {
    return false;
  }
  if (__isset.houseColors != rhs.__isset.houseColors) {
    return false;
  }
  else if (__isset.houseColors && !((houseColors == rhs.houseColors))) {
    return false;
  }
  return true;
}

const std::set< ::cpp2::ColorID>* House::get_houseColors() const& {
  return __isset.houseColors ? std::addressof(houseColors) : nullptr;
}

std::set< ::cpp2::ColorID>* House::get_houseColors() & {
  return __isset.houseColors ? std::addressof(houseColors) : nullptr;
}

void swap(House& a, House& b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.houseName, b.houseName);
  swap(a.houseColors, b.houseColors);
  swap(a.__isset, b.__isset);
}

template uint32_t House::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t House::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t House::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t House::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t House::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t House::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t House::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t House::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Field::__clear() {
  id = 0;
  fieldType = 5;
  __isset.__clear();
}

bool Field::operator==(const Field& rhs) const {
  if (!((id == rhs.id))) {
    return false;
  }
  if (!((fieldType == rhs.fieldType))) {
    return false;
  }
  return true;
}

void swap(Field& a, Field& b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.fieldType, b.fieldType);
  swap(a.__isset, b.__isset);
}

template uint32_t Field::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Field::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Field::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Field::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Field::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Field::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Field::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Field::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2