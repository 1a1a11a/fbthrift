/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace cpp2 {

class struct_dep;
class struct_dep_msg;

class FOLLY_DEPRECATED(
  "class struct_dep is deprecated"
) struct_dep : private apache::thrift::detail::st::ComparisonOperators<struct_dep> {
 public:

  struct_dep() :
      a(0),
      b(0) {}
  // FragileConstructor for use in initialization lists only

  struct_dep(apache::thrift::FragileConstructor, int32_t a__arg, double b__arg) :
      a(std::move(a__arg)),
      b(std::move(b__arg)) {
    __isset.a = true;
    __isset.b = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  struct_dep(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    struct_dep(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    a = arg.move();
    __isset.a = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  struct_dep(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    struct_dep(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    b = arg.move();
    __isset.b = true;
  }

  struct_dep(struct_dep&&) = default;

  struct_dep(const struct_dep&) = default;

  struct_dep& operator=(struct_dep&&) = default;

  struct_dep& operator=(const struct_dep&) = default;
  void __clear();

  virtual ~struct_dep() throw() {}

  int32_t a;
  double b;

  struct __isset {
    void __clear() {
      a = false;
      b = false;
    }

    bool a = false;
    bool b = false;
  } __isset;
  bool operator==(const struct_dep& rhs) const;

  bool operator < (const struct_dep& rhs) const {
    if (!(a == rhs.a)) {
      return a < rhs.a;
    }
    if (!(b == rhs.b)) {
      return b < rhs.b;
    }
    return false;
  }

  int32_t get_a() const {
    return a;
  }

  int32_t& set_a(int32_t a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  double get_b() const {
    return b;
  }

  double& set_b(double b_) {
    b = b_;
    __isset.b = true;
    return b;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(struct_dep& a, struct_dep& b);
extern template uint32_t struct_dep::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t struct_dep::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t struct_dep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t struct_dep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t struct_dep::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t struct_dep::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t struct_dep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t struct_dep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::struct_dep>::clear( ::cpp2::struct_dep* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::struct_dep>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep>::write(Protocol* proto,  ::cpp2::struct_dep const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep>::read(Protocol* proto,  ::cpp2::struct_dep* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep>::serializedSize(Protocol const* proto,  ::cpp2::struct_dep const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep>::serializedSizeZC(Protocol const* proto,  ::cpp2::struct_dep const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

class FOLLY_DEPRECATED(
  "No longer supported"
) struct_dep_msg : private apache::thrift::detail::st::ComparisonOperators<struct_dep_msg> {
 public:

  struct_dep_msg() :
      a(0),
      b(0) {}
  // FragileConstructor for use in initialization lists only

  struct_dep_msg(apache::thrift::FragileConstructor, int32_t a__arg, double b__arg) :
      a(std::move(a__arg)),
      b(std::move(b__arg)) {
    __isset.a = true;
    __isset.b = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  struct_dep_msg(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    struct_dep_msg(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    a = arg.move();
    __isset.a = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  struct_dep_msg(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    struct_dep_msg(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    b = arg.move();
    __isset.b = true;
  }

  struct_dep_msg(struct_dep_msg&&) = default;

  struct_dep_msg(const struct_dep_msg&) = default;

  struct_dep_msg& operator=(struct_dep_msg&&) = default;

  struct_dep_msg& operator=(const struct_dep_msg&) = default;
  void __clear();

  virtual ~struct_dep_msg() throw() {}

  int32_t a;
  double b;

  struct __isset {
    void __clear() {
      a = false;
      b = false;
    }

    bool a = false;
    bool b = false;
  } __isset;
  bool operator==(const struct_dep_msg& rhs) const;

  bool operator < (const struct_dep_msg& rhs) const {
    if (!(a == rhs.a)) {
      return a < rhs.a;
    }
    if (!(b == rhs.b)) {
      return b < rhs.b;
    }
    return false;
  }

  int32_t get_a() const {
    return a;
  }

  int32_t& set_a(int32_t a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  double get_b() const {
    return b;
  }

  double& set_b(double b_) {
    b = b_;
    __isset.b = true;
    return b;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(struct_dep_msg& a, struct_dep_msg& b);
extern template uint32_t struct_dep_msg::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t struct_dep_msg::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t struct_dep_msg::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t struct_dep_msg::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t struct_dep_msg::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t struct_dep_msg::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t struct_dep_msg::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t struct_dep_msg::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::struct_dep_msg>::clear( ::cpp2::struct_dep_msg* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::struct_dep_msg>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep_msg>::write(Protocol* proto,  ::cpp2::struct_dep_msg const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep_msg>::read(Protocol* proto,  ::cpp2::struct_dep_msg* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep_msg>::serializedSize(Protocol const* proto,  ::cpp2::struct_dep_msg const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::struct_dep_msg>::serializedSizeZC(Protocol const* proto,  ::cpp2::struct_dep_msg const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

} // cpp2