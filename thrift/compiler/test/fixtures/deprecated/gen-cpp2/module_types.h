/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

#include <folly/Optional.h>


namespace apache {
namespace thrift {
namespace tag {
struct id;
struct houseName;
struct houseColors;
struct id;
struct fieldType;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_houseName
#define APACHE_THRIFT_ACCESSOR_houseName
APACHE_THRIFT_DEFINE_ACCESSOR(houseName);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_houseColors
#define APACHE_THRIFT_ACCESSOR_houseColors
APACHE_THRIFT_DEFINE_ACCESSOR(houseColors);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldType
#define APACHE_THRIFT_ACCESSOR_fieldType
APACHE_THRIFT_DEFINE_ACCESSOR(fieldType);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace cpp2 {
class House;
class Field;
} // cpp2
// END forward_declare
// BEGIN typedefs
namespace cpp2 {
typedef int64_t ColorID;

} // cpp2
// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
class House final : private apache::thrift::detail::st::ComparisonOperators<House> {
 public:

  House() :
      id(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  House(apache::thrift::FragileConstructor,  ::cpp2::ColorID id__arg, ::std::string houseName__arg, ::std::set< ::cpp2::ColorID> houseColors__arg);

  House(House&&) = default;

  House(const House&) = default;

  House& operator=(House&&) = default;

  House& operator=(const House&) = default;
  void __clear();
 public:
   ::cpp2::ColorID id;
 public:
  ::std::string houseName;
 public:
  apache::thrift::DeprecatedOptionalField<::std::set< ::cpp2::ColorID>> houseColors;

 public:
  bool operator==(const House& rhs) const;
  bool operator<(const House& rhs) const;

  FOLLY_ERASE auto houseColors_ref() const& {
    return ::apache::thrift::optional_field_ref<const ::std::set< ::cpp2::ColorID>&>(houseColors);
  }

  FOLLY_ERASE auto houseColors_ref() const&& {
    return ::apache::thrift::optional_field_ref<const ::std::set< ::cpp2::ColorID>&&>(std::move(houseColors));
  }

  FOLLY_ERASE auto houseColors_ref() & {
    return ::apache::thrift::optional_field_ref<::std::set< ::cpp2::ColorID>&>(houseColors);
  }

  FOLLY_ERASE auto houseColors_ref() && {
    return ::apache::thrift::optional_field_ref<::std::set< ::cpp2::ColorID>&&>(std::move(houseColors));
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< House >;
};

void swap(House& a, House& b);

template <class Protocol_>
uint32_t House::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class Field final : private apache::thrift::detail::st::ComparisonOperators<Field> {
 public:

  Field() :
      id(0),
      fieldType(5) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Field(apache::thrift::FragileConstructor,  ::cpp2::ColorID id__arg, int32_t fieldType__arg);

  Field(Field&&) = default;

  Field(const Field&) = default;

  Field& operator=(Field&&) = default;

  Field& operator=(const Field&) = default;
  void __clear();
 public:
   ::cpp2::ColorID id;
 public:
  int32_t fieldType;

 public:
  bool operator==(const Field& rhs) const;
  bool operator<(const Field& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< Field >;
};

void swap(Field& a, Field& b);

template <class Protocol_>
uint32_t Field::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
