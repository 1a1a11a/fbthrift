#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector as vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.client cimport EventBase, make_py3_client, py3_get_exception
from thrift.py3.client import get_event_base
from thrift.py3.folly cimport cFollyEventBase, cFollyTry, cFollyUnit, c_unit

import asyncio
import sys
import traceback

cimport module.types
import module.types

from module.clients_wrapper cimport move

from module.clients_wrapper cimport cRaiserAsyncClient, cRaiserClientWrapper


cdef void Raiser_doBland_callback(
        PyObject* future,
        cFollyTry[cFollyUnit] result) with gil:
    cdef object pyfuture = <object> future
    cdef cFollyUnit citem
    if result.hasException():
        try:
            result.exception().throwException()
        except:
            pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, sys.exc_info()[1])
    else:
        citem = c_unit;
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_result, None)

cdef void Raiser_doRaise_callback(
        PyObject* future,
        cFollyTry[cFollyUnit] result) with gil:
    cdef object pyfuture = <object> future
    cdef cFollyUnit citem
    cdef unique_ptr[module.types.cBanal] ex_b
    cdef unique_ptr[module.types.cFiery] ex_f
    if result.hasException[module.types.cBanal]():
        ex_b = py3_get_exception[module.types.cBanal](result.exception())
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, module.types.Banal.create(module.types.move(ex_b)))
    elif result.hasException[module.types.cFiery]():
        ex_f = py3_get_exception[module.types.cFiery](result.exception())
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, module.types.Fiery.create(module.types.move(ex_f)))
    elif result.hasException():
        try:
            result.exception().throwException()
        except:
            pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, sys.exc_info()[1])
    else:
        citem = c_unit;
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_result, None)

cdef void Raiser_get200_callback(
        PyObject* future,
        cFollyTry[string] result) with gil:
    cdef object pyfuture = <object> future
    cdef unique_ptr[string] citem
    if result.hasException():
        try:
            result.exception().throwException()
        except:
            pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, sys.exc_info()[1])
    else:
        citem = make_unique[string](result.value());
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_result, (deref(citem.get())).decode('UTF-8'))

cdef void Raiser_get500_callback(
        PyObject* future,
        cFollyTry[string] result) with gil:
    cdef object pyfuture = <object> future
    cdef unique_ptr[string] citem
    cdef unique_ptr[module.types.cFiery] ex_f
    cdef unique_ptr[module.types.cBanal] ex_b
    if result.hasException[module.types.cFiery]():
        ex_f = py3_get_exception[module.types.cFiery](result.exception())
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, module.types.Fiery.create(module.types.move(ex_f)))
    elif result.hasException[module.types.cBanal]():
        ex_b = py3_get_exception[module.types.cBanal](result.exception())
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, module.types.Banal.create(module.types.move(ex_b)))
    elif result.hasException():
        try:
            result.exception().throwException()
        except:
            pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, sys.exc_info()[1])
    else:
        citem = make_unique[string](result.value());
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_result, (deref(citem.get())).decode('UTF-8'))


cdef class Raiser:

    def __init__(self, *args, **kwds):
        raise TypeError('Use Raiser.connect() instead.')

    def __cinit__(self, loop):
        self.loop = loop

    @staticmethod
    cdef _module_Raiser_set_client(Raiser inst, shared_ptr[cRaiserClientWrapper] c_obj):
        """So the class hierarchy talks to the correct pointer type"""
        inst._module_Raiser_client = c_obj

    @staticmethod
    async def connect(str host, int port, loop=None):
        loop = loop or asyncio.get_event_loop()
        future = loop.create_future()
        future.loop = loop
        eb = await get_event_base(loop)
        cdef string _host = host.encode('UTF-8')
        make_py3_client[cRaiserAsyncClient, cRaiserClientWrapper](
            (<EventBase> eb)._folly_event_base,
            _host,
            port,
            0,
            made_Raiser_py3_client_callback,
            future)
        return await future

    def doBland(
            self):
        future = self.loop.create_future()
        future.loop = self.loop

        deref(self._module_Raiser_client).doBland(
            Raiser_doBland_callback,
            future)
        return future

    def doRaise(
            self):
        future = self.loop.create_future()
        future.loop = self.loop

        deref(self._module_Raiser_client).doRaise(
            Raiser_doRaise_callback,
            future)
        return future

    def get200(
            self):
        future = self.loop.create_future()
        future.loop = self.loop

        deref(self._module_Raiser_client).get200(
            Raiser_get200_callback,
            future)
        return future

    def get500(
            self):
        future = self.loop.create_future()
        future.loop = self.loop

        deref(self._module_Raiser_client).get500(
            Raiser_get500_callback,
            future)
        return future


cdef void made_Raiser_py3_client_callback(
        PyObject* future,
        cFollyTry[shared_ptr[cRaiserClientWrapper]] result) with gil:
    cdef object pyfuture = <object> future
    if result.hasException():
        try:
            result.exception().throwException()
        except:
            pyfuture.loop.call_soon_threadsafe(pyfuture.set_exception, sys.exc_info()[1])
    else:
        pyclient = <Raiser> Raiser.__new__(Raiser, pyfuture.loop)
        Raiser._module_Raiser_set_client(pyclient, result.value())
        pyfuture.loop.call_soon_threadsafe(pyfuture.set_result, pyclient)

