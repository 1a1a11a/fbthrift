/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/services_wrapper.h>
#include <src/gen-py3/module/services_api.h>
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

namespace cpp2 {

RaiserWrapper::RaiserWrapper(PyObject *obj)
  : if_object(obj)
  {
    import_module__services();
    Py_XINCREF(this->if_object);
  }

RaiserWrapper::~RaiserWrapper() {
    Py_XDECREF(this->if_object);
}

folly::Future<folly::Unit> RaiserWrapper::future_doBland() {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  call_cy_Raiser_doBland(
    this->if_object,
    std::move(promise)
  );
  return future;
}

folly::Future<folly::Unit> RaiserWrapper::future_doRaise() {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  call_cy_Raiser_doRaise(
    this->if_object,
    std::move(promise)
  );
  return future;
}

folly::Future<std::unique_ptr<std::string>> RaiserWrapper::future_get200() {
  folly::Promise<std::unique_ptr<std::string>> promise;
  auto future = promise.getFuture();
  call_cy_Raiser_get200(
    this->if_object,
    std::move(promise)
  );
  return future;
}

folly::Future<std::unique_ptr<std::string>> RaiserWrapper::future_get500() {
  folly::Promise<std::unique_ptr<std::string>> promise;
  auto future = promise.getFuture();
  call_cy_Raiser_get500(
    this->if_object,
    std::move(promise)
  );
  return future;
}

std::shared_ptr<apache::thrift::ServerInterface> RaiserInterface(PyObject *if_object) {
  return std::make_shared<RaiserWrapper>(if_object);
}
} // namespace cpp2
