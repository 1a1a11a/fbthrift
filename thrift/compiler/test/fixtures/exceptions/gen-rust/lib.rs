// @generated by Thrift. This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub use self::errors::*;
pub use self::types::*;

pub mod types {
    use fbthrift::{
        Deserialize, GetTType, ProtocolReader, ProtocolWriter, Serialize, TType,
    };

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Banal {
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Fiery {
        pub message: String,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Serious {
        pub sonnet: Option<String>,
    }

    impl Default for self::Banal {
        fn default() -> Self {
            Self {
            }
        }
    }

    impl GetTType for self::Banal {
        const TTYPE: TType = TType::Struct;
    }

    impl<'a, P: ProtocolWriter> Serialize<P> for &'a self::Banal {
        fn write(self, p: &mut P) {
            p.write_struct_begin("Banal");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::Banal {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
            })
        }
    }


    impl Default for self::Fiery {
        fn default() -> Self {
            Self {
                message: Default::default(),
            }
        }
    }

    impl GetTType for self::Fiery {
        const TTYPE: TType = TType::Struct;
    }

    impl<'a, P: ProtocolWriter> Serialize<P> for &'a self::Fiery {
        fn write(self, p: &mut P) {
            p.write_struct_begin("Fiery");
            p.write_field_begin("message", TType::String, 1);
            Serialize::write(&self.message, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::Fiery {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_message = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_message = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                message: field_message.unwrap_or_default(),
            })
        }
    }


    impl Default for self::Serious {
        fn default() -> Self {
            Self {
                sonnet: None,
            }
        }
    }

    impl GetTType for self::Serious {
        const TTYPE: TType = TType::Struct;
    }

    impl<'a, P: ProtocolWriter> Serialize<P> for &'a self::Serious {
        fn write(self, p: &mut P) {
            p.write_struct_begin("Serious");
            if let Some(some) = &self.sonnet {
                p.write_field_begin("sonnet", TType::String, 1);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::Serious {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_sonnet = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_sonnet = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                sonnet: field_sonnet,
            })
        }
    }

}

pub mod services {
    pub mod raiser {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum DoBlandExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for DoBlandExn {
            fn default() -> Self {
                DoBlandExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for DoBlandExn {
            fn from(exn: ApplicationException) -> Self {
                DoBlandExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for DoBlandExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a DoBlandExn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("DoBland");
                match self {
                    DoBlandExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoBlandExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    DoBlandExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for DoBlandExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = DoBlandExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = DoBlandExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoBlandExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum DoRaiseExn {
            Success(()),
            b(crate::types::Banal),
            f(crate::types::Fiery),
            s(crate::types::Serious),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for DoRaiseExn {
            fn default() -> Self {
                DoRaiseExn::UnknownField(-1)
            }
        }

        impl From<crate::types::Banal> for DoRaiseExn {
            fn from(exn: crate::types::Banal) -> Self {
                DoRaiseExn::b(exn)
            }
        }

        impl From<crate::types::Fiery> for DoRaiseExn {
            fn from(exn: crate::types::Fiery) -> Self {
                DoRaiseExn::f(exn)
            }
        }

        impl From<crate::types::Serious> for DoRaiseExn {
            fn from(exn: crate::types::Serious) -> Self {
                DoRaiseExn::s(exn)
            }
        }

        impl From<ApplicationException> for DoRaiseExn {
            fn from(exn: ApplicationException) -> Self {
                DoRaiseExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for DoRaiseExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a DoRaiseExn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("DoRaise");
                match self {
                    DoRaiseExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::b(inner) => {
                        p.write_field_begin(
                            "b",
                            TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::f(inner) => {
                        p.write_field_begin(
                            "f",
                            TType::Struct,
                            2,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::s(inner) => {
                        p.write_field_begin(
                            "s",
                            TType::Struct,
                            3,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    DoRaiseExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for DoRaiseExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = DoRaiseExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = DoRaiseExn::Success(Deserialize::read(p)?);
                        }
                        ((TType::Struct, 1), false) => {
                            once = true;
                            alt = DoRaiseExn::b(Deserialize::read(p)?);
                        }
                        ((TType::Struct, 2), false) => {
                            once = true;
                            alt = DoRaiseExn::f(Deserialize::read(p)?);
                        }
                        ((TType::Struct, 3), false) => {
                            once = true;
                            alt = DoRaiseExn::s(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoRaiseExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum Get200Exn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for Get200Exn {
            fn default() -> Self {
                Get200Exn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for Get200Exn {
            fn from(exn: ApplicationException) -> Self {
                Get200Exn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for Get200Exn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a Get200Exn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("Get200");
                match self {
                    Get200Exn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get200Exn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    Get200Exn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for Get200Exn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(Get200Exn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "Get200Exn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "Get200Exn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum Get500Exn {
            Success(String),
            f(crate::types::Fiery),
            b(crate::types::Banal),
            s(crate::types::Serious),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for Get500Exn {
            fn default() -> Self {
                Get500Exn::UnknownField(-1)
            }
        }

        impl From<crate::types::Fiery> for Get500Exn {
            fn from(exn: crate::types::Fiery) -> Self {
                Get500Exn::f(exn)
            }
        }

        impl From<crate::types::Banal> for Get500Exn {
            fn from(exn: crate::types::Banal) -> Self {
                Get500Exn::b(exn)
            }
        }

        impl From<crate::types::Serious> for Get500Exn {
            fn from(exn: crate::types::Serious) -> Self {
                Get500Exn::s(exn)
            }
        }

        impl From<ApplicationException> for Get500Exn {
            fn from(exn: ApplicationException) -> Self {
                Get500Exn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for Get500Exn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<'a, P: ProtocolWriter> Serialize<P> for &'a Get500Exn {
            fn write(self, p: &mut P) {
                p.write_struct_begin("Get500");
                match self {
                    Get500Exn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::f(inner) => {
                        p.write_field_begin(
                            "f",
                            TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::b(inner) => {
                        p.write_field_begin(
                            "b",
                            TType::Struct,
                            2,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::s(inner) => {
                        p.write_field_begin(
                            "s",
                            TType::Struct,
                            3,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    Get500Exn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for Get500Exn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(Get500Exn::Success(Deserialize::read(p)?));
                        }
                        ((TType::Struct, 1), false) => {
                            once = true;
                            alt = Some(Get500Exn::f(Deserialize::read(p)?));
                        }
                        ((TType::Struct, 2), false) => {
                            once = true;
                            alt = Some(Get500Exn::b(Deserialize::read(p)?));
                        }
                        ((TType::Struct, 3), false) => {
                            once = true;
                            alt = Some(Get500Exn::s(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "Get500Exn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "Get500Exn"),
                    )
                    .into(),
                )
            }
        }
    }
}

pub mod client {
    use fbthrift::*;
    use std::marker::PhantomData;
    use std::sync::Arc;

    pub struct RaiserImpl<P, T> {
        transport: T,
        _phantom: PhantomData<fn() -> P>,
    }

    impl<P, T> RaiserImpl<P, T> {
        pub fn new(transport: T) -> Self {
            Self {
                transport,
                _phantom: PhantomData,
            }
        }
    }

    pub trait Raiser: Send {
        fn doBland(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>>;
        fn doRaise(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>>;
        fn get200(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
        fn get500(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
    }

    impl<P, T> Raiser for RaiserImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {        fn doBland(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "doBland",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<()> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::raiser::DoBlandExn::read(p)? {
                                    crate::services::raiser::DoBlandExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::RaiserDoBlandError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::RaiserDoBlandError(
                                    crate::services::raiser::DoBlandExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn doRaise(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "doRaise",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<()> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::raiser::DoRaiseExn::read(p)? {
                                    crate::services::raiser::DoRaiseExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::RaiserDoRaiseError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::RaiserDoRaiseError(
                                    crate::services::raiser::DoRaiseExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn get200(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "get200",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::raiser::Get200Exn::read(p)? {
                                    crate::services::raiser::Get200Exn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::RaiserGet200Error(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::RaiserGet200Error(
                                    crate::services::raiser::Get200Exn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn get500(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "get500",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::raiser::Get500Exn::read(p)? {
                                    crate::services::raiser::Get500Exn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::RaiserGet500Error(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::RaiserGet500Error(
                                    crate::services::raiser::Get500Exn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
    }

    pub struct make_Raiser;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn Raiser {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<impl Raiser + Send + 'static>
        where
            P: Protocol<Frame = T>,
            T: Transport,
        {
            let _ = protocol;
            Arc::new(RaiserImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_Raiser {
        type Api = dyn Raiser + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T>,
            T: Transport + Sync,
        {
            Raiser::new(protocol, transport)
        }
    }
}

pub mod server {
    use async_trait::async_trait;
    use fbthrift::*;
    use std::marker::PhantomData;

    #[async_trait]
    pub trait Raiser: Send + Sync + 'static {
        async fn doBland(
            &self,
        ) -> Result<(), crate::services::raiser::DoBlandExn> {
            Err(crate::services::raiser::DoBlandExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "Raiser",
                    "doBland",
                ),
            ))
        }
        async fn doRaise(
            &self,
        ) -> Result<(), crate::services::raiser::DoRaiseExn> {
            Err(crate::services::raiser::DoRaiseExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "Raiser",
                    "doRaise",
                ),
            ))
        }
        async fn get200(
            &self,
        ) -> Result<String, crate::services::raiser::Get200Exn> {
            Err(crate::services::raiser::Get200Exn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "Raiser",
                    "get200",
                ),
            ))
        }
        async fn get500(
            &self,
        ) -> Result<String, crate::services::raiser::Get500Exn> {
            Err(crate::services::raiser::Get500Exn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "Raiser",
                    "get500",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct RaiserProcessor<P, H, R> {
        service: H,
        supa: fbthrift::NullServiceProcessor<P, R>,
        _phantom: PhantomData<(P, H, R)>,
    }

    impl<P, H, R> RaiserProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: Raiser,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: fbthrift::NullServiceProcessor::new(),
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_doBland<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.doBland(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::raiser::DoBlandExn::Success(res)
                }
                Err(crate::services::raiser::DoBlandExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::raiser::DoBlandExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "doBland",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "doBland",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_doRaise<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.doRaise(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::raiser::DoRaiseExn::Success(res)
                }
                Err(crate::services::raiser::DoRaiseExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::raiser::DoRaiseExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "doRaise",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "doRaise",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_get200<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.get200(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::raiser::Get200Exn::Success(res)
                }
                Err(crate::services::raiser::Get200Exn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::raiser::Get200Exn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "get200",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "get200",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_get500<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.get500(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::raiser::Get500Exn::Success(res)
                }
                Err(crate::services::raiser::Get500Exn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::raiser::Get500Exn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "get500",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "get500",
                MessageType::Reply,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, R> fbthrift::ServiceProcessor<P> for RaiserProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: Raiser,
        R: Send + Sync + 'static,
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"doBland" => Ok(0usize),
                b"doRaise" => Ok(1usize),
                b"get200" => Ok(2usize),
                b"get500" => Ok(3usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
            r: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_doBland(p, r).await,
                1usize => self.handle_doRaise(p, r).await,
                2usize => self.handle_get200(p, r).await,
                3usize => self.handle_get500(p, r).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "RaiserProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, R> ThriftService<P::Frame> for RaiserProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: Raiser,
        R: Send + Sync + 'static,
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut p = P::deserializer(req);
            let (idx, mty, _) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "RaiserProcessor",
                                MessageType::Exception,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_Raiser_server<F, H, R>(
        proto: ProtocolID,
        handler: H,
    ) -> Result<Box<dyn ThriftService<F, Handler = H, RequestContext = R> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: Raiser,
        R: Send + Sync + 'static,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(RaiserProcessor::<BinaryProtocol<F>, H, R>::new(handler)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(RaiserProcessor::<CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
///     service MyService {
///         FunctionResponse myFunction(
///             1: FunctionRequest request,
///         ) throws {
///             1: StorageException s,
///             2: NotFoundException n,
///         ),
///
///         // other functions
///     }
///
///
/// we would end up with this mock object under crate::mock::MyService:
///
///     impl crate::client::MyService for MyService<'mock> {...}
///
///     pub struct MyService<'mock> {
///         pub myFunction: myFunction<'mock>,
///         // ...
///     }
///
///     impl dyn crate::client::MyService {
///         pub fn mock<'mock>() -> MyService<'mock>;
///     }
///
///     impl myFunction<'mock> {
///         // directly return the given success response
///         pub fn ret(&self, value: FunctionResponse);
///
///         // invoke closure to compute success response
///         pub fn mock(
///             &self,
///             mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///         );
///
///         // return one of the function's declared exceptions
///         pub fn throw<E>(&self, exception: E)
///         where
///             E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
///     }
///
///     impl From<StorageException> for MyFunctionExn {...}
///     impl From<NotFoundException> for MyFunctionExn {...}
///
///
/// The intended usage from a test would be:
///
///     use std::sync::Arc;
///     use thrift_if::client::MyService;
///
///     #[test]
///     fn test_my_client() {
///         let mock = Arc::new(MyService::mock());
///
///         // directly return a success response
///         let resp = FunctionResponse {...};
///         mock.myFunction.ret(resp);
///
///         // or give a closure to compute the success response
///         mock.myFunction.mock(|request| FunctionResponse {...});
///
///         // or throw one of the function's exceptions
///         mock.myFunction.throw(StorageException::ItFailed);
///
///         let out = do_the_thing(mock).wait().unwrap();
///         assert!(out.what_i_expected());
///     }
///
///     fn do_the_thing(
///         client: Arc<dyn MyService + Send + Sync + 'static>,
///     ) -> impl Future<Item = Out> {...}
pub mod mock {
    use async_trait::async_trait;
    use std::marker::PhantomData;

    pub struct Raiser<'mock> {
        pub doBland: raiser::doBland<'mock>,
        pub doRaise: raiser::doRaise<'mock>,
        pub get200: raiser::get200<'mock>,
        pub get500: raiser::get500<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::Raiser {
        pub fn mock<'mock>() -> Raiser<'mock> {
            Raiser {
                doBland: raiser::doBland::unimplemented(),
                doRaise: raiser::doRaise::unimplemented(),
                get200: raiser::get200::unimplemented(),
                get500: raiser::get500::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    #[async_trait]
    impl<'mock> super::client::Raiser for Raiser<'mock> {
        fn doBland(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            let mut closure = self.doBland.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::RaiserDoBlandError(error),
                ))))
        }
        fn doRaise(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            let mut closure = self.doRaise.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::RaiserDoRaiseError(error),
                ))))
        }
        fn get200(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.get200.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::RaiserGet200Error(error),
                ))))
        }
        fn get500(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.get500.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::RaiserGet500Error(error),
                ))))
        }
    }

    mod raiser {
        use std::sync::Mutex;

        pub struct doBland<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::raiser::DoBlandExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> doBland<'mock> {
            pub fn unimplemented() -> Self {
                doBland {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "Raiser",
                        "doBland",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::raiser::DoBlandExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct doRaise<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::raiser::DoRaiseExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> doRaise<'mock> {
            pub fn unimplemented() -> Self {
                doRaise {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "Raiser",
                        "doRaise",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::raiser::DoRaiseExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct get200<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    String,
                    crate::services::raiser::Get200Exn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> get200<'mock> {
            pub fn unimplemented() -> Self {
                get200 {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "Raiser",
                        "get200",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::raiser::Get200Exn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct get500<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    String,
                    crate::services::raiser::Get500Exn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> get500<'mock> {
            pub fn unimplemented() -> Self {
                get500 {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "Raiser",
                        "get500",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::raiser::Get500Exn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }
}

pub mod errors {
    use fbthrift::ApplicationException;
    use thiserror::Error;

    #[derive(Debug, Error)]
    pub enum ErrorKind {
        #[error("Raiser::doBland failed with {0:?}")]
        RaiserDoBlandError(crate::services::raiser::DoBlandExn),
        #[error("Raiser::doRaise failed with {0:?}")]
        RaiserDoRaiseError(crate::services::raiser::DoRaiseExn),
        #[error("Raiser::get200 failed with {0:?}")]
        RaiserGet200Error(crate::services::raiser::Get200Exn),
        #[error("Raiser::get500 failed with {0:?}")]
        RaiserGet500Error(crate::services::raiser::Get500Exn),
        #[error("Application exception: {0:?}")]
        ApplicationException(ApplicationException),
    }

    impl From<ApplicationException> for ErrorKind {
        fn from(exn: ApplicationException) -> Self {
            ErrorKind::ApplicationException(exn)
        }
    }
}
