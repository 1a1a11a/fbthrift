/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.lazy_constants;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="Internship", builder=Internship.Builder.class)
public final class Internship {
    @ThriftConstructor
    public Internship(
        @ThriftField(value=1, name="weeks", requiredness=Requiredness.REQUIRED) final int weeks,
        @ThriftField(value=2, name="title", requiredness=Requiredness.NONE) final String title,
        @ThriftField(value=3, name="employer", requiredness=Requiredness.OPTIONAL) final test.fixtures.lazy_constants.Company employer
    ) {
        this.weeks = weeks;
        this.title = title;
        this.employer = employer;
    }
    
    @ThriftConstructor
    protected Internship() {
      this.weeks = 0;
      this.title = null;
      this.employer = null;
    }
    
    public static class Builder {
        private int weeks;
        @ThriftField(value=1, name="weeks", requiredness=Requiredness.REQUIRED)
        public Builder setWeeks(int weeks) {
            this.weeks = weeks;
            return this;
        }
        private String title;
        @ThriftField(value=2, name="title", requiredness=Requiredness.NONE)
        public Builder setTitle(String title) {
            this.title = title;
            return this;
        }
        private test.fixtures.lazy_constants.Company employer;
        @ThriftField(value=3, name="employer", requiredness=Requiredness.OPTIONAL)
        public Builder setEmployer(test.fixtures.lazy_constants.Company employer) {
            this.employer = employer;
            return this;
        }
    
        public Builder() { }
        public Builder(Internship other) {
            this.weeks = other.weeks;
            this.title = other.title;
            this.employer = other.employer;
        }
    
        @ThriftConstructor
        public Internship build() {
            return new Internship (
                this.weeks,
                this.title,
                this.employer
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("Internship");
    private final int weeks;
    public static final int _WEEKS = 1;
    private static final TField WEEKS_FIELD_DESC = new TField("weeks", TType.I32, (short)1);
    private final String title;
    public static final int _TITLE = 2;
    private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)2);
    private final test.fixtures.lazy_constants.Company employer;
    public static final int _EMPLOYER = 3;
    private static final TField EMPLOYER_FIELD_DESC = new TField("employer", TType.I32, (short)3);

    
    @ThriftField(value=1, name="weeks", requiredness=Requiredness.REQUIRED)
    public int getWeeks() { return weeks; }
        
    @ThriftField(value=2, name="title", requiredness=Requiredness.NONE)
    public String getTitle() { return title; }
        
    @ThriftField(value=3, name="employer", requiredness=Requiredness.OPTIONAL)
    public test.fixtures.lazy_constants.Company getEmployer() { return employer; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("weeks", weeks)
            .add("title", title)
            .add("employer", employer)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        Internship other = (Internship)o;
    
        return
            Objects.equals(weeks, other.weeks) &&
            Objects.equals(title, other.title) &&
            Objects.equals(employer, other.employer) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            weeks,
            title,
            employer
        });
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WEEKS_FIELD_DESC);
      oprot.writeI32(this.weeks);
      oprot.writeFieldEnd();
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.employer != null) {
        oprot.writeFieldBegin(EMPLOYER_FIELD_DESC);
        oprot.writeI32(this.employer == null ? 0 : this.employer.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
