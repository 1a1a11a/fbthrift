#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from cython.operator cimport dereference as deref, preincrement as inc
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import NOTSET
cimport thrift.py3.std_libcpp as std_libcpp

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
from enum import Enum




cdef class Empty(thrift.py3.types.Struct):

    def __init__(
        Empty self
    ):
        self.c_Empty = make_shared[cEmpty]()

        inst = self

    def __call__(
        Empty self
    ):
        changes = any((        ))

        if not changes:
            return self

        inst = <Empty>Empty.__new__(Empty)
        inst.c_Empty = make_shared[cEmpty](deref(self.c_Empty))
        cdef Empty defaults = Empty_defaults

        # Convert None's to default value.

        return inst

    def __iter__(self):
        return iter(())

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cEmpty] c_Empty):
        inst = <Empty>Empty.__new__(Empty)
        inst.c_Empty = c_Empty
        return inst


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Empty) and
                isinstance(other, Empty)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cEmpty cself = deref((<Empty>self).c_Empty)
        cdef cEmpty cother = deref((<Empty>other).c_Empty)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Empty self):
        if not self.__hash:
            self.__hash = hash((
            type(self)   # Hash the class there are no fields
            ))
        return self.__hash

    def __repr__(Empty self):
        return f'Empty()'


Empty_defaults = Empty()


cdef class Nada(thrift.py3.types.Struct):

    def __init__(
        Nada self
    ):
        self.c_Nada = make_shared[cNada]()

        inst = self

    def __call__(
        Nada self
    ):
        changes = any((        ))

        if not changes:
            return self

        inst = <Nada>Nada.__new__(Nada)
        inst.c_Nada = make_shared[cNada](deref(self.c_Nada))
        cdef Nada defaults = Nada_defaults

        # Convert None's to default value.

        return inst

    def __iter__(self):
        return iter(())

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cNada] c_Nada):
        inst = <Nada>Nada.__new__(Nada)
        inst.c_Nada = c_Nada
        return inst


    def __richcmp__(self, other, op):
        cdef int cop = op
        if cop not in (2, 3):
            raise TypeError("unorderable types: {}, {}".format(self, other))
        if not (
                isinstance(self, Nada) and
                isinstance(other, Nada)):
            if cop == 2:  # different types are never equal
                return False
            else:         # different types are always notequal
                return True

        cdef cNada cself = deref((<Nada>self).c_Nada)
        cdef cNada cother = deref((<Nada>other).c_Nada)
        cdef cbool cmp = cself == cother
        if cop == 2:
            return cmp
        return not cmp

    def __hash__(Nada self):
        if not self.__hash:
            self.__hash = hash((
            type(self)   # Hash the class there are no fields
            ))
        return self.__hash

    def __repr__(Nada self):
        return f'Nada()'


Nada_defaults = Nada()



