<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Foo
 */
class Foo implements \IThriftStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'a',
      'type' => \TType::LST,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'array',
    ),
    2 => shape(
      'var' => 'b',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'type' => \TType::LST,
        'etype' => \TType::SET,
        'elem' => shape(
          'type' => \TType::SET,
          'etype' => \TType::I32,
          'elem' => shape(
            'type' => \TType::I32,
          ),
          'format' => 'array',
        ),
        'format' => 'array',
      ),
      'format' => 'array',
    ),
    3 => shape(
      'var' => 'c',
      'type' => \TType::I64,
    ),
    4 => shape(
      'var' => 'd',
      'type' => \TType::BOOL,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'a' => 1,
    'b' => 2,
    'c' => 3,
    'd' => 4,
  ];

  const type TConstructorShape = shape(
    ?'a' => ?varray<string>,
    ?'b' => ?darray<string, varray<darray<int, bool>>>,
    ?'c' => ?int,
    ?'d' => ?bool,
  );

  const int STRUCTURAL_ID = 3946809642153193229;
  /**
   * Original thrift field:-
   * 1: list<string> a
   */
  public ?varray<string> $a;
  /**
   * Original thrift field:-
   * 2: map<string, list<set<i32>>> b
   */
  public ?darray<string, varray<darray<int, bool>>> $b;
  /**
   * Original thrift field:-
   * 3: i64 c
   */
  public ?int $c;
  /**
   * Original thrift field:-
   * 4: bool d
   */
  public ?bool $d;

  <<__Rx>>
  public function __construct(@KeyedContainer<string, mixed> $vals = darray[]) {
    /* HH_FIXME[4110] previously hidden by unsafe */
    $this->a = idx($vals, 'a');
    if (idx($vals, 'b') !== null) {
      /* HH_FIXME[4110] previously hidden by unsafe */
      $this->b = $vals['b'];
    }
    /* HH_FIXME[4110] previously hidden by unsafe */
    $this->c = idx($vals, 'c') ?? 7;
    /* HH_FIXME[4110] previously hidden by unsafe */
    $this->d = idx($vals, 'd') ?? false;
  }

  <<__Rx, __MutableReturn>>
  public static function withDefaultValues(): this {
    return new static();
  }

  <<__Rx, __MutableReturn>>
  public static function fromShape(self::TConstructorShape $shape): this {
    return new static(
      Map {
        'a' => Shapes::idx($shape, 'a'),
        'b' => Shapes::idx($shape, 'b'),
        'c' => Shapes::idx($shape, 'c'),
        'd' => Shapes::idx($shape, 'd'),
      },
    );
  }

  <<__Rx, __MutableReturn>>
  public static function fromMap_DEPRECATED(@KeyedContainer<string, mixed> $map): this {
    return new static($map);
  }

  public function getName(): string {
    return 'Foo';
  }

  public static function getAllStructuredAnnotations(): \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

}

/**
 * Original thrift exception:-
 * Baz
 */
class Baz extends \TException implements \IThriftStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'message',
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'some_field',
      'type' => \TType::STRUCT,
      'class' => Foo::class,
    ),
    3 => shape(
      'var' => 'some_container',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'array',
    ),
    4 => shape(
      'var' => 'code',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'message' => 1,
    'some_field' => 2,
    'some_container' => 3,
    'code' => 4,
  ];

  const type TConstructorShape = shape(
    ?'message' => ?string,
    ?'some_field' => ?Foo,
    ?'some_container' => ?darray<string, bool>,
    ?'code' => ?int,
  );

  const int STRUCTURAL_ID = 1663976252517274137;
  /**
   * Original thrift field:-
   * 1: string message
   */
  public string $message;
  /**
   * Original thrift field:-
   * 2: struct module.Foo some_field
   */
  public ?Foo $some_field;
  /**
   * Original thrift field:-
   * 3: set<string> some_container
   */
  public ?darray<string, bool> $some_container;
  /**
   * Original thrift field:-
   * 4: i32 code
   */
  public int $code;

  <<__Rx>>
  public function __construct(@KeyedContainer<string, mixed> $vals = darray[]) {
    parent::__construct();
    $this->message = (string)(idx($vals, 'message') ?? '');
    /* HH_FIXME[4110] previously hidden by unsafe */
    $this->some_field = idx($vals, 'some_field');
    /* HH_FIXME[4110] previously hidden by unsafe */
    $this->some_container = idx($vals, 'some_container');
    $this->code = (int)(idx($vals, 'code') ?? 0);
  }

  <<__Rx, __MutableReturn>>
  public static function withDefaultValues(): this {
    return new static();
  }

  <<__Rx, __MutableReturn>>
  public static function fromShape(self::TConstructorShape $shape): this {
    return new static(
      Map {
        'message' => Shapes::idx($shape, 'message'),
        'some_field' => Shapes::idx($shape, 'some_field'),
        'some_container' => Shapes::idx($shape, 'some_container'),
        'code' => Shapes::idx($shape, 'code'),
      },
    );
  }

  <<__Rx, __MutableReturn>>
  public static function fromMap_DEPRECATED(@KeyedContainer<string, mixed> $map): this {
    return new static($map);
  }

  public function getName(): string {
    return 'Baz';
  }

  public static function getAllStructuredAnnotations(): \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

}

/**
 * Original thrift exception:-
 * OptBaz
 */
class OptBaz extends \TException implements \IThriftStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'message',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'message' => 1,
  ];

  const type TConstructorShape = shape(
    ?'message' => ?string,
  );

  const int STRUCTURAL_ID = 546500496397478593;
  /**
   * Original thrift field:-
   * 1: string message
   */
  public string $message;

  <<__Rx>>
  public function __construct(@KeyedContainer<string, mixed> $vals = darray[]) {
    parent::__construct();
    $this->message = (string)(idx($vals, 'message') ?? '');
  }

  <<__Rx, __MutableReturn>>
  public static function withDefaultValues(): this {
    return new static();
  }

  <<__Rx, __MutableReturn>>
  public static function fromShape(self::TConstructorShape $shape): this {
    return new static(
      Map {
        'message' => Shapes::idx($shape, 'message'),
      },
    );
  }

  <<__Rx, __MutableReturn>>
  public static function fromMap_DEPRECATED(@KeyedContainer<string, mixed> $map): this {
    return new static($map);
  }

  public function getName(): string {
    return 'OptBaz';
  }

  public static function getAllStructuredAnnotations(): \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

}

