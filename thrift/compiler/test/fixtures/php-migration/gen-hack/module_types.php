<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Foo
 */
class Foo implements \IThriftStruct {
  use \ThriftSerializationTrait;

  public static darray<int, darray<string, mixed>> $_TSPEC = darray[
    1 => darray[
      'var' => 'a',
      'type' => \TType::LST,
      'etype' => \TType::STRING,
      'elem' => darray[
        'type' => \TType::STRING,
        ],
        'format' => 'collection',
      ],
    2 => darray[
      'var' => 'b',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => darray[
        'type' => \TType::STRING,
      ],
      'val' => darray[
        'type' => \TType::LST,
        'etype' => \TType::SET,
        'elem' => darray[
          'type' => \TType::SET,
          'etype' => \TType::I32,
          'elem' => darray[
            'type' => \TType::I32,
            ],
            'format' => 'array',
          ],
          'format' => 'collection',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'a' => 1,
    'b' => 2,
  };
  const int STRUCTURAL_ID = 1155106830598774159;
  /**
   * Original thrift field:-
   * 1: list<string> a
   */
  public Vector<string> $a;
  /**
   * Original thrift field:-
   * 2: map<string, list<set<i32>>> b
   */
  public ?Map<string, Vector<darray<int, bool>>> $b;

  public function __construct(@\Indexish<string, mixed> $vals = darray[]) {
    // UNSAFE_BLOCK $vals is not type safe :(, and we don't cast structs (yet)
    $this->a = idx($vals, 'a', Vector {});
    if (array_key_exists('b', $vals)) {
      $this->b = idx($vals, 'b', Map {});
    }
  }

  public function getName(): string {
    return 'Foo';
  }

}

