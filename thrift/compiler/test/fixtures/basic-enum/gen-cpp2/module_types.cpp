/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/basic-enum/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/basic-enum/gen-cpp2/module_types.tcc"

#include <algorithm>
#include <folly/Indestructible.h>

#include "thrift/compiler/test/fixtures/basic-enum/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::enumstrict::EmptyEnum>::size;
folly::Range<::test::fixtures::enumstrict::EmptyEnum const*> const TEnumTraits<::test::fixtures::enumstrict::EmptyEnum>::values = {};
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::enumstrict::EmptyEnum>::names = {};

char const* TEnumTraits<::test::fixtures::enumstrict::EmptyEnum>::findName(type value) {
  using factory = ::test::fixtures::enumstrict::_EmptyEnum_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::test::fixtures::enumstrict::EmptyEnum>::findValue(char const* name, type* out) {
  using factory = ::test::fixtures::enumstrict::_EmptyEnum_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace test { namespace fixtures { namespace enumstrict {

const _EmptyEnum_EnumMapFactory::ValuesToNamesMapType _EmptyEnum_VALUES_TO_NAMES = _EmptyEnum_EnumMapFactory::makeValuesToNamesMap();
const _EmptyEnum_EnumMapFactory::NamesToValuesMapType _EmptyEnum_NAMES_TO_VALUES = _EmptyEnum_EnumMapFactory::makeNamesToValuesMap();

}}} // test::fixtures::enumstrict

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::enumstrict::MyEnum>::size;
folly::Range<::test::fixtures::enumstrict::MyEnum const*> const TEnumTraits<::test::fixtures::enumstrict::MyEnum>::values = folly::range(::test::fixtures::enumstrict::_MyEnumEnumDataStorage::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::enumstrict::MyEnum>::names = folly::range(::test::fixtures::enumstrict::_MyEnumEnumDataStorage::names);

char const* TEnumTraits<::test::fixtures::enumstrict::MyEnum>::findName(type value) {
  using factory = ::test::fixtures::enumstrict::_MyEnum_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::test::fixtures::enumstrict::MyEnum>::findValue(char const* name, type* out) {
  using factory = ::test::fixtures::enumstrict::_MyEnum_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace test { namespace fixtures { namespace enumstrict {

const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES = _MyEnum_EnumMapFactory::makeValuesToNamesMap();
const _MyEnum_EnumMapFactory::NamesToValuesMapType _MyEnum_NAMES_TO_VALUES = _MyEnum_EnumMapFactory::makeNamesToValuesMap();

}}} // test::fixtures::enumstrict

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::enumstrict::MyBigEnum>::size;
folly::Range<::test::fixtures::enumstrict::MyBigEnum const*> const TEnumTraits<::test::fixtures::enumstrict::MyBigEnum>::values = folly::range(::test::fixtures::enumstrict::_MyBigEnumEnumDataStorage::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::enumstrict::MyBigEnum>::names = folly::range(::test::fixtures::enumstrict::_MyBigEnumEnumDataStorage::names);

char const* TEnumTraits<::test::fixtures::enumstrict::MyBigEnum>::findName(type value) {
  using factory = ::test::fixtures::enumstrict::_MyBigEnum_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::test::fixtures::enumstrict::MyBigEnum>::findValue(char const* name, type* out) {
  using factory = ::test::fixtures::enumstrict::_MyBigEnum_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace test { namespace fixtures { namespace enumstrict {

const _MyBigEnum_EnumMapFactory::ValuesToNamesMapType _MyBigEnum_VALUES_TO_NAMES = _MyBigEnum_EnumMapFactory::makeValuesToNamesMap();
const _MyBigEnum_EnumMapFactory::NamesToValuesMapType _MyBigEnum_NAMES_TO_VALUES = _MyBigEnum_EnumMapFactory::makeNamesToValuesMap();

}}} // test::fixtures::enumstrict

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::enumstrict::MyStruct>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "myEnum") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "myBigEnum") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace enumstrict {

MyStruct::MyStruct(apache::thrift::FragileConstructor,  ::test::fixtures::enumstrict::MyEnum myEnum__arg,  ::test::fixtures::enumstrict::MyBigEnum myBigEnum__arg) :
    myEnum(std::move(myEnum__arg)),
    myBigEnum(std::move(myBigEnum__arg)) {
  __isset.myEnum = true;
  __isset.myBigEnum = true;
}

void MyStruct::__clear() {
  // clear all fields
  myEnum = static_cast< ::test::fixtures::enumstrict::MyEnum>(0);
  myBigEnum =  ::test::fixtures::enumstrict::MyBigEnum::ONE;
  __isset = {};
}

bool MyStruct::operator==(const MyStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.myEnum == rhs.myEnum)) {
    return false;
  }
  if (!(lhs.myBigEnum == rhs.myBigEnum)) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(const MyStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.myEnum == rhs.myEnum)) {
    return lhs.myEnum < rhs.myEnum;
  }
  if (!(lhs.myBigEnum == rhs.myBigEnum)) {
    return lhs.myBigEnum < rhs.myBigEnum;
  }
  return false;
}


void swap(MyStruct& a, MyStruct& b) {
  using ::std::swap;
  swap(a.myEnum, b.myEnum);
  swap(a.myBigEnum, b.myBigEnum);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // test::fixtures::enumstrict
