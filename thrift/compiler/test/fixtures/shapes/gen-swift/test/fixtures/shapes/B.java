/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.shapes;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftStruct(value="B", builder=B.Builder.class)
public final class B {
    @ThriftConstructor
    public B(
        @ThriftField(value=1, name="just_an_A", requiredness=Requiredness.NONE) final test.fixtures.shapes.A justAnA,
        @ThriftField(value=2, name="set_of_i32", requiredness=Requiredness.NONE) final Set<Integer> setOfI32,
        @ThriftField(value=3, name="list_of_i32", requiredness=Requiredness.NONE) final List<Integer> listOfI32,
        @ThriftField(value=4, name="list_of_string", requiredness=Requiredness.NONE) final List<String> listOfString,
        @ThriftField(value=5, name="map_of_string_to_i32", requiredness=Requiredness.NONE) final Map<String, Integer> mapOfStringToI32,
        @ThriftField(value=6, name="map_of_string_to_A", requiredness=Requiredness.NONE) final Map<String, test.fixtures.shapes.A> mapOfStringToA,
        @ThriftField(value=7, name="map_of_string_to_list_of_i32", requiredness=Requiredness.NONE) final Map<String, List<Integer>> mapOfStringToListOfI32,
        @ThriftField(value=8, name="map_of_string_to_list_of_A", requiredness=Requiredness.NONE) final Map<String, List<test.fixtures.shapes.A>> mapOfStringToListOfA,
        @ThriftField(value=9, name="map_of_string_to_set_of_i32", requiredness=Requiredness.NONE) final Map<String, Set<Integer>> mapOfStringToSetOfI32,
        @ThriftField(value=10, name="map_of_string_to_map_of_string_to_i32", requiredness=Requiredness.NONE) final Map<String, Map<String, Integer>> mapOfStringToMapOfStringToI32,
        @ThriftField(value=11, name="map_of_string_to_map_of_string_to_A", requiredness=Requiredness.NONE) final Map<String, Map<String, test.fixtures.shapes.A>> mapOfStringToMapOfStringToA,
        @ThriftField(value=12, name="list_of_set_of_i32", requiredness=Requiredness.NONE) final List<Set<Integer>> listOfSetOfI32,
        @ThriftField(value=13, name="list_of_map_of_string_to_list_of_A", requiredness=Requiredness.NONE) final List<Map<String, List<test.fixtures.shapes.A>>> listOfMapOfStringToListOfA,
        @ThriftField(value=14, name="list_of_map_of_string_to_A", requiredness=Requiredness.NONE) final List<Map<String, test.fixtures.shapes.A>> listOfMapOfStringToA,
        @ThriftField(value=15, name="list_of_self", requiredness=Requiredness.NONE) final List<test.fixtures.shapes.B> listOfSelf,
        @ThriftField(value=16, name="map_of_string_to_self", requiredness=Requiredness.NONE) final Map<String, test.fixtures.shapes.B> mapOfStringToSelf,
        @ThriftField(value=17, name="just_an_enum", requiredness=Requiredness.NONE) final test.fixtures.shapes.Enum justAnEnum,
        @ThriftField(value=18, name="just_a_union", requiredness=Requiredness.NONE) final test.fixtures.shapes.Union justAUnion,
        @ThriftField(value=51, name="optional_just_an_A", requiredness=Requiredness.OPTIONAL) final test.fixtures.shapes.A optionalJustAnA,
        @ThriftField(value=52, name="optional_set_of_i32", requiredness=Requiredness.OPTIONAL) final Set<Integer> optionalSetOfI32,
        @ThriftField(value=53, name="optional_list_of_i32", requiredness=Requiredness.OPTIONAL) final List<Integer> optionalListOfI32,
        @ThriftField(value=54, name="optional_list_of_string", requiredness=Requiredness.OPTIONAL) final List<String> optionalListOfString,
        @ThriftField(value=55, name="optional_map_of_string_to_i32", requiredness=Requiredness.OPTIONAL) final Map<String, Integer> optionalMapOfStringToI32,
        @ThriftField(value=56, name="optional_map_of_string_to_A", requiredness=Requiredness.OPTIONAL) final Map<String, test.fixtures.shapes.A> optionalMapOfStringToA,
        @ThriftField(value=57, name="optional_map_of_string_to_list_of_i32", requiredness=Requiredness.OPTIONAL) final Map<String, List<Integer>> optionalMapOfStringToListOfI32,
        @ThriftField(value=58, name="optional_map_of_string_to_list_of_A", requiredness=Requiredness.OPTIONAL) final Map<String, List<test.fixtures.shapes.A>> optionalMapOfStringToListOfA,
        @ThriftField(value=59, name="optional_map_of_string_to_set_of_i32", requiredness=Requiredness.OPTIONAL) final Map<String, Set<Integer>> optionalMapOfStringToSetOfI32,
        @ThriftField(value=60, name="optional_enum", requiredness=Requiredness.OPTIONAL) final test.fixtures.shapes.Enum optionalEnum,
        @ThriftField(value=70, name="required_enum_with_default", requiredness=Requiredness.REQUIRED) final test.fixtures.shapes.Enum requiredEnumWithDefault,
        @ThriftField(value=80, name="string_with_default_value", requiredness=Requiredness.NONE) final String stringWithDefaultValue,
        @ThriftField(value=81, name="i32_with_default_value", requiredness=Requiredness.NONE) final int i32WithDefaultValue,
        @ThriftField(value=82, name="double_with_default_value", requiredness=Requiredness.NONE) final double doubleWithDefaultValue,
        @ThriftField(value=83, name="enum_with_default_value", requiredness=Requiredness.NONE) final test.fixtures.shapes.Enum enumWithDefaultValue,
        @ThriftField(value=84, name="A_with_default_value", requiredness=Requiredness.NONE) final test.fixtures.shapes.A aWithDefaultValue,
        @ThriftField(value=85, name="set_of_i32_with_default_value", requiredness=Requiredness.NONE) final Set<Integer> setOfI32WithDefaultValue,
        @ThriftField(value=86, name="map_of_i32_to_string_with_default_value", requiredness=Requiredness.NONE) final Map<Integer, String> mapOfI32ToStringWithDefaultValue,
        @ThriftField(value=87, name="list_of_string_with_default_value", requiredness=Requiredness.NONE) final List<String> listOfStringWithDefaultValue,
        @ThriftField(value=88, name="map_of_string_to_list_of_i32_with_default_value", requiredness=Requiredness.NONE) final Map<String, List<Integer>> mapOfStringToListOfI32WithDefaultValue
    ) {
        this.justAnA = justAnA;
        this.setOfI32 = setOfI32;
        this.listOfI32 = listOfI32;
        this.listOfString = listOfString;
        this.mapOfStringToI32 = mapOfStringToI32;
        this.mapOfStringToA = mapOfStringToA;
        this.mapOfStringToListOfI32 = mapOfStringToListOfI32;
        this.mapOfStringToListOfA = mapOfStringToListOfA;
        this.mapOfStringToSetOfI32 = mapOfStringToSetOfI32;
        this.mapOfStringToMapOfStringToI32 = mapOfStringToMapOfStringToI32;
        this.mapOfStringToMapOfStringToA = mapOfStringToMapOfStringToA;
        this.listOfSetOfI32 = listOfSetOfI32;
        this.listOfMapOfStringToListOfA = listOfMapOfStringToListOfA;
        this.listOfMapOfStringToA = listOfMapOfStringToA;
        this.listOfSelf = listOfSelf;
        this.mapOfStringToSelf = mapOfStringToSelf;
        this.justAnEnum = justAnEnum;
        this.justAUnion = justAUnion;
        this.optionalJustAnA = optionalJustAnA;
        this.optionalSetOfI32 = optionalSetOfI32;
        this.optionalListOfI32 = optionalListOfI32;
        this.optionalListOfString = optionalListOfString;
        this.optionalMapOfStringToI32 = optionalMapOfStringToI32;
        this.optionalMapOfStringToA = optionalMapOfStringToA;
        this.optionalMapOfStringToListOfI32 = optionalMapOfStringToListOfI32;
        this.optionalMapOfStringToListOfA = optionalMapOfStringToListOfA;
        this.optionalMapOfStringToSetOfI32 = optionalMapOfStringToSetOfI32;
        this.optionalEnum = optionalEnum;
        this.requiredEnumWithDefault = requiredEnumWithDefault;
        this.stringWithDefaultValue = stringWithDefaultValue;
        this.i32WithDefaultValue = i32WithDefaultValue;
        this.doubleWithDefaultValue = doubleWithDefaultValue;
        this.enumWithDefaultValue = enumWithDefaultValue;
        this.aWithDefaultValue = aWithDefaultValue;
        this.setOfI32WithDefaultValue = setOfI32WithDefaultValue;
        this.mapOfI32ToStringWithDefaultValue = mapOfI32ToStringWithDefaultValue;
        this.listOfStringWithDefaultValue = listOfStringWithDefaultValue;
        this.mapOfStringToListOfI32WithDefaultValue = mapOfStringToListOfI32WithDefaultValue;
    }
    
    @ThriftConstructor
    protected B() {
      this.justAnA = null;
      this.setOfI32 = null;
      this.listOfI32 = null;
      this.listOfString = null;
      this.mapOfStringToI32 = null;
      this.mapOfStringToA = null;
      this.mapOfStringToListOfI32 = null;
      this.mapOfStringToListOfA = null;
      this.mapOfStringToSetOfI32 = null;
      this.mapOfStringToMapOfStringToI32 = null;
      this.mapOfStringToMapOfStringToA = null;
      this.listOfSetOfI32 = null;
      this.listOfMapOfStringToListOfA = null;
      this.listOfMapOfStringToA = null;
      this.listOfSelf = null;
      this.mapOfStringToSelf = null;
      this.justAnEnum = null;
      this.justAUnion = null;
      this.optionalJustAnA = null;
      this.optionalSetOfI32 = null;
      this.optionalListOfI32 = null;
      this.optionalListOfString = null;
      this.optionalMapOfStringToI32 = null;
      this.optionalMapOfStringToA = null;
      this.optionalMapOfStringToListOfI32 = null;
      this.optionalMapOfStringToListOfA = null;
      this.optionalMapOfStringToSetOfI32 = null;
      this.optionalEnum = null;
      this.requiredEnumWithDefault = null;
      this.stringWithDefaultValue = null;
      this.i32WithDefaultValue = 0;
      this.doubleWithDefaultValue = 0.;
      this.enumWithDefaultValue = null;
      this.aWithDefaultValue = null;
      this.setOfI32WithDefaultValue = null;
      this.mapOfI32ToStringWithDefaultValue = null;
      this.listOfStringWithDefaultValue = null;
      this.mapOfStringToListOfI32WithDefaultValue = null;
    }
    
    public static class Builder {
        private test.fixtures.shapes.A justAnA;
        @ThriftField(value=1, name="just_an_A", requiredness=Requiredness.NONE)
        public Builder setJustAnA(test.fixtures.shapes.A justAnA) {
            this.justAnA = justAnA;
            return this;
        }
        private Set<Integer> setOfI32;
        @ThriftField(value=2, name="set_of_i32", requiredness=Requiredness.NONE)
        public Builder setSetOfI32(Set<Integer> setOfI32) {
            this.setOfI32 = setOfI32;
            return this;
        }
        private List<Integer> listOfI32;
        @ThriftField(value=3, name="list_of_i32", requiredness=Requiredness.NONE)
        public Builder setListOfI32(List<Integer> listOfI32) {
            this.listOfI32 = listOfI32;
            return this;
        }
        private List<String> listOfString;
        @ThriftField(value=4, name="list_of_string", requiredness=Requiredness.NONE)
        public Builder setListOfString(List<String> listOfString) {
            this.listOfString = listOfString;
            return this;
        }
        private Map<String, Integer> mapOfStringToI32;
        @ThriftField(value=5, name="map_of_string_to_i32", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToI32(Map<String, Integer> mapOfStringToI32) {
            this.mapOfStringToI32 = mapOfStringToI32;
            return this;
        }
        private Map<String, test.fixtures.shapes.A> mapOfStringToA;
        @ThriftField(value=6, name="map_of_string_to_A", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToA(Map<String, test.fixtures.shapes.A> mapOfStringToA) {
            this.mapOfStringToA = mapOfStringToA;
            return this;
        }
        private Map<String, List<Integer>> mapOfStringToListOfI32;
        @ThriftField(value=7, name="map_of_string_to_list_of_i32", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToListOfI32(Map<String, List<Integer>> mapOfStringToListOfI32) {
            this.mapOfStringToListOfI32 = mapOfStringToListOfI32;
            return this;
        }
        private Map<String, List<test.fixtures.shapes.A>> mapOfStringToListOfA;
        @ThriftField(value=8, name="map_of_string_to_list_of_A", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToListOfA(Map<String, List<test.fixtures.shapes.A>> mapOfStringToListOfA) {
            this.mapOfStringToListOfA = mapOfStringToListOfA;
            return this;
        }
        private Map<String, Set<Integer>> mapOfStringToSetOfI32;
        @ThriftField(value=9, name="map_of_string_to_set_of_i32", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToSetOfI32(Map<String, Set<Integer>> mapOfStringToSetOfI32) {
            this.mapOfStringToSetOfI32 = mapOfStringToSetOfI32;
            return this;
        }
        private Map<String, Map<String, Integer>> mapOfStringToMapOfStringToI32;
        @ThriftField(value=10, name="map_of_string_to_map_of_string_to_i32", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToMapOfStringToI32(Map<String, Map<String, Integer>> mapOfStringToMapOfStringToI32) {
            this.mapOfStringToMapOfStringToI32 = mapOfStringToMapOfStringToI32;
            return this;
        }
        private Map<String, Map<String, test.fixtures.shapes.A>> mapOfStringToMapOfStringToA;
        @ThriftField(value=11, name="map_of_string_to_map_of_string_to_A", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToMapOfStringToA(Map<String, Map<String, test.fixtures.shapes.A>> mapOfStringToMapOfStringToA) {
            this.mapOfStringToMapOfStringToA = mapOfStringToMapOfStringToA;
            return this;
        }
        private List<Set<Integer>> listOfSetOfI32;
        @ThriftField(value=12, name="list_of_set_of_i32", requiredness=Requiredness.NONE)
        public Builder setListOfSetOfI32(List<Set<Integer>> listOfSetOfI32) {
            this.listOfSetOfI32 = listOfSetOfI32;
            return this;
        }
        private List<Map<String, List<test.fixtures.shapes.A>>> listOfMapOfStringToListOfA;
        @ThriftField(value=13, name="list_of_map_of_string_to_list_of_A", requiredness=Requiredness.NONE)
        public Builder setListOfMapOfStringToListOfA(List<Map<String, List<test.fixtures.shapes.A>>> listOfMapOfStringToListOfA) {
            this.listOfMapOfStringToListOfA = listOfMapOfStringToListOfA;
            return this;
        }
        private List<Map<String, test.fixtures.shapes.A>> listOfMapOfStringToA;
        @ThriftField(value=14, name="list_of_map_of_string_to_A", requiredness=Requiredness.NONE)
        public Builder setListOfMapOfStringToA(List<Map<String, test.fixtures.shapes.A>> listOfMapOfStringToA) {
            this.listOfMapOfStringToA = listOfMapOfStringToA;
            return this;
        }
        private List<test.fixtures.shapes.B> listOfSelf;
        @ThriftField(value=15, name="list_of_self", requiredness=Requiredness.NONE)
        public Builder setListOfSelf(List<test.fixtures.shapes.B> listOfSelf) {
            this.listOfSelf = listOfSelf;
            return this;
        }
        private Map<String, test.fixtures.shapes.B> mapOfStringToSelf;
        @ThriftField(value=16, name="map_of_string_to_self", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToSelf(Map<String, test.fixtures.shapes.B> mapOfStringToSelf) {
            this.mapOfStringToSelf = mapOfStringToSelf;
            return this;
        }
        private test.fixtures.shapes.Enum justAnEnum;
        @ThriftField(value=17, name="just_an_enum", requiredness=Requiredness.NONE)
        public Builder setJustAnEnum(test.fixtures.shapes.Enum justAnEnum) {
            this.justAnEnum = justAnEnum;
            return this;
        }
        private test.fixtures.shapes.Union justAUnion;
        @ThriftField(value=18, name="just_a_union", requiredness=Requiredness.NONE)
        public Builder setJustAUnion(test.fixtures.shapes.Union justAUnion) {
            this.justAUnion = justAUnion;
            return this;
        }
        private test.fixtures.shapes.A optionalJustAnA;
        @ThriftField(value=51, name="optional_just_an_A", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalJustAnA(test.fixtures.shapes.A optionalJustAnA) {
            this.optionalJustAnA = optionalJustAnA;
            return this;
        }
        private Set<Integer> optionalSetOfI32;
        @ThriftField(value=52, name="optional_set_of_i32", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalSetOfI32(Set<Integer> optionalSetOfI32) {
            this.optionalSetOfI32 = optionalSetOfI32;
            return this;
        }
        private List<Integer> optionalListOfI32;
        @ThriftField(value=53, name="optional_list_of_i32", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalListOfI32(List<Integer> optionalListOfI32) {
            this.optionalListOfI32 = optionalListOfI32;
            return this;
        }
        private List<String> optionalListOfString;
        @ThriftField(value=54, name="optional_list_of_string", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalListOfString(List<String> optionalListOfString) {
            this.optionalListOfString = optionalListOfString;
            return this;
        }
        private Map<String, Integer> optionalMapOfStringToI32;
        @ThriftField(value=55, name="optional_map_of_string_to_i32", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalMapOfStringToI32(Map<String, Integer> optionalMapOfStringToI32) {
            this.optionalMapOfStringToI32 = optionalMapOfStringToI32;
            return this;
        }
        private Map<String, test.fixtures.shapes.A> optionalMapOfStringToA;
        @ThriftField(value=56, name="optional_map_of_string_to_A", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalMapOfStringToA(Map<String, test.fixtures.shapes.A> optionalMapOfStringToA) {
            this.optionalMapOfStringToA = optionalMapOfStringToA;
            return this;
        }
        private Map<String, List<Integer>> optionalMapOfStringToListOfI32;
        @ThriftField(value=57, name="optional_map_of_string_to_list_of_i32", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalMapOfStringToListOfI32(Map<String, List<Integer>> optionalMapOfStringToListOfI32) {
            this.optionalMapOfStringToListOfI32 = optionalMapOfStringToListOfI32;
            return this;
        }
        private Map<String, List<test.fixtures.shapes.A>> optionalMapOfStringToListOfA;
        @ThriftField(value=58, name="optional_map_of_string_to_list_of_A", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalMapOfStringToListOfA(Map<String, List<test.fixtures.shapes.A>> optionalMapOfStringToListOfA) {
            this.optionalMapOfStringToListOfA = optionalMapOfStringToListOfA;
            return this;
        }
        private Map<String, Set<Integer>> optionalMapOfStringToSetOfI32;
        @ThriftField(value=59, name="optional_map_of_string_to_set_of_i32", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalMapOfStringToSetOfI32(Map<String, Set<Integer>> optionalMapOfStringToSetOfI32) {
            this.optionalMapOfStringToSetOfI32 = optionalMapOfStringToSetOfI32;
            return this;
        }
        private test.fixtures.shapes.Enum optionalEnum;
        @ThriftField(value=60, name="optional_enum", requiredness=Requiredness.OPTIONAL)
        public Builder setOptionalEnum(test.fixtures.shapes.Enum optionalEnum) {
            this.optionalEnum = optionalEnum;
            return this;
        }
        private test.fixtures.shapes.Enum requiredEnumWithDefault;
        @ThriftField(value=70, name="required_enum_with_default", requiredness=Requiredness.REQUIRED)
        public Builder setRequiredEnumWithDefault(test.fixtures.shapes.Enum requiredEnumWithDefault) {
            this.requiredEnumWithDefault = requiredEnumWithDefault;
            return this;
        }
        private String stringWithDefaultValue;
        @ThriftField(value=80, name="string_with_default_value", requiredness=Requiredness.NONE)
        public Builder setStringWithDefaultValue(String stringWithDefaultValue) {
            this.stringWithDefaultValue = stringWithDefaultValue;
            return this;
        }
        private int i32WithDefaultValue;
        @ThriftField(value=81, name="i32_with_default_value", requiredness=Requiredness.NONE)
        public Builder setI32WithDefaultValue(int i32WithDefaultValue) {
            this.i32WithDefaultValue = i32WithDefaultValue;
            return this;
        }
        private double doubleWithDefaultValue;
        @ThriftField(value=82, name="double_with_default_value", requiredness=Requiredness.NONE)
        public Builder setDoubleWithDefaultValue(double doubleWithDefaultValue) {
            this.doubleWithDefaultValue = doubleWithDefaultValue;
            return this;
        }
        private test.fixtures.shapes.Enum enumWithDefaultValue;
        @ThriftField(value=83, name="enum_with_default_value", requiredness=Requiredness.NONE)
        public Builder setEnumWithDefaultValue(test.fixtures.shapes.Enum enumWithDefaultValue) {
            this.enumWithDefaultValue = enumWithDefaultValue;
            return this;
        }
        private test.fixtures.shapes.A aWithDefaultValue;
        @ThriftField(value=84, name="A_with_default_value", requiredness=Requiredness.NONE)
        public Builder setAWithDefaultValue(test.fixtures.shapes.A aWithDefaultValue) {
            this.aWithDefaultValue = aWithDefaultValue;
            return this;
        }
        private Set<Integer> setOfI32WithDefaultValue;
        @ThriftField(value=85, name="set_of_i32_with_default_value", requiredness=Requiredness.NONE)
        public Builder setSetOfI32WithDefaultValue(Set<Integer> setOfI32WithDefaultValue) {
            this.setOfI32WithDefaultValue = setOfI32WithDefaultValue;
            return this;
        }
        private Map<Integer, String> mapOfI32ToStringWithDefaultValue;
        @ThriftField(value=86, name="map_of_i32_to_string_with_default_value", requiredness=Requiredness.NONE)
        public Builder setMapOfI32ToStringWithDefaultValue(Map<Integer, String> mapOfI32ToStringWithDefaultValue) {
            this.mapOfI32ToStringWithDefaultValue = mapOfI32ToStringWithDefaultValue;
            return this;
        }
        private List<String> listOfStringWithDefaultValue;
        @ThriftField(value=87, name="list_of_string_with_default_value", requiredness=Requiredness.NONE)
        public Builder setListOfStringWithDefaultValue(List<String> listOfStringWithDefaultValue) {
            this.listOfStringWithDefaultValue = listOfStringWithDefaultValue;
            return this;
        }
        private Map<String, List<Integer>> mapOfStringToListOfI32WithDefaultValue;
        @ThriftField(value=88, name="map_of_string_to_list_of_i32_with_default_value", requiredness=Requiredness.NONE)
        public Builder setMapOfStringToListOfI32WithDefaultValue(Map<String, List<Integer>> mapOfStringToListOfI32WithDefaultValue) {
            this.mapOfStringToListOfI32WithDefaultValue = mapOfStringToListOfI32WithDefaultValue;
            return this;
        }
    
        public Builder() { }
        public Builder(B other) {
            this.justAnA = other.justAnA;
            this.setOfI32 = other.setOfI32;
            this.listOfI32 = other.listOfI32;
            this.listOfString = other.listOfString;
            this.mapOfStringToI32 = other.mapOfStringToI32;
            this.mapOfStringToA = other.mapOfStringToA;
            this.mapOfStringToListOfI32 = other.mapOfStringToListOfI32;
            this.mapOfStringToListOfA = other.mapOfStringToListOfA;
            this.mapOfStringToSetOfI32 = other.mapOfStringToSetOfI32;
            this.mapOfStringToMapOfStringToI32 = other.mapOfStringToMapOfStringToI32;
            this.mapOfStringToMapOfStringToA = other.mapOfStringToMapOfStringToA;
            this.listOfSetOfI32 = other.listOfSetOfI32;
            this.listOfMapOfStringToListOfA = other.listOfMapOfStringToListOfA;
            this.listOfMapOfStringToA = other.listOfMapOfStringToA;
            this.listOfSelf = other.listOfSelf;
            this.mapOfStringToSelf = other.mapOfStringToSelf;
            this.justAnEnum = other.justAnEnum;
            this.justAUnion = other.justAUnion;
            this.optionalJustAnA = other.optionalJustAnA;
            this.optionalSetOfI32 = other.optionalSetOfI32;
            this.optionalListOfI32 = other.optionalListOfI32;
            this.optionalListOfString = other.optionalListOfString;
            this.optionalMapOfStringToI32 = other.optionalMapOfStringToI32;
            this.optionalMapOfStringToA = other.optionalMapOfStringToA;
            this.optionalMapOfStringToListOfI32 = other.optionalMapOfStringToListOfI32;
            this.optionalMapOfStringToListOfA = other.optionalMapOfStringToListOfA;
            this.optionalMapOfStringToSetOfI32 = other.optionalMapOfStringToSetOfI32;
            this.optionalEnum = other.optionalEnum;
            this.requiredEnumWithDefault = other.requiredEnumWithDefault;
            this.stringWithDefaultValue = other.stringWithDefaultValue;
            this.i32WithDefaultValue = other.i32WithDefaultValue;
            this.doubleWithDefaultValue = other.doubleWithDefaultValue;
            this.enumWithDefaultValue = other.enumWithDefaultValue;
            this.aWithDefaultValue = other.aWithDefaultValue;
            this.setOfI32WithDefaultValue = other.setOfI32WithDefaultValue;
            this.mapOfI32ToStringWithDefaultValue = other.mapOfI32ToStringWithDefaultValue;
            this.listOfStringWithDefaultValue = other.listOfStringWithDefaultValue;
            this.mapOfStringToListOfI32WithDefaultValue = other.mapOfStringToListOfI32WithDefaultValue;
        }
    
        @ThriftConstructor
        public B build() {
            return new B (
                this.justAnA,
                this.setOfI32,
                this.listOfI32,
                this.listOfString,
                this.mapOfStringToI32,
                this.mapOfStringToA,
                this.mapOfStringToListOfI32,
                this.mapOfStringToListOfA,
                this.mapOfStringToSetOfI32,
                this.mapOfStringToMapOfStringToI32,
                this.mapOfStringToMapOfStringToA,
                this.listOfSetOfI32,
                this.listOfMapOfStringToListOfA,
                this.listOfMapOfStringToA,
                this.listOfSelf,
                this.mapOfStringToSelf,
                this.justAnEnum,
                this.justAUnion,
                this.optionalJustAnA,
                this.optionalSetOfI32,
                this.optionalListOfI32,
                this.optionalListOfString,
                this.optionalMapOfStringToI32,
                this.optionalMapOfStringToA,
                this.optionalMapOfStringToListOfI32,
                this.optionalMapOfStringToListOfA,
                this.optionalMapOfStringToSetOfI32,
                this.optionalEnum,
                this.requiredEnumWithDefault,
                this.stringWithDefaultValue,
                this.i32WithDefaultValue,
                this.doubleWithDefaultValue,
                this.enumWithDefaultValue,
                this.aWithDefaultValue,
                this.setOfI32WithDefaultValue,
                this.mapOfI32ToStringWithDefaultValue,
                this.listOfStringWithDefaultValue,
                this.mapOfStringToListOfI32WithDefaultValue
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("B");
    private final test.fixtures.shapes.A justAnA;
    public static final int _JUST_AN_A = 1;
    private static final TField JUST_AN__A_FIELD_DESC = new TField("justAnA", TType.STRUCT, (short)1);
    private final Set<Integer> setOfI32;
    public static final int _SET_OF_I32 = 2;
    private static final TField SET_OF_I32_FIELD_DESC = new TField("setOfI32", TType.SET, (short)2);
    private final List<Integer> listOfI32;
    public static final int _LIST_OF_I32 = 3;
    private static final TField LIST_OF_I32_FIELD_DESC = new TField("listOfI32", TType.LIST, (short)3);
    private final List<String> listOfString;
    public static final int _LIST_OF_STRING = 4;
    private static final TField LIST_OF_STRING_FIELD_DESC = new TField("listOfString", TType.LIST, (short)4);
    private final Map<String, Integer> mapOfStringToI32;
    public static final int _MAP_OF_STRING_TO_I32 = 5;
    private static final TField MAP_OF_STRING_TO_I32_FIELD_DESC = new TField("mapOfStringToI32", TType.MAP, (short)5);
    private final Map<String, test.fixtures.shapes.A> mapOfStringToA;
    public static final int _MAP_OF_STRING_TO_A = 6;
    private static final TField MAP_OF_STRING_TO__A_FIELD_DESC = new TField("mapOfStringToA", TType.MAP, (short)6);
    private final Map<String, List<Integer>> mapOfStringToListOfI32;
    public static final int _MAP_OF_STRING_TO_LIST_OF_I32 = 7;
    private static final TField MAP_OF_STRING_TO_LIST_OF_I32_FIELD_DESC = new TField("mapOfStringToListOfI32", TType.MAP, (short)7);
    private final Map<String, List<test.fixtures.shapes.A>> mapOfStringToListOfA;
    public static final int _MAP_OF_STRING_TO_LIST_OF_A = 8;
    private static final TField MAP_OF_STRING_TO_LIST_OF__A_FIELD_DESC = new TField("mapOfStringToListOfA", TType.MAP, (short)8);
    private final Map<String, Set<Integer>> mapOfStringToSetOfI32;
    public static final int _MAP_OF_STRING_TO_SET_OF_I32 = 9;
    private static final TField MAP_OF_STRING_TO_SET_OF_I32_FIELD_DESC = new TField("mapOfStringToSetOfI32", TType.MAP, (short)9);
    private final Map<String, Map<String, Integer>> mapOfStringToMapOfStringToI32;
    public static final int _MAP_OF_STRING_TO_MAP_OF_STRING_TO_I32 = 10;
    private static final TField MAP_OF_STRING_TO_MAP_OF_STRING_TO_I32_FIELD_DESC = new TField("mapOfStringToMapOfStringToI32", TType.MAP, (short)10);
    private final Map<String, Map<String, test.fixtures.shapes.A>> mapOfStringToMapOfStringToA;
    public static final int _MAP_OF_STRING_TO_MAP_OF_STRING_TO_A = 11;
    private static final TField MAP_OF_STRING_TO_MAP_OF_STRING_TO__A_FIELD_DESC = new TField("mapOfStringToMapOfStringToA", TType.MAP, (short)11);
    private final List<Set<Integer>> listOfSetOfI32;
    public static final int _LIST_OF_SET_OF_I32 = 12;
    private static final TField LIST_OF_SET_OF_I32_FIELD_DESC = new TField("listOfSetOfI32", TType.LIST, (short)12);
    private final List<Map<String, List<test.fixtures.shapes.A>>> listOfMapOfStringToListOfA;
    public static final int _LIST_OF_MAP_OF_STRING_TO_LIST_OF_A = 13;
    private static final TField LIST_OF_MAP_OF_STRING_TO_LIST_OF__A_FIELD_DESC = new TField("listOfMapOfStringToListOfA", TType.LIST, (short)13);
    private final List<Map<String, test.fixtures.shapes.A>> listOfMapOfStringToA;
    public static final int _LIST_OF_MAP_OF_STRING_TO_A = 14;
    private static final TField LIST_OF_MAP_OF_STRING_TO__A_FIELD_DESC = new TField("listOfMapOfStringToA", TType.LIST, (short)14);
    private final List<test.fixtures.shapes.B> listOfSelf;
    public static final int _LIST_OF_SELF = 15;
    private static final TField LIST_OF_SELF_FIELD_DESC = new TField("listOfSelf", TType.LIST, (short)15);
    private final Map<String, test.fixtures.shapes.B> mapOfStringToSelf;
    public static final int _MAP_OF_STRING_TO_SELF = 16;
    private static final TField MAP_OF_STRING_TO_SELF_FIELD_DESC = new TField("mapOfStringToSelf", TType.MAP, (short)16);
    private final test.fixtures.shapes.Enum justAnEnum;
    public static final int _JUST_AN_ENUM = 17;
    private static final TField JUST_AN_ENUM_FIELD_DESC = new TField("justAnEnum", TType.I32, (short)17);
    private final test.fixtures.shapes.Union justAUnion;
    public static final int _JUST_A_UNION = 18;
    private static final TField JUST_A_UNION_FIELD_DESC = new TField("justAUnion", TType.STRUCT, (short)18);
    private final test.fixtures.shapes.A optionalJustAnA;
    public static final int _OPTIONAL_JUST_AN_A = 51;
    private static final TField OPTIONAL_JUST_AN__A_FIELD_DESC = new TField("optionalJustAnA", TType.STRUCT, (short)51);
    private final Set<Integer> optionalSetOfI32;
    public static final int _OPTIONAL_SET_OF_I32 = 52;
    private static final TField OPTIONAL_SET_OF_I32_FIELD_DESC = new TField("optionalSetOfI32", TType.SET, (short)52);
    private final List<Integer> optionalListOfI32;
    public static final int _OPTIONAL_LIST_OF_I32 = 53;
    private static final TField OPTIONAL_LIST_OF_I32_FIELD_DESC = new TField("optionalListOfI32", TType.LIST, (short)53);
    private final List<String> optionalListOfString;
    public static final int _OPTIONAL_LIST_OF_STRING = 54;
    private static final TField OPTIONAL_LIST_OF_STRING_FIELD_DESC = new TField("optionalListOfString", TType.LIST, (short)54);
    private final Map<String, Integer> optionalMapOfStringToI32;
    public static final int _OPTIONAL_MAP_OF_STRING_TO_I32 = 55;
    private static final TField OPTIONAL_MAP_OF_STRING_TO_I32_FIELD_DESC = new TField("optionalMapOfStringToI32", TType.MAP, (short)55);
    private final Map<String, test.fixtures.shapes.A> optionalMapOfStringToA;
    public static final int _OPTIONAL_MAP_OF_STRING_TO_A = 56;
    private static final TField OPTIONAL_MAP_OF_STRING_TO__A_FIELD_DESC = new TField("optionalMapOfStringToA", TType.MAP, (short)56);
    private final Map<String, List<Integer>> optionalMapOfStringToListOfI32;
    public static final int _OPTIONAL_MAP_OF_STRING_TO_LIST_OF_I32 = 57;
    private static final TField OPTIONAL_MAP_OF_STRING_TO_LIST_OF_I32_FIELD_DESC = new TField("optionalMapOfStringToListOfI32", TType.MAP, (short)57);
    private final Map<String, List<test.fixtures.shapes.A>> optionalMapOfStringToListOfA;
    public static final int _OPTIONAL_MAP_OF_STRING_TO_LIST_OF_A = 58;
    private static final TField OPTIONAL_MAP_OF_STRING_TO_LIST_OF__A_FIELD_DESC = new TField("optionalMapOfStringToListOfA", TType.MAP, (short)58);
    private final Map<String, Set<Integer>> optionalMapOfStringToSetOfI32;
    public static final int _OPTIONAL_MAP_OF_STRING_TO_SET_OF_I32 = 59;
    private static final TField OPTIONAL_MAP_OF_STRING_TO_SET_OF_I32_FIELD_DESC = new TField("optionalMapOfStringToSetOfI32", TType.MAP, (short)59);
    private final test.fixtures.shapes.Enum optionalEnum;
    public static final int _OPTIONAL_ENUM = 60;
    private static final TField OPTIONAL_ENUM_FIELD_DESC = new TField("optionalEnum", TType.I32, (short)60);
    private final test.fixtures.shapes.Enum requiredEnumWithDefault;
    public static final int _REQUIRED_ENUM_WITH_DEFAULT = 70;
    private static final TField REQUIRED_ENUM_WITH_DEFAULT_FIELD_DESC = new TField("requiredEnumWithDefault", TType.I32, (short)70);
    private final String stringWithDefaultValue;
    public static final int _STRING_WITH_DEFAULT_VALUE = 80;
    private static final TField STRING_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("stringWithDefaultValue", TType.STRING, (short)80);
    private final int i32WithDefaultValue;
    public static final int _I32_WITH_DEFAULT_VALUE = 81;
    private static final TField I32_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("i32WithDefaultValue", TType.I32, (short)81);
    private final double doubleWithDefaultValue;
    public static final int _DOUBLE_WITH_DEFAULT_VALUE = 82;
    private static final TField DOUBLE_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("doubleWithDefaultValue", TType.DOUBLE, (short)82);
    private final test.fixtures.shapes.Enum enumWithDefaultValue;
    public static final int _ENUM_WITH_DEFAULT_VALUE = 83;
    private static final TField ENUM_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("enumWithDefaultValue", TType.I32, (short)83);
    private final test.fixtures.shapes.A aWithDefaultValue;
    public static final int _A_WITH_DEFAULT_VALUE = 84;
    private static final TField A_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("aWithDefaultValue", TType.STRUCT, (short)84);
    private final Set<Integer> setOfI32WithDefaultValue;
    public static final int _SET_OF_I32_WITH_DEFAULT_VALUE = 85;
    private static final TField SET_OF_I32_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("setOfI32WithDefaultValue", TType.SET, (short)85);
    private final Map<Integer, String> mapOfI32ToStringWithDefaultValue;
    public static final int _MAP_OF_I32_TO_STRING_WITH_DEFAULT_VALUE = 86;
    private static final TField MAP_OF_I32_TO_STRING_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("mapOfI32ToStringWithDefaultValue", TType.MAP, (short)86);
    private final List<String> listOfStringWithDefaultValue;
    public static final int _LIST_OF_STRING_WITH_DEFAULT_VALUE = 87;
    private static final TField LIST_OF_STRING_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("listOfStringWithDefaultValue", TType.LIST, (short)87);
    private final Map<String, List<Integer>> mapOfStringToListOfI32WithDefaultValue;
    public static final int _MAP_OF_STRING_TO_LIST_OF_I32_WITH_DEFAULT_VALUE = 88;
    private static final TField MAP_OF_STRING_TO_LIST_OF_I32_WITH_DEFAULT_VALUE_FIELD_DESC = new TField("mapOfStringToListOfI32WithDefaultValue", TType.MAP, (short)88);

    
    @ThriftField(value=1, name="just_an_A", requiredness=Requiredness.NONE)
    public test.fixtures.shapes.A getJustAnA() { return justAnA; }
        
    @ThriftField(value=2, name="set_of_i32", requiredness=Requiredness.NONE)
    public Set<Integer> getSetOfI32() { return setOfI32; }
        
    @ThriftField(value=3, name="list_of_i32", requiredness=Requiredness.NONE)
    public List<Integer> getListOfI32() { return listOfI32; }
        
    @ThriftField(value=4, name="list_of_string", requiredness=Requiredness.NONE)
    public List<String> getListOfString() { return listOfString; }
        
    @ThriftField(value=5, name="map_of_string_to_i32", requiredness=Requiredness.NONE)
    public Map<String, Integer> getMapOfStringToI32() { return mapOfStringToI32; }
        
    @ThriftField(value=6, name="map_of_string_to_A", requiredness=Requiredness.NONE)
    public Map<String, test.fixtures.shapes.A> getMapOfStringToA() { return mapOfStringToA; }
        
    @ThriftField(value=7, name="map_of_string_to_list_of_i32", requiredness=Requiredness.NONE)
    public Map<String, List<Integer>> getMapOfStringToListOfI32() { return mapOfStringToListOfI32; }
        
    @ThriftField(value=8, name="map_of_string_to_list_of_A", requiredness=Requiredness.NONE)
    public Map<String, List<test.fixtures.shapes.A>> getMapOfStringToListOfA() { return mapOfStringToListOfA; }
        
    @ThriftField(value=9, name="map_of_string_to_set_of_i32", requiredness=Requiredness.NONE)
    public Map<String, Set<Integer>> getMapOfStringToSetOfI32() { return mapOfStringToSetOfI32; }
        
    @ThriftField(value=10, name="map_of_string_to_map_of_string_to_i32", requiredness=Requiredness.NONE)
    public Map<String, Map<String, Integer>> getMapOfStringToMapOfStringToI32() { return mapOfStringToMapOfStringToI32; }
        
    @ThriftField(value=11, name="map_of_string_to_map_of_string_to_A", requiredness=Requiredness.NONE)
    public Map<String, Map<String, test.fixtures.shapes.A>> getMapOfStringToMapOfStringToA() { return mapOfStringToMapOfStringToA; }
        
    @ThriftField(value=12, name="list_of_set_of_i32", requiredness=Requiredness.NONE)
    public List<Set<Integer>> getListOfSetOfI32() { return listOfSetOfI32; }
        
    @ThriftField(value=13, name="list_of_map_of_string_to_list_of_A", requiredness=Requiredness.NONE)
    public List<Map<String, List<test.fixtures.shapes.A>>> getListOfMapOfStringToListOfA() { return listOfMapOfStringToListOfA; }
        
    @ThriftField(value=14, name="list_of_map_of_string_to_A", requiredness=Requiredness.NONE)
    public List<Map<String, test.fixtures.shapes.A>> getListOfMapOfStringToA() { return listOfMapOfStringToA; }
        
    @ThriftField(value=15, name="list_of_self", requiredness=Requiredness.NONE)
    public List<test.fixtures.shapes.B> getListOfSelf() { return listOfSelf; }
        
    @ThriftField(value=16, name="map_of_string_to_self", requiredness=Requiredness.NONE)
    public Map<String, test.fixtures.shapes.B> getMapOfStringToSelf() { return mapOfStringToSelf; }
        
    @ThriftField(value=17, name="just_an_enum", requiredness=Requiredness.NONE)
    public test.fixtures.shapes.Enum getJustAnEnum() { return justAnEnum; }
        
    @ThriftField(value=18, name="just_a_union", requiredness=Requiredness.NONE)
    public test.fixtures.shapes.Union getJustAUnion() { return justAUnion; }
        
    @ThriftField(value=51, name="optional_just_an_A", requiredness=Requiredness.OPTIONAL)
    public test.fixtures.shapes.A getOptionalJustAnA() { return optionalJustAnA; }
        
    @ThriftField(value=52, name="optional_set_of_i32", requiredness=Requiredness.OPTIONAL)
    public Set<Integer> getOptionalSetOfI32() { return optionalSetOfI32; }
        
    @ThriftField(value=53, name="optional_list_of_i32", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getOptionalListOfI32() { return optionalListOfI32; }
        
    @ThriftField(value=54, name="optional_list_of_string", requiredness=Requiredness.OPTIONAL)
    public List<String> getOptionalListOfString() { return optionalListOfString; }
        
    @ThriftField(value=55, name="optional_map_of_string_to_i32", requiredness=Requiredness.OPTIONAL)
    public Map<String, Integer> getOptionalMapOfStringToI32() { return optionalMapOfStringToI32; }
        
    @ThriftField(value=56, name="optional_map_of_string_to_A", requiredness=Requiredness.OPTIONAL)
    public Map<String, test.fixtures.shapes.A> getOptionalMapOfStringToA() { return optionalMapOfStringToA; }
        
    @ThriftField(value=57, name="optional_map_of_string_to_list_of_i32", requiredness=Requiredness.OPTIONAL)
    public Map<String, List<Integer>> getOptionalMapOfStringToListOfI32() { return optionalMapOfStringToListOfI32; }
        
    @ThriftField(value=58, name="optional_map_of_string_to_list_of_A", requiredness=Requiredness.OPTIONAL)
    public Map<String, List<test.fixtures.shapes.A>> getOptionalMapOfStringToListOfA() { return optionalMapOfStringToListOfA; }
        
    @ThriftField(value=59, name="optional_map_of_string_to_set_of_i32", requiredness=Requiredness.OPTIONAL)
    public Map<String, Set<Integer>> getOptionalMapOfStringToSetOfI32() { return optionalMapOfStringToSetOfI32; }
        
    @ThriftField(value=60, name="optional_enum", requiredness=Requiredness.OPTIONAL)
    public test.fixtures.shapes.Enum getOptionalEnum() { return optionalEnum; }
        
    @ThriftField(value=70, name="required_enum_with_default", requiredness=Requiredness.REQUIRED)
    public test.fixtures.shapes.Enum getRequiredEnumWithDefault() { return requiredEnumWithDefault; }
        
    @ThriftField(value=80, name="string_with_default_value", requiredness=Requiredness.NONE)
    public String getStringWithDefaultValue() { return stringWithDefaultValue; }
        
    @ThriftField(value=81, name="i32_with_default_value", requiredness=Requiredness.NONE)
    public int getI32WithDefaultValue() { return i32WithDefaultValue; }
        
    @ThriftField(value=82, name="double_with_default_value", requiredness=Requiredness.NONE)
    public double getDoubleWithDefaultValue() { return doubleWithDefaultValue; }
        
    @ThriftField(value=83, name="enum_with_default_value", requiredness=Requiredness.NONE)
    public test.fixtures.shapes.Enum getEnumWithDefaultValue() { return enumWithDefaultValue; }
        
    @ThriftField(value=84, name="A_with_default_value", requiredness=Requiredness.NONE)
    public test.fixtures.shapes.A getAWithDefaultValue() { return aWithDefaultValue; }
        
    @ThriftField(value=85, name="set_of_i32_with_default_value", requiredness=Requiredness.NONE)
    public Set<Integer> getSetOfI32WithDefaultValue() { return setOfI32WithDefaultValue; }
        
    @ThriftField(value=86, name="map_of_i32_to_string_with_default_value", requiredness=Requiredness.NONE)
    public Map<Integer, String> getMapOfI32ToStringWithDefaultValue() { return mapOfI32ToStringWithDefaultValue; }
        
    @ThriftField(value=87, name="list_of_string_with_default_value", requiredness=Requiredness.NONE)
    public List<String> getListOfStringWithDefaultValue() { return listOfStringWithDefaultValue; }
        
    @ThriftField(value=88, name="map_of_string_to_list_of_i32_with_default_value", requiredness=Requiredness.NONE)
    public Map<String, List<Integer>> getMapOfStringToListOfI32WithDefaultValue() { return mapOfStringToListOfI32WithDefaultValue; }
    
    @Override
    public String toString() {
        return toStringHelper(this)
            .add("justAnA", justAnA)
            .add("setOfI32", setOfI32)
            .add("listOfI32", listOfI32)
            .add("listOfString", listOfString)
            .add("mapOfStringToI32", mapOfStringToI32)
            .add("mapOfStringToA", mapOfStringToA)
            .add("mapOfStringToListOfI32", mapOfStringToListOfI32)
            .add("mapOfStringToListOfA", mapOfStringToListOfA)
            .add("mapOfStringToSetOfI32", mapOfStringToSetOfI32)
            .add("mapOfStringToMapOfStringToI32", mapOfStringToMapOfStringToI32)
            .add("mapOfStringToMapOfStringToA", mapOfStringToMapOfStringToA)
            .add("listOfSetOfI32", listOfSetOfI32)
            .add("listOfMapOfStringToListOfA", listOfMapOfStringToListOfA)
            .add("listOfMapOfStringToA", listOfMapOfStringToA)
            .add("listOfSelf", listOfSelf)
            .add("mapOfStringToSelf", mapOfStringToSelf)
            .add("justAnEnum", justAnEnum)
            .add("justAUnion", justAUnion)
            .add("optionalJustAnA", optionalJustAnA)
            .add("optionalSetOfI32", optionalSetOfI32)
            .add("optionalListOfI32", optionalListOfI32)
            .add("optionalListOfString", optionalListOfString)
            .add("optionalMapOfStringToI32", optionalMapOfStringToI32)
            .add("optionalMapOfStringToA", optionalMapOfStringToA)
            .add("optionalMapOfStringToListOfI32", optionalMapOfStringToListOfI32)
            .add("optionalMapOfStringToListOfA", optionalMapOfStringToListOfA)
            .add("optionalMapOfStringToSetOfI32", optionalMapOfStringToSetOfI32)
            .add("optionalEnum", optionalEnum)
            .add("requiredEnumWithDefault", requiredEnumWithDefault)
            .add("stringWithDefaultValue", stringWithDefaultValue)
            .add("i32WithDefaultValue", i32WithDefaultValue)
            .add("doubleWithDefaultValue", doubleWithDefaultValue)
            .add("enumWithDefaultValue", enumWithDefaultValue)
            .add("aWithDefaultValue", aWithDefaultValue)
            .add("setOfI32WithDefaultValue", setOfI32WithDefaultValue)
            .add("mapOfI32ToStringWithDefaultValue", mapOfI32ToStringWithDefaultValue)
            .add("listOfStringWithDefaultValue", listOfStringWithDefaultValue)
            .add("mapOfStringToListOfI32WithDefaultValue", mapOfStringToListOfI32WithDefaultValue)
            .toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        B other = (B)o;
    
        return
            Objects.equals(justAnA, other.justAnA) &&
            Objects.equals(setOfI32, other.setOfI32) &&
            Objects.equals(listOfI32, other.listOfI32) &&
            Objects.equals(listOfString, other.listOfString) &&
            Objects.equals(mapOfStringToI32, other.mapOfStringToI32) &&
            Objects.equals(mapOfStringToA, other.mapOfStringToA) &&
            Objects.equals(mapOfStringToListOfI32, other.mapOfStringToListOfI32) &&
            Objects.equals(mapOfStringToListOfA, other.mapOfStringToListOfA) &&
            Objects.equals(mapOfStringToSetOfI32, other.mapOfStringToSetOfI32) &&
            Objects.equals(mapOfStringToMapOfStringToI32, other.mapOfStringToMapOfStringToI32) &&
            Objects.equals(mapOfStringToMapOfStringToA, other.mapOfStringToMapOfStringToA) &&
            Objects.equals(listOfSetOfI32, other.listOfSetOfI32) &&
            Objects.equals(listOfMapOfStringToListOfA, other.listOfMapOfStringToListOfA) &&
            Objects.equals(listOfMapOfStringToA, other.listOfMapOfStringToA) &&
            Objects.equals(listOfSelf, other.listOfSelf) &&
            Objects.equals(mapOfStringToSelf, other.mapOfStringToSelf) &&
            Objects.equals(justAnEnum, other.justAnEnum) &&
            Objects.equals(justAUnion, other.justAUnion) &&
            Objects.equals(optionalJustAnA, other.optionalJustAnA) &&
            Objects.equals(optionalSetOfI32, other.optionalSetOfI32) &&
            Objects.equals(optionalListOfI32, other.optionalListOfI32) &&
            Objects.equals(optionalListOfString, other.optionalListOfString) &&
            Objects.equals(optionalMapOfStringToI32, other.optionalMapOfStringToI32) &&
            Objects.equals(optionalMapOfStringToA, other.optionalMapOfStringToA) &&
            Objects.equals(optionalMapOfStringToListOfI32, other.optionalMapOfStringToListOfI32) &&
            Objects.equals(optionalMapOfStringToListOfA, other.optionalMapOfStringToListOfA) &&
            Objects.equals(optionalMapOfStringToSetOfI32, other.optionalMapOfStringToSetOfI32) &&
            Objects.equals(optionalEnum, other.optionalEnum) &&
            Objects.equals(requiredEnumWithDefault, other.requiredEnumWithDefault) &&
            Objects.equals(stringWithDefaultValue, other.stringWithDefaultValue) &&
            Objects.equals(i32WithDefaultValue, other.i32WithDefaultValue) &&
            Objects.equals(doubleWithDefaultValue, other.doubleWithDefaultValue) &&
            Objects.equals(enumWithDefaultValue, other.enumWithDefaultValue) &&
            Objects.equals(aWithDefaultValue, other.aWithDefaultValue) &&
            Objects.equals(setOfI32WithDefaultValue, other.setOfI32WithDefaultValue) &&
            Objects.equals(mapOfI32ToStringWithDefaultValue, other.mapOfI32ToStringWithDefaultValue) &&
            Objects.equals(listOfStringWithDefaultValue, other.listOfStringWithDefaultValue) &&
            Objects.equals(mapOfStringToListOfI32WithDefaultValue, other.mapOfStringToListOfI32WithDefaultValue) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            justAnA,
            setOfI32,
            listOfI32,
            listOfString,
            mapOfStringToI32,
            mapOfStringToA,
            mapOfStringToListOfI32,
            mapOfStringToListOfA,
            mapOfStringToSetOfI32,
            mapOfStringToMapOfStringToI32,
            mapOfStringToMapOfStringToA,
            listOfSetOfI32,
            listOfMapOfStringToListOfA,
            listOfMapOfStringToA,
            listOfSelf,
            mapOfStringToSelf,
            justAnEnum,
            justAUnion,
            optionalJustAnA,
            optionalSetOfI32,
            optionalListOfI32,
            optionalListOfString,
            optionalMapOfStringToI32,
            optionalMapOfStringToA,
            optionalMapOfStringToListOfI32,
            optionalMapOfStringToListOfA,
            optionalMapOfStringToSetOfI32,
            optionalEnum,
            requiredEnumWithDefault,
            stringWithDefaultValue,
            i32WithDefaultValue,
            doubleWithDefaultValue,
            enumWithDefaultValue,
            aWithDefaultValue,
            setOfI32WithDefaultValue,
            mapOfI32ToStringWithDefaultValue,
            listOfStringWithDefaultValue,
            mapOfStringToListOfI32WithDefaultValue
        });
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.justAnA != null) {
        oprot.writeFieldBegin(JUST_AN__A_FIELD_DESC);
        this.justAnA.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (this.setOfI32 != null) {
        oprot.writeFieldBegin(SET_OF_I32_FIELD_DESC);
        Set<Integer> _iter0 = this.setOfI32;
        oprot.writeSetBegin(new TSet(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfI32 != null) {
        oprot.writeFieldBegin(LIST_OF_I32_FIELD_DESC);
        List<Integer> _iter0 = this.listOfI32;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfString != null) {
        oprot.writeFieldBegin(LIST_OF_STRING_FIELD_DESC);
        List<String> _iter0 = this.listOfString;
        oprot.writeListBegin(new TList(TType.STRING, _iter0.size()));
        for (String _iter1 : _iter0) {
          oprot.writeString(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToI32 != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_I32_FIELD_DESC);
        Map<String, Integer> _iter0 = this.mapOfStringToI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter0.size()));
        for (Map.Entry<String, Integer> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          oprot.writeI32(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToA != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO__A_FIELD_DESC);
        Map<String, test.fixtures.shapes.A> _iter0 = this.mapOfStringToA;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter0.size()));
        for (Map.Entry<String, test.fixtures.shapes.A> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          _iter1.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToListOfI32 != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_LIST_OF_I32_FIELD_DESC);
        Map<String, List<Integer>> _iter0 = this.mapOfStringToListOfI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
        for (Map.Entry<String, List<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeListBegin(new TList(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToListOfA != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_LIST_OF__A_FIELD_DESC);
        Map<String, List<test.fixtures.shapes.A>> _iter0 = this.mapOfStringToListOfA;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
        for (Map.Entry<String, List<test.fixtures.shapes.A>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeListBegin(new TList(TType.STRUCT, _iter1.getValue().size()));
        for (test.fixtures.shapes.A _iter2 : _iter1.getValue()) {
          _iter2.write0(oprot);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToSetOfI32 != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_SET_OF_I32_FIELD_DESC);
        Map<String, Set<Integer>> _iter0 = this.mapOfStringToSetOfI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.SET, _iter0.size()));
        for (Map.Entry<String, Set<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToMapOfStringToI32 != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_MAP_OF_STRING_TO_I32_FIELD_DESC);
        Map<String, Map<String, Integer>> _iter0 = this.mapOfStringToMapOfStringToI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, _iter0.size()));
        for (Map.Entry<String, Map<String, Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter1.getValue().size()));
        for (Map.Entry<String, Integer> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeString(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());
        }
        oprot.writeMapEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToMapOfStringToA != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_MAP_OF_STRING_TO__A_FIELD_DESC);
        Map<String, Map<String, test.fixtures.shapes.A>> _iter0 = this.mapOfStringToMapOfStringToA;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, _iter0.size()));
        for (Map.Entry<String, Map<String, test.fixtures.shapes.A>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter1.getValue().size()));
        for (Map.Entry<String, test.fixtures.shapes.A> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeString(_iter2.getKey());
          _iter2.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfSetOfI32 != null) {
        oprot.writeFieldBegin(LIST_OF_SET_OF_I32_FIELD_DESC);
        List<Set<Integer>> _iter0 = this.listOfSetOfI32;
        oprot.writeListBegin(new TList(TType.SET, _iter0.size()));
        for (Set<Integer> _iter1 : _iter0) {
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.size()));
        for (int _iter2 : _iter1) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfMapOfStringToListOfA != null) {
        oprot.writeFieldBegin(LIST_OF_MAP_OF_STRING_TO_LIST_OF__A_FIELD_DESC);
        List<Map<String, List<test.fixtures.shapes.A>>> _iter0 = this.listOfMapOfStringToListOfA;
        oprot.writeListBegin(new TList(TType.MAP, _iter0.size()));
        for (Map<String, List<test.fixtures.shapes.A>> _iter1 : _iter0) {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter1.size()));
        for (Map.Entry<String, List<test.fixtures.shapes.A>> _iter2 : _iter1.entrySet()) {
          oprot.writeString(_iter2.getKey());
          
          oprot.writeListBegin(new TList(TType.STRUCT, _iter2.getValue().size()));
        for (test.fixtures.shapes.A _iter3 : _iter2.getValue()) {
          _iter3.write0(oprot);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfMapOfStringToA != null) {
        oprot.writeFieldBegin(LIST_OF_MAP_OF_STRING_TO__A_FIELD_DESC);
        List<Map<String, test.fixtures.shapes.A>> _iter0 = this.listOfMapOfStringToA;
        oprot.writeListBegin(new TList(TType.MAP, _iter0.size()));
        for (Map<String, test.fixtures.shapes.A> _iter1 : _iter0) {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter1.size()));
        for (Map.Entry<String, test.fixtures.shapes.A> _iter2 : _iter1.entrySet()) {
          oprot.writeString(_iter2.getKey());
          _iter2.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfSelf != null) {
        oprot.writeFieldBegin(LIST_OF_SELF_FIELD_DESC);
        List<test.fixtures.shapes.B> _iter0 = this.listOfSelf;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
        for (test.fixtures.shapes.B _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToSelf != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_SELF_FIELD_DESC);
        Map<String, test.fixtures.shapes.B> _iter0 = this.mapOfStringToSelf;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter0.size()));
        for (Map.Entry<String, test.fixtures.shapes.B> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          _iter1.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JUST_AN_ENUM_FIELD_DESC);
      oprot.writeI32(this.justAnEnum == null ? 0 : this.justAnEnum.getValue());
      oprot.writeFieldEnd();
      if (this.justAUnion != null) {
        oprot.writeFieldBegin(JUST_A_UNION_FIELD_DESC);
        this.justAUnion.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (this.optionalJustAnA != null) {
        oprot.writeFieldBegin(OPTIONAL_JUST_AN__A_FIELD_DESC);
        this.optionalJustAnA.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (this.optionalSetOfI32 != null) {
        oprot.writeFieldBegin(OPTIONAL_SET_OF_I32_FIELD_DESC);
        Set<Integer> _iter0 = this.optionalSetOfI32;
        oprot.writeSetBegin(new TSet(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalListOfI32 != null) {
        oprot.writeFieldBegin(OPTIONAL_LIST_OF_I32_FIELD_DESC);
        List<Integer> _iter0 = this.optionalListOfI32;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalListOfString != null) {
        oprot.writeFieldBegin(OPTIONAL_LIST_OF_STRING_FIELD_DESC);
        List<String> _iter0 = this.optionalListOfString;
        oprot.writeListBegin(new TList(TType.STRING, _iter0.size()));
        for (String _iter1 : _iter0) {
          oprot.writeString(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalMapOfStringToI32 != null) {
        oprot.writeFieldBegin(OPTIONAL_MAP_OF_STRING_TO_I32_FIELD_DESC);
        Map<String, Integer> _iter0 = this.optionalMapOfStringToI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter0.size()));
        for (Map.Entry<String, Integer> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          oprot.writeI32(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalMapOfStringToA != null) {
        oprot.writeFieldBegin(OPTIONAL_MAP_OF_STRING_TO__A_FIELD_DESC);
        Map<String, test.fixtures.shapes.A> _iter0 = this.optionalMapOfStringToA;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter0.size()));
        for (Map.Entry<String, test.fixtures.shapes.A> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          _iter1.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalMapOfStringToListOfI32 != null) {
        oprot.writeFieldBegin(OPTIONAL_MAP_OF_STRING_TO_LIST_OF_I32_FIELD_DESC);
        Map<String, List<Integer>> _iter0 = this.optionalMapOfStringToListOfI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
        for (Map.Entry<String, List<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeListBegin(new TList(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalMapOfStringToListOfA != null) {
        oprot.writeFieldBegin(OPTIONAL_MAP_OF_STRING_TO_LIST_OF__A_FIELD_DESC);
        Map<String, List<test.fixtures.shapes.A>> _iter0 = this.optionalMapOfStringToListOfA;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
        for (Map.Entry<String, List<test.fixtures.shapes.A>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeListBegin(new TList(TType.STRUCT, _iter1.getValue().size()));
        for (test.fixtures.shapes.A _iter2 : _iter1.getValue()) {
          _iter2.write0(oprot);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalMapOfStringToSetOfI32 != null) {
        oprot.writeFieldBegin(OPTIONAL_MAP_OF_STRING_TO_SET_OF_I32_FIELD_DESC);
        Map<String, Set<Integer>> _iter0 = this.optionalMapOfStringToSetOfI32;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.SET, _iter0.size()));
        for (Map.Entry<String, Set<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.optionalEnum != null) {
        oprot.writeFieldBegin(OPTIONAL_ENUM_FIELD_DESC);
        oprot.writeI32(this.optionalEnum == null ? 0 : this.optionalEnum.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUIRED_ENUM_WITH_DEFAULT_FIELD_DESC);
      oprot.writeI32(this.requiredEnumWithDefault == null ? 0 : this.requiredEnumWithDefault.getValue());
      oprot.writeFieldEnd();
      if (this.stringWithDefaultValue != null) {
        oprot.writeFieldBegin(STRING_WITH_DEFAULT_VALUE_FIELD_DESC);
        oprot.writeString(this.stringWithDefaultValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I32_WITH_DEFAULT_VALUE_FIELD_DESC);
      oprot.writeI32(this.i32WithDefaultValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_WITH_DEFAULT_VALUE_FIELD_DESC);
      oprot.writeDouble(this.doubleWithDefaultValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENUM_WITH_DEFAULT_VALUE_FIELD_DESC);
      oprot.writeI32(this.enumWithDefaultValue == null ? 0 : this.enumWithDefaultValue.getValue());
      oprot.writeFieldEnd();
      if (this.aWithDefaultValue != null) {
        oprot.writeFieldBegin(A_WITH_DEFAULT_VALUE_FIELD_DESC);
        this.aWithDefaultValue.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (this.setOfI32WithDefaultValue != null) {
        oprot.writeFieldBegin(SET_OF_I32_WITH_DEFAULT_VALUE_FIELD_DESC);
        Set<Integer> _iter0 = this.setOfI32WithDefaultValue;
        oprot.writeSetBegin(new TSet(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfI32ToStringWithDefaultValue != null) {
        oprot.writeFieldBegin(MAP_OF_I32_TO_STRING_WITH_DEFAULT_VALUE_FIELD_DESC);
        Map<Integer, String> _iter0 = this.mapOfI32ToStringWithDefaultValue;
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter0.size()));
        for (Map.Entry<Integer, String> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          oprot.writeString(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (this.listOfStringWithDefaultValue != null) {
        oprot.writeFieldBegin(LIST_OF_STRING_WITH_DEFAULT_VALUE_FIELD_DESC);
        List<String> _iter0 = this.listOfStringWithDefaultValue;
        oprot.writeListBegin(new TList(TType.STRING, _iter0.size()));
        for (String _iter1 : _iter0) {
          oprot.writeString(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (this.mapOfStringToListOfI32WithDefaultValue != null) {
        oprot.writeFieldBegin(MAP_OF_STRING_TO_LIST_OF_I32_WITH_DEFAULT_VALUE_FIELD_DESC);
        Map<String, List<Integer>> _iter0 = this.mapOfStringToListOfI32WithDefaultValue;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
        for (Map.Entry<String, List<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          
          oprot.writeListBegin(new TList(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
