{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}

    use fbthrift::{
        framing::Framing,
        protocol::{
            self, Protocol, ProtocolDecoded, ProtocolEncodedFinal, ProtocolReader, ProtocolWriter,
        },
        serialize,
        ttype::TType,
        ApplicationException, ClientFactory, Deserialize, MessageType, Serialize,
    };
    use futures::Future;
    use std::marker::PhantomData;
    use std::sync::Arc;{{!
}}{{#program:services}}

    pub struct {{service:name}}Impl<P, S> {
        {{^service:functions?}}_{{/service:functions?}}{{!
        }}service: S,
        _phantom: PhantomData<P>,
    }

    impl<P, S> {{service:name}}Impl<P, S>
    where
        P: Protocol,
        S: tokio_service::Service<Request = ProtocolEncodedFinal<P>, Response = ProtocolDecoded<P>>,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {
        pub fn new(service: S) -> Self {
            Self {
                {{^service:functions?}}_service: {{/service:functions?}}{{!
                }}service,
                _phantom: PhantomData,
            }
        }{{!
        }}{{#service:functions}}

        pub fn {{function:name}}(
            &self,{{!
            }}{{#function:args}}
            arg_{{field:name}}: {{>lib/arg}},{{!
            }}{{/function:args}}
        ) -> impl Future<{{!
            }}Item = {{#function:returnType}}{{>lib/type}}{{/function:returnType}}, {{!
            }}Error = failure::Error{{!
        }}> + Send + 'static {
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "{{function:name}}",
                MessageType::Call,
                |p| {
                    p.write_struct_begin("args");{{!
                    }}{{#function:args}}
                    p.write_field_begin({{!
                        }}"arg_{{field:name}}", {{!
                        }}{{#field:type}}{{>lib/ttype}}{{/field:type}}, {{!
                        }}{{field:key}}i16{{!
                    }});
                    arg_{{field:name}}.write(p);
                    p.write_field_end();{{!
                    }}{{/function:args}}
                    p.write_field_stop();
                    p.write_struct_end();
                }
            ));
            let response = self
                .service
                .call(request)
                .map_err(S::Error::into)
                .from_err();
            let result = response.and_then(move |reply| {
                let de = P::deserializer(reply);
                move |mut p: P::Deserializer| -> failure::Fallible<{{!
                    }}{{#function:returnType}}{{>lib/type}}{{/function:returnType}}{{!
                }}> {
                    let p = &mut p;
                    let (_, message_type, _) = p.read_message_begin(|_| ())?;
                    let result = match message_type {
                        MessageType::Reply => {
                            match {{program:crate}}::services::{{service:snake}}::{{function:upcamel}}Exn::read(p)? {
                                {{program:crate}}::services::{{service:snake}}::{{function:upcamel}}Exn::Success(res) => Ok(res),
                                exn => Err({{program:crate}}::errors::ErrorKind::{{service:name}}{{function:upcamel}}Error(exn).into()),
                            }
                        }
                        MessageType::Exception => {
                            let ae = ApplicationException::read(p)?;
                            Err({{program:crate}}::errors::ErrorKind::{{service:name}}{{function:upcamel}}Error(
                                {{program:crate}}::services::{{service:snake}}::{{function:upcamel}}Exn::ApplicationException(ae),
                            ).into())
                        }
                        MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                            failure::bail!("Unexpected message type {:?}", message_type)
                        }
                    };
                    p.read_message_end()?;
                    result
                }(de)
            });
            result
        }{{!
        }}{{/service:functions}}
    }

    pub trait {{service:name}} {{>lib/block}}{{!
        }}{{#service:functions}}
        fn {{function:name}}(
            &self,{{!
            }}{{#function:args}}
            arg_{{field:name}}: {{>lib/arg}},{{!
            }}{{/function:args}}
        ) -> Box<dyn Future<{{!
            }}Item = {{#function:returnType}}{{>lib/type}}{{/function:returnType}}, {{!
            }}Error = failure::Error{{!
        }}> + Send + 'static>;{{!
        }}{{/service:functions}}
    }

    impl<P, S> {{service:name}} for {{service:name}}Impl<P, S>
    where
        P: Protocol + 'static,
        S: tokio_service::Service<
            Request = ProtocolEncodedFinal<P>,
            Response = ProtocolDecoded<P>,
        > + 'static,
        S::Future: Send + 'static,
        S::Error: Into<failure::Error> + 'static,
    {{>lib/block}}
        {{#service:functions}}
        fn {{function:name}}(
            &self,{{!
            }}{{#function:args}}
            arg_{{field:name}}: {{>lib/arg}},{{!
            }}{{/function:args}}
        ) -> Box<dyn Future<{{!
            }}Item = {{#function:returnType}}{{>lib/type}}{{/function:returnType}}, {{!
            }}Error = failure::Error{{!
        }}> + Send + 'static> {
            Box::new(Self::{{function:name}}(self{{!
                }}{{#function:args}}{{!
                }}, arg_{{field:name}}{{!
                }}{{/function:args}}{{!
            }}))
        }
        {{/service:functions}}
    }

    pub struct make_{{service:name}};

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn {{service:name}} {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<dyn {{service:name}} + Send + Sync + 'static>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            make_{{service:name}}::new(protocol, transport)
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_{{service:name}} {
        type Api = dyn {{service:name}} + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T> + Send + Sync + 'static,
            T: tokio_service::Service<
                Request = ProtocolEncodedFinal<P>,
                Response = ProtocolDecoded<P>,
            > + Framing + Send + Sync + 'static,
            T::Future: Send + 'static,
            T::Error: Into<failure::Error> + 'static,
        {
            let _ = protocol;
            Arc::new({{service:name}}Impl::<P, T>::new(transport))
        }
    }{{!
}}{{/program:services}}
{{!newline}}
