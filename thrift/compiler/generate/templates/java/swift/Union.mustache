{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}
{{> AutoGenerated}}

package {{struct:javaPackage}};

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@SwiftGenerated
@ThriftUnion("{{struct:name}}")
public final class {{struct:javaCapitalName}} {
    {{> union/UnionBuilder}}

    {{^struct:unionFieldTypeUnique?}}{{!
      TODO: remove unionFieldTypeUnique related check and use builder pattern
      If union fields are not unique, we cannot generate thrift constructors,
      therefore setters are needed.
      }}{{> union/UnionSetter}}{{!
    }}{{/struct:unionFieldTypeUnique?}}
    {{#struct:fields}}

    {{> ThriftFieldAnnotation}}

    public {{#field:type}}{{> Type}}{{/field:type}} {{> GetterName}}() {
        if (this.id != {{field:key}}) {
            throw new IllegalStateException("Not a {{field:name}} element!");
        }
        return ({{> FieldType}}) value;
    }

    public boolean isSet{{field:javaCapitalName}}() {
        return this.id == {{field:key}};
    }
    {{/struct:fields}}

    @ThriftUnionId
    public short getThriftId() {
        return this.id;
    }

    public String getThriftName() {
        return this.name;
    }

    @Override
    public String toString() {
        return toStringHelper(this)
            .add("value", value)
            .add("id", id)
            .add("name", name)
            .add("type", value == null ? "<null>" : value.getClass().getSimpleName())
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        {{struct:javaCapitalName}} other = ({{struct:javaCapitalName}})o;

        return Objects.equals(this.id, other.id)
                && Objects.equals(this.value, other.value)
                && Objects.equals(this.name, other.name);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            id,
            value,
            name
        });
    }
}
