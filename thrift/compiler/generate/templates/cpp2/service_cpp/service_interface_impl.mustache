<%!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%#service:functions%><%#function:returnType%>

<%^type:resolves_to_complex_return?%>
<% > Type%> <%service:name%>SvIf::<%function:name%>(<% > service_common/commented_out_function_param_list_ptr%>) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("<%function:name%>");
}

<%^function:returns_stream?%>
folly::Future<<% > ServiceType%>> <%service:name%>SvIf::future_<%function:name%>(<% > service_common/function_param_list_ptr%>) {
  return apache::thrift::detail::si::future([&] { return <%function:name%>(<% > service_common/move_param_list%>); });
}

<%#function:oneway?%>
void <%service:name%>SvIf::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:name%>(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback<%function:comma%><% > service_common/function_param_list_ptr%>) {
  apache::thrift::detail::si::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_oneway(this, std::move(callback), <%#function:eb%>[this<%function:comma%><% > service_common/param_move_param_list%>]() mutable<%/function:eb%><%^function:eb%>[&]<%/function:eb%> { return future_<%function:name%>(<% > service_common/move_param_list%>); });
}
<%/function:oneway?%>
<%^function:oneway?%>
void <%service:name%>SvIf::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:name%>(std::unique_ptr<apache::thrift::HandlerCallback<<% > Type%>>> callback<%function:comma%><% > service_common/function_param_list_ptr%>) {
  apache::thrift::detail::si::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>(this, std::move(callback), <%#function:eb%>[this<%function:comma%><% > service_common/param_move_param_list%>]() mutable<%/function:eb%><%^function:eb%>[&]<%/function:eb%> { return future_<%function:name%>(<% > service_common/move_param_list%>); });
}
<%/function:oneway?%>
<%/function:returns_stream?%>

<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
void <%service:name%>SvIf::<%function:name%>(<% > Type%>& /*_return*/<%function:comma%><% > service_common/commented_out_function_param_list_ptr%>) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("<%function:name%>");
}

<%^function:returns_stream?%>
folly::Future<std::unique_ptr<<% > Type%>>> <%service:name%>SvIf::future_<%function:name%>(<% > service_common/function_param_list_ptr%>) {
  return apache::thrift::detail::si::future_returning_uptr([&](<% > Type%>& _return) { <%function:name%>(_return<%function:comma%><% > service_common/move_param_list%>); });
}
<%/function:returns_stream?%>

void <%service:name%>SvIf::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:name%>(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<<% > Type%>>>> callback<%function:comma%><% > service_common/function_param_list_ptr%>) {
  apache::thrift::detail::si::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>(this, std::move(callback), <%#function:eb%>[this<%function:comma%><% > service_common/param_move_param_list%>]() mutable<%/function:eb%><%^function:eb%>[&]<%/function:eb%> { return future_<%function:name%>(<% > service_common/move_param_list%>); });
}
<%/type:resolves_to_complex_return?%>
<%#service:frozen2?%>

<%^type:resolves_to_complex_return?%>
<% > Type%> <%service:name%>SvIf::frozen2_<%function:name%>(<% > service_common/frozen2_function_param_list_ptr%>) {
  return <%function:name%>(<% > service_common/frozen2_thaw_param_list%>);
}

<%^function:returns_stream?%>
folly::Future<<% > ServiceType%>> <%service:name%>SvIf::frozen2_future_<%function:name%>(<% > service_common/frozen2_function_param_list_ptr%>) {
  return apache::thrift::detail::si::future([&] { return frozen2_<%function:name%>(<% > service_common/frozen2_move_param_list%>); });
}
<%/function:returns_stream?%>
<%#function:oneway?%>
void <%service:name%>SvIf::frozen2_async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:name%>(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback<%function:comma%><% > service_common/frozen2_function_param_list_ptr%>) {
  apache::thrift::detail::si::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_oneway(this, std::move(callback), <%#function:eb%>[this<%function:comma%><% > service_common/frozen2_param_move_param_list%>]() mutable<%/function:eb%><%^function:eb%>[&]<%/function:eb%> { return frozen2_future_<%function:name%>(<% > service_common/frozen2_move_param_list%>); });
}
<%/function:oneway?%>
<%^function:oneway?%>
void <%service:name%>SvIf::frozen2_async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:name%>(std::unique_ptr<apache::thrift::HandlerCallback<<% > Type%>>> callback<%function:comma%><% > service_common/frozen2_function_param_list_ptr%>) {
  apache::thrift::detail::si::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>(this, std::move(callback), <%#function:eb%>[this<%function:comma%><% > service_common/frozen2_param_move_param_list%>]() mutable<%/function:eb%><%^function:eb%>[&]<%/function:eb%> { return frozen2_future_<%function:name%>(<% > service_common/frozen2_move_param_list%>); });
}
<%/function:oneway?%>
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
void <%service:name%>SvIf::frozen2_<%function:name%>(<% > Type%>& _return<%function:comma%><% > service_common/frozen2_function_param_list_ptr%>) {
  return <%function:name%>(_return<%function:comma%><% > service_common/frozen2_thaw_param_list%>);
}

<%^function:returns_stream?%>
folly::Future<std::unique_ptr<<% > Type%>>> <%service:name%>SvIf::frozen2_future_<%function:name%>(<% > service_common/frozen2_function_param_list_ptr%>) {
  return apache::thrift::detail::si::future_returning_uptr([&](<% > Type%>& _return) { frozen2_<%function:name%>(_return<%function:comma%><% > service_common/frozen2_move_param_list%>); });
}
<%/function:returns_stream?%>

void <%service:name%>SvIf::frozen2_async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:name%>(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<<% > Type%>>>> callback<%function:comma%><% > service_common/frozen2_function_param_list_ptr%>) {
  apache::thrift::detail::si::async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>(this, std::move(callback), <%#function:eb%>[this<%function:comma%><% > service_common/frozen2_param_move_param_list%>]() mutable<%/function:eb%><%^function:eb%>[&]<%/function:eb%> { return frozen2_future_<%function:name%>(<% > service_common/frozen2_move_param_list%>); });
}
<%/type:resolves_to_complex_return?%>
<%/service:frozen2?%>
<%/function:returnType%><%/service:functions%>
