{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}
import asyncio
import functools
from libcpp.memory cimport shared_ptr, unique_ptr

{{#program:services}}
{{#service:functions}}
cdef public void call_cy_{{service:name}}_{{function:name}}(
    object self,
    shared_ptr[cFollyPromise[{{#function:returnType}}{{>CythonFieldType}}{{/function:returnType}}]]{{!
    }} cPromise{{#function:args}},
    {{#field:type}}{{>CythonFieldType}}{{/field:type}} {{field:name}}{{/function:args}}
) with gil:
    promise = Promise_{{#function:returnType}}{{type:name}}{{/function:returnType}}.create(cPromise)
    # TODO: Wrap arguments in Python struct
    {{#function:args}}
    # <Python Type> arg_{{field:name}} = {{field:name}}
    {{/function:args}}

    #TODO: asyncio.run_coroutine_threadsafe... after Python 3.5.2 lands
    func = functools.partial(
        asyncio.ensure_future,
        {{service:name}}_{{function:name}}_coro(
            self,
            promise,
            {{#function:args}}
            arg_{{field:name}},
            {{/function:args}}
    ), loop=self.loop)
    self.loop.call_soon_threadsafe(func)

async def {{service:name}}_{{function:name}}_coro(
    object self,
    Promise_{{#function:returnType}}{{type:name}}{{/function:returnType}} {{!
    }} promise{{#function:args}},
    {{#field:type}}{{>CythonFieldType}}{{/field:type}} {{field:name}}{{/function:args}}
):
    result = await self.{{function:name}}({{#function:args}}{{field:name}}{{/function:args}})
    cResult = None   # TODO: Look up the correct return value on the returned struct
    promise.cPromise.get().setValue(<{{#function:returnType}}{{> CythonFieldType}}{{/function:returnType}}> result)

{{/service:functions}}
{{/program:services}}
