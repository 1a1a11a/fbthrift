{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This is a top level C++ file that generates an implementation of the C++ clients
interface. Each client method adds a callback to run in the C++ EventBase IO
thread that will pass data to the cython callback.

}}
{{> AutoGeneratedC}}

#include <{{program:includePrefix}}{{program:name}}/clients_wrapper.h>

{{#program:cppNamespaces}}namespace {{value}} {
{{/program:cppNamespaces}}
{{#program:services}}
{{service:name}}ClientWrapper::{{service:name}}ClientWrapper(
    std::shared_ptr<{{#service:cppNamespaces}}{{value}}::{{/service:cppNamespaces}}{{service:name}}AsyncClient> async_client,
    std::shared_ptr<folly::EventBase> event_base) : {{!
      If we are a base class, we have the EventBase. If not, we need to pass the event base and a BaseAsyncClient pointer
      to the base class. Storing the pointer of each type as a shadowing member variable for each ClientWrapper and doing
      the dynamic cast at construction time to allow calling methods in the parent class trades a single pointer of memory
      for cpu and code size / ugly template because it avoids doing the dynamic casting at every access.
    }}
    {{#service:extends?}}{{#service:extends}}{{service:name}}ClientWrapper(std::dynamic_pointer_cast<{{service:name}}AsyncClient>(async_client), event_base),
    async_client(async_client){{/service:extends}}{{/service:extends?}}{{!
    }}{{^service:extends?}}async_client(async_client),
    event_base(event_base){{/service:extends?}} {}

{{service:name}}ClientWrapper::~{{service:name}}ClientWrapper() {}

{{#service:functions}}
void {{service:name}}ClientWrapper::{{function:name}}({{#function:args}}
    {{#field:type}}{{> CppValueFieldType}}{{/field:type}} arg_{{field:name}},{{/function:args}}
    std::function<void(PyObject*, folly::Try<{{#function:returnType}}{{> CppValueFieldType}}{{/function:returnType}}>)> callback,
    PyObject* py_future) {
  async_client->future_{{function:name}}({{#function:args}}
    arg_{{field:name}}{{^last?}},{{/last?}}{{/function:args}}
  ).via(event_base.get()).then(
    [=] (folly::Try<{{#function:returnType}}{{> CppValueFieldType}}{{/function:returnType}}>&& result) {
      callback(py_future, result);
    }
  );
}

{{/service:functions}}

{{/program:services}}{{!
}}{{#program:cppNamespaces}}} // namespace {{value}}
{{/program:cppNamespaces}}
