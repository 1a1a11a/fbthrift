{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This template should always mirror types.pyx but for mypy typing

}}
{{> common/AutoGeneratedPy}}

import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
from enum import Enum
{{#program:includeNamespaces}}
{{#hasTypes?}}
import {{#includeNamespace}}{{value}}.{{/includeNamespace}}types as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}types
{{/hasTypes?}}
{{/program:includeNamespaces}}


{{#program:enums}}
class {{enum:name}}(Enum):
    {{#enum:values}}
    {{enumValue:name}}: ...
    {{/enum:values}}
    value: int


{{/program:enums}}
{{#program:structs}}
{{#first?}}
# Forward Definitions for Structs
{{/first?}}
class {{struct:name}}({{> types/PythonStructClass}}): ...
{{/program:structs}}
{{#program:containerTypes}}
{{#first?}}
# Forward Definitions for Containers
{{/first?}}
class {{type:flat_name}}({{> types/PEP484Containers}}): ...
{{/program:containerTypes}}


{{#program:structs}}{{#struct:union?}}
class {{struct:name}}Type(Enum):
    EMPTY: ...
{{#struct:fields}}
    {{field:name}}: ...
{{/struct:fields}}
    value: int


{{/struct:union?}}
class {{struct:name}}({{> types/PythonStructClass}}):
    def __init__(
        self, *{{#struct:fields}},
        {{field:name}}: {{#field:type}}{{> types/PEP484Type}}{{/field:type}}{{^field:required?}}=None{{/field:required?}}{{/struct:fields}}
    ) -> None: ...

    {{#struct:plain?}}
    def __call__(
        self, *{{#struct:fields}},
        {{field:name}}: _typing.Union[{{#field:type}}{{> types/PEP484Type}}{{/field:type}}, NOTSET{{^field:required?}}, None{{/field:required?}}]=NOTSET{{/struct:fields}}
    ): ...

    def __reduce__(self) -> _typing.Tuple[Callable, _typing.Tuple[_typing.Type[{{struct:name}}], bytes]]: ...
    {{/struct:plain?}}
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: {{struct:name}}) -> bool: ...
    def __lt__(self, other: {{struct:name}}) -> bool: ...

    {{#struct:fields}}
    @property
    def {{field:name}}(self) -> {{#field:type}}{{> types/PythonType}}{{/field:type}}: ...
    {{/struct:fields}}
    {{#struct:union?}}
    @property
    def value(self) -> _typing.Union[{{#struct:fields}}{{^first?}}, {{/first?}}{{#field:type}}{{> types/PEP484Type}}{{/field:type}}{{/struct:fields}}]: ...
    @property
    def type(self) -> {{struct:name}}Type: ...
    def get_type(self) -> {{struct:name}}Type: ...
    {{/struct:union?}}


{{/program:structs}}
{{#program:containerTypes}}
{{#type:list?}}
_{{type:flat_name}}T = _typing.TypeVar('_{{type:flat_name}}T', bound={{> types/PEP484Containers}})


{{/type:list?}}
class {{type:flat_name}}({{> types/PEP484Containers}}):
    def __init__(self, items: {{> types/PEP484Containers}}=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
{{#type:list?}}
    def index(self, item: {{#type:listElemType}}{{> types/PEP484Type}}{{/type:listElemType}}) -> int: ...
    def count(self, item: {{#type:listElemType}}{{> types/PEP484Type}}{{/type:listElemType}}) -> int: ...
    def __add__(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def __radd__(self, other: _{{type:flat_name}}T) -> _{{type:flat_name}}T: ...
    @_typing.overload
    def __getitem__(self, index: slice) -> {{type:flat_name}}: ...
    def __getitem__(self, index: int) -> {{#type:listElemType}}{{> types/PEP484Type}}{{/type:listElemType}}: ...
    def __reversed__(self) -> _typing.Iterator[{{#type:listElemType}}{{> types/PEP484Type}}{{/type:listElemType}}]: ...
    def __iter__(self) -> _typing.Iterator[{{#type:listElemType}}{{> types/PEP484Type}}{{/type:listElemType}}]: ...
    def __contains__(self, item: {{#type:listElemType}}{{> types/PEP484Type}}{{/type:listElemType}}) -> bool: ...
    def __eq__(self, other: {{> types/PEP484Containers}}) -> bool: ...
{{/type:list?}}
{{#type:set?}}
    def __lt__(self, other: {{> types/PEP484Containers}}) -> bool: ...
    def __eq__(self, other: {{> types/PEP484Containers}}) -> bool: ...
    def __contains__(self, item: {{#type:setElemType}}{{> types/PEP484Type}}{{/type:setElemType}}) -> bool: ...
    def __iter__(self) -> {{#type:setElemType}}{{> types/PEP484Type}}{{/type:setElemType}}): ...
    def __add__(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def __or__(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def __xor__(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def isdisjoint(self, other: {{> types/PEP484Containers}}) -> bool: ...
    def union(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def intersection(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def difference(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def symmetric_difference(self, other: {{> types/PEP484Containers}}) -> {{type:flat_name}}: ...
    def issubset(self, other: {{> types/PEP484Containers}}) -> bool: ...
    def issuperset(self, other: {{> types/PEP484Containers}}) -> bool: ...
{{/type:set?}}
{{#type:map?}}
    def __eq__(self, other: {{> types/PEP484Containers}}) -> bool: ...
    def __getitem__(self, key: {{#type:keyType}}{{> types/PEP484Type}}{{/type:keyType}}) -> {{#type:valueType}}{{> types/PEP484Type}}{{/type:valueType}}: ...
    def __iter__(self) -> _typing.Iterator[{{#type:keyType}}{{> types/PEP484Type}}{{/type:keyType}}]: ...
    def __contains__(self, key: {{#type:keyType}}{{> types/PEP484Type}}{{/type:keyType}}) -> bool: ...
    def get(self, key: {{#type:keyType}}{{> types/PEP484Type}}{{/type:keyType}}, default: {{#type:valueType}}{{> types/PEP484Type}}{{/type:valueType}}=None) -> {{#type:valueType}}{{> types/PEP484Type}}{{/type:valueType}}: ...
    def keys(self) -> _typing.Iterator[{{#type:keyType}}{{> types/PEP484Type}}{{/type:keyType}}]: ...
    def values(self) -> _typing.Iterator[{{#type:valueType}}{{> types/PEP484Type}}{{/type:valueType}}]: ...
    def items(self) -> _typing.Iterator[_typing.Tuple[{{#type:keyType}}{{> types/PEP484Type}}{{/type:keyType}}, {{#type:valueType}}{{> types/PEP484Type}}{{/type:valueType}}]]: ...
{{/type:map?}}


{{/program:containerTypes}}
