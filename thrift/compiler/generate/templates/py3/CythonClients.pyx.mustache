{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

Generates a top-level file to be imported in the user's client code.

The generated file is pretty big, but the bulk of the generation is done inside
the ClientCallbacks partial.

}}
{{> AutoGeneratedPy}}
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector as vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.lib.py3.thrift_client cimport EventBase, make_py3_client, py3_get_exception
from thrift.lib.py3.thrift_client import get_event_base
from thrift.lib.py3.folly cimport cFollyEventBase, cFollyTry, cFollyUnit, c_unit

import asyncio
import sys
import traceback

cimport {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}_types
from {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}_clients_wrapper cimport move
{{#program:includeNamespaces}}
cimport {{#includeNamespace}}{{value}}{{^last?}}.{{/last?}}{{/includeNamespace}}_types
{{/program:includeNamespaces}}

{{#program:services}}
from {{#program:py3Namespaces}}{{value}}{{^last?}}.{{/last?}}{{/program:py3Namespaces}}.{{program:name}}_clients_wrapper cimport c{{service:name}}AsyncClient, c{{service:name}}ClientWrapper
{{/program:services}}

{{> ClientCallbacks}}

{{#program:services}}
cdef class {{service:name}}Client:
    cdef unique_ptr[c{{service:name}}ClientWrapper] _client
    cdef object loop

    def __cinit__(self, loop):
        self.loop = loop

    @staticmethod
    async def make_client(bytes host, int port, loop=None):
        if loop is None:
           loop = asyncio.get_event_loop()
        future = loop.create_future()
        future.loop = loop
        eb = await get_event_base(loop)
        make_py3_client[c{{service:name}}AsyncClient, c{{service:name}}ClientWrapper](
            (<EventBase> eb)._folly_event_base,
            host,
            port,
            0,
            made_{{service:name}}_py3_client_callback,
            future)
        return await future

    {{#service:functions}}
    def {{function:name}}(
            self{{#function:args}},
            arg_{{field:name}}{{/function:args}}):
        future = self.loop.create_future()
        future.loop = self.loop
        deref(self._client).{{function:name}}({{#function:args}}
            {{#field:type}}{{> CythonPythonToCppArg}}{{/field:type}},{{/function:args}}
            {{service:name}}_{{function:name}}_callback,
            future)
        return future

    {{/service:functions}}
{{/program:services}}