/*
 * Copyright 2015 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef THRIFT_FATAL_REFLECTION_H_
#define THRIFT_FATAL_REFLECTION_H_ 1

#include <thrift/lib/cpp2/fatal/reflection-inl.h>

#include <fatal/type/map.h>
#include <fatal/type/registry.h>
#include <fatal/type/transform.h>

#include <cstdint>

namespace apache { namespace thrift {

/**
 * An alias to the type used by Thrift as a struct's field ID.
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
using field_id_t = std::int16_t;

/**
 * The high-level category of a type as it concerns Thrift.
 *
 * See `thrift/lib/cpp2/fatal/reflect_category.h` for more information.
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
enum class thrift_category {
  /**
   * Represents types unknown to the reflection framework.
   *
   * This often means it's a custom type with no `get_thrift_category`
   * specialization.
   *
   * See documentation for `get_thrift_category` on `reflect_category.h`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  unknown,
  /**
   * Represents types with no actual data representation. Most commonly `void`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  nothing,
  /**
   * Represents all signed and unsigned integral types, including `bool`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  integral,
  /**
   * Represents all floating point types.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  floating_point,
  /**
   * Represents all known strings implementation.
   *
   * If this is not the category returned for a string, this often means there's
   * no `get_thrift_category` specialization for it.
   *
   * See documentation for `get_thrift_category` on `reflect_category.h`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  string,
  /**
   * Represents an enum.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  enumeration,
  /**
   * Represents an class or structure.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  structure,
  /**
   * Represents a variant (or union, as the Thrift IDL grammar goes).
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  variant,
  /**
   * Represents all known list implementations.
   *
   * If this is not the category returned for a list, this often means there's
   * no `get_thrift_category` specialization for it.
   *
   * See documentation for `get_thrift_category` on `reflect_category.h`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  list,
  /**
   * Represents all known set implementations.
   *
   * If this is not the category returned for a set, this often means there's
   * no `get_thrift_category` specialization for it.
   *
   * See documentation for `get_thrift_category` on `reflect_category.h`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  set,
  /**
   * Represents all known map implementations.
   *
   * If this is not the category returned for a map, this often means there's
   * no `get_thrift_category` specialization for it.
   *
   * See documentation for `get_thrift_category` on `reflect_category.h`.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  map
};

/**
 * Holds reflection metadata for stuff defined in a Thrift file.
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <
  typename Enums,
  typename Unions,
  typename Structs,
  typename Constants,
  typename Services
>
struct reflected_module {
  /**
   * The list of enumerations with reflection metadata available.
   *
   * A `fatal::type_map` where the key is the type generated by the Thrift
   * compiler for each enumeration, associated with a compile-time string
   * (`fatal::constant_sequence`) representing the enumeration name.
   *
   * Use `fatal::enum_traits` to retrieve reflection information for each
   * enumeration (fatal/type/enum.h).
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using enums = Enums;

  /**
   * The list of unions with reflection metadata available.
   *
   * A `fatal::type_map` where the key is the type generated by the Thrift
   * compiler for each union, associated with a compile-time string
   * (`fatal::constant_sequence`) representing the union name.
   *
   * Use `fatal::variant_traits` to retrieve reflection information for each
   * union (fatal/type/variant_traits.h).
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using unions = Unions;

  /**
   * The list of structs with reflection metadata available.
   *
   * A `fatal::type_map` where the key is the type generated by the Thrift
   * compiler for each struct, associated with a compile-time string
   * (`fatal::constant_sequence`) representing the struct name.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using structs = Structs;

  /**
   * The list of services with reflection metadata available.
   *
   * A `fatal::type_list` of compile-time strings
   * (`fatal::constant_sequence`) representing each service name.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using services = Services;
};

/**
 * Holds reflection metadata for a given struct.
 *
 * NOTE: this class template is only intended to be instantiated by Thrift.
 * Thrift users should ignore the template parameters taken by it and focus
 * simply on the members provided.
 *
 * For the examples below, consider code generated for this Thrift file:
 *
 *  /////////////////////
 *  // MyModule.thrift //
 *  /////////////////////
 *  namespace My.Namespace
 *
 *  struct MyStruct {
 *    1: i32 a
 *    2: string b
 *    3: double c
 *  }
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <typename Struct, typename Name, typename Names, typename Info>
struct reflected_struct {
  /**
   * A type alias for the struct itself.
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  // yields `MyStruct`
   *  using result = info::type;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using type = Struct;

  /**
   * A compile-time string representing the struct name.
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  // yields `fatal::constant_sequence<
   *  //   char,
   *  //   'M', 'y', 'S', 't', 'r', 'u', 'c', 't'
   *  // >`
   *  using result = info::type;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using name = Name;

  /**
   * An implementation defined type that provides the names for each data member
   * as a member type alias with the same name.
   *
   * These type aliases are used as the key for the various type maps offered by
   * the `reflected_struct` class.
   *
   * The names are represented by a `fatal::constant_sequence` of type `char`
   * (a compile-time string).
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  // yields `fatal::constant_sequence<char, 'a'>`
   *  using result1 = info::names::a;
   *
   *  // yields `fatal::constant_sequence<char, 'b'>`
   *  using result2 = info::names::b;
   *
   *  // yields "c"
   *  auto result3 = info::names::c::z_data();
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using names = Names;

  /**
   * A `fatal::type_map` from the data member name to the corresponding metadata
   * for that data member as a `reflected_struct_data_member`.
   *
   * See the documentation for `reflected_struct_data_member` (below) for more
   * information on its members.
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  using member = info::members<info::names::b>;
   *
   *  // yields "b"
   *  auto result1 = member::name::z_data();
   *
   *  // yields `std::string`
   *  using result2 = member::type;
   *
   *  // yields `2`
   *  auto result3 = member::id::value;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using members = typename fatal::type_map_from<
    fatal::get_member_type::name
  >::template list<Info>;

  /**
   * A `fatal::type_map` from the data member name to the data member type.
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  // yields `double`
   *  using result = info::types::get<info::names::c>;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using types = typename members::template transform<
    fatal::get_member_type::type
  >;

  /**
   * A `fatal::type_map` from the data member name to the Thrift field id as a
   * `std::integral_constant` of type `field_id_t`.
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  // yields `std::integral_constant<field_id_t, 2>`
   *  using result1 = info::ids::get<info::names::b>;
   *
   *  // yields `2`
   *  auto result2 = result1::value;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using ids = typename members::template transform<
    fatal::get_member_type::id
  >;

  /**
   * A `fatal::type_map` from the data member name to a getter for the data
   * member.
   *
   * See the documentation for `reflected_struct_data_member::getter` (below)
   * for more information.
   *
   * Example:
   *
   *  using info = reflect_struct<MyStruct>;
   *
   *  using getter = info::getters::get<info::names::a>;
   *
   *  MyStruct pod;
   *
   *  pod.a = 10;
   *
   *  // yields `10`
   *  auto result1 = getter::ref(pod);
   *
   *  // sets  `56` on `pod.a`
   *  getter::ref(pod) = 56;
   *
   *  // yields `56`
   *  auto result2 = pod.a;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using getters = typename members::template transform<
    fatal::get_member_type::getter
  >;
};

/**
 * Holds reflection metadata for a given struct's data member.
 *
 * NOTE: this class template is only intended to be instantiated by Thrift.
 * Thrift users should ignore the template parameters taken by it and focus
 * simply on the members provided.
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <
  typename Name,
  typename Type,
  field_id_t Id,
  typename Getter,
  thrift_category Category,
  template <typename> class Pod
>
struct reflected_struct_data_member {
  /**
   * A `fatal::constant_sequence` of `char` representing the data member name as
   * a compile-time string.
   *
   * Example:
   *
   *  // MyModule.thrift
   *
   *  namespace My.Namespace
   *
   *  struct MyStruct {
   *    1: i32 fieldA
   *    2: string fieldB
   *    3: double fieldC
   *  }
   *
   *  // C++
   *
   *  using info = reflect_struct<MyStruct>;
   *  using member = info::types::members<info::names::fieldC>;
   *
   *  // yields `fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'C'>`
   *  using result1 = member::name;
   *
   *  // yields "fieldC"
   *  auto result2 = result1::z_data();
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using name = Name;

  /**
   * The type of the data member.
   *
   * Example:
   *
   *  // MyModule.thrift
   *
   *  namespace My.Namespace
   *
   *  struct MyStruct {
   *    1: i32 fieldA
   *    2: string fieldB
   *    3: double fieldC
   *  }
   *
   *  // C++
   *
   *  using info = reflect_struct<MyStruct>;
   *  using member = info::types::members<info::names::fieldC>;
   *
   *  // yields `double`
   *  using result1 = member::type;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using type = Type;

  /**
   * A `std::integral_constant` of type `field_id_t` representing the Thrift
   * field id for the data member.
   *
   * Example:
   *
   *  // MyModule.thrift
   *
   *  namespace My.Namespace
   *
   *  struct MyStruct {
   *    1: i32 fieldA
   *    2: string fieldB
   *    3: double fieldC
   *  }
   *
   *  // C++
   *
   *  using info = reflect_struct<MyStruct>;
   *  using member = info::types::members<info::names::fieldC>;
   *
   *  // yields `std::integral_constant<field_id_t, 3>`
   *  using result1 = member::type;
   *
   *  // yields `3`
   *  auto result2 = result1::value;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using id = std::integral_constant<field_id_t, Id>;

  /**
   * A type that works as a getter for the data member.
   *
   * See also Fatal's documentation on `FATAL_DATA_MEMBER_GETTER` in
   * `fatal/type/traits.h` for more information on how to make the most out of
   * the data member getter.
   *
   * Example:
   *
   *  // MyModule.thrift
   *
   *  namespace My.Namespace
   *
   *  struct MyStruct {
   *    1: i32 fieldA
   *    2: string fieldB
   *    3: double fieldC
   *  }
   *
   *  // C++
   *
   *  using info = reflect_struct<MyStruct>;
   *  using member = info::types::members<info::names::fieldC>;
   *
   *  using getter = info::getters::get<info::names::a>;
   *
   *  MyStruct pod;
   *
   *  pod.c = 7.2;
   *
   *  // yields `7.2`
   *  auto result1 = getter::ref(pod);
   *
   *  // sets  `5.6` on `pod.c`
   *  getter::ref(pod) = 5.6;
   *
   *  // yields `5.6`
   *  auto result2 = pod.c;
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using getter = Getter;

  /**
   * Tells what's the Thrift category for this member.
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  using category = std::integral_constant<thrift_category, Category>;

  /**
   * A POD (plain old data) that holds a single data member with the same name
   * as this member. The template parameter `T` defines the type of this POD's
   * sole member, and defaults to `type`.
   *
   * This is useful when you need to create a class with an API compatible to
   * the original Thrift struct.
   *
   * Example:
   *
   *  // MyModule.thrift
   *
   *  namespace My.Namespace
   *
   *  struct MyStruct {
   *    1: i32 fieldA
   *    2: string fieldB
   *    3: double fieldC
   *  }
   *
   *  // C++
   *
   *  using info = reflect_struct<MyStruct>;
   *  using member = info::types::members<info::names::fieldC>;
   *
   *  member::pod<> original;
   *
   *  // yields `double`
   *  using result1 = decltype(original.fieldC);
   *
   *  member::pod<bool> another;
   *
   *  // yields `bool`
   *  using result2 = decltype(another.fieldC);
   *
   * @author: Marcelo Juchem <marcelo@fb.com>
   */
  template <typename T = type>
  using pod = Pod<T>;
};

/**
 * Retrieves reflection metadata (as a `reflected_module`) associated with the
 * given reflection metadata tag.
 *
 * The Thrift compiler generates a reflection metadata tag for each Thrift file
 * named `namespace::thriftfilename_tags::metadata`.
 *
 * If the given tag does not represent a Thrift module, or if there's no
 * reflection metadata available for it, compilation will fail.
 *
 * See the documentation on `reflected_module` (above) for more information on
 * the returned type.
 *
 * Example:
 *
 *  /////////////////////
 *  // MyModule.thrift //
 *  /////////////////////
 *  namespace My.Namespace
 *
 *  enum MyEnum1 { a, b, c }
 *  enum MyEnum2 { x, y, x }
 *
 *  //////////////////
 *  // whatever.cpp //
 *  //////////////////
 *  using info = reflect_module<My::Namespace::MyModule_tags::metadata>;
 *
 *  // yields `2`
 *  auto result1 = info::enums::size;
 *
 *  // fails compilation
 *  using result2 = reflect_module<void>;
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <typename Tag>
using reflect_module = fatal::registry_lookup<
  detail::reflection_impl::reflection_metadata_tag,
  Tag
>;

/**
 * Retrieves reflection metadata (as a `reflected_module`) associated with the
 * given reflection metadata tag.
 *
 * The Thrift compiler generates a reflection metadata tag for each Thrift file
 * named `namespace::thriftfilename_tags::metadata`.
 *
 * If the given tag does not represent a Thrift module, or if there's no
 * reflection metadata available for it, `Default` will be returned.
 *
 * See the documentation on `reflected_module` (above) for more information on
 * the returned type.
 *
 * Example:
 *
 *  /////////////////////
 *  // MyModule.thrift //
 *  /////////////////////
 *  namespace My.Namespace
 *
 *  enum MyEnum1 { a, b, c }
 *  enum MyEnum2 { x, y, x }
 *
 *  //////////////////
 *  // whatever.cpp //
 *  //////////////////
 *  using info = try_reflect_module<
 *    My::Namespace::MyModule_tags::metadata,
 *    void
 *  >;
 *
 *  // yields `2`
 *  auto result1 = info::enums::size;
 *
 *  // yields `void`
 *  using result2 = itry_reflect_module<int, void>;
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <typename Tag, typename Default>
using try_reflect_module = fatal::try_registry_lookup<
  detail::reflection_impl::reflection_metadata_tag,
  Tag,
  Default
>;

/**
 * Retrieves reflection metadata (as a `reflected_struct`) associated with the
 * given struct.
 *
 * If the given type is not a Thrift struct, or if there's no reflection
 * metadata available for it, compilation will fail.
 *
 * See the documentation on `reflected_struct` (above) for more information on
 * the returned type.
 *
 * Example:
 *
 *  /////////////////////
 *  // MyModule.thrift //
 *  /////////////////////
 *  namespace My.Namespace
 *
 *  struct MyStruct {
 *    1: i32 a
 *    2: string b
 *    3: double c
 *  }
 *
 *  //////////////////
 *  // whatever.cpp //
 *  //////////////////
 *  using info = reflect_struct<My::Namespace::MyStruct>;
 *
 *  // yields `3`
 *  auto result = info::members::size;
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <typename Struct>
using reflect_struct = fatal::registry_lookup<
  detail::reflection_impl::struct_traits_metadata_tag,
  Struct
>;

/**
 * Retrieves reflection metadata (as a `reflected_struct`) associated with the
 * given struct.
 *
 * If the given type is not a Thrift struct, or if there's no reflection
 * metadata available for it, `Default` will be returned.
 *
 * See the documentation on `reflected_struct` (above) for more information on
 * the returned type.
 *
 * Example:
 *
 *  /////////////////////
 *  // MyModule.thrift //
 *  /////////////////////
 *  namespace My.Namespace
 *
 *  struct MyStruct {
 *    1: i32 a
 *    2: string b
 *    3: double c
 *  }
 *
 *  //////////////////
 *  // whatever.cpp //
 *  //////////////////
 *  using info = reflect_struct<My::Namespace::MyStruct>;
 *
 *  // yields `3`
 *  auto result = info::members::size;
 *
 * @author: Marcelo Juchem <marcelo@fb.com>
 */
template <typename Struct, typename Default>
using try_reflect_struct = fatal::try_registry_lookup<
  detail::reflection_impl::struct_traits_metadata_tag,
  Struct,
  Default
>;

}} // apache::thrift

#endif // THRIFT_FATAL_REFLECTION_H_
